// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s3.proto

#include "s3.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace palm {
namespace s3 {
namespace v1 {

inline constexpr S3UrlResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR S3UrlResponse::S3UrlResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct S3UrlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3UrlResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3UrlResponseDefaultTypeInternal() {}
  union {
    S3UrlResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3UrlResponseDefaultTypeInternal _S3UrlResponse_default_instance_;

inline constexpr S3UploadResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : object_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR S3UploadResponse::S3UploadResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct S3UploadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3UploadResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3UploadResponseDefaultTypeInternal() {}
  union {
    S3UploadResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3UploadResponseDefaultTypeInternal _S3UploadResponse_default_instance_;

inline constexpr S3PermanentUrlRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bucket_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        object_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR S3PermanentUrlRequest::S3PermanentUrlRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct S3PermanentUrlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3PermanentUrlRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3PermanentUrlRequestDefaultTypeInternal() {}
  union {
    S3PermanentUrlRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3PermanentUrlRequestDefaultTypeInternal _S3PermanentUrlRequest_default_instance_;

inline constexpr S3CreateBucketResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR S3CreateBucketResponse::S3CreateBucketResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct S3CreateBucketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3CreateBucketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3CreateBucketResponseDefaultTypeInternal() {}
  union {
    S3CreateBucketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3CreateBucketResponseDefaultTypeInternal _S3CreateBucketResponse_default_instance_;

inline constexpr S3CreateBucketRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        public__{false},
        expiration_days_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR S3CreateBucketRequest::S3CreateBucketRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct S3CreateBucketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3CreateBucketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3CreateBucketRequestDefaultTypeInternal() {}
  union {
    S3CreateBucketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3CreateBucketRequestDefaultTypeInternal _S3CreateBucketRequest_default_instance_;

inline constexpr S3Bucket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : namespace__(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        public__{false},
        expiration_days_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR S3Bucket::S3Bucket(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct S3BucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3BucketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3BucketDefaultTypeInternal() {}
  union {
    S3Bucket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3BucketDefaultTypeInternal _S3Bucket_default_instance_;

inline constexpr S3UploadRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bucket_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ttl_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR S3UploadRequest::S3UploadRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct S3UploadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3UploadRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3UploadRequestDefaultTypeInternal() {}
  union {
    S3UploadRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3UploadRequestDefaultTypeInternal _S3UploadRequest_default_instance_;

inline constexpr S3PresignedUrlRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bucket_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        object_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        content_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ttl_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR S3PresignedUrlRequest::S3PresignedUrlRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct S3PresignedUrlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3PresignedUrlRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3PresignedUrlRequestDefaultTypeInternal() {}
  union {
    S3PresignedUrlRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3PresignedUrlRequestDefaultTypeInternal _S3PresignedUrlRequest_default_instance_;
}  // namespace v1
}  // namespace s3
}  // namespace palm
static ::_pb::Metadata file_level_metadata_s3_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_s3_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_s3_2eproto = nullptr;
const ::uint32_t TableStruct_s3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3Bucket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3Bucket, _impl_.namespace__),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3Bucket, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3Bucket, _impl_.public__),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3Bucket, _impl_.expiration_days_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3CreateBucketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3CreateBucketRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3CreateBucketRequest, _impl_.public__),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3CreateBucketRequest, _impl_.expiration_days_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3CreateBucketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3CreateBucketResponse, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UploadRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UploadRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UploadRequest, _impl_.bucket_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UploadRequest, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UploadRequest, _impl_.ttl_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UploadResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UploadResponse, _impl_.object_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UploadResponse, _impl_.url_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UrlResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3UrlResponse, _impl_.url_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PresignedUrlRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PresignedUrlRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PresignedUrlRequest, _impl_.bucket_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PresignedUrlRequest, _impl_.object_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PresignedUrlRequest, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PresignedUrlRequest, _impl_.content_type_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PresignedUrlRequest, _impl_.ttl_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PermanentUrlRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PermanentUrlRequest, _impl_.bucket_),
    PROTOBUF_FIELD_OFFSET(::palm::s3::v1::S3PermanentUrlRequest, _impl_.object_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::palm::s3::v1::S3Bucket)},
        {12, -1, -1, sizeof(::palm::s3::v1::S3CreateBucketRequest)},
        {23, -1, -1, sizeof(::palm::s3::v1::S3CreateBucketResponse)},
        {32, 43, -1, sizeof(::palm::s3::v1::S3UploadRequest)},
        {46, -1, -1, sizeof(::palm::s3::v1::S3UploadResponse)},
        {56, -1, -1, sizeof(::palm::s3::v1::S3UrlResponse)},
        {65, 78, -1, sizeof(::palm::s3::v1::S3PresignedUrlRequest)},
        {83, -1, -1, sizeof(::palm::s3::v1::S3PermanentUrlRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::palm::s3::v1::_S3Bucket_default_instance_._instance,
    &::palm::s3::v1::_S3CreateBucketRequest_default_instance_._instance,
    &::palm::s3::v1::_S3CreateBucketResponse_default_instance_._instance,
    &::palm::s3::v1::_S3UploadRequest_default_instance_._instance,
    &::palm::s3::v1::_S3UploadResponse_default_instance_._instance,
    &::palm::s3::v1::_S3UrlResponse_default_instance_._instance,
    &::palm::s3::v1::_S3PresignedUrlRequest_default_instance_._instance,
    &::palm::s3::v1::_S3PermanentUrlRequest_default_instance_._instance,
};
const char descriptor_table_protodef_s3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\010s3.proto\022\npalm.s3.v1\032\036google/protobuf/"
    "duration.proto\"T\n\010S3Bucket\022\021\n\tnamespace\030"
    "\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006public\030\003 \001(\010\022\027\n\017e"
    "xpiration_days\030\004 \001(\r\"N\n\025S3CreateBucketRe"
    "quest\022\014\n\004name\030\001 \001(\t\022\016\n\006public\030\002 \001(\010\022\027\n\017e"
    "xpiration_days\030\t \001(\r\"&\n\026S3CreateBucketRe"
    "sponse\022\014\n\004name\030\001 \001(\t\"X\n\017S3UploadRequest\022"
    "\016\n\006bucket\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022&\n\003ttl\030\t "
    "\001(\0132\031.google.protobuf.Duration\"/\n\020S3Uplo"
    "adResponse\022\016\n\006object\030\001 \001(\t\022\013\n\003url\030\t \001(\t\""
    "\034\n\rS3UrlResponse\022\013\n\003url\030\001 \001(\t\"\232\001\n\025S3Pres"
    "ignedUrlRequest\022\016\n\006bucket\030\001 \001(\t\022\016\n\006objec"
    "t\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\031\n\014content_type\030\004"
    " \001(\tH\000\210\001\001\022&\n\003ttl\030\t \001(\0132\031.google.protobuf"
    ".DurationB\017\n\r_content_type\"7\n\025S3Permanen"
    "tUrlRequest\022\016\n\006bucket\030\001 \001(\t\022\016\n\006object\030\002 "
    "\001(\t2\304\002\n\002S3\022W\n\014CreateBucket\022!.palm.s3.v1."
    "S3CreateBucketRequest\032\".palm.s3.v1.S3Cre"
    "ateBucketResponse\"\000\022E\n\006Upload\022\033.palm.s3."
    "v1.S3UploadRequest\032\034.palm.s3.v1.S3Upload"
    "Response\"\000\022N\n\014PermanentUrl\022!.palm.s3.v1."
    "S3PermanentUrlRequest\032\031.palm.s3.v1.S3Url"
    "Response\"\000\022N\n\014PresignedUrl\022!.palm.s3.v1."
    "S3PresignedUrlRequest\032\031.palm.s3.v1.S3Url"
    "Response\"\000BW\n(com.github.saturn_xiv.palm"
    ".plugins.s3.v1P\001Z)github.com/saturn-xiv/"
    "palm/s3/services/v2b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_s3_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_s3_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_s3_2eproto = {
    false,
    false,
    1067,
    descriptor_table_protodef_s3_2eproto,
    "s3.proto",
    &descriptor_table_s3_2eproto_once,
    descriptor_table_s3_2eproto_deps,
    1,
    8,
    schemas,
    file_default_instances,
    TableStruct_s3_2eproto::offsets,
    file_level_metadata_s3_2eproto,
    file_level_enum_descriptors_s3_2eproto,
    file_level_service_descriptors_s3_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_s3_2eproto_getter() {
  return &descriptor_table_s3_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_s3_2eproto(&descriptor_table_s3_2eproto);
namespace palm {
namespace s3 {
namespace v1 {
// ===================================================================

class S3Bucket::_Internal {
 public:
};

S3Bucket::S3Bucket(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.S3Bucket)
}
inline PROTOBUF_NDEBUG_INLINE S3Bucket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : namespace__(arena, from.namespace__),
        name_(arena, from.name_),
        _cached_size_{0} {}

S3Bucket::S3Bucket(
    ::google::protobuf::Arena* arena,
    const S3Bucket& from)
    : ::google::protobuf::Message(arena) {
  S3Bucket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, public__),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, public__),
           offsetof(Impl_, expiration_days_) -
               offsetof(Impl_, public__) +
               sizeof(Impl_::expiration_days_));

  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.S3Bucket)
}
inline PROTOBUF_NDEBUG_INLINE S3Bucket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : namespace__(arena),
        name_(arena),
        _cached_size_{0} {}

inline void S3Bucket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, public__),
           0,
           offsetof(Impl_, expiration_days_) -
               offsetof(Impl_, public__) +
               sizeof(Impl_::expiration_days_));
}
S3Bucket::~S3Bucket() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.S3Bucket)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void S3Bucket::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.namespace__.Destroy();
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void S3Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.S3Bucket)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.namespace__.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.public__, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.expiration_days_) -
      reinterpret_cast<char*>(&_impl_.public__)) + sizeof(_impl_.expiration_days_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* S3Bucket::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 41, 2> S3Bucket::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_S3Bucket_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 expiration_days = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(S3Bucket, _impl_.expiration_days_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.expiration_days_)}},
    // string namespace = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.namespace__)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.name_)}},
    // bool public = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(S3Bucket, _impl_.public__), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.public__)}},
  }}, {{
    65535, 65535
  }}, {{
    // string namespace = 1;
    {PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.namespace__), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool public = 3;
    {PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.public__), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 expiration_days = 4;
    {PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.expiration_days_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\23\11\4\0\0\0\0\0"
    "palm.s3.v1.S3Bucket"
    "namespace"
    "name"
  }},
};

::uint8_t* S3Bucket::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.S3Bucket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string namespace = 1;
  if (!this->_internal_namespace_().empty()) {
    const std::string& _s = this->_internal_namespace_();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3Bucket.namespace");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3Bucket.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool public = 3;
  if (this->_internal_public_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_public_(), target);
  }

  // uint32 expiration_days = 4;
  if (this->_internal_expiration_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_expiration_days(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.S3Bucket)
  return target;
}

::size_t S3Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.S3Bucket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 1;
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_namespace_());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // bool public = 3;
  if (this->_internal_public_() != 0) {
    total_size += 2;
  }

  // uint32 expiration_days = 4;
  if (this->_internal_expiration_days() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_expiration_days());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData S3Bucket::_class_data_ = {
    S3Bucket::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* S3Bucket::GetClassData() const {
  return &_class_data_;
}

void S3Bucket::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<S3Bucket*>(&to_msg);
  auto& from = static_cast<const S3Bucket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.S3Bucket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_namespace_().empty()) {
    _this->_internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_public_() != 0) {
    _this->_internal_set_public_(from._internal_public_());
  }
  if (from._internal_expiration_days() != 0) {
    _this->_internal_set_expiration_days(from._internal_expiration_days());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void S3Bucket::CopyFrom(const S3Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.S3Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool S3Bucket::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* S3Bucket::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void S3Bucket::InternalSwap(S3Bucket* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.namespace__, &other->_impl_.namespace__, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.expiration_days_)
      + sizeof(S3Bucket::_impl_.expiration_days_)
      - PROTOBUF_FIELD_OFFSET(S3Bucket, _impl_.public__)>(
          reinterpret_cast<char*>(&_impl_.public__),
          reinterpret_cast<char*>(&other->_impl_.public__));
}

::google::protobuf::Metadata S3Bucket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[0]);
}
// ===================================================================

class S3CreateBucketRequest::_Internal {
 public:
};

S3CreateBucketRequest::S3CreateBucketRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.S3CreateBucketRequest)
}
inline PROTOBUF_NDEBUG_INLINE S3CreateBucketRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : name_(arena, from.name_),
        _cached_size_{0} {}

S3CreateBucketRequest::S3CreateBucketRequest(
    ::google::protobuf::Arena* arena,
    const S3CreateBucketRequest& from)
    : ::google::protobuf::Message(arena) {
  S3CreateBucketRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, public__),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, public__),
           offsetof(Impl_, expiration_days_) -
               offsetof(Impl_, public__) +
               sizeof(Impl_::expiration_days_));

  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.S3CreateBucketRequest)
}
inline PROTOBUF_NDEBUG_INLINE S3CreateBucketRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void S3CreateBucketRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, public__),
           0,
           offsetof(Impl_, expiration_days_) -
               offsetof(Impl_, public__) +
               sizeof(Impl_::expiration_days_));
}
S3CreateBucketRequest::~S3CreateBucketRequest() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.S3CreateBucketRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void S3CreateBucketRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void S3CreateBucketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.S3CreateBucketRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.public__, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.expiration_days_) -
      reinterpret_cast<char*>(&_impl_.public__)) + sizeof(_impl_.expiration_days_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* S3CreateBucketRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 3, 0, 45, 2> S3CreateBucketRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967036,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_S3CreateBucketRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool public = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(S3CreateBucketRequest, _impl_.public__), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(S3CreateBucketRequest, _impl_.public__)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(S3CreateBucketRequest, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(S3CreateBucketRequest, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool public = 2;
    {PROTOBUF_FIELD_OFFSET(S3CreateBucketRequest, _impl_.public__), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 expiration_days = 9;
    {PROTOBUF_FIELD_OFFSET(S3CreateBucketRequest, _impl_.expiration_days_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\40\4\0\0\0\0\0\0"
    "palm.s3.v1.S3CreateBucketRequest"
    "name"
  }},
};

::uint8_t* S3CreateBucketRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.S3CreateBucketRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3CreateBucketRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool public = 2;
  if (this->_internal_public_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_public_(), target);
  }

  // uint32 expiration_days = 9;
  if (this->_internal_expiration_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_expiration_days(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.S3CreateBucketRequest)
  return target;
}

::size_t S3CreateBucketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.S3CreateBucketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // bool public = 2;
  if (this->_internal_public_() != 0) {
    total_size += 2;
  }

  // uint32 expiration_days = 9;
  if (this->_internal_expiration_days() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_expiration_days());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData S3CreateBucketRequest::_class_data_ = {
    S3CreateBucketRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* S3CreateBucketRequest::GetClassData() const {
  return &_class_data_;
}

void S3CreateBucketRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<S3CreateBucketRequest*>(&to_msg);
  auto& from = static_cast<const S3CreateBucketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.S3CreateBucketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_public_() != 0) {
    _this->_internal_set_public_(from._internal_public_());
  }
  if (from._internal_expiration_days() != 0) {
    _this->_internal_set_expiration_days(from._internal_expiration_days());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void S3CreateBucketRequest::CopyFrom(const S3CreateBucketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.S3CreateBucketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool S3CreateBucketRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* S3CreateBucketRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void S3CreateBucketRequest::InternalSwap(S3CreateBucketRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S3CreateBucketRequest, _impl_.expiration_days_)
      + sizeof(S3CreateBucketRequest::_impl_.expiration_days_)
      - PROTOBUF_FIELD_OFFSET(S3CreateBucketRequest, _impl_.public__)>(
          reinterpret_cast<char*>(&_impl_.public__),
          reinterpret_cast<char*>(&other->_impl_.public__));
}

::google::protobuf::Metadata S3CreateBucketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[1]);
}
// ===================================================================

class S3CreateBucketResponse::_Internal {
 public:
};

S3CreateBucketResponse::S3CreateBucketResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.S3CreateBucketResponse)
}
inline PROTOBUF_NDEBUG_INLINE S3CreateBucketResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : name_(arena, from.name_),
        _cached_size_{0} {}

S3CreateBucketResponse::S3CreateBucketResponse(
    ::google::protobuf::Arena* arena,
    const S3CreateBucketResponse& from)
    : ::google::protobuf::Message(arena) {
  S3CreateBucketResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.S3CreateBucketResponse)
}
inline PROTOBUF_NDEBUG_INLINE S3CreateBucketResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void S3CreateBucketResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
S3CreateBucketResponse::~S3CreateBucketResponse() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.S3CreateBucketResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void S3CreateBucketResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void S3CreateBucketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.S3CreateBucketResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* S3CreateBucketResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 46, 2> S3CreateBucketResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_S3CreateBucketResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(S3CreateBucketResponse, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(S3CreateBucketResponse, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\4\0\0\0\0\0\0"
    "palm.s3.v1.S3CreateBucketResponse"
    "name"
  }},
};

::uint8_t* S3CreateBucketResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.S3CreateBucketResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3CreateBucketResponse.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.S3CreateBucketResponse)
  return target;
}

::size_t S3CreateBucketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.S3CreateBucketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData S3CreateBucketResponse::_class_data_ = {
    S3CreateBucketResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* S3CreateBucketResponse::GetClassData() const {
  return &_class_data_;
}

void S3CreateBucketResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<S3CreateBucketResponse*>(&to_msg);
  auto& from = static_cast<const S3CreateBucketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.S3CreateBucketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void S3CreateBucketResponse::CopyFrom(const S3CreateBucketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.S3CreateBucketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool S3CreateBucketResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* S3CreateBucketResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void S3CreateBucketResponse::InternalSwap(S3CreateBucketResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata S3CreateBucketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[2]);
}
// ===================================================================

class S3UploadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<S3UploadRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(S3UploadRequest, _impl_._has_bits_);
  static const ::google::protobuf::Duration& ttl(const S3UploadRequest* msg);
  static void set_has_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Duration& S3UploadRequest::_Internal::ttl(const S3UploadRequest* msg) {
  return *msg->_impl_.ttl_;
}
void S3UploadRequest::clear_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ttl_ != nullptr) _impl_.ttl_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
S3UploadRequest::S3UploadRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.S3UploadRequest)
}
inline PROTOBUF_NDEBUG_INLINE S3UploadRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bucket_(arena, from.bucket_),
        title_(arena, from.title_) {}

S3UploadRequest::S3UploadRequest(
    ::google::protobuf::Arena* arena,
    const S3UploadRequest& from)
    : ::google::protobuf::Message(arena) {
  S3UploadRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ttl_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Duration>(arena, *from._impl_.ttl_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.S3UploadRequest)
}
inline PROTOBUF_NDEBUG_INLINE S3UploadRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bucket_(arena),
        title_(arena) {}

inline void S3UploadRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ttl_ = {};
}
S3UploadRequest::~S3UploadRequest() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.S3UploadRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void S3UploadRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.title_.Destroy();
  delete _impl_.ttl_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void S3UploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.S3UploadRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ttl_ != nullptr);
    _impl_.ttl_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* S3UploadRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 3, 1, 46, 2> S3UploadRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(S3UploadRequest, _impl_._has_bits_),
    0, // no _extensions_
    9, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967036,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_S3UploadRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string title = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(S3UploadRequest, _impl_.title_)}},
    // string bucket = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(S3UploadRequest, _impl_.bucket_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string bucket = 1;
    {PROTOBUF_FIELD_OFFSET(S3UploadRequest, _impl_.bucket_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string title = 2;
    {PROTOBUF_FIELD_OFFSET(S3UploadRequest, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Duration ttl = 9;
    {PROTOBUF_FIELD_OFFSET(S3UploadRequest, _impl_.ttl_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
    "\32\6\5\0\0\0\0\0"
    "palm.s3.v1.S3UploadRequest"
    "bucket"
    "title"
  }},
};

::uint8_t* S3UploadRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.S3UploadRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    const std::string& _s = this->_internal_bucket();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3UploadRequest.bucket");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3UploadRequest.title");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration ttl = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.S3UploadRequest)
  return target;
}

::size_t S3UploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.S3UploadRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_bucket());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // .google.protobuf.Duration ttl = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ttl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData S3UploadRequest::_class_data_ = {
    S3UploadRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* S3UploadRequest::GetClassData() const {
  return &_class_data_;
}

void S3UploadRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<S3UploadRequest*>(&to_msg);
  auto& from = static_cast<const S3UploadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.S3UploadRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_ttl()->::google::protobuf::Duration::MergeFrom(
        from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void S3UploadRequest::CopyFrom(const S3UploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.S3UploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool S3UploadRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* S3UploadRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void S3UploadRequest::InternalSwap(S3UploadRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bucket_, &other->_impl_.bucket_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::google::protobuf::Metadata S3UploadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[3]);
}
// ===================================================================

class S3UploadResponse::_Internal {
 public:
};

S3UploadResponse::S3UploadResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.S3UploadResponse)
}
inline PROTOBUF_NDEBUG_INLINE S3UploadResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : object_(arena, from.object_),
        url_(arena, from.url_),
        _cached_size_{0} {}

S3UploadResponse::S3UploadResponse(
    ::google::protobuf::Arena* arena,
    const S3UploadResponse& from)
    : ::google::protobuf::Message(arena) {
  S3UploadResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.S3UploadResponse)
}
inline PROTOBUF_NDEBUG_INLINE S3UploadResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : object_(arena),
        url_(arena),
        _cached_size_{0} {}

inline void S3UploadResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
S3UploadResponse::~S3UploadResponse() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.S3UploadResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void S3UploadResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.object_.Destroy();
  _impl_.url_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void S3UploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.S3UploadResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* S3UploadResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 45, 2> S3UploadResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967038,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_S3UploadResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string object = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(S3UploadResponse, _impl_.object_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string object = 1;
    {PROTOBUF_FIELD_OFFSET(S3UploadResponse, _impl_.object_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string url = 9;
    {PROTOBUF_FIELD_OFFSET(S3UploadResponse, _impl_.url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\6\3\0\0\0\0\0"
    "palm.s3.v1.S3UploadResponse"
    "object"
    "url"
  }},
};

::uint8_t* S3UploadResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.S3UploadResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string object = 1;
  if (!this->_internal_object().empty()) {
    const std::string& _s = this->_internal_object();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3UploadResponse.object");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string url = 9;
  if (!this->_internal_url().empty()) {
    const std::string& _s = this->_internal_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3UploadResponse.url");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.S3UploadResponse)
  return target;
}

::size_t S3UploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.S3UploadResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object = 1;
  if (!this->_internal_object().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_object());
  }

  // string url = 9;
  if (!this->_internal_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData S3UploadResponse::_class_data_ = {
    S3UploadResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* S3UploadResponse::GetClassData() const {
  return &_class_data_;
}

void S3UploadResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<S3UploadResponse*>(&to_msg);
  auto& from = static_cast<const S3UploadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.S3UploadResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void S3UploadResponse::CopyFrom(const S3UploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.S3UploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool S3UploadResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* S3UploadResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void S3UploadResponse::InternalSwap(S3UploadResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_, &other->_impl_.object_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
}

::google::protobuf::Metadata S3UploadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[4]);
}
// ===================================================================

class S3UrlResponse::_Internal {
 public:
};

S3UrlResponse::S3UrlResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.S3UrlResponse)
}
inline PROTOBUF_NDEBUG_INLINE S3UrlResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : url_(arena, from.url_),
        _cached_size_{0} {}

S3UrlResponse::S3UrlResponse(
    ::google::protobuf::Arena* arena,
    const S3UrlResponse& from)
    : ::google::protobuf::Message(arena) {
  S3UrlResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.S3UrlResponse)
}
inline PROTOBUF_NDEBUG_INLINE S3UrlResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : url_(arena),
        _cached_size_{0} {}

inline void S3UrlResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
S3UrlResponse::~S3UrlResponse() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.S3UrlResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void S3UrlResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.url_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void S3UrlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.S3UrlResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* S3UrlResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 36, 2> S3UrlResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_S3UrlResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string url = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(S3UrlResponse, _impl_.url_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string url = 1;
    {PROTOBUF_FIELD_OFFSET(S3UrlResponse, _impl_.url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\3\0\0\0\0\0\0"
    "palm.s3.v1.S3UrlResponse"
    "url"
  }},
};

::uint8_t* S3UrlResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.S3UrlResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    const std::string& _s = this->_internal_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3UrlResponse.url");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.S3UrlResponse)
  return target;
}

::size_t S3UrlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.S3UrlResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData S3UrlResponse::_class_data_ = {
    S3UrlResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* S3UrlResponse::GetClassData() const {
  return &_class_data_;
}

void S3UrlResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<S3UrlResponse*>(&to_msg);
  auto& from = static_cast<const S3UrlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.S3UrlResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void S3UrlResponse::CopyFrom(const S3UrlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.S3UrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool S3UrlResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* S3UrlResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void S3UrlResponse::InternalSwap(S3UrlResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
}

::google::protobuf::Metadata S3UrlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[5]);
}
// ===================================================================

class S3PresignedUrlRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<S3PresignedUrlRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_._has_bits_);
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Duration& ttl(const S3PresignedUrlRequest* msg);
  static void set_has_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Duration& S3PresignedUrlRequest::_Internal::ttl(const S3PresignedUrlRequest* msg) {
  return *msg->_impl_.ttl_;
}
void S3PresignedUrlRequest::clear_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ttl_ != nullptr) _impl_.ttl_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
S3PresignedUrlRequest::S3PresignedUrlRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.S3PresignedUrlRequest)
}
inline PROTOBUF_NDEBUG_INLINE S3PresignedUrlRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bucket_(arena, from.bucket_),
        object_(arena, from.object_),
        title_(arena, from.title_),
        content_type_(arena, from.content_type_) {}

S3PresignedUrlRequest::S3PresignedUrlRequest(
    ::google::protobuf::Arena* arena,
    const S3PresignedUrlRequest& from)
    : ::google::protobuf::Message(arena) {
  S3PresignedUrlRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ttl_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Duration>(arena, *from._impl_.ttl_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.S3PresignedUrlRequest)
}
inline PROTOBUF_NDEBUG_INLINE S3PresignedUrlRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bucket_(arena),
        object_(arena),
        title_(arena),
        content_type_(arena) {}

inline void S3PresignedUrlRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ttl_ = {};
}
S3PresignedUrlRequest::~S3PresignedUrlRequest() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.S3PresignedUrlRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void S3PresignedUrlRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.object_.Destroy();
  _impl_.title_.Destroy();
  _impl_.content_type_.Destroy();
  delete _impl_.ttl_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void S3PresignedUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.S3PresignedUrlRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.object_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.content_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ttl_ != nullptr);
      _impl_.ttl_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* S3PresignedUrlRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 1, 70, 2> S3PresignedUrlRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_._has_bits_),
    0, // no _extensions_
    9, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967024,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_S3PresignedUrlRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string content_type = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_.content_type_)}},
    // string bucket = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_.bucket_)}},
    // string object = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_.object_)}},
    // string title = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_.title_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string bucket = 1;
    {PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_.bucket_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string object = 2;
    {PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_.object_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string title = 3;
    {PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string content_type = 4;
    {PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_.content_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Duration ttl = 9;
    {PROTOBUF_FIELD_OFFSET(S3PresignedUrlRequest, _impl_.ttl_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
    "\40\6\6\5\14\0\0\0"
    "palm.s3.v1.S3PresignedUrlRequest"
    "bucket"
    "object"
    "title"
    "content_type"
  }},
};

::uint8_t* S3PresignedUrlRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.S3PresignedUrlRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    const std::string& _s = this->_internal_bucket();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3PresignedUrlRequest.bucket");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    const std::string& _s = this->_internal_object();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3PresignedUrlRequest.object");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3PresignedUrlRequest.title");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string content_type = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_content_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3PresignedUrlRequest.content_type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .google.protobuf.Duration ttl = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.S3PresignedUrlRequest)
  return target;
}

::size_t S3PresignedUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.S3PresignedUrlRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_bucket());
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_object());
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string content_type = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_content_type());
    }

    // .google.protobuf.Duration ttl = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ttl_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData S3PresignedUrlRequest::_class_data_ = {
    S3PresignedUrlRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* S3PresignedUrlRequest::GetClassData() const {
  return &_class_data_;
}

void S3PresignedUrlRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<S3PresignedUrlRequest*>(&to_msg);
  auto& from = static_cast<const S3PresignedUrlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.S3PresignedUrlRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_content_type(from._internal_content_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ttl()->::google::protobuf::Duration::MergeFrom(
          from._internal_ttl());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void S3PresignedUrlRequest::CopyFrom(const S3PresignedUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.S3PresignedUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool S3PresignedUrlRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* S3PresignedUrlRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void S3PresignedUrlRequest::InternalSwap(S3PresignedUrlRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bucket_, &other->_impl_.bucket_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_, &other->_impl_.object_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_type_, &other->_impl_.content_type_, arena);
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::google::protobuf::Metadata S3PresignedUrlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[6]);
}
// ===================================================================

class S3PermanentUrlRequest::_Internal {
 public:
};

S3PermanentUrlRequest::S3PermanentUrlRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.S3PermanentUrlRequest)
}
inline PROTOBUF_NDEBUG_INLINE S3PermanentUrlRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : bucket_(arena, from.bucket_),
        object_(arena, from.object_),
        _cached_size_{0} {}

S3PermanentUrlRequest::S3PermanentUrlRequest(
    ::google::protobuf::Arena* arena,
    const S3PermanentUrlRequest& from)
    : ::google::protobuf::Message(arena) {
  S3PermanentUrlRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.S3PermanentUrlRequest)
}
inline PROTOBUF_NDEBUG_INLINE S3PermanentUrlRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : bucket_(arena),
        object_(arena),
        _cached_size_{0} {}

inline void S3PermanentUrlRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
S3PermanentUrlRequest::~S3PermanentUrlRequest() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.S3PermanentUrlRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void S3PermanentUrlRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.object_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void S3PermanentUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.S3PermanentUrlRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.object_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* S3PermanentUrlRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 53, 2> S3PermanentUrlRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_S3PermanentUrlRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string object = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(S3PermanentUrlRequest, _impl_.object_)}},
    // string bucket = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(S3PermanentUrlRequest, _impl_.bucket_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string bucket = 1;
    {PROTOBUF_FIELD_OFFSET(S3PermanentUrlRequest, _impl_.bucket_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string object = 2;
    {PROTOBUF_FIELD_OFFSET(S3PermanentUrlRequest, _impl_.object_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\40\6\6\0\0\0\0\0"
    "palm.s3.v1.S3PermanentUrlRequest"
    "bucket"
    "object"
  }},
};

::uint8_t* S3PermanentUrlRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.S3PermanentUrlRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    const std::string& _s = this->_internal_bucket();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3PermanentUrlRequest.bucket");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    const std::string& _s = this->_internal_object();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.s3.v1.S3PermanentUrlRequest.object");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.S3PermanentUrlRequest)
  return target;
}

::size_t S3PermanentUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.S3PermanentUrlRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_bucket());
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_object());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData S3PermanentUrlRequest::_class_data_ = {
    S3PermanentUrlRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* S3PermanentUrlRequest::GetClassData() const {
  return &_class_data_;
}

void S3PermanentUrlRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<S3PermanentUrlRequest*>(&to_msg);
  auto& from = static_cast<const S3PermanentUrlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.S3PermanentUrlRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void S3PermanentUrlRequest::CopyFrom(const S3PermanentUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.S3PermanentUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool S3PermanentUrlRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* S3PermanentUrlRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void S3PermanentUrlRequest::InternalSwap(S3PermanentUrlRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bucket_, &other->_impl_.bucket_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_, &other->_impl_.object_, arena);
}

::google::protobuf::Metadata S3PermanentUrlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace s3
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
