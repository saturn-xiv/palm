// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s3.proto

#include "s3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace s3 {
namespace v1 {
PROTOBUF_CONSTEXPR Bucket::Bucket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public__)*/false
  , /*decltype(_impl_.expiration_days_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BucketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BucketDefaultTypeInternal() {}
  union {
    Bucket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BucketDefaultTypeInternal _Bucket_default_instance_;
PROTOBUF_CONSTEXPR CreateBucketRequest::CreateBucketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public__)*/false
  , /*decltype(_impl_.expiration_days_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateBucketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateBucketRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateBucketRequestDefaultTypeInternal() {}
  union {
    CreateBucketRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateBucketRequestDefaultTypeInternal _CreateBucketRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateBucketResponse::CreateBucketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateBucketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateBucketResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateBucketResponseDefaultTypeInternal() {}
  union {
    CreateBucketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateBucketResponseDefaultTypeInternal _CreateBucketResponse_default_instance_;
PROTOBUF_CONSTEXPR UploadRequest::UploadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadRequestDefaultTypeInternal() {}
  union {
    UploadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
PROTOBUF_CONSTEXPR UploadResponse::UploadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadResponseDefaultTypeInternal() {}
  union {
    UploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadResponseDefaultTypeInternal _UploadResponse_default_instance_;
PROTOBUF_CONSTEXPR UrlResponse::UrlResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UrlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlResponseDefaultTypeInternal() {}
  union {
    UrlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlResponseDefaultTypeInternal _UrlResponse_default_instance_;
PROTOBUF_CONSTEXPR PresignedUrlRequest::PresignedUrlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr} {}
struct PresignedUrlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PresignedUrlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PresignedUrlRequestDefaultTypeInternal() {}
  union {
    PresignedUrlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PresignedUrlRequestDefaultTypeInternal _PresignedUrlRequest_default_instance_;
PROTOBUF_CONSTEXPR PermanentUrlRequest::PermanentUrlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PermanentUrlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermanentUrlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermanentUrlRequestDefaultTypeInternal() {}
  union {
    PermanentUrlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermanentUrlRequestDefaultTypeInternal _PermanentUrlRequest_default_instance_;
}  // namespace v1
}  // namespace s3
}  // namespace palm
static ::_pb::Metadata file_level_metadata_s3_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_s3_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_s3_2eproto = nullptr;

const uint32_t TableStruct_s3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::Bucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::Bucket, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::Bucket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::Bucket, _impl_.public__),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::Bucket, _impl_.expiration_days_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::CreateBucketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::CreateBucketRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::CreateBucketRequest, _impl_.public__),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::CreateBucketRequest, _impl_.expiration_days_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::CreateBucketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::CreateBucketResponse, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::UploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::UploadRequest, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::UploadRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::UploadRequest, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::UploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::UploadResponse, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::UploadResponse, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::UrlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::UrlResponse, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PresignedUrlRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PresignedUrlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PresignedUrlRequest, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PresignedUrlRequest, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PresignedUrlRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PresignedUrlRequest, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PresignedUrlRequest, _impl_.ttl_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PermanentUrlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PermanentUrlRequest, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::palm::s3::v1::PermanentUrlRequest, _impl_.object_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::s3::v1::Bucket)},
  { 10, -1, -1, sizeof(::palm::s3::v1::CreateBucketRequest)},
  { 19, -1, -1, sizeof(::palm::s3::v1::CreateBucketResponse)},
  { 26, -1, -1, sizeof(::palm::s3::v1::UploadRequest)},
  { 35, -1, -1, sizeof(::palm::s3::v1::UploadResponse)},
  { 43, -1, -1, sizeof(::palm::s3::v1::UrlResponse)},
  { 50, 61, -1, sizeof(::palm::s3::v1::PresignedUrlRequest)},
  { 66, -1, -1, sizeof(::palm::s3::v1::PermanentUrlRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::s3::v1::_Bucket_default_instance_._instance,
  &::palm::s3::v1::_CreateBucketRequest_default_instance_._instance,
  &::palm::s3::v1::_CreateBucketResponse_default_instance_._instance,
  &::palm::s3::v1::_UploadRequest_default_instance_._instance,
  &::palm::s3::v1::_UploadResponse_default_instance_._instance,
  &::palm::s3::v1::_UrlResponse_default_instance_._instance,
  &::palm::s3::v1::_PresignedUrlRequest_default_instance_._instance,
  &::palm::s3::v1::_PermanentUrlRequest_default_instance_._instance,
};

const char descriptor_table_protodef_s3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010s3.proto\022\npalm.s3.v1\032\036google/protobuf/"
  "duration.proto\"R\n\006Bucket\022\021\n\tnamespace\030\001 "
  "\001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006public\030\003 \001(\010\022\027\n\017exp"
  "iration_days\030\004 \001(\r\"L\n\023CreateBucketReques"
  "t\022\014\n\004name\030\001 \001(\t\022\016\n\006public\030\002 \001(\010\022\027\n\017expir"
  "ation_days\030\t \001(\r\"$\n\024CreateBucketResponse"
  "\022\014\n\004name\030\001 \001(\t\"V\n\rUploadRequest\022\016\n\006bucke"
  "t\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022&\n\003ttl\030\t \001(\0132\031.go"
  "ogle.protobuf.Duration\"-\n\016UploadResponse"
  "\022\016\n\006object\030\001 \001(\t\022\013\n\003url\030\t \001(\t\"\032\n\013UrlResp"
  "onse\022\013\n\003url\030\001 \001(\t\"\230\001\n\023PresignedUrlReques"
  "t\022\016\n\006bucket\030\001 \001(\t\022\016\n\006object\030\002 \001(\t\022\r\n\005tit"
  "le\030\003 \001(\t\022\031\n\014content_type\030\004 \001(\tH\000\210\001\001\022&\n\003t"
  "tl\030\t \001(\0132\031.google.protobuf.DurationB\017\n\r_"
  "content_type\"5\n\023PermanentUrlRequest\022\016\n\006b"
  "ucket\030\001 \001(\t\022\016\n\006object\030\002 \001(\t2\264\002\n\002S3\022S\n\014Cr"
  "eateBucket\022\037.palm.s3.v1.CreateBucketRequ"
  "est\032 .palm.s3.v1.CreateBucketResponse\"\000\022"
  "A\n\006Upload\022\031.palm.s3.v1.UploadRequest\032\032.p"
  "alm.s3.v1.UploadResponse\"\000\022J\n\014PermanentU"
  "rl\022\037.palm.s3.v1.PermanentUrlRequest\032\027.pa"
  "lm.s3.v1.UrlResponse\"\000\022J\n\014PresignedUrl\022\037"
  ".palm.s3.v1.PresignedUrlRequest\032\027.palm.s"
  "3.v1.UrlResponse\"\000BW\n(com.github.saturn_"
  "xiv.palm.plugins.s3.v1P\001Z)github.com/sat"
  "urn-xiv/palm/s3/services/v2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_s3_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::_pbi::once_flag descriptor_table_s3_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_s3_2eproto = {
    false, false, 1035, descriptor_table_protodef_s3_2eproto,
    "s3.proto",
    &descriptor_table_s3_2eproto_once, descriptor_table_s3_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_s3_2eproto::offsets,
    file_level_metadata_s3_2eproto, file_level_enum_descriptors_s3_2eproto,
    file_level_service_descriptors_s3_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_s3_2eproto_getter() {
  return &descriptor_table_s3_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_s3_2eproto(&descriptor_table_s3_2eproto);
namespace palm {
namespace s3 {
namespace v1 {

// ===================================================================

class Bucket::_Internal {
 public:
};

Bucket::Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.Bucket)
}
Bucket::Bucket(const Bucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Bucket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.namespace__){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.public__){}
    , decltype(_impl_.expiration_days_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.public__, &from._impl_.public__,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expiration_days_) -
    reinterpret_cast<char*>(&_impl_.public__)) + sizeof(_impl_.expiration_days_));
  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.Bucket)
}

inline void Bucket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.namespace__){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.public__){false}
    , decltype(_impl_.expiration_days_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Bucket::~Bucket() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.Bucket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bucket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.namespace__.Destroy();
  _impl_.name_.Destroy();
}

void Bucket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.Bucket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.namespace__.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.public__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.expiration_days_) -
      reinterpret_cast<char*>(&_impl_.public__)) + sizeof(_impl_.expiration_days_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bucket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.Bucket.namespace"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.Bucket.name"));
        } else
          goto handle_unusual;
        continue;
      // bool public = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expiration_days = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.expiration_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bucket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.Bucket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.Bucket.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.Bucket.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool public = 3;
  if (this->_internal_public_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_public_(), target);
  }

  // uint32 expiration_days = 4;
  if (this->_internal_expiration_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_expiration_days(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.Bucket)
  return target;
}

size_t Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.Bucket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 1;
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool public = 3;
  if (this->_internal_public_() != 0) {
    total_size += 1 + 1;
  }

  // uint32 expiration_days = 4;
  if (this->_internal_expiration_days() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expiration_days());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bucket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Bucket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bucket::GetClassData() const { return &_class_data_; }


void Bucket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Bucket*>(&to_msg);
  auto& from = static_cast<const Bucket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.Bucket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_namespace_().empty()) {
    _this->_internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_public_() != 0) {
    _this->_internal_set_public_(from._internal_public_());
  }
  if (from._internal_expiration_days() != 0) {
    _this->_internal_set_expiration_days(from._internal_expiration_days());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bucket::CopyFrom(const Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bucket::IsInitialized() const {
  return true;
}

void Bucket::InternalSwap(Bucket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bucket, _impl_.expiration_days_)
      + sizeof(Bucket::_impl_.expiration_days_)
      - PROTOBUF_FIELD_OFFSET(Bucket, _impl_.public__)>(
          reinterpret_cast<char*>(&_impl_.public__),
          reinterpret_cast<char*>(&other->_impl_.public__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bucket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[0]);
}

// ===================================================================

class CreateBucketRequest::_Internal {
 public:
};

CreateBucketRequest::CreateBucketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.CreateBucketRequest)
}
CreateBucketRequest::CreateBucketRequest(const CreateBucketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateBucketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.public__){}
    , decltype(_impl_.expiration_days_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.public__, &from._impl_.public__,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expiration_days_) -
    reinterpret_cast<char*>(&_impl_.public__)) + sizeof(_impl_.expiration_days_));
  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.CreateBucketRequest)
}

inline void CreateBucketRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.public__){false}
    , decltype(_impl_.expiration_days_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateBucketRequest::~CreateBucketRequest() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.CreateBucketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateBucketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CreateBucketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateBucketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.CreateBucketRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.public__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.expiration_days_) -
      reinterpret_cast<char*>(&_impl_.public__)) + sizeof(_impl_.expiration_days_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateBucketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.CreateBucketRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bool public = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expiration_days = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.expiration_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateBucketRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.CreateBucketRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.CreateBucketRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool public = 2;
  if (this->_internal_public_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_public_(), target);
  }

  // uint32 expiration_days = 9;
  if (this->_internal_expiration_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_expiration_days(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.CreateBucketRequest)
  return target;
}

size_t CreateBucketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.CreateBucketRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool public = 2;
  if (this->_internal_public_() != 0) {
    total_size += 1 + 1;
  }

  // uint32 expiration_days = 9;
  if (this->_internal_expiration_days() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expiration_days());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateBucketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateBucketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateBucketRequest::GetClassData() const { return &_class_data_; }


void CreateBucketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateBucketRequest*>(&to_msg);
  auto& from = static_cast<const CreateBucketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.CreateBucketRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_public_() != 0) {
    _this->_internal_set_public_(from._internal_public_());
  }
  if (from._internal_expiration_days() != 0) {
    _this->_internal_set_expiration_days(from._internal_expiration_days());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateBucketRequest::CopyFrom(const CreateBucketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.CreateBucketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBucketRequest::IsInitialized() const {
  return true;
}

void CreateBucketRequest::InternalSwap(CreateBucketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateBucketRequest, _impl_.expiration_days_)
      + sizeof(CreateBucketRequest::_impl_.expiration_days_)
      - PROTOBUF_FIELD_OFFSET(CreateBucketRequest, _impl_.public__)>(
          reinterpret_cast<char*>(&_impl_.public__),
          reinterpret_cast<char*>(&other->_impl_.public__));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateBucketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[1]);
}

// ===================================================================

class CreateBucketResponse::_Internal {
 public:
};

CreateBucketResponse::CreateBucketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.CreateBucketResponse)
}
CreateBucketResponse::CreateBucketResponse(const CreateBucketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateBucketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.CreateBucketResponse)
}

inline void CreateBucketResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateBucketResponse::~CreateBucketResponse() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.CreateBucketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateBucketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CreateBucketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateBucketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.CreateBucketResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateBucketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.CreateBucketResponse.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateBucketResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.CreateBucketResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.CreateBucketResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.CreateBucketResponse)
  return target;
}

size_t CreateBucketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.CreateBucketResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateBucketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateBucketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateBucketResponse::GetClassData() const { return &_class_data_; }


void CreateBucketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateBucketResponse*>(&to_msg);
  auto& from = static_cast<const CreateBucketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.CreateBucketResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateBucketResponse::CopyFrom(const CreateBucketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.CreateBucketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBucketResponse::IsInitialized() const {
  return true;
}

void CreateBucketResponse::InternalSwap(CreateBucketResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateBucketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[2]);
}

// ===================================================================

class UploadRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const UploadRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
UploadRequest::_Internal::ttl(const UploadRequest* msg) {
  return *msg->_impl_.ttl_;
}
void UploadRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
UploadRequest::UploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.UploadRequest)
}
UploadRequest::UploadRequest(const UploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.UploadRequest)
}

inline void UploadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadRequest::~UploadRequest() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.UploadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void UploadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.UploadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bucket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.UploadRequest.bucket"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.UploadRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.UploadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.UploadRequest.bucket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bucket(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.UploadRequest.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.UploadRequest)
  return target;
}

size_t UploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.UploadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadRequest::GetClassData() const { return &_class_data_; }


void UploadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadRequest*>(&to_msg);
  auto& from = static_cast<const UploadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.UploadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadRequest::CopyFrom(const UploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.UploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequest::IsInitialized() const {
  return true;
}

void UploadRequest::InternalSwap(UploadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[3]);
}

// ===================================================================

class UploadResponse::_Internal {
 public:
};

UploadResponse::UploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.UploadResponse)
}
UploadResponse::UploadResponse(const UploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_){}
    , decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object().empty()) {
    _this->_impl_.object_.Set(from._internal_object(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.UploadResponse)
}

inline void UploadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_){}
    , decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadResponse::~UploadResponse() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.UploadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_.Destroy();
  _impl_.url_.Destroy();
}

void UploadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.UploadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_object();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.UploadResponse.object"));
        } else
          goto handle_unusual;
        continue;
      // string url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.UploadResponse.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.UploadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string object = 1;
  if (!this->_internal_object().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object().data(), static_cast<int>(this->_internal_object().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.UploadResponse.object");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_object(), target);
  }

  // string url = 9;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.UploadResponse.url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.UploadResponse)
  return target;
}

size_t UploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.UploadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object = 1;
  if (!this->_internal_object().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object());
  }

  // string url = 9;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadResponse::GetClassData() const { return &_class_data_; }


void UploadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadResponse*>(&to_msg);
  auto& from = static_cast<const UploadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.UploadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadResponse::CopyFrom(const UploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.UploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadResponse::IsInitialized() const {
  return true;
}

void UploadResponse::InternalSwap(UploadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_, lhs_arena,
      &other->_impl_.object_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[4]);
}

// ===================================================================

class UrlResponse::_Internal {
 public:
};

UrlResponse::UrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.UrlResponse)
}
UrlResponse::UrlResponse(const UrlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UrlResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.UrlResponse)
}

inline void UrlResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UrlResponse::~UrlResponse() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.UrlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UrlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void UrlResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UrlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.UrlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UrlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.UrlResponse.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UrlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.UrlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.UrlResponse.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.UrlResponse)
  return target;
}

size_t UrlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.UrlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UrlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UrlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UrlResponse::GetClassData() const { return &_class_data_; }


void UrlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UrlResponse*>(&to_msg);
  auto& from = static_cast<const UrlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.UrlResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UrlResponse::CopyFrom(const UrlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.UrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlResponse::IsInitialized() const {
  return true;
}

void UrlResponse::InternalSwap(UrlResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UrlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[5]);
}

// ===================================================================

class PresignedUrlRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PresignedUrlRequest>()._impl_._has_bits_);
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const PresignedUrlRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
PresignedUrlRequest::_Internal::ttl(const PresignedUrlRequest* msg) {
  return *msg->_impl_.ttl_;
}
void PresignedUrlRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
PresignedUrlRequest::PresignedUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.PresignedUrlRequest)
}
PresignedUrlRequest::PresignedUrlRequest(const PresignedUrlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PresignedUrlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.object_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.ttl_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object().empty()) {
    _this->_impl_.object_.Set(from._internal_object(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content_type()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.PresignedUrlRequest)
}

inline void PresignedUrlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.object_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.ttl_){nullptr}
  };
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PresignedUrlRequest::~PresignedUrlRequest() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.PresignedUrlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PresignedUrlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.object_.Destroy();
  _impl_.title_.Destroy();
  _impl_.content_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void PresignedUrlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PresignedUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.PresignedUrlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.object_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.content_type_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PresignedUrlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bucket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.PresignedUrlRequest.bucket"));
        } else
          goto handle_unusual;
        continue;
      // string object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_object();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.PresignedUrlRequest.object"));
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.PresignedUrlRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // optional string content_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.PresignedUrlRequest.content_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PresignedUrlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.PresignedUrlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.PresignedUrlRequest.bucket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bucket(), target);
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object().data(), static_cast<int>(this->_internal_object().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.PresignedUrlRequest.object");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_object(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.PresignedUrlRequest.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string content_type = 4;
  if (_internal_has_content_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.PresignedUrlRequest.content_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content_type(), target);
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.PresignedUrlRequest)
  return target;
}

size_t PresignedUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.PresignedUrlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object());
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // optional string content_type = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PresignedUrlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PresignedUrlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PresignedUrlRequest::GetClassData() const { return &_class_data_; }


void PresignedUrlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PresignedUrlRequest*>(&to_msg);
  auto& from = static_cast<const PresignedUrlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.PresignedUrlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_has_content_type()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PresignedUrlRequest::CopyFrom(const PresignedUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.PresignedUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresignedUrlRequest::IsInitialized() const {
  return true;
}

void PresignedUrlRequest::InternalSwap(PresignedUrlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_, lhs_arena,
      &other->_impl_.object_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_type_, lhs_arena,
      &other->_impl_.content_type_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PresignedUrlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[6]);
}

// ===================================================================

class PermanentUrlRequest::_Internal {
 public:
};

PermanentUrlRequest::PermanentUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.s3.v1.PermanentUrlRequest)
}
PermanentUrlRequest::PermanentUrlRequest(const PermanentUrlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermanentUrlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.object_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object().empty()) {
    _this->_impl_.object_.Set(from._internal_object(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.s3.v1.PermanentUrlRequest)
}

inline void PermanentUrlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.object_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PermanentUrlRequest::~PermanentUrlRequest() {
  // @@protoc_insertion_point(destructor:palm.s3.v1.PermanentUrlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermanentUrlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.object_.Destroy();
}

void PermanentUrlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermanentUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.s3.v1.PermanentUrlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.object_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermanentUrlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bucket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.PermanentUrlRequest.bucket"));
        } else
          goto handle_unusual;
        continue;
      // string object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_object();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.s3.v1.PermanentUrlRequest.object"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PermanentUrlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.s3.v1.PermanentUrlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.PermanentUrlRequest.bucket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bucket(), target);
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object().data(), static_cast<int>(this->_internal_object().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.s3.v1.PermanentUrlRequest.object");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_object(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.s3.v1.PermanentUrlRequest)
  return target;
}

size_t PermanentUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.s3.v1.PermanentUrlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermanentUrlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermanentUrlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermanentUrlRequest::GetClassData() const { return &_class_data_; }


void PermanentUrlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermanentUrlRequest*>(&to_msg);
  auto& from = static_cast<const PermanentUrlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.s3.v1.PermanentUrlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermanentUrlRequest::CopyFrom(const PermanentUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.s3.v1.PermanentUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermanentUrlRequest::IsInitialized() const {
  return true;
}

void PermanentUrlRequest::InternalSwap(PermanentUrlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_, lhs_arena,
      &other->_impl_.object_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PermanentUrlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s3_2eproto_getter, &descriptor_table_s3_2eproto_once,
      file_level_metadata_s3_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace s3
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::s3::v1::Bucket*
Arena::CreateMaybeMessage< ::palm::s3::v1::Bucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::s3::v1::Bucket >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::s3::v1::CreateBucketRequest*
Arena::CreateMaybeMessage< ::palm::s3::v1::CreateBucketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::s3::v1::CreateBucketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::s3::v1::CreateBucketResponse*
Arena::CreateMaybeMessage< ::palm::s3::v1::CreateBucketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::s3::v1::CreateBucketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::s3::v1::UploadRequest*
Arena::CreateMaybeMessage< ::palm::s3::v1::UploadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::s3::v1::UploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::s3::v1::UploadResponse*
Arena::CreateMaybeMessage< ::palm::s3::v1::UploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::s3::v1::UploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::s3::v1::UrlResponse*
Arena::CreateMaybeMessage< ::palm::s3::v1::UrlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::s3::v1::UrlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::s3::v1::PresignedUrlRequest*
Arena::CreateMaybeMessage< ::palm::s3::v1::PresignedUrlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::s3::v1::PresignedUrlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::s3::v1::PermanentUrlRequest*
Arena::CreateMaybeMessage< ::palm::s3::v1::PermanentUrlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::s3::v1::PermanentUrlRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
