// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: balsam.proto

#include "balsam.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace balsam {
namespace v1 {
PROTOBUF_CONSTEXPR IdRequest::IdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdRequestDefaultTypeInternal() {}
  union {
    IdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdRequestDefaultTypeInternal _IdRequest_default_instance_;
PROTOBUF_CONSTEXPR UidRequest::UidRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UidRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UidRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UidRequestDefaultTypeInternal() {}
  union {
    UidRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UidRequestDefaultTypeInternal _UidRequest_default_instance_;
PROTOBUF_CONSTEXPR Pager::Pager(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PagerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PagerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PagerDefaultTypeInternal() {}
  union {
    Pager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PagerDefaultTypeInternal _Pager_default_instance_;
PROTOBUF_CONSTEXPR AesPlainMessage::AesPlainMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AesPlainMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AesPlainMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AesPlainMessageDefaultTypeInternal() {}
  union {
    AesPlainMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AesPlainMessageDefaultTypeInternal _AesPlainMessage_default_instance_;
PROTOBUF_CONSTEXPR AesCodeMessage::AesCodeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AesCodeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AesCodeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AesCodeMessageDefaultTypeInternal() {}
  union {
    AesCodeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AesCodeMessageDefaultTypeInternal _AesCodeMessage_default_instance_;
PROTOBUF_CONSTEXPR JwtSignRequest::JwtSignRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audiences_)*/{}
  , /*decltype(_impl_.key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issuer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.not_before_)*/nullptr
  , /*decltype(_impl_.expires_at_)*/nullptr} {}
struct JwtSignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JwtSignRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JwtSignRequestDefaultTypeInternal() {}
  union {
    JwtSignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JwtSignRequestDefaultTypeInternal _JwtSignRequest_default_instance_;
PROTOBUF_CONSTEXPR JwtSignResponse::JwtSignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JwtSignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JwtSignResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JwtSignResponseDefaultTypeInternal() {}
  union {
    JwtSignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JwtSignResponseDefaultTypeInternal _JwtSignResponse_default_instance_;
PROTOBUF_CONSTEXPR JwtVerifyRequest::JwtVerifyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issuer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audience_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JwtVerifyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JwtVerifyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JwtVerifyRequestDefaultTypeInternal() {}
  union {
    JwtVerifyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JwtVerifyRequestDefaultTypeInternal _JwtVerifyRequest_default_instance_;
PROTOBUF_CONSTEXPR JwtVerifyResponse::JwtVerifyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.jwt_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct JwtVerifyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JwtVerifyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JwtVerifyResponseDefaultTypeInternal() {}
  union {
    JwtVerifyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JwtVerifyResponseDefaultTypeInternal _JwtVerifyResponse_default_instance_;
PROTOBUF_CONSTEXPR HMacSignRequest::HMacSignRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HMacSignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMacSignRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMacSignRequestDefaultTypeInternal() {}
  union {
    HMacSignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMacSignRequestDefaultTypeInternal _HMacSignRequest_default_instance_;
PROTOBUF_CONSTEXPR HMacSignResponse::HMacSignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HMacSignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMacSignResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMacSignResponseDefaultTypeInternal() {}
  union {
    HMacSignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMacSignResponseDefaultTypeInternal _HMacSignResponse_default_instance_;
PROTOBUF_CONSTEXPR HMacVerifyRequest::HMacVerifyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HMacVerifyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMacVerifyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMacVerifyRequestDefaultTypeInternal() {}
  union {
    HMacVerifyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMacVerifyRequestDefaultTypeInternal _HMacVerifyRequest_default_instance_;
PROTOBUF_CONSTEXPR UserUpdateProfileRequest::UserUpdateProfileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserUpdateProfileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserUpdateProfileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserUpdateProfileRequestDefaultTypeInternal() {}
  union {
    UserUpdateProfileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserUpdateProfileRequestDefaultTypeInternal _UserUpdateProfileRequest_default_instance_;
PROTOBUF_CONSTEXPR UserIndexResponse_Item::UserIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_sign_in_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_sign_in_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_sign_in_at_)*/nullptr
  , /*decltype(_impl_.last_sign_in_at_)*/nullptr
  , /*decltype(_impl_.lockeda_at_)*/nullptr
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.sign_in_count_)*/0u} {}
struct UserIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserIndexResponse_ItemDefaultTypeInternal() {}
  union {
    UserIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserIndexResponse_ItemDefaultTypeInternal _UserIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR UserIndexResponse::UserIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserIndexResponseDefaultTypeInternal() {}
  union {
    UserIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserIndexResponseDefaultTypeInternal _UserIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR LogsRequest::LogsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/uint64_t{0u}
  , /*decltype(_impl_.page_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}} {}
struct LogsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogsRequestDefaultTypeInternal() {}
  union {
    LogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogsRequestDefaultTypeInternal _LogsRequest_default_instance_;
PROTOBUF_CONSTEXPR UserLogsResponse_Item::UserLogsResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.resource_id_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/0} {}
struct UserLogsResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLogsResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLogsResponse_ItemDefaultTypeInternal() {}
  union {
    UserLogsResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLogsResponse_ItemDefaultTypeInternal _UserLogsResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR UserLogsResponse::UserLogsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLogsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLogsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLogsResponseDefaultTypeInternal() {}
  union {
    UserLogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLogsResponseDefaultTypeInternal _UserLogsResponse_default_instance_;
PROTOBUF_CONSTEXPR EmailUserByEmailRequest::EmailUserByEmailRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailUserByEmailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailUserByEmailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailUserByEmailRequestDefaultTypeInternal() {}
  union {
    EmailUserByEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailUserByEmailRequestDefaultTypeInternal _EmailUserByEmailRequest_default_instance_;
PROTOBUF_CONSTEXPR EmailUserByNicknameRequest::EmailUserByNicknameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailUserByNicknameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailUserByNicknameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailUserByNicknameRequestDefaultTypeInternal() {}
  union {
    EmailUserByNicknameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailUserByNicknameRequestDefaultTypeInternal _EmailUserByNicknameRequest_default_instance_;
PROTOBUF_CONSTEXPR EmailUserIndexResponse_Item::EmailUserIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.confirmed_at_)*/nullptr
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}} {}
struct EmailUserIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailUserIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailUserIndexResponse_ItemDefaultTypeInternal() {}
  union {
    EmailUserIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailUserIndexResponse_ItemDefaultTypeInternal _EmailUserIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR EmailUserIndexResponse::EmailUserIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailUserIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailUserIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailUserIndexResponseDefaultTypeInternal() {}
  union {
    EmailUserIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailUserIndexResponseDefaultTypeInternal _EmailUserIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR UserResetPasswordRequest::UserResetPasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserResetPasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserResetPasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserResetPasswordRequestDefaultTypeInternal() {}
  union {
    UserResetPasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserResetPasswordRequestDefaultTypeInternal _UserResetPasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR UserByEmailRequest::UserByEmailRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserByEmailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserByEmailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserByEmailRequestDefaultTypeInternal() {}
  union {
    UserByEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserByEmailRequestDefaultTypeInternal _UserByEmailRequest_default_instance_;
PROTOBUF_CONSTEXPR UserByTokenRequest::UserByTokenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserByTokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserByTokenRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserByTokenRequestDefaultTypeInternal() {}
  union {
    UserByTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserByTokenRequestDefaultTypeInternal _UserByTokenRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSignInByEmailRequest::UserSignInByEmailRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_.user_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserSignInByEmailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInByEmailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInByEmailRequestDefaultTypeInternal() {}
  union {
    UserSignInByEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInByEmailRequestDefaultTypeInternal _UserSignInByEmailRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSignUpByEmailRequest::UserSignUpByEmailRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.home_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSignUpByEmailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignUpByEmailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignUpByEmailRequestDefaultTypeInternal() {}
  union {
    UserSignUpByEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignUpByEmailRequestDefaultTypeInternal _UserSignUpByEmailRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSignInResponse_Detail::UserSignInResponse_Detail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.provider_id_)*/uint64_t{0u}
  , /*decltype(_impl_.provider_type_)*/0
  , /*decltype(_impl_.has_email_)*/false
  , /*decltype(_impl_.has_phone_)*/false
  , /*decltype(_impl_.has_google_oauth2_)*/false
  , /*decltype(_impl_.has_wechat_oauth2_)*/false
  , /*decltype(_impl_.has_wechat_mini_program_)*/false
  , /*decltype(_impl_.has_facebook_oauth2_)*/false} {}
struct UserSignInResponse_DetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInResponse_DetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInResponse_DetailDefaultTypeInternal() {}
  union {
    UserSignInResponse_Detail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInResponse_DetailDefaultTypeInternal _UserSignInResponse_Detail_default_instance_;
PROTOBUF_CONSTEXPR UserSignInResponse_Permission::UserSignInResponse_Permission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_id_)*/uint64_t{0u}} {}
struct UserSignInResponse_PermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInResponse_PermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInResponse_PermissionDefaultTypeInternal() {}
  union {
    UserSignInResponse_Permission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInResponse_PermissionDefaultTypeInternal _UserSignInResponse_Permission_default_instance_;
PROTOBUF_CONSTEXPR UserSignInResponse_Menu::UserSignInResponse_Menu(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.menus_)*/{}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UserSignInResponse_MenuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInResponse_MenuDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInResponse_MenuDefaultTypeInternal() {}
  union {
    UserSignInResponse_Menu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInResponse_MenuDefaultTypeInternal _UserSignInResponse_Menu_default_instance_;
PROTOBUF_CONSTEXPR UserSignInResponse::UserSignInResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roles_)*/{}
  , /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_.menus_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detail_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSignInResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInResponseDefaultTypeInternal() {}
  union {
    UserSignInResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInResponseDefaultTypeInternal _UserSignInResponse_default_instance_;
PROTOBUF_CONSTEXPR GoogleOauth2UserBySubjectRequest::GoogleOauth2UserBySubjectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GoogleOauth2UserBySubjectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleOauth2UserBySubjectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleOauth2UserBySubjectRequestDefaultTypeInternal() {}
  union {
    GoogleOauth2UserBySubjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleOauth2UserBySubjectRequestDefaultTypeInternal _GoogleOauth2UserBySubjectRequest_default_instance_;
PROTOBUF_CONSTEXPR GoogleOauth2UserIndexResponse_Item::GoogleOauth2UserIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.picture_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.locale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.email_verified_)*/false} {}
struct GoogleOauth2UserIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleOauth2UserIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleOauth2UserIndexResponse_ItemDefaultTypeInternal() {}
  union {
    GoogleOauth2UserIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleOauth2UserIndexResponse_ItemDefaultTypeInternal _GoogleOauth2UserIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR GoogleOauth2UserIndexResponse::GoogleOauth2UserIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GoogleOauth2UserIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleOauth2UserIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleOauth2UserIndexResponseDefaultTypeInternal() {}
  union {
    GoogleOauth2UserIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleOauth2UserIndexResponseDefaultTypeInternal _GoogleOauth2UserIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatByUnionIdRequest::WechatByUnionIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatByUnionIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatByUnionIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatByUnionIdRequestDefaultTypeInternal() {}
  union {
    WechatByUnionIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatByUnionIdRequestDefaultTypeInternal _WechatByUnionIdRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatByAppIdAndOpenIdRequest::WechatByAppIdAndOpenIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatByAppIdAndOpenIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatByAppIdAndOpenIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatByAppIdAndOpenIdRequestDefaultTypeInternal() {}
  union {
    WechatByAppIdAndOpenIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatByAppIdAndOpenIdRequestDefaultTypeInternal _WechatByAppIdAndOpenIdRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2UserIndexResponse_Item::WechatOauth2UserIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.privilege_)*/{}
  , /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.province_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.head_img_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.picture_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.sex_)*/0
  , /*decltype(_impl_.lang_)*/0} {}
struct WechatOauth2UserIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2UserIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2UserIndexResponse_ItemDefaultTypeInternal() {}
  union {
    WechatOauth2UserIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2UserIndexResponse_ItemDefaultTypeInternal _WechatOauth2UserIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2UserIndexResponse::WechatOauth2UserIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatOauth2UserIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2UserIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2UserIndexResponseDefaultTypeInternal() {}
  union {
    WechatOauth2UserIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2UserIndexResponseDefaultTypeInternal _WechatOauth2UserIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatMiniProgramUserIndexResponse_Item::WechatMiniProgramUserIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}} {}
struct WechatMiniProgramUserIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatMiniProgramUserIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatMiniProgramUserIndexResponse_ItemDefaultTypeInternal() {}
  union {
    WechatMiniProgramUserIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatMiniProgramUserIndexResponse_ItemDefaultTypeInternal _WechatMiniProgramUserIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR WechatMiniProgramUserIndexResponse::WechatMiniProgramUserIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatMiniProgramUserIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatMiniProgramUserIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatMiniProgramUserIndexResponseDefaultTypeInternal() {}
  union {
    WechatMiniProgramUserIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatMiniProgramUserIndexResponseDefaultTypeInternal _WechatMiniProgramUserIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR SessionIndexResponse_Item::SessionIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expires_at_)*/nullptr
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.user_)*/uint64_t{0u}
  , /*decltype(_impl_.provider_id_)*/uint64_t{0u}
  , /*decltype(_impl_.provider_type_)*/0} {}
struct SessionIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionIndexResponse_ItemDefaultTypeInternal() {}
  union {
    SessionIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionIndexResponse_ItemDefaultTypeInternal _SessionIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR SessionIndexResponse::SessionIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionIndexResponseDefaultTypeInternal() {}
  union {
    SessionIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionIndexResponseDefaultTypeInternal _SessionIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR AttachmentCreateRequest::AttachmentCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.public__)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentCreateRequestDefaultTypeInternal() {}
  union {
    AttachmentCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentCreateRequestDefaultTypeInternal _AttachmentCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR AttachmentByResourceRequest::AttachmentByResourceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentByResourceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentByResourceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentByResourceRequestDefaultTypeInternal() {}
  union {
    AttachmentByResourceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentByResourceRequestDefaultTypeInternal _AttachmentByResourceRequest_default_instance_;
PROTOBUF_CONSTEXPR AttachmentSetTitleRequest::AttachmentSetTitleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentSetTitleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentSetTitleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentSetTitleRequestDefaultTypeInternal() {}
  union {
    AttachmentSetTitleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentSetTitleRequestDefaultTypeInternal _AttachmentSetTitleRequest_default_instance_;
PROTOBUF_CONSTEXPR AttachmentShowResponse::AttachmentShowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentShowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentShowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentShowResponseDefaultTypeInternal() {}
  union {
    AttachmentShowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentShowResponseDefaultTypeInternal _AttachmentShowResponse_default_instance_;
PROTOBUF_CONSTEXPR AttachmentIndexResponse_Item::AttachmentIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.published_at_)*/nullptr
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.user_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.public__)*/false} {}
struct AttachmentIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentIndexResponse_ItemDefaultTypeInternal() {}
  union {
    AttachmentIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentIndexResponse_ItemDefaultTypeInternal _AttachmentIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR AttachmentIndexResponse::AttachmentIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentIndexResponseDefaultTypeInternal() {}
  union {
    AttachmentIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentIndexResponseDefaultTypeInternal _AttachmentIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR LocaleSetRequest::LocaleSetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleSetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleSetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleSetRequestDefaultTypeInternal() {}
  union {
    LocaleSetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleSetRequestDefaultTypeInternal _LocaleSetRequest_default_instance_;
PROTOBUF_CONSTEXPR LocaleIndexResponse_Item::LocaleIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleIndexResponse_ItemDefaultTypeInternal() {}
  union {
    LocaleIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR LocaleIndexResponse::LocaleIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleIndexResponseDefaultTypeInternal() {}
  union {
    LocaleIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR LocaleByLangRequest::LocaleByLangRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleByLangRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleByLangRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleByLangRequestDefaultTypeInternal() {}
  union {
    LocaleByLangRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleByLangRequestDefaultTypeInternal _LocaleByLangRequest_default_instance_;
PROTOBUF_CONSTEXPR LeaveWordCreateRequest::LeaveWordCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.editor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveWordCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveWordCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveWordCreateRequestDefaultTypeInternal() {}
  union {
    LeaveWordCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveWordCreateRequestDefaultTypeInternal _LeaveWordCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR LeaveWordIndexResponse_Item::LeaveWordIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.published_at_)*/nullptr
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.editor_)*/0
  , /*decltype(_impl_.status_)*/0} {}
struct LeaveWordIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveWordIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveWordIndexResponse_ItemDefaultTypeInternal() {}
  union {
    LeaveWordIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveWordIndexResponse_ItemDefaultTypeInternal _LeaveWordIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR LeaveWordIndexResponse::LeaveWordIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveWordIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveWordIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveWordIndexResponseDefaultTypeInternal() {}
  union {
    LeaveWordIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveWordIndexResponseDefaultTypeInternal _LeaveWordIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Redis::SiteStatusResponse_Redis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_RedisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_RedisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_RedisDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Redis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_RedisDefaultTypeInternal _SiteStatusResponse_Redis_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.versions_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_PostgreSqlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSqlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_PostgreSqlDefaultTypeInternal() {}
  union {
    SiteStatusResponse_PostgreSql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_PostgreSqlDefaultTypeInternal _SiteStatusResponse_PostgreSql_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plugins_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_OpenSearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_OpenSearchDefaultTypeInternal() {}
  union {
    SiteStatusResponse_OpenSearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_OpenSearchDefaultTypeInternal _SiteStatusResponse_OpenSearch_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse::SiteStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.postgresql_)*/nullptr
  , /*decltype(_impl_.redis_)*/nullptr
  , /*decltype(_impl_.opensearch_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponseDefaultTypeInternal() {}
  union {
    SiteStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponseDefaultTypeInternal _SiteStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR SiteIndexNowAccount_WebSiteVerify::SiteIndexNowAccount_WebSiteVerify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteIndexNowAccount_WebSiteVerifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteIndexNowAccount_WebSiteVerifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteIndexNowAccount_WebSiteVerifyDefaultTypeInternal() {}
  union {
    SiteIndexNowAccount_WebSiteVerify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteIndexNowAccount_WebSiteVerifyDefaultTypeInternal _SiteIndexNowAccount_WebSiteVerify_default_instance_;
PROTOBUF_CONSTEXPR SiteIndexNowAccount::SiteIndexNowAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.web_site_verify_)*/nullptr} {}
struct SiteIndexNowAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteIndexNowAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteIndexNowAccountDefaultTypeInternal() {}
  union {
    SiteIndexNowAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteIndexNowAccountDefaultTypeInternal _SiteIndexNowAccount_default_instance_;
PROTOBUF_CONSTEXPR SiteGoogleAccount_WebSiteVerify::SiteGoogleAccount_WebSiteVerify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteGoogleAccount_WebSiteVerifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteGoogleAccount_WebSiteVerifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteGoogleAccount_WebSiteVerifyDefaultTypeInternal() {}
  union {
    SiteGoogleAccount_WebSiteVerify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteGoogleAccount_WebSiteVerifyDefaultTypeInternal _SiteGoogleAccount_WebSiteVerify_default_instance_;
PROTOBUF_CONSTEXPR SiteGoogleAccount_ReCaptcha::SiteGoogleAccount_ReCaptcha(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.site_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteGoogleAccount_ReCaptchaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteGoogleAccount_ReCaptchaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteGoogleAccount_ReCaptchaDefaultTypeInternal() {}
  union {
    SiteGoogleAccount_ReCaptcha _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteGoogleAccount_ReCaptchaDefaultTypeInternal _SiteGoogleAccount_ReCaptcha_default_instance_;
PROTOBUF_CONSTEXPR SiteGoogleAccount::SiteGoogleAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.web_site_verify_)*/nullptr
  , /*decltype(_impl_.re_captcha_)*/nullptr} {}
struct SiteGoogleAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteGoogleAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteGoogleAccountDefaultTypeInternal() {}
  union {
    SiteGoogleAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteGoogleAccountDefaultTypeInternal _SiteGoogleAccount_default_instance_;
PROTOBUF_CONSTEXPR SiteBaiduAccount_WebSiteVerify::SiteBaiduAccount_WebSiteVerify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteBaiduAccount_WebSiteVerifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteBaiduAccount_WebSiteVerifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteBaiduAccount_WebSiteVerifyDefaultTypeInternal() {}
  union {
    SiteBaiduAccount_WebSiteVerify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteBaiduAccount_WebSiteVerifyDefaultTypeInternal _SiteBaiduAccount_WebSiteVerify_default_instance_;
PROTOBUF_CONSTEXPR SiteBaiduAccount::SiteBaiduAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.web_site_verify_)*/nullptr} {}
struct SiteBaiduAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteBaiduAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteBaiduAccountDefaultTypeInternal() {}
  union {
    SiteBaiduAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteBaiduAccountDefaultTypeInternal _SiteBaiduAccount_default_instance_;
PROTOBUF_CONSTEXPR SiteGetInfoByLangRequest::SiteGetInfoByLangRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteGetInfoByLangRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteGetInfoByLangRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteGetInfoByLangRequestDefaultTypeInternal() {}
  union {
    SiteGetInfoByLangRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteGetInfoByLangRequestDefaultTypeInternal _SiteGetInfoByLangRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteGetInfoByLangResponse::SiteGetInfoByLangResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subhead_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.copyright_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteGetInfoByLangResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteGetInfoByLangResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteGetInfoByLangResponseDefaultTypeInternal() {}
  union {
    SiteGetInfoByLangResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteGetInfoByLangResponseDefaultTypeInternal _SiteGetInfoByLangResponse_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse_Author::SiteLayoutResponse_Author(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutResponse_AuthorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponse_AuthorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponse_AuthorDefaultTypeInternal() {}
  union {
    SiteLayoutResponse_Author _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponse_AuthorDefaultTypeInternal _SiteLayoutResponse_Author_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse_CnGab::SiteLayoutResponse_CnGab(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutResponse_CnGabDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponse_CnGabDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponse_CnGabDefaultTypeInternal() {}
  union {
    SiteLayoutResponse_CnGab _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponse_CnGabDefaultTypeInternal _SiteLayoutResponse_CnGab_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse_CnIcp::SiteLayoutResponse_CnIcp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutResponse_CnIcpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponse_CnIcpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponse_CnIcpDefaultTypeInternal() {}
  union {
    SiteLayoutResponse_CnIcp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponse_CnIcpDefaultTypeInternal _SiteLayoutResponse_CnIcp_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse::SiteLayoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keywords_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subhead_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.copyright_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.languages_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_.cn_icp_)*/nullptr
  , /*decltype(_impl_.cn_gab_)*/nullptr} {}
struct SiteLayoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponseDefaultTypeInternal() {}
  union {
    SiteLayoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponseDefaultTypeInternal _SiteLayoutResponse_default_instance_;
PROTOBUF_CONSTEXPR SiteInfoRequest::SiteInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subhead_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.copyright_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteInfoRequestDefaultTypeInternal() {}
  union {
    SiteInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteInfoRequestDefaultTypeInternal _SiteInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteKeywordsRequest::SiteKeywordsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteKeywordsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteKeywordsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteKeywordsRequestDefaultTypeInternal() {}
  union {
    SiteKeywordsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteKeywordsRequestDefaultTypeInternal _SiteKeywordsRequest_default_instance_;
}  // namespace v1
}  // namespace balsam
}  // namespace palm
static ::_pb::Metadata file_level_metadata_balsam_2eproto[74];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_balsam_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_balsam_2eproto = nullptr;

const uint32_t TableStruct_balsam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::IdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::IdRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UidRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UidRequest, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::Pager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::Pager, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::Pager, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesPlainMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesPlainMessage, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesCodeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesCodeMessage, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesCodeMessage, _impl_.salt_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.key_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.issuer_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.audiences_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.not_before_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.expires_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.extra_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignResponse, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyRequest, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyRequest, _impl_.issuer_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyRequest, _impl_.audience_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_.jwt_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_.key_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_.extra_),
  ~0u,
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacSignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacSignRequest, _impl_.plain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacSignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacSignResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacSignResponse, _impl_.salt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacVerifyRequest, _impl_.plain_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacVerifyRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacVerifyRequest, _impl_.salt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserUpdateProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserUpdateProfileRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserUpdateProfileRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserUpdateProfileRequest, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.sign_in_count_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.lockeda_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse_Item, _impl_.updated_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  0,
  3,
  1,
  4,
  5,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserIndexResponse, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LogsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LogsRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LogsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LogsRequest, _impl_.size_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _impl_.plugin_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _impl_.resource_type_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _impl_.resource_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse_Item, _impl_.created_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserLogsResponse, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserByEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserByEmailRequest, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserByNicknameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserByNicknameRequest, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_.avatar_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_.confirmed_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse_Item, _impl_.updated_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::EmailUserIndexResponse, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserResetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserResetPasswordRequest, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserResetPasswordRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserByEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserByEmailRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserByEmailRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserByTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserByTokenRequest, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmailRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmailRequest, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmailRequest, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmailRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignUpByEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignUpByEmailRequest, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignUpByEmailRequest, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignUpByEmailRequest, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignUpByEmailRequest, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignUpByEmailRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignUpByEmailRequest, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignUpByEmailRequest, _impl_.home_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignUpByEmailRequest, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.avatar_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.provider_type_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.provider_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.has_email_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.has_phone_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.has_google_oauth2_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.has_wechat_oauth2_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.has_wechat_mini_program_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Detail, _impl_.has_facebook_oauth2_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Permission, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Permission, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Permission, _impl_.resource_type_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Permission, _impl_.resource_id_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Menu, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Menu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Menu, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Menu, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Menu, _impl_.icon_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse_Menu, _impl_.menus_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse, _impl_.detail_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse, _impl_.roles_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse, _impl_.permissions_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse, _impl_.menus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserBySubjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserBySubjectRequest, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.email_verified_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.picture_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.locale_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, _impl_.updated_at_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::GoogleOauth2UserIndexResponse, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatByUnionIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatByUnionIdRequest, _impl_.union_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, _impl_.open_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.open_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.sex_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.city_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.head_img_url_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.privilege_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.picture_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, _impl_.updated_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatOauth2UserIndexResponse, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_.open_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_.avatar_url_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, _impl_.updated_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::WechatMiniProgramUserIndexResponse, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _impl_.provider_type_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _impl_.provider_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _impl_.expires_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse_Item, _impl_.created_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SessionIndexResponse, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentCreateRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentCreateRequest, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentCreateRequest, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentCreateRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentCreateRequest, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentCreateRequest, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentCreateRequest, _impl_.public__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentByResourceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentByResourceRequest, _impl_.resource_type_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentByResourceRequest, _impl_.resource_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentSetTitleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentSetTitleRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentSetTitleRequest, _impl_.title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentShowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentShowResponse, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.public__),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.published_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse_Item, _impl_.updated_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AttachmentIndexResponse, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleSetRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleSetRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleSetRequest, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleIndexResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleIndexResponse_Item, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleIndexResponse, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleByLangRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LocaleByLangRequest, _impl_.lang_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordCreateRequest, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordCreateRequest, _impl_.editor_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_.editor_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_.published_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse_Item, _impl_.updated_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::LeaveWordIndexResponse, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse_Redis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse_Redis, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse_Redis, _impl_.nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse_PostgreSql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse_PostgreSql, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse_PostgreSql, _impl_.versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse_OpenSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse_OpenSearch, _impl_.plugins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse, _impl_.postgresql_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse, _impl_.redis_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteStatusResponse, _impl_.opensearch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteIndexNowAccount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteIndexNowAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteIndexNowAccount, _impl_.web_site_verify_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGoogleAccount_ReCaptcha, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGoogleAccount_ReCaptcha, _impl_.site_key_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGoogleAccount_ReCaptcha, _impl_.secret_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGoogleAccount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGoogleAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGoogleAccount, _impl_.web_site_verify_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGoogleAccount, _impl_.re_captcha_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteBaiduAccount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteBaiduAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteBaiduAccount, _impl_.web_site_verify_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGetInfoByLangRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGetInfoByLangRequest, _impl_.lang_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGetInfoByLangResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGetInfoByLangResponse, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGetInfoByLangResponse, _impl_.subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGetInfoByLangResponse, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteGetInfoByLangResponse, _impl_.copyright_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse_Author, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse_Author, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse_Author, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse_CnGab, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse_CnGab, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse_CnGab, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse_CnIcp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse_CnIcp, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.copyright_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.keywords_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.cn_icp_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.cn_gab_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.languages_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteLayoutResponse, _impl_.version_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteInfoRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteInfoRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteInfoRequest, _impl_.subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteInfoRequest, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteInfoRequest, _impl_.copyright_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteKeywordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::SiteKeywordsRequest, _impl_.items_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::balsam::v1::IdRequest)},
  { 7, -1, -1, sizeof(::palm::balsam::v1::UidRequest)},
  { 14, -1, -1, sizeof(::palm::balsam::v1::Pager)},
  { 22, -1, -1, sizeof(::palm::balsam::v1::AesPlainMessage)},
  { 29, -1, -1, sizeof(::palm::balsam::v1::AesCodeMessage)},
  { 37, 50, -1, sizeof(::palm::balsam::v1::JwtSignRequest)},
  { 57, -1, -1, sizeof(::palm::balsam::v1::JwtSignResponse)},
  { 64, -1, -1, sizeof(::palm::balsam::v1::JwtVerifyRequest)},
  { 73, 83, -1, sizeof(::palm::balsam::v1::JwtVerifyResponse)},
  { 87, -1, -1, sizeof(::palm::balsam::v1::HMacSignRequest)},
  { 94, -1, -1, sizeof(::palm::balsam::v1::HMacSignResponse)},
  { 102, -1, -1, sizeof(::palm::balsam::v1::HMacVerifyRequest)},
  { 111, -1, -1, sizeof(::palm::balsam::v1::UserUpdateProfileRequest)},
  { 120, 138, -1, sizeof(::palm::balsam::v1::UserIndexResponse_Item)},
  { 150, -1, -1, sizeof(::palm::balsam::v1::UserIndexResponse)},
  { 158, 167, -1, sizeof(::palm::balsam::v1::LogsRequest)},
  { 170, 184, -1, sizeof(::palm::balsam::v1::UserLogsResponse_Item)},
  { 192, -1, -1, sizeof(::palm::balsam::v1::UserLogsResponse)},
  { 200, -1, -1, sizeof(::palm::balsam::v1::EmailUserByEmailRequest)},
  { 207, -1, -1, sizeof(::palm::balsam::v1::EmailUserByNicknameRequest)},
  { 214, 229, -1, sizeof(::palm::balsam::v1::EmailUserIndexResponse_Item)},
  { 238, -1, -1, sizeof(::palm::balsam::v1::EmailUserIndexResponse)},
  { 246, -1, -1, sizeof(::palm::balsam::v1::UserResetPasswordRequest)},
  { 254, -1, -1, sizeof(::palm::balsam::v1::UserByEmailRequest)},
  { 263, -1, -1, sizeof(::palm::balsam::v1::UserByTokenRequest)},
  { 270, -1, -1, sizeof(::palm::balsam::v1::UserSignInByEmailRequest)},
  { 281, -1, -1, sizeof(::palm::balsam::v1::UserSignUpByEmailRequest)},
  { 295, 313, -1, sizeof(::palm::balsam::v1::UserSignInResponse_Detail)},
  { 325, 334, -1, sizeof(::palm::balsam::v1::UserSignInResponse_Permission)},
  { 337, 347, -1, sizeof(::palm::balsam::v1::UserSignInResponse_Menu)},
  { 351, -1, -1, sizeof(::palm::balsam::v1::UserSignInResponse)},
  { 362, -1, -1, sizeof(::palm::balsam::v1::GoogleOauth2UserBySubjectRequest)},
  { 369, 385, -1, sizeof(::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item)},
  { 395, -1, -1, sizeof(::palm::balsam::v1::GoogleOauth2UserIndexResponse)},
  { 403, -1, -1, sizeof(::palm::balsam::v1::WechatByUnionIdRequest)},
  { 410, -1, -1, sizeof(::palm::balsam::v1::WechatByAppIdAndOpenIdRequest)},
  { 418, 440, -1, sizeof(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item)},
  { 456, -1, -1, sizeof(::palm::balsam::v1::WechatOauth2UserIndexResponse)},
  { 464, 479, -1, sizeof(::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item)},
  { 488, -1, -1, sizeof(::palm::balsam::v1::WechatMiniProgramUserIndexResponse)},
  { 496, 510, -1, sizeof(::palm::balsam::v1::SessionIndexResponse_Item)},
  { 518, -1, -1, sizeof(::palm::balsam::v1::SessionIndexResponse)},
  { 526, -1, -1, sizeof(::palm::balsam::v1::AttachmentCreateRequest)},
  { 539, -1, -1, sizeof(::palm::balsam::v1::AttachmentByResourceRequest)},
  { 547, -1, -1, sizeof(::palm::balsam::v1::AttachmentSetTitleRequest)},
  { 555, -1, -1, sizeof(::palm::balsam::v1::AttachmentShowResponse)},
  { 562, 578, -1, sizeof(::palm::balsam::v1::AttachmentIndexResponse_Item)},
  { 588, -1, -1, sizeof(::palm::balsam::v1::AttachmentIndexResponse)},
  { 596, -1, -1, sizeof(::palm::balsam::v1::LocaleSetRequest)},
  { 605, -1, -1, sizeof(::palm::balsam::v1::LocaleIndexResponse_Item)},
  { 616, -1, -1, sizeof(::palm::balsam::v1::LocaleIndexResponse)},
  { 624, -1, -1, sizeof(::palm::balsam::v1::LocaleByLangRequest)},
  { 631, -1, -1, sizeof(::palm::balsam::v1::LeaveWordCreateRequest)},
  { 639, 654, -1, sizeof(::palm::balsam::v1::LeaveWordIndexResponse_Item)},
  { 663, -1, -1, sizeof(::palm::balsam::v1::LeaveWordIndexResponse)},
  { 671, -1, -1, sizeof(::palm::balsam::v1::SiteStatusResponse_Redis)},
  { 679, -1, -1, sizeof(::palm::balsam::v1::SiteStatusResponse_PostgreSql)},
  { 687, -1, -1, sizeof(::palm::balsam::v1::SiteStatusResponse_OpenSearch)},
  { 694, -1, -1, sizeof(::palm::balsam::v1::SiteStatusResponse)},
  { 703, -1, -1, sizeof(::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify)},
  { 710, 717, -1, sizeof(::palm::balsam::v1::SiteIndexNowAccount)},
  { 718, -1, -1, sizeof(::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify)},
  { 725, -1, -1, sizeof(::palm::balsam::v1::SiteGoogleAccount_ReCaptcha)},
  { 733, 741, -1, sizeof(::palm::balsam::v1::SiteGoogleAccount)},
  { 743, -1, -1, sizeof(::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify)},
  { 751, 758, -1, sizeof(::palm::balsam::v1::SiteBaiduAccount)},
  { 759, -1, -1, sizeof(::palm::balsam::v1::SiteGetInfoByLangRequest)},
  { 766, -1, -1, sizeof(::palm::balsam::v1::SiteGetInfoByLangResponse)},
  { 776, -1, -1, sizeof(::palm::balsam::v1::SiteLayoutResponse_Author)},
  { 784, -1, -1, sizeof(::palm::balsam::v1::SiteLayoutResponse_CnGab)},
  { 792, -1, -1, sizeof(::palm::balsam::v1::SiteLayoutResponse_CnIcp)},
  { 799, 816, -1, sizeof(::palm::balsam::v1::SiteLayoutResponse)},
  { 827, -1, -1, sizeof(::palm::balsam::v1::SiteInfoRequest)},
  { 838, -1, -1, sizeof(::palm::balsam::v1::SiteKeywordsRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::balsam::v1::_IdRequest_default_instance_._instance,
  &::palm::balsam::v1::_UidRequest_default_instance_._instance,
  &::palm::balsam::v1::_Pager_default_instance_._instance,
  &::palm::balsam::v1::_AesPlainMessage_default_instance_._instance,
  &::palm::balsam::v1::_AesCodeMessage_default_instance_._instance,
  &::palm::balsam::v1::_JwtSignRequest_default_instance_._instance,
  &::palm::balsam::v1::_JwtSignResponse_default_instance_._instance,
  &::palm::balsam::v1::_JwtVerifyRequest_default_instance_._instance,
  &::palm::balsam::v1::_JwtVerifyResponse_default_instance_._instance,
  &::palm::balsam::v1::_HMacSignRequest_default_instance_._instance,
  &::palm::balsam::v1::_HMacSignResponse_default_instance_._instance,
  &::palm::balsam::v1::_HMacVerifyRequest_default_instance_._instance,
  &::palm::balsam::v1::_UserUpdateProfileRequest_default_instance_._instance,
  &::palm::balsam::v1::_UserIndexResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_UserIndexResponse_default_instance_._instance,
  &::palm::balsam::v1::_LogsRequest_default_instance_._instance,
  &::palm::balsam::v1::_UserLogsResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_UserLogsResponse_default_instance_._instance,
  &::palm::balsam::v1::_EmailUserByEmailRequest_default_instance_._instance,
  &::palm::balsam::v1::_EmailUserByNicknameRequest_default_instance_._instance,
  &::palm::balsam::v1::_EmailUserIndexResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_EmailUserIndexResponse_default_instance_._instance,
  &::palm::balsam::v1::_UserResetPasswordRequest_default_instance_._instance,
  &::palm::balsam::v1::_UserByEmailRequest_default_instance_._instance,
  &::palm::balsam::v1::_UserByTokenRequest_default_instance_._instance,
  &::palm::balsam::v1::_UserSignInByEmailRequest_default_instance_._instance,
  &::palm::balsam::v1::_UserSignUpByEmailRequest_default_instance_._instance,
  &::palm::balsam::v1::_UserSignInResponse_Detail_default_instance_._instance,
  &::palm::balsam::v1::_UserSignInResponse_Permission_default_instance_._instance,
  &::palm::balsam::v1::_UserSignInResponse_Menu_default_instance_._instance,
  &::palm::balsam::v1::_UserSignInResponse_default_instance_._instance,
  &::palm::balsam::v1::_GoogleOauth2UserBySubjectRequest_default_instance_._instance,
  &::palm::balsam::v1::_GoogleOauth2UserIndexResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_GoogleOauth2UserIndexResponse_default_instance_._instance,
  &::palm::balsam::v1::_WechatByUnionIdRequest_default_instance_._instance,
  &::palm::balsam::v1::_WechatByAppIdAndOpenIdRequest_default_instance_._instance,
  &::palm::balsam::v1::_WechatOauth2UserIndexResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_WechatOauth2UserIndexResponse_default_instance_._instance,
  &::palm::balsam::v1::_WechatMiniProgramUserIndexResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_WechatMiniProgramUserIndexResponse_default_instance_._instance,
  &::palm::balsam::v1::_SessionIndexResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_SessionIndexResponse_default_instance_._instance,
  &::palm::balsam::v1::_AttachmentCreateRequest_default_instance_._instance,
  &::palm::balsam::v1::_AttachmentByResourceRequest_default_instance_._instance,
  &::palm::balsam::v1::_AttachmentSetTitleRequest_default_instance_._instance,
  &::palm::balsam::v1::_AttachmentShowResponse_default_instance_._instance,
  &::palm::balsam::v1::_AttachmentIndexResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_AttachmentIndexResponse_default_instance_._instance,
  &::palm::balsam::v1::_LocaleSetRequest_default_instance_._instance,
  &::palm::balsam::v1::_LocaleIndexResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_LocaleIndexResponse_default_instance_._instance,
  &::palm::balsam::v1::_LocaleByLangRequest_default_instance_._instance,
  &::palm::balsam::v1::_LeaveWordCreateRequest_default_instance_._instance,
  &::palm::balsam::v1::_LeaveWordIndexResponse_Item_default_instance_._instance,
  &::palm::balsam::v1::_LeaveWordIndexResponse_default_instance_._instance,
  &::palm::balsam::v1::_SiteStatusResponse_Redis_default_instance_._instance,
  &::palm::balsam::v1::_SiteStatusResponse_PostgreSql_default_instance_._instance,
  &::palm::balsam::v1::_SiteStatusResponse_OpenSearch_default_instance_._instance,
  &::palm::balsam::v1::_SiteStatusResponse_default_instance_._instance,
  &::palm::balsam::v1::_SiteIndexNowAccount_WebSiteVerify_default_instance_._instance,
  &::palm::balsam::v1::_SiteIndexNowAccount_default_instance_._instance,
  &::palm::balsam::v1::_SiteGoogleAccount_WebSiteVerify_default_instance_._instance,
  &::palm::balsam::v1::_SiteGoogleAccount_ReCaptcha_default_instance_._instance,
  &::palm::balsam::v1::_SiteGoogleAccount_default_instance_._instance,
  &::palm::balsam::v1::_SiteBaiduAccount_WebSiteVerify_default_instance_._instance,
  &::palm::balsam::v1::_SiteBaiduAccount_default_instance_._instance,
  &::palm::balsam::v1::_SiteGetInfoByLangRequest_default_instance_._instance,
  &::palm::balsam::v1::_SiteGetInfoByLangResponse_default_instance_._instance,
  &::palm::balsam::v1::_SiteLayoutResponse_Author_default_instance_._instance,
  &::palm::balsam::v1::_SiteLayoutResponse_CnGab_default_instance_._instance,
  &::palm::balsam::v1::_SiteLayoutResponse_CnIcp_default_instance_._instance,
  &::palm::balsam::v1::_SiteLayoutResponse_default_instance_._instance,
  &::palm::balsam::v1::_SiteInfoRequest_default_instance_._instance,
  &::palm::balsam::v1::_SiteKeywordsRequest_default_instance_._instance,
};

const char descriptor_table_protodef_balsam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014balsam.proto\022\016palm.balsam.v1\032\033google/p"
  "rotobuf/empty.proto\032\036google/protobuf/dur"
  "ation.proto\032\037google/protobuf/timestamp.p"
  "roto\"\027\n\tIdRequest\022\n\n\002id\030\001 \001(\004\"\031\n\nUidRequ"
  "est\022\013\n\003uid\030\001 \001(\t\"#\n\005Pager\022\014\n\004page\030\001 \001(\004\022"
  "\014\n\004size\030\002 \001(\004\"\"\n\017AesPlainMessage\022\017\n\007payl"
  "oad\030\001 \001(\014\"/\n\016AesCodeMessage\022\017\n\007payload\030\001"
  " \001(\014\022\014\n\004salt\030\002 \001(\014\"\342\001\n\016JwtSignRequest\022\023\n"
  "\006key_id\030\001 \001(\tH\000\210\001\001\022\016\n\006issuer\030\013 \001(\t\022\017\n\007su"
  "bject\030\014 \001(\t\022\021\n\taudiences\030\r \003(\t\022.\n\nnot_be"
  "fore\030\022 \001(\0132\032.google.protobuf.Timestamp\022."
  "\n\nexpires_at\030\023 \001(\0132\032.google.protobuf.Tim"
  "estamp\022\022\n\005extra\030c \001(\tH\001\210\001\001B\t\n\007_key_idB\010\n"
  "\006_extra\" \n\017JwtSignResponse\022\r\n\005token\030\001 \001("
  "\t\"C\n\020JwtVerifyRequest\022\r\n\005token\030\001 \001(\t\022\016\n\006"
  "issuer\030\002 \001(\t\022\020\n\010audience\030\003 \001(\t\"r\n\021JwtVer"
  "ifyResponse\022\016\n\006jwt_id\030\001 \001(\t\022\023\n\006key_id\030\002 "
  "\001(\tH\000\210\001\001\022\017\n\007subject\030\013 \001(\t\022\022\n\005extra\030\023 \001(\t"
  "H\001\210\001\001B\t\n\007_key_idB\010\n\006_extra\" \n\017HMacSignRe"
  "quest\022\r\n\005plain\030\001 \001(\014\".\n\020HMacSignResponse"
  "\022\014\n\004code\030\001 \001(\014\022\014\n\004salt\030\002 \001(\014\">\n\021HMacVeri"
  "fyRequest\022\r\n\005plain\030\001 \001(\014\022\014\n\004code\030\002 \001(\014\022\014"
  "\n\004salt\030\003 \001(\014\"H\n\030UserUpdateProfileRequest"
  "\022\014\n\004user\030\001 \001(\004\022\014\n\004lang\030\002 \001(\t\022\020\n\010timezone"
  "\030\003 \001(\t\"\366\004\n\021UserIndexResponse\0225\n\005items\030\001 "
  "\003(\0132&.palm.balsam.v1.UserIndexResponse.I"
  "tem\022\r\n\005total\030\t \001(\004\032\232\004\n\004Item\022\n\n\002id\030\001 \001(\004\022"
  "\013\n\003uid\030\002 \001(\t\022\014\n\004lang\030\003 \001(\t\022\020\n\010timezone\030\004"
  " \001(\t\022\025\n\rsign_in_count\030\005 \001(\r\022;\n\022current_s"
  "ign_in_at\030\006 \001(\0132\032.google.protobuf.Timest"
  "ampH\000\210\001\001\022\037\n\022current_sign_in_ip\030\007 \001(\tH\001\210\001"
  "\001\0228\n\017last_sign_in_at\030\010 \001(\0132\032.google.prot"
  "obuf.TimestampH\002\210\001\001\022\034\n\017last_sign_in_ip\030\t"
  " \001(\tH\003\210\001\001\0223\n\nlockeda_at\030\n \001(\0132\032.google.p"
  "rotobuf.TimestampH\004\210\001\001\0223\n\ndeleted_at\030\013 \001"
  "(\0132\032.google.protobuf.TimestampH\005\210\001\001\022.\n\nu"
  "pdated_at\030\014 \001(\0132\032.google.protobuf.Timest"
  "ampB\025\n\023_current_sign_in_atB\025\n\023_current_s"
  "ign_in_ipB\022\n\020_last_sign_in_atB\022\n\020_last_s"
  "ign_in_ipB\r\n\013_lockeda_atB\r\n\013_deleted_at\""
  "E\n\013LogsRequest\022\021\n\004user\030\001 \001(\004H\000\210\001\001\022\014\n\004pag"
  "e\030\013 \001(\004\022\014\n\004size\030\014 \001(\004B\007\n\005_user\"\371\002\n\020UserL"
  "ogsResponse\0224\n\005items\030\001 \003(\0132%.palm.balsam"
  ".v1.UserLogsResponse.Item\022\r\n\005total\030\t \001(\004"
  "\032\237\002\n\004Item\022\n\n\002id\030\001 \001(\004\022\016\n\006plugin\030\002 \001(\t\022\n\n"
  "\002ip\030\003 \001(\t\022:\n\005level\030\004 \001(\0162+.palm.balsam.v"
  "1.UserLogsResponse.Item.Level\022\025\n\rresourc"
  "e_type\030\005 \001(\t\022\030\n\013resource_id\030\006 \001(\004H\000\210\001\001\022\017"
  "\n\007message\030\007 \001(\t\022.\n\ncreated_at\030\010 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\"1\n\005Level\022\t\n\005Debu"
  "g\020\000\022\010\n\004Info\020\001\022\010\n\004Warn\020\002\022\t\n\005Error\020\003B\016\n\014_r"
  "esource_id\"(\n\027EmailUserByEmailRequest\022\r\n"
  "\005email\030\001 \001(\t\".\n\032EmailUserByNicknameReque"
  "st\022\020\n\010nickname\030\001 \001(\t\"\211\003\n\026EmailUserIndexR"
  "esponse\022:\n\005items\030\001 \003(\0132+.palm.balsam.v1."
  "EmailUserIndexResponse.Item\022\r\n\005total\030\002 \001"
  "(\004\032\243\002\n\004Item\022\n\n\002id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004"
  "\022\021\n\treal_name\030\003 \001(\t\022\020\n\010nickname\030\004 \001(\t\022\r\n"
  "\005email\030\005 \001(\t\022\016\n\006avatar\030\006 \001(\t\0225\n\014confirme"
  "d_at\030\007 \001(\0132\032.google.protobuf.TimestampH\000"
  "\210\001\001\0223\n\ndeleted_at\030\010 \001(\0132\032.google.protobu"
  "f.TimestampH\001\210\001\001\022.\n\nupdated_at\030\t \001(\0132\032.g"
  "oogle.protobuf.TimestampB\017\n\r_confirmed_a"
  "tB\r\n\013_deleted_at\";\n\030UserResetPasswordReq"
  "uest\022\r\n\005token\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"A\n"
  "\022UserByEmailRequest\022\017\n\005email\030\001 \001(\tH\000\022\022\n\010"
  "nickname\030\002 \001(\tH\000B\006\n\004user\"#\n\022UserByTokenR"
  "equest\022\r\n\005token\030\001 \001(\t\"\201\001\n\030UserSignInByEm"
  "ailRequest\022\017\n\005email\030\001 \001(\tH\000\022\022\n\010nickname\030"
  "\002 \001(\tH\000\022\020\n\010password\030\010 \001(\t\022&\n\003ttl\030\t \001(\0132\031"
  ".google.protobuf.DurationB\006\n\004user\"\266\001\n\030Us"
  "erSignUpByEmailRequest\022\021\n\treal_name\030\001 \001("
  "\t\022\r\n\005email\030\002 \001(\t\022\020\n\010nickname\030\003 \001(\t\022\020\n\010pa"
  "ssword\030\004 \001(\t\022\014\n\004lang\030\005 \001(\t\022\020\n\010timezone\030\006"
  " \001(\t\022\014\n\004home\030\007 \001(\t\022&\n\003ttl\030\t \001(\0132\031.google"
  ".protobuf.Duration\"\234\007\n\022UserSignInRespons"
  "e\022\r\n\005token\030\001 \001(\t\0229\n\006detail\030\002 \001(\0132).palm."
  "balsam.v1.UserSignInResponse.Detail\022\r\n\005r"
  "oles\030\013 \003(\t\022B\n\013permissions\030\014 \003(\0132-.palm.b"
  "alsam.v1.UserSignInResponse.Permission\0226"
  "\n\005menus\030\r \003(\0132\'.palm.balsam.v1.UserSignI"
  "nResponse.Menu\032\327\003\n\006Detail\022\021\n\004name\030\001 \001(\tH"
  "\000\210\001\001\022\023\n\006avatar\030\002 \001(\tH\001\210\001\001\022\014\n\004lang\030\003 \001(\t\022"
  "\020\n\010timezone\030\004 \001(\t\022M\n\rprovider_type\030\010 \001(\016"
  "26.palm.balsam.v1.UserSignInResponse.Det"
  "ail.ProviderType\022\023\n\013provider_id\030\t \001(\004\022\021\n"
  "\thas_email\030\013 \001(\010\022\021\n\thas_phone\030\014 \001(\010\022\031\n\021h"
  "as_google_oauth2\030\025 \001(\010\022\031\n\021has_wechat_oau"
  "th2\030\026 \001(\010\022\037\n\027has_wechat_mini_program\030\027 \001"
  "(\010\022\033\n\023has_facebook_oauth2\030\030 \001(\010\"s\n\014Provi"
  "derType\022\t\n\005Email\020\000\022\t\n\005Phone\020\001\022\020\n\014GoogleO"
  "auth2\020\013\022\020\n\014WechatOauth2\020\014\022\025\n\021WechatMiniP"
  "rogram\020\r\022\022\n\016FacebookOauth2\020\016B\007\n\005_nameB\t\n"
  "\007_avatar\032`\n\nPermission\022\021\n\toperation\030\001 \001("
  "\t\022\025\n\rresource_type\030\002 \001(\t\022\030\n\013resource_id\030"
  "\003 \001(\004H\000\210\001\001B\016\n\014_resource_id\032u\n\004Menu\022\r\n\005la"
  "bel\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022\021\n\004icon\030\003 \001(\tH\000\210\001\001"
  "\0226\n\005menus\030\t \003(\0132\'.palm.balsam.v1.UserSig"
  "nInResponse.MenuB\007\n\005_icon\"3\n GoogleOauth"
  "2UserBySubjectRequest\022\017\n\007subject\030\001 \001(\t\"\260"
  "\003\n\035GoogleOauth2UserIndexResponse\022A\n\005item"
  "s\030\001 \003(\01322.palm.balsam.v1.GoogleOauth2Use"
  "rIndexResponse.Item\022\r\n\005total\030\002 \001(\004\032\274\002\n\004I"
  "tem\022\n\n\002id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\017\n\007subj"
  "ect\030\003 \001(\t\022\022\n\005email\030\004 \001(\tH\000\210\001\001\022\026\n\016email_v"
  "erified\030\005 \001(\010\022\021\n\004name\030\006 \001(\tH\001\210\001\001\022\024\n\007pict"
  "ure\030\007 \001(\tH\002\210\001\001\022\023\n\006locale\030\010 \001(\tH\003\210\001\001\0223\n\nd"
  "eleted_at\030\t \001(\0132\032.google.protobuf.Timest"
  "ampH\004\210\001\001\022.\n\nupdated_at\030\n \001(\0132\032.google.pr"
  "otobuf.TimestampB\010\n\006_emailB\007\n\005_nameB\n\n\010_"
  "pictureB\t\n\007_localeB\r\n\013_deleted_at\"*\n\026Wec"
  "hatByUnionIdRequest\022\020\n\010union_id\030\001 \001(\t\"@\n"
  "\035WechatByAppIdAndOpenIdRequest\022\016\n\006app_id"
  "\030\001 \001(\t\022\017\n\007open_id\030\002 \001(\t\"\243\005\n\035WechatOauth2"
  "UserIndexResponse\022A\n\005items\030\001 \003(\01322.palm."
  "balsam.v1.WechatOauth2UserIndexResponse."
  "Item\022\r\n\005total\030\002 \001(\004\032\257\004\n\004Item\022\n\n\002id\030\001 \001(\004"
  "\022\017\n\007user_id\030\002 \001(\004\022\020\n\010union_id\030\003 \001(\t\022\016\n\006a"
  "pp_id\030\004 \001(\t\022\017\n\007open_id\030\005 \001(\t\022\020\n\010nickname"
  "\030\006 \001(\t\022C\n\003sex\030\007 \001(\01626.palm.balsam.v1.Wec"
  "hatOauth2UserIndexResponse.Item.Sex\022\014\n\004c"
  "ity\030\010 \001(\t\022\020\n\010province\030\t \001(\t\022\017\n\007country\030\n"
  " \001(\t\022\031\n\014head_img_url\030\013 \001(\tH\000\210\001\001\022\021\n\tprivi"
  "lege\030\014 \003(\t\022\024\n\007picture\030\r \001(\tH\001\210\001\001\022E\n\004lang"
  "\030\016 \001(\01627.palm.balsam.v1.WechatOauth2User"
  "IndexResponse.Item.Lang\0223\n\ndeleted_at\030\017 "
  "\001(\0132\032.google.protobuf.TimestampH\002\210\001\001\022.\n\n"
  "updated_at\030\020 \001(\0132\032.google.protobuf.Times"
  "tamp\"\033\n\003Sex\022\010\n\004Male\020\000\022\n\n\006Female\020\001\"\026\n\004Lan"
  "g\022\006\n\002Cn\020\000\022\006\n\002En\020\001B\017\n\r_head_img_urlB\n\n\010_p"
  "ictureB\r\n\013_deleted_at\"\224\003\n\"WechatMiniProg"
  "ramUserIndexResponse\022F\n\005items\030\001 \003(\01327.pa"
  "lm.balsam.v1.WechatMiniProgramUserIndexR"
  "esponse.Item\022\r\n\005total\030\002 \001(\004\032\226\002\n\004Item\022\n\n\002"
  "id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\020\n\010union_id\030\003 "
  "\001(\t\022\016\n\006app_id\030\004 \001(\t\022\017\n\007open_id\030\005 \001(\t\022\025\n\010"
  "nickname\030\006 \001(\tH\000\210\001\001\022\027\n\navatar_url\030\007 \001(\tH"
  "\001\210\001\001\0223\n\ndeleted_at\030\010 \001(\0132\032.google.protob"
  "uf.TimestampH\002\210\001\001\022.\n\nupdated_at\030\t \001(\0132\032."
  "google.protobuf.TimestampB\013\n\t_nicknameB\r"
  "\n\013_avatar_urlB\r\n\013_deleted_at\"\227\003\n\024Session"
  "IndexResponse\0228\n\005items\030\001 \003(\0132).palm.bals"
  "am.v1.SessionIndexResponse.Item\022\r\n\005total"
  "\030\002 \001(\004\032\265\002\n\004Item\022\014\n\004user\030\001 \001(\004\022\013\n\003uid\030\002 \001"
  "(\t\022M\n\rprovider_type\030\003 \001(\01626.palm.balsam."
  "v1.UserSignInResponse.Detail.ProviderTyp"
  "e\022\023\n\013provider_id\030\004 \001(\004\022\n\n\002ip\030\005 \001(\t\022.\n\nex"
  "pires_at\030\006 \001(\0132\032.google.protobuf.Timesta"
  "mp\0223\n\ndeleted_at\030\007 \001(\0132\032.google.protobuf"
  ".TimestampH\000\210\001\001\022.\n\ncreated_at\030\010 \001(\0132\032.go"
  "ogle.protobuf.TimestampB\r\n\013_deleted_at\"\212"
  "\001\n\027AttachmentCreateRequest\022\014\n\004user\030\001 \001(\004"
  "\022\016\n\006bucket\030\002 \001(\t\022\016\n\006object\030\003 \001(\t\022\r\n\005titl"
  "e\030\004 \001(\t\022\014\n\004size\030\005 \001(\004\022\024\n\014content_type\030\006 "
  "\001(\t\022\016\n\006public\030\t \001(\010\"I\n\033AttachmentByResou"
  "rceRequest\022\025\n\rresource_type\030\001 \001(\t\022\023\n\013res"
  "ource_id\030\002 \001(\004\"6\n\031AttachmentSetTitleRequ"
  "est\022\n\n\002id\030\001 \001(\004\022\r\n\005title\030\002 \001(\t\"%\n\026Attach"
  "mentShowResponse\022\013\n\003url\030\001 \001(\t\"\233\003\n\027Attach"
  "mentIndexResponse\022;\n\005items\030\001 \003(\0132,.palm."
  "balsam.v1.AttachmentIndexResponse.Item\022\r"
  "\n\005total\030\002 \001(\004\032\263\002\n\004Item\022\014\n\004user\030\001 \001(\004\022\016\n\006"
  "bucket\030\002 \001(\t\022\016\n\006object\030\003 \001(\t\022\r\n\005title\030\004 "
  "\001(\t\022\014\n\004size\030\005 \001(\004\022\024\n\014content_type\030\006 \001(\t\022"
  "\016\n\006public\030\007 \001(\010\0225\n\014published_at\030\010 \001(\0132\032."
  "google.protobuf.TimestampH\000\210\001\001\0223\n\ndelete"
  "d_at\030\t \001(\0132\032.google.protobuf.TimestampH\001"
  "\210\001\001\022.\n\nupdated_at\030\n \001(\0132\032.google.protobu"
  "f.TimestampB\017\n\r_published_atB\r\n\013_deleted"
  "_at\"\?\n\020LocaleSetRequest\022\014\n\004lang\030\001 \001(\t\022\014\n"
  "\004code\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"\316\001\n\023LocaleI"
  "ndexResponse\0227\n\005items\030\001 \003(\0132(.palm.balsa"
  "m.v1.LocaleIndexResponse.Item\022\r\n\005total\030\002"
  " \001(\004\032o\n\004Item\022\n\n\002id\030\001 \001(\004\022\014\n\004lang\030\002 \001(\t\022\014"
  "\n\004code\030\003 \001(\t\022\017\n\007message\030\004 \001(\t\022.\n\nupdated"
  "_at\030\005 \001(\0132\032.google.protobuf.Timestamp\"#\n"
  "\023LocaleByLangRequest\022\014\n\004lang\030\001 \001(\t\"6\n\026Le"
  "aveWordCreateRequest\022\014\n\004body\030\001 \001(\t\022\016\n\006ed"
  "itor\030\002 \001(\t\"\362\003\n\026LeaveWordIndexResponse\0229\n"
  "\004item\030\001 \003(\0132+.palm.balsam.v1.LeaveWordIn"
  "dexResponse.Item\022\r\n\005total\030\002 \001(\004\032\215\003\n\004Item"
  "\022\n\n\002id\030\001 \001(\004\022\014\n\004lang\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014"
  "\n\004body\030\004 \001(\t\022+\n\006editor\030\005 \001(\0162\033.palm.bals"
  "am.v1.MediaEditor\022B\n\006status\030\006 \001(\01622.palm"
  ".balsam.v1.LeaveWordIndexResponse.Item.S"
  "tatus\0225\n\014published_at\030\007 \001(\0132\032.google.pro"
  "tobuf.TimestampH\000\210\001\001\0223\n\ndeleted_at\030\010 \001(\013"
  "2\032.google.protobuf.TimestampH\001\210\001\001\022.\n\nupd"
  "ated_at\030\t \001(\0132\032.google.protobuf.Timestam"
  "p\"$\n\006Status\022\013\n\007Pending\020\000\022\r\n\tCompleted\020\001B"
  "\017\n\r_published_atB\r\n\013_deleted_at\"\311\002\n\022Site"
  "StatusResponse\022A\n\npostgresql\030\001 \001(\0132-.pal"
  "m.balsam.v1.SiteStatusResponse.PostgreSq"
  "l\0227\n\005redis\030\002 \001(\0132(.palm.balsam.v1.SiteSt"
  "atusResponse.Redis\022A\n\nopensearch\030\003 \001(\0132-"
  ".palm.balsam.v1.SiteStatusResponse.OpenS"
  "earch\032$\n\005Redis\022\014\n\004info\030\001 \003(\t\022\r\n\005nodes\030\002 "
  "\003(\t\032/\n\nPostgreSql\022\017\n\007version\030\001 \001(\t\022\020\n\010ve"
  "rsions\030\002 \003(\t\032\035\n\nOpenSearch\022\017\n\007plugins\030\001 "
  "\001(\t\"\230\001\n\023SiteIndexNowAccount\022O\n\017web_site_"
  "verify\030\001 \001(\01321.palm.balsam.v1.SiteIndexN"
  "owAccount.WebSiteVerifyH\000\210\001\001\032\034\n\rWebSiteV"
  "erify\022\013\n\003key\030\001 \001(\tB\022\n\020_web_site_verify\"\231"
  "\002\n\021SiteGoogleAccount\022M\n\017web_site_verify\030"
  "\001 \001(\0132/.palm.balsam.v1.SiteGoogleAccount"
  ".WebSiteVerifyH\000\210\001\001\022D\n\nre_captcha\030\002 \001(\0132"
  "+.palm.balsam.v1.SiteGoogleAccount.ReCap"
  "tchaH\001\210\001\001\032\035\n\rWebSiteVerify\022\014\n\004code\030\001 \001(\t"
  "\032-\n\tReCaptcha\022\020\n\010site_key\030\001 \001(\t\022\016\n\006secre"
  "t\030\002 \001(\tB\022\n\020_web_site_verifyB\r\n\013_re_captc"
  "ha\"\244\001\n\020SiteBaiduAccount\022L\n\017web_site_veri"
  "fy\030\001 \001(\0132..palm.balsam.v1.SiteBaiduAccou"
  "nt.WebSiteVerifyH\000\210\001\001\032.\n\rWebSiteVerify\022\014"
  "\n\004code\030\001 \001(\t\022\017\n\007content\030\002 \001(\tB\022\n\020_web_si"
  "te_verify\"(\n\030SiteGetInfoByLangRequest\022\014\n"
  "\004lang\030\001 \001(\t\"c\n\031SiteGetInfoByLangResponse"
  "\022\r\n\005title\030\001 \001(\t\022\017\n\007subhead\030\002 \001(\t\022\023\n\013desc"
  "ription\030\003 \001(\t\022\021\n\tcopyright\030\004 \001(\t\"\322\003\n\022Sit"
  "eLayoutResponse\022\r\n\005title\030\001 \001(\t\022\017\n\007subhea"
  "d\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\021\n\tcopyrigh"
  "t\030\004 \001(\t\0229\n\006author\030\005 \001(\0132).palm.balsam.v1"
  ".SiteLayoutResponse.Author\022\020\n\010keywords\030\006"
  " \003(\t\022=\n\006cn_icp\030\013 \001(\0132(.palm.balsam.v1.Si"
  "teLayoutResponse.CnIcpH\000\210\001\001\022=\n\006cn_gab\030\014 "
  "\001(\0132(.palm.balsam.v1.SiteLayoutResponse."
  "CnGabH\001\210\001\001\022\014\n\004lang\030a \001(\t\022\021\n\tlanguages\030b "
  "\001(\t\022\017\n\007version\030c \001(\t\032%\n\006Author\022\014\n\004name\030\001"
  " \001(\t\022\r\n\005email\030\002 \001(\t\032#\n\005CnGab\022\014\n\004code\030\001 \001"
  "(\t\022\014\n\004name\030\002 \001(\t\032\025\n\005CnIcp\022\014\n\004code\030\001 \001(\tB"
  "\t\n\007_cn_icpB\t\n\007_cn_gab\"g\n\017SiteInfoRequest"
  "\022\014\n\004lang\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\017\n\007subhead"
  "\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\022\021\n\tcopyright"
  "\030\005 \001(\t\"$\n\023SiteKeywordsRequest\022\r\n\005items\030\001"
  " \003(\t*4\n\013MediaEditor\022\014\n\010Textarea\020\000\022\014\n\010Mar"
  "kdown\020\002\022\t\n\005Quill\020\0032\241\001\n\003Aes\022L\n\007Encrypt\022\037."
  "palm.balsam.v1.AesPlainMessage\032\036.palm.ba"
  "lsam.v1.AesCodeMessage\"\000\022L\n\007Decrypt\022\036.pa"
  "lm.balsam.v1.AesCodeMessage\032\037.palm.balsa"
  "m.v1.AesPlainMessage\"\0002\241\001\n\003Jwt\022I\n\004Sign\022\036"
  ".palm.balsam.v1.JwtSignRequest\032\037.palm.ba"
  "lsam.v1.JwtSignResponse\"\000\022O\n\006Verify\022 .pa"
  "lm.balsam.v1.JwtVerifyRequest\032!.palm.bal"
  "sam.v1.JwtVerifyResponse\"\0002\232\001\n\004HMac\022K\n\004S"
  "ign\022\037.palm.balsam.v1.HMacSignRequest\032 .p"
  "alm.balsam.v1.HMacSignResponse\"\000\022E\n\006Veri"
  "fy\022!.palm.balsam.v1.HMacVerifyRequest\032\026."
  "google.protobuf.Empty\"\0002\275\005\n\004User\022;\n\004Lock"
  "\022\031.palm.balsam.v1.IdRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022=\n\006Unlock\022\031.palm.balsam.v1"
  ".IdRequest\032\026.google.protobuf.Empty\"\000\022>\n\007"
  "Disable\022\031.palm.balsam.v1.IdRequest\032\026.goo"
  "gle.protobuf.Empty\"\000\022=\n\006Enable\022\031.palm.ba"
  "lsam.v1.IdRequest\032\026.google.protobuf.Empt"
  "y\"\000\022G\n\004Logs\022\033.palm.balsam.v1.LogsRequest"
  "\032 .palm.balsam.v1.UserLogsResponse\"\000\022;\n\007"
  "SignOut\022\026.google.protobuf.Empty\032\026.google"
  ".protobuf.Empty\"\000\022C\n\005Index\022\025.palm.balsam"
  ".v1.Pager\032!.palm.balsam.v1.UserIndexResp"
  "onse\"\000\022S\n\rUpdateProfile\022(.palm.balsam.v1"
  ".UserUpdateProfileRequest\032\026.google.proto"
  "buf.Empty\"\000\022K\n\004ById\022\031.palm.balsam.v1.IdR"
  "equest\032&.palm.balsam.v1.UserIndexRespons"
  "e.Item\"\000\022M\n\005ByUid\022\032.palm.balsam.v1.UidRe"
  "quest\032&.palm.balsam.v1.UserIndexResponse"
  ".Item\"\0002\311\t\n\tEmailUser\022X\n\006SignIn\022(.palm.b"
  "alsam.v1.UserSignInByEmailRequest\032\".palm"
  ".balsam.v1.UserSignInResponse\"\000\022X\n\006SignU"
  "p\022(.palm.balsam.v1.UserSignUpByEmailRequ"
  "est\032\".palm.balsam.v1.UserSignInResponse\""
  "\000\022N\n\016ConfirmByEmail\022\".palm.balsam.v1.Use"
  "rByEmailRequest\032\026.google.protobuf.Empty\""
  "\000\022N\n\016ConfirmByToken\022\".palm.balsam.v1.Use"
  "rByTokenRequest\032\026.google.protobuf.Empty\""
  "\000\022M\n\rUnlockByEmail\022\".palm.balsam.v1.User"
  "ByEmailRequest\032\026.google.protobuf.Empty\"\000"
  "\022M\n\rUnlockByToken\022\".palm.balsam.v1.UserB"
  "yTokenRequest\032\026.google.protobuf.Empty\"\000\022"
  "N\n\016ForgotPassword\022\".palm.balsam.v1.UserB"
  "yEmailRequest\032\026.google.protobuf.Empty\"\000\022"
  "S\n\rResetPassword\022(.palm.balsam.v1.UserRe"
  "setPasswordRequest\032\026.google.protobuf.Emp"
  "ty\"\000\022>\n\007Confirm\022\031.palm.balsam.v1.IdReque"
  "st\032\026.google.protobuf.Empty\"\000\022>\n\007Disable\022"
  "\031.palm.balsam.v1.IdRequest\032\026.google.prot"
  "obuf.Empty\"\000\022=\n\006Enable\022\031.palm.balsam.v1."
  "IdRequest\032\026.google.protobuf.Empty\"\000\022H\n\005I"
  "ndex\022\025.palm.balsam.v1.Pager\032&.palm.balsa"
  "m.v1.EmailUserIndexResponse\"\000\022P\n\004ById\022\031."
  "palm.balsam.v1.IdRequest\032+.palm.balsam.v"
  "1.EmailUserIndexResponse.Item\"\000\022g\n\nByNic"
  "kname\022*.palm.balsam.v1.EmailUserByNickna"
  "meRequest\032+.palm.balsam.v1.EmailUserInde"
  "xResponse.Item\"\000\022a\n\007ByEmail\022\'.palm.balsa"
  "m.v1.EmailUserByEmailRequest\032+.palm.bals"
  "am.v1.EmailUserIndexResponse.Item\"\0002\260\003\n\020"
  "GoogleOauth2User\022>\n\007Disable\022\031.palm.balsa"
  "m.v1.IdRequest\032\026.google.protobuf.Empty\"\000"
  "\022=\n\006Enable\022\031.palm.balsam.v1.IdRequest\032\026."
  "google.protobuf.Empty\"\000\022O\n\005Index\022\025.palm."
  "balsam.v1.Pager\032-.palm.balsam.v1.GoogleO"
  "auth2UserIndexResponse\"\000\022W\n\004ById\022\031.palm."
  "balsam.v1.IdRequest\0322.palm.balsam.v1.Goo"
  "gleOauth2UserIndexResponse.Item\"\000\022s\n\tByS"
  "ubject\0220.palm.balsam.v1.GoogleOauth2User"
  "BySubjectRequest\0322.palm.balsam.v1.Google"
  "Oauth2UserIndexResponse.Item\"\0002\240\004\n\020Wecha"
  "tOauth2User\022>\n\007Disable\022\031.palm.balsam.v1."
  "IdRequest\032\026.google.protobuf.Empty\"\000\022=\n\006E"
  "nable\022\031.palm.balsam.v1.IdRequest\032\026.googl"
  "e.protobuf.Empty\"\000\022O\n\005Index\022\025.palm.balsa"
  "m.v1.Pager\032-.palm.balsam.v1.WechatOauth2"
  "UserIndexResponse\"\000\022W\n\004ById\022\031.palm.balsa"
  "m.v1.IdRequest\0322.palm.balsam.v1.WechatOa"
  "uth2UserIndexResponse.Item\"\000\022i\n\tByUnionI"
  "d\022&.palm.balsam.v1.WechatByUnionIdReques"
  "t\0322.palm.balsam.v1.WechatOauth2UserIndex"
  "Response.Item\"\000\022x\n\021ByAppIdAndUnionId\022-.p"
  "alm.balsam.v1.WechatByAppIdAndOpenIdRequ"
  "est\0322.palm.balsam.v1.WechatOauth2UserInd"
  "exResponse.Item\"\0002\271\004\n\025WechatMiniProgramU"
  "ser\022>\n\007Disable\022\031.palm.balsam.v1.IdReques"
  "t\032\026.google.protobuf.Empty\"\000\022=\n\006Enable\022\031."
  "palm.balsam.v1.IdRequest\032\026.google.protob"
  "uf.Empty\"\000\022T\n\005Index\022\025.palm.balsam.v1.Pag"
  "er\0322.palm.balsam.v1.WechatMiniProgramUse"
  "rIndexResponse\"\000\022\\\n\004ById\022\031.palm.balsam.v"
  "1.IdRequest\0327.palm.balsam.v1.WechatMiniP"
  "rogramUserIndexResponse.Item\"\000\022n\n\tByUnio"
  "nId\022&.palm.balsam.v1.WechatByUnionIdRequ"
  "est\0327.palm.balsam.v1.WechatMiniProgramUs"
  "erIndexResponse.Item\"\000\022}\n\021ByAppIdAndUnio"
  "nId\022-.palm.balsam.v1.WechatByAppIdAndOpe"
  "nIdRequest\0327.palm.balsam.v1.WechatMiniPr"
  "ogramUserIndexResponse.Item\"\0002\336\001\n\007Sessio"
  "n\022>\n\007Disable\022\031.palm.balsam.v1.IdRequest\032"
  "\026.google.protobuf.Empty\"\000\022F\n\005Index\022\025.pal"
  "m.balsam.v1.Pager\032$.palm.balsam.v1.Sessi"
  "onIndexResponse\"\000\022K\n\006ByUser\022\031.palm.balsa"
  "m.v1.IdRequest\032$.palm.balsam.v1.SessionI"
  "ndexResponse\"\0002\227\006\n\nAttachment\022>\n\007Disable"
  "\022\031.palm.balsam.v1.IdRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022I\n\005Index\022\025.palm.balsam.v1."
  "Pager\032\'.palm.balsam.v1.AttachmentIndexRe"
  "sponse\"\000\022O\n\010SetTitle\022).palm.balsam.v1.At"
  "tachmentSetTitleRequest\032\026.google.protobu"
  "f.Empty\"\000\022Q\n\004ById\022\031.palm.balsam.v1.IdReq"
  "uest\032,.palm.balsam.v1.AttachmentIndexRes"
  "ponse.Item\"\000\022N\n\006ByUser\022\031.palm.balsam.v1."
  "IdRequest\032\'.palm.balsam.v1.AttachmentInd"
  "exResponse\"\000\022V\n\016ByResourceType\022\031.palm.ba"
  "lsam.v1.IdRequest\032\'.palm.balsam.v1.Attac"
  "hmentIndexResponse\"\000\0229\n\005Clear\022\026.google.p"
  "rotobuf.Empty\032\026.google.protobuf.Empty\"\000\022"
  "d\n\nByResource\022+.palm.balsam.v1.Attachmen"
  "tByResourceRequest\032\'.palm.balsam.v1.Atta"
  "chmentIndexResponse\"\000\022K\n\006Create\022\'.palm.b"
  "alsam.v1.AttachmentCreateRequest\032\026.googl"
  "e.protobuf.Empty\"\000\022D\n\rSetUploadedAt\022\031.pa"
  "lm.balsam.v1.IdRequest\032\026.google.protobuf"
  ".Empty\"\0002\350\001\n\006Locale\022A\n\003Set\022 .palm.balsam"
  ".v1.LocaleSetRequest\032\026.google.protobuf.E"
  "mpty\"\000\022E\n\005Index\022\025.palm.balsam.v1.Pager\032#"
  ".palm.balsam.v1.LocaleIndexResponse\"\000\022T\n"
  "\006ByLang\022#.palm.balsam.v1.LocaleByLangReq"
  "uest\032#.palm.balsam.v1.LocaleIndexRespons"
  "e\"\0002\241\002\n\tLeaveWord\022J\n\006Create\022&.palm.balsa"
  "m.v1.LeaveWordCreateRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022H\n\005Index\022\025.palm.balsam.v1."
  "Pager\032&.palm.balsam.v1.LeaveWordIndexRes"
  "ponse\"\000\022>\n\007Publish\022\031.palm.balsam.v1.IdRe"
  "quest\032\026.google.protobuf.Empty\"\000\022>\n\007Destr"
  "oy\022\031.palm.balsam.v1.IdRequest\032\026.google.p"
  "rotobuf.Empty\"\0002\252\t\n\004Site\022F\n\006Status\022\026.goo"
  "gle.protobuf.Empty\032\".palm.balsam.v1.Site"
  "StatusResponse\"\000\022F\n\006Layout\022\026.google.prot"
  "obuf.Empty\032\".palm.balsam.v1.SiteLayoutRe"
  "sponse\"\000\022f\n\rGetInfoByLang\022(.palm.balsam."
  "v1.SiteGetInfoByLangRequest\032).palm.balsa"
  "m.v1.SiteGetInfoByLangResponse\"\000\022D\n\007SetI"
  "nfo\022\037.palm.balsam.v1.SiteInfoRequest\032\026.g"
  "oogle.protobuf.Empty\"\000\022L\n\013SetKeywords\022#."
  "palm.balsam.v1.SiteKeywordsRequest\032\026.goo"
  "gle.protobuf.Empty\"\000\022P\n\tSetAuthor\022).palm"
  ".balsam.v1.SiteLayoutResponse.Author\032\026.g"
  "oogle.protobuf.Empty\"\000\022M\n\017SetBaiduAccoun"
  "t\022 .palm.balsam.v1.SiteBaiduAccount\032\026.go"
  "ogle.protobuf.Empty\"\000\022M\n\017GetBaiduAccount"
  "\022\026.google.protobuf.Empty\032 .palm.balsam.v"
  "1.SiteBaiduAccount\"\000\022F\n\022DeleteBaiduAccou"
  "nt\022\026.google.protobuf.Empty\032\026.google.prot"
  "obuf.Empty\"\000\022O\n\020SetGoogleAccount\022!.palm."
  "balsam.v1.SiteGoogleAccount\032\026.google.pro"
  "tobuf.Empty\"\000\022O\n\020GetGoogleAccount\022\026.goog"
  "le.protobuf.Empty\032!.palm.balsam.v1.SiteG"
  "oogleAccount\"\000\022G\n\023DeleteGoogleAccount\022\026."
  "google.protobuf.Empty\032\026.google.protobuf."
  "Empty\"\000\022S\n\022SetIndexNowAccount\022#.palm.bal"
  "sam.v1.SiteIndexNowAccount\032\026.google.prot"
  "obuf.Empty\"\000\022S\n\022GetIndexNowAccount\022\026.goo"
  "gle.protobuf.Empty\032#.palm.balsam.v1.Site"
  "IndexNowAccount\"\000\022I\n\025DeleteIndexNowAccou"
  "nt\022\026.google.protobuf.Empty\032\026.google.prot"
  "obuf.Empty\"\000Bf\n,com.github.saturn_xiv.pa"
  "lm.plugins.balsam.v1P\001Z4github.com/satur"
  "n-xiv/palm/atropa/balsam/services/v2b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_balsam_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_balsam_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_balsam_2eproto = {
    false, false, 16204, descriptor_table_protodef_balsam_2eproto,
    "balsam.proto",
    &descriptor_table_balsam_2eproto_once, descriptor_table_balsam_2eproto_deps, 3, 74,
    schemas, file_default_instances, TableStruct_balsam_2eproto::offsets,
    file_level_metadata_balsam_2eproto, file_level_enum_descriptors_balsam_2eproto,
    file_level_service_descriptors_balsam_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_balsam_2eproto_getter() {
  return &descriptor_table_balsam_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_balsam_2eproto(&descriptor_table_balsam_2eproto);
namespace palm {
namespace balsam {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserLogsResponse_Item_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_balsam_2eproto);
  return file_level_enum_descriptors_balsam_2eproto[0];
}
bool UserLogsResponse_Item_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Debug;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Info;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Warn;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Error;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Level_MIN;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Level_MAX;
constexpr int UserLogsResponse_Item::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSignInResponse_Detail_ProviderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_balsam_2eproto);
  return file_level_enum_descriptors_balsam_2eproto[1];
}
bool UserSignInResponse_Detail_ProviderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UserSignInResponse_Detail_ProviderType UserSignInResponse_Detail::Email;
constexpr UserSignInResponse_Detail_ProviderType UserSignInResponse_Detail::Phone;
constexpr UserSignInResponse_Detail_ProviderType UserSignInResponse_Detail::GoogleOauth2;
constexpr UserSignInResponse_Detail_ProviderType UserSignInResponse_Detail::WechatOauth2;
constexpr UserSignInResponse_Detail_ProviderType UserSignInResponse_Detail::WechatMiniProgram;
constexpr UserSignInResponse_Detail_ProviderType UserSignInResponse_Detail::FacebookOauth2;
constexpr UserSignInResponse_Detail_ProviderType UserSignInResponse_Detail::ProviderType_MIN;
constexpr UserSignInResponse_Detail_ProviderType UserSignInResponse_Detail::ProviderType_MAX;
constexpr int UserSignInResponse_Detail::ProviderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WechatOauth2UserIndexResponse_Item_Sex_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_balsam_2eproto);
  return file_level_enum_descriptors_balsam_2eproto[2];
}
bool WechatOauth2UserIndexResponse_Item_Sex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WechatOauth2UserIndexResponse_Item_Sex WechatOauth2UserIndexResponse_Item::Male;
constexpr WechatOauth2UserIndexResponse_Item_Sex WechatOauth2UserIndexResponse_Item::Female;
constexpr WechatOauth2UserIndexResponse_Item_Sex WechatOauth2UserIndexResponse_Item::Sex_MIN;
constexpr WechatOauth2UserIndexResponse_Item_Sex WechatOauth2UserIndexResponse_Item::Sex_MAX;
constexpr int WechatOauth2UserIndexResponse_Item::Sex_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WechatOauth2UserIndexResponse_Item_Lang_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_balsam_2eproto);
  return file_level_enum_descriptors_balsam_2eproto[3];
}
bool WechatOauth2UserIndexResponse_Item_Lang_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WechatOauth2UserIndexResponse_Item_Lang WechatOauth2UserIndexResponse_Item::Cn;
constexpr WechatOauth2UserIndexResponse_Item_Lang WechatOauth2UserIndexResponse_Item::En;
constexpr WechatOauth2UserIndexResponse_Item_Lang WechatOauth2UserIndexResponse_Item::Lang_MIN;
constexpr WechatOauth2UserIndexResponse_Item_Lang WechatOauth2UserIndexResponse_Item::Lang_MAX;
constexpr int WechatOauth2UserIndexResponse_Item::Lang_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeaveWordIndexResponse_Item_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_balsam_2eproto);
  return file_level_enum_descriptors_balsam_2eproto[4];
}
bool LeaveWordIndexResponse_Item_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LeaveWordIndexResponse_Item_Status LeaveWordIndexResponse_Item::Pending;
constexpr LeaveWordIndexResponse_Item_Status LeaveWordIndexResponse_Item::Completed;
constexpr LeaveWordIndexResponse_Item_Status LeaveWordIndexResponse_Item::Status_MIN;
constexpr LeaveWordIndexResponse_Item_Status LeaveWordIndexResponse_Item::Status_MAX;
constexpr int LeaveWordIndexResponse_Item::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaEditor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_balsam_2eproto);
  return file_level_enum_descriptors_balsam_2eproto[5];
}
bool MediaEditor_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class IdRequest::_Internal {
 public:
};

IdRequest::IdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.IdRequest)
}
IdRequest::IdRequest(const IdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.IdRequest)
}

inline void IdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IdRequest::~IdRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.IdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.IdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.IdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.IdRequest)
  return target;
}

size_t IdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.IdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdRequest::GetClassData() const { return &_class_data_; }


void IdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdRequest*>(&to_msg);
  auto& from = static_cast<const IdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.IdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdRequest::CopyFrom(const IdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.IdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdRequest::IsInitialized() const {
  return true;
}

void IdRequest::InternalSwap(IdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[0]);
}

// ===================================================================

class UidRequest::_Internal {
 public:
};

UidRequest::UidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UidRequest)
}
UidRequest::UidRequest(const UidRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UidRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UidRequest)
}

inline void UidRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UidRequest::~UidRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UidRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UidRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void UidRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UidRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UidRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UidRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UidRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UidRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UidRequest)
  return target;
}

size_t UidRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UidRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UidRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UidRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UidRequest::GetClassData() const { return &_class_data_; }


void UidRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UidRequest*>(&to_msg);
  auto& from = static_cast<const UidRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UidRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UidRequest::CopyFrom(const UidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidRequest::IsInitialized() const {
  return true;
}

void UidRequest::InternalSwap(UidRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UidRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[1]);
}

// ===================================================================

class Pager::_Internal {
 public:
};

Pager::Pager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.Pager)
}
Pager::Pager(const Pager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pager* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.Pager)
}

inline void Pager::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pager::~Pager() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.Pager)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pager::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pager::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.Pager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pager::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.Pager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_page(), target);
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.Pager)
  return target;
}

size_t Pager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.Pager)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_page());
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pager::GetClassData() const { return &_class_data_; }


void Pager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pager*>(&to_msg);
  auto& from = static_cast<const Pager&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.Pager)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pager::CopyFrom(const Pager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.Pager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pager::IsInitialized() const {
  return true;
}

void Pager::InternalSwap(Pager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pager, _impl_.size_)
      + sizeof(Pager::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Pager, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pager::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[2]);
}

// ===================================================================

class AesPlainMessage::_Internal {
 public:
};

AesPlainMessage::AesPlainMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AesPlainMessage)
}
AesPlainMessage::AesPlainMessage(const AesPlainMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AesPlainMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AesPlainMessage)
}

inline void AesPlainMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AesPlainMessage::~AesPlainMessage() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AesPlainMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AesPlainMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void AesPlainMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AesPlainMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AesPlainMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AesPlainMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AesPlainMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AesPlainMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AesPlainMessage)
  return target;
}

size_t AesPlainMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AesPlainMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AesPlainMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AesPlainMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AesPlainMessage::GetClassData() const { return &_class_data_; }


void AesPlainMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AesPlainMessage*>(&to_msg);
  auto& from = static_cast<const AesPlainMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AesPlainMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AesPlainMessage::CopyFrom(const AesPlainMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AesPlainMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AesPlainMessage::IsInitialized() const {
  return true;
}

void AesPlainMessage::InternalSwap(AesPlainMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AesPlainMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[3]);
}

// ===================================================================

class AesCodeMessage::_Internal {
 public:
};

AesCodeMessage::AesCodeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AesCodeMessage)
}
AesCodeMessage::AesCodeMessage(const AesCodeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AesCodeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.salt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AesCodeMessage)
}

inline void AesCodeMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.salt_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AesCodeMessage::~AesCodeMessage() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AesCodeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AesCodeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  _impl_.salt_.Destroy();
}

void AesCodeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AesCodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AesCodeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.salt_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AesCodeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes salt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AesCodeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AesCodeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  // bytes salt = 2;
  if (!this->_internal_salt().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_salt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AesCodeMessage)
  return target;
}

size_t AesCodeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AesCodeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // bytes salt = 2;
  if (!this->_internal_salt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_salt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AesCodeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AesCodeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AesCodeMessage::GetClassData() const { return &_class_data_; }


void AesCodeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AesCodeMessage*>(&to_msg);
  auto& from = static_cast<const AesCodeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AesCodeMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AesCodeMessage::CopyFrom(const AesCodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AesCodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AesCodeMessage::IsInitialized() const {
  return true;
}

void AesCodeMessage::InternalSwap(AesCodeMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_, lhs_arena,
      &other->_impl_.salt_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AesCodeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[4]);
}

// ===================================================================

class JwtSignRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<JwtSignRequest>()._impl_._has_bits_);
  static void set_has_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& not_before(const JwtSignRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const JwtSignRequest* msg);
  static void set_has_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
JwtSignRequest::_Internal::not_before(const JwtSignRequest* msg) {
  return *msg->_impl_.not_before_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
JwtSignRequest::_Internal::expires_at(const JwtSignRequest* msg) {
  return *msg->_impl_.expires_at_;
}
void JwtSignRequest::clear_not_before() {
  if (GetArenaForAllocation() == nullptr && _impl_.not_before_ != nullptr) {
    delete _impl_.not_before_;
  }
  _impl_.not_before_ = nullptr;
}
void JwtSignRequest::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
}
JwtSignRequest::JwtSignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.JwtSignRequest)
}
JwtSignRequest::JwtSignRequest(const JwtSignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JwtSignRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){from._impl_.audiences_}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.not_before_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_id()) {
    _this->_impl_.key_id_.Set(from._internal_key_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issuer().empty()) {
    _this->_impl_.issuer_.Set(from._internal_issuer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extra()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_not_before()) {
    _this->_impl_.not_before_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.not_before_);
  }
  if (from._internal_has_expires_at()) {
    _this->_impl_.expires_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expires_at_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.JwtSignRequest)
}

inline void JwtSignRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){arena}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.not_before_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
  };
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JwtSignRequest::~JwtSignRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.JwtSignRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JwtSignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audiences_.~RepeatedPtrField();
  _impl_.key_id_.Destroy();
  _impl_.issuer_.Destroy();
  _impl_.subject_.Destroy();
  _impl_.extra_.Destroy();
  if (this != internal_default_instance()) delete _impl_.not_before_;
  if (this != internal_default_instance()) delete _impl_.expires_at_;
}

void JwtSignRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JwtSignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.JwtSignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audiences_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_id_.ClearNonDefaultToEmpty();
  }
  _impl_.issuer_.ClearToEmpty();
  _impl_.subject_.ClearToEmpty();
  if (cached_has_bits & 0x00000002u) {
    _impl_.extra_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.not_before_ != nullptr) {
    delete _impl_.not_before_;
  }
  _impl_.not_before_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JwtSignRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.key_id"));
        } else
          goto handle_unusual;
        continue;
      // string issuer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_issuer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.issuer"));
        } else
          goto handle_unusual;
        continue;
      // string subject = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.subject"));
        } else
          goto handle_unusual;
        continue;
      // repeated string audiences = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audiences();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.audiences"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp not_before = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_before(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string extra = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.extra"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JwtSignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.JwtSignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string key_id = 1;
  if (_internal_has_key_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_id(), target);
  }

  // string issuer = 11;
  if (!this->_internal_issuer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuer().data(), static_cast<int>(this->_internal_issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.issuer");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_issuer(), target);
  }

  // string subject = 12;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.subject");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_subject(), target);
  }

  // repeated string audiences = 13;
  for (int i = 0, n = this->_internal_audiences_size(); i < n; i++) {
    const auto& s = this->_internal_audiences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.audiences");
    target = stream->WriteString(13, s, target);
  }

  // .google.protobuf.Timestamp not_before = 18;
  if (this->_internal_has_not_before()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::not_before(this),
        _Internal::not_before(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expires_at = 19;
  if (this->_internal_has_expires_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::expires_at(this),
        _Internal::expires_at(this).GetCachedSize(), target, stream);
  }

  // optional string extra = 99;
  if (_internal_has_extra()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.extra");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.JwtSignRequest)
  return target;
}

size_t JwtSignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.JwtSignRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audiences = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.audiences_.size());
  for (int i = 0, n = _impl_.audiences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.audiences_.Get(i));
  }

  // optional string key_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // string issuer = 11;
  if (!this->_internal_issuer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer());
  }

  // string subject = 12;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // optional string extra = 99;
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  // .google.protobuf.Timestamp not_before = 18;
  if (this->_internal_has_not_before()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.not_before_);
  }

  // .google.protobuf.Timestamp expires_at = 19;
  if (this->_internal_has_expires_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expires_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JwtSignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JwtSignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JwtSignRequest::GetClassData() const { return &_class_data_; }


void JwtSignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JwtSignRequest*>(&to_msg);
  auto& from = static_cast<const JwtSignRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.JwtSignRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audiences_.MergeFrom(from._impl_.audiences_);
  if (from._internal_has_key_id()) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (!from._internal_issuer().empty()) {
    _this->_internal_set_issuer(from._internal_issuer());
  }
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (from._internal_has_extra()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  if (from._internal_has_not_before()) {
    _this->_internal_mutable_not_before()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_not_before());
  }
  if (from._internal_has_expires_at()) {
    _this->_internal_mutable_expires_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expires_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JwtSignRequest::CopyFrom(const JwtSignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.JwtSignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JwtSignRequest::IsInitialized() const {
  return true;
}

void JwtSignRequest::InternalSwap(JwtSignRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.audiences_.InternalSwap(&other->_impl_.audiences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_id_, lhs_arena,
      &other->_impl_.key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issuer_, lhs_arena,
      &other->_impl_.issuer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JwtSignRequest, _impl_.expires_at_)
      + sizeof(JwtSignRequest::_impl_.expires_at_)
      - PROTOBUF_FIELD_OFFSET(JwtSignRequest, _impl_.not_before_)>(
          reinterpret_cast<char*>(&_impl_.not_before_),
          reinterpret_cast<char*>(&other->_impl_.not_before_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JwtSignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[5]);
}

// ===================================================================

class JwtSignResponse::_Internal {
 public:
};

JwtSignResponse::JwtSignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.JwtSignResponse)
}
JwtSignResponse::JwtSignResponse(const JwtSignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JwtSignResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.JwtSignResponse)
}

inline void JwtSignResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JwtSignResponse::~JwtSignResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.JwtSignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JwtSignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void JwtSignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JwtSignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.JwtSignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JwtSignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignResponse.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JwtSignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.JwtSignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.JwtSignResponse)
  return target;
}

size_t JwtSignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.JwtSignResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JwtSignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JwtSignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JwtSignResponse::GetClassData() const { return &_class_data_; }


void JwtSignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JwtSignResponse*>(&to_msg);
  auto& from = static_cast<const JwtSignResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.JwtSignResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JwtSignResponse::CopyFrom(const JwtSignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.JwtSignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JwtSignResponse::IsInitialized() const {
  return true;
}

void JwtSignResponse::InternalSwap(JwtSignResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JwtSignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[6]);
}

// ===================================================================

class JwtVerifyRequest::_Internal {
 public:
};

JwtVerifyRequest::JwtVerifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.JwtVerifyRequest)
}
JwtVerifyRequest::JwtVerifyRequest(const JwtVerifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JwtVerifyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.audience_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issuer().empty()) {
    _this->_impl_.issuer_.Set(from._internal_issuer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.audience_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audience_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audience().empty()) {
    _this->_impl_.audience_.Set(from._internal_audience(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.JwtVerifyRequest)
}

inline void JwtVerifyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.audience_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audience_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audience_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JwtVerifyRequest::~JwtVerifyRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.JwtVerifyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JwtVerifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.issuer_.Destroy();
  _impl_.audience_.Destroy();
}

void JwtVerifyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JwtVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.JwtVerifyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.issuer_.ClearToEmpty();
  _impl_.audience_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JwtVerifyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyRequest.token"));
        } else
          goto handle_unusual;
        continue;
      // string issuer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_issuer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyRequest.issuer"));
        } else
          goto handle_unusual;
        continue;
      // string audience = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_audience();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyRequest.audience"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JwtVerifyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.JwtVerifyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string issuer = 2;
  if (!this->_internal_issuer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuer().data(), static_cast<int>(this->_internal_issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyRequest.issuer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_issuer(), target);
  }

  // string audience = 3;
  if (!this->_internal_audience().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audience().data(), static_cast<int>(this->_internal_audience().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyRequest.audience");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_audience(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.JwtVerifyRequest)
  return target;
}

size_t JwtVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.JwtVerifyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string issuer = 2;
  if (!this->_internal_issuer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer());
  }

  // string audience = 3;
  if (!this->_internal_audience().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audience());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JwtVerifyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JwtVerifyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JwtVerifyRequest::GetClassData() const { return &_class_data_; }


void JwtVerifyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JwtVerifyRequest*>(&to_msg);
  auto& from = static_cast<const JwtVerifyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.JwtVerifyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_issuer().empty()) {
    _this->_internal_set_issuer(from._internal_issuer());
  }
  if (!from._internal_audience().empty()) {
    _this->_internal_set_audience(from._internal_audience());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JwtVerifyRequest::CopyFrom(const JwtVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.JwtVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JwtVerifyRequest::IsInitialized() const {
  return true;
}

void JwtVerifyRequest::InternalSwap(JwtVerifyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issuer_, lhs_arena,
      &other->_impl_.issuer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audience_, lhs_arena,
      &other->_impl_.audience_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JwtVerifyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[7]);
}

// ===================================================================

class JwtVerifyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<JwtVerifyResponse>()._impl_._has_bits_);
  static void set_has_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

JwtVerifyResponse::JwtVerifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.JwtVerifyResponse)
}
JwtVerifyResponse::JwtVerifyResponse(const JwtVerifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JwtVerifyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.jwt_id_){}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.extra_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.jwt_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jwt_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_jwt_id().empty()) {
    _this->_impl_.jwt_id_.Set(from._internal_jwt_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_id()) {
    _this->_impl_.key_id_.Set(from._internal_key_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extra()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.JwtVerifyResponse)
}

inline void JwtVerifyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.jwt_id_){}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.extra_){}
  };
  _impl_.jwt_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jwt_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JwtVerifyResponse::~JwtVerifyResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.JwtVerifyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JwtVerifyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jwt_id_.Destroy();
  _impl_.key_id_.Destroy();
  _impl_.subject_.Destroy();
  _impl_.extra_.Destroy();
}

void JwtVerifyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JwtVerifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.JwtVerifyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jwt_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_id_.ClearNonDefaultToEmpty();
  }
  _impl_.subject_.ClearToEmpty();
  if (cached_has_bits & 0x00000002u) {
    _impl_.extra_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JwtVerifyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string jwt_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_jwt_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyResponse.jwt_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyResponse.key_id"));
        } else
          goto handle_unusual;
        continue;
      // string subject = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyResponse.subject"));
        } else
          goto handle_unusual;
        continue;
      // optional string extra = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyResponse.extra"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JwtVerifyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.JwtVerifyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string jwt_id = 1;
  if (!this->_internal_jwt_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jwt_id().data(), static_cast<int>(this->_internal_jwt_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyResponse.jwt_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_jwt_id(), target);
  }

  // optional string key_id = 2;
  if (_internal_has_key_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyResponse.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  // string subject = 11;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyResponse.subject");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_subject(), target);
  }

  // optional string extra = 19;
  if (_internal_has_extra()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyResponse.extra");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.JwtVerifyResponse)
  return target;
}

size_t JwtVerifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.JwtVerifyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string jwt_id = 1;
  if (!this->_internal_jwt_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jwt_id());
  }

  // optional string key_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // string subject = 11;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // optional string extra = 19;
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JwtVerifyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JwtVerifyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JwtVerifyResponse::GetClassData() const { return &_class_data_; }


void JwtVerifyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JwtVerifyResponse*>(&to_msg);
  auto& from = static_cast<const JwtVerifyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.JwtVerifyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_jwt_id().empty()) {
    _this->_internal_set_jwt_id(from._internal_jwt_id());
  }
  if (from._internal_has_key_id()) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (from._internal_has_extra()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JwtVerifyResponse::CopyFrom(const JwtVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.JwtVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JwtVerifyResponse::IsInitialized() const {
  return true;
}

void JwtVerifyResponse::InternalSwap(JwtVerifyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jwt_id_, lhs_arena,
      &other->_impl_.jwt_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_id_, lhs_arena,
      &other->_impl_.key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JwtVerifyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[8]);
}

// ===================================================================

class HMacSignRequest::_Internal {
 public:
};

HMacSignRequest::HMacSignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.HMacSignRequest)
}
HMacSignRequest::HMacSignRequest(const HMacSignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HMacSignRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plain_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plain().empty()) {
    _this->_impl_.plain_.Set(from._internal_plain(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.HMacSignRequest)
}

inline void HMacSignRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plain_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.plain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HMacSignRequest::~HMacSignRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.HMacSignRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HMacSignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plain_.Destroy();
}

void HMacSignRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HMacSignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.HMacSignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plain_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMacSignRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes plain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HMacSignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.HMacSignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes plain = 1;
  if (!this->_internal_plain().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_plain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.HMacSignRequest)
  return target;
}

size_t HMacSignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.HMacSignRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes plain = 1;
  if (!this->_internal_plain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_plain());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HMacSignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HMacSignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HMacSignRequest::GetClassData() const { return &_class_data_; }


void HMacSignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HMacSignRequest*>(&to_msg);
  auto& from = static_cast<const HMacSignRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.HMacSignRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plain().empty()) {
    _this->_internal_set_plain(from._internal_plain());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HMacSignRequest::CopyFrom(const HMacSignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.HMacSignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMacSignRequest::IsInitialized() const {
  return true;
}

void HMacSignRequest::InternalSwap(HMacSignRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plain_, lhs_arena,
      &other->_impl_.plain_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HMacSignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[9]);
}

// ===================================================================

class HMacSignResponse::_Internal {
 public:
};

HMacSignResponse::HMacSignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.HMacSignResponse)
}
HMacSignResponse::HMacSignResponse(const HMacSignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HMacSignResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.salt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.HMacSignResponse)
}

inline void HMacSignResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.salt_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HMacSignResponse::~HMacSignResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.HMacSignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HMacSignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.salt_.Destroy();
}

void HMacSignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HMacSignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.HMacSignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.salt_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMacSignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes salt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HMacSignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.HMacSignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes code = 1;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_code(), target);
  }

  // bytes salt = 2;
  if (!this->_internal_salt().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_salt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.HMacSignResponse)
  return target;
}

size_t HMacSignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.HMacSignResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // bytes salt = 2;
  if (!this->_internal_salt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_salt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HMacSignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HMacSignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HMacSignResponse::GetClassData() const { return &_class_data_; }


void HMacSignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HMacSignResponse*>(&to_msg);
  auto& from = static_cast<const HMacSignResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.HMacSignResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HMacSignResponse::CopyFrom(const HMacSignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.HMacSignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMacSignResponse::IsInitialized() const {
  return true;
}

void HMacSignResponse::InternalSwap(HMacSignResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_, lhs_arena,
      &other->_impl_.salt_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HMacSignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[10]);
}

// ===================================================================

class HMacVerifyRequest::_Internal {
 public:
};

HMacVerifyRequest::HMacVerifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.HMacVerifyRequest)
}
HMacVerifyRequest::HMacVerifyRequest(const HMacVerifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HMacVerifyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plain_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.salt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plain().empty()) {
    _this->_impl_.plain_.Set(from._internal_plain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.HMacVerifyRequest)
}

inline void HMacVerifyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plain_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.salt_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.plain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HMacVerifyRequest::~HMacVerifyRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.HMacVerifyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HMacVerifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plain_.Destroy();
  _impl_.code_.Destroy();
  _impl_.salt_.Destroy();
}

void HMacVerifyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HMacVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.HMacVerifyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plain_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.salt_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMacVerifyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes plain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes salt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HMacVerifyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.HMacVerifyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes plain = 1;
  if (!this->_internal_plain().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_plain(), target);
  }

  // bytes code = 2;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_code(), target);
  }

  // bytes salt = 3;
  if (!this->_internal_salt().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_salt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.HMacVerifyRequest)
  return target;
}

size_t HMacVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.HMacVerifyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes plain = 1;
  if (!this->_internal_plain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_plain());
  }

  // bytes code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // bytes salt = 3;
  if (!this->_internal_salt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_salt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HMacVerifyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HMacVerifyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HMacVerifyRequest::GetClassData() const { return &_class_data_; }


void HMacVerifyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HMacVerifyRequest*>(&to_msg);
  auto& from = static_cast<const HMacVerifyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.HMacVerifyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plain().empty()) {
    _this->_internal_set_plain(from._internal_plain());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HMacVerifyRequest::CopyFrom(const HMacVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.HMacVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMacVerifyRequest::IsInitialized() const {
  return true;
}

void HMacVerifyRequest::InternalSwap(HMacVerifyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plain_, lhs_arena,
      &other->_impl_.plain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_, lhs_arena,
      &other->_impl_.salt_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HMacVerifyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[11]);
}

// ===================================================================

class UserUpdateProfileRequest::_Internal {
 public:
};

UserUpdateProfileRequest::UserUpdateProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserUpdateProfileRequest)
}
UserUpdateProfileRequest::UserUpdateProfileRequest(const UserUpdateProfileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserUpdateProfileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserUpdateProfileRequest)
}

inline void UserUpdateProfileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.user_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserUpdateProfileRequest::~UserUpdateProfileRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserUpdateProfileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserUpdateProfileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.timezone_.Destroy();
}

void UserUpdateProfileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserUpdateProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserUpdateProfileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  _impl_.user_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserUpdateProfileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserUpdateProfileRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserUpdateProfileRequest.timezone"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserUpdateProfileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserUpdateProfileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserUpdateProfileRequest.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string timezone = 3;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserUpdateProfileRequest.timezone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timezone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserUpdateProfileRequest)
  return target;
}

size_t UserUpdateProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserUpdateProfileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string timezone = 3;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserUpdateProfileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserUpdateProfileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserUpdateProfileRequest::GetClassData() const { return &_class_data_; }


void UserUpdateProfileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserUpdateProfileRequest*>(&to_msg);
  auto& from = static_cast<const UserUpdateProfileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserUpdateProfileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserUpdateProfileRequest::CopyFrom(const UserUpdateProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserUpdateProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserUpdateProfileRequest::IsInitialized() const {
  return true;
}

void UserUpdateProfileRequest::InternalSwap(UserUpdateProfileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserUpdateProfileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[12]);
}

// ===================================================================

class UserIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<UserIndexResponse_Item>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& current_sign_in_at(const UserIndexResponse_Item* msg);
  static void set_has_current_sign_in_at(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_sign_in_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_sign_in_at(const UserIndexResponse_Item* msg);
  static void set_has_last_sign_in_at(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_sign_in_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& lockeda_at(const UserIndexResponse_Item* msg);
  static void set_has_lockeda_at(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const UserIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const UserIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::current_sign_in_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.current_sign_in_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::last_sign_in_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.last_sign_in_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::lockeda_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.lockeda_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::deleted_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::updated_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void UserIndexResponse_Item::clear_current_sign_in_at() {
  if (_impl_.current_sign_in_at_ != nullptr) _impl_.current_sign_in_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void UserIndexResponse_Item::clear_last_sign_in_at() {
  if (_impl_.last_sign_in_at_ != nullptr) _impl_.last_sign_in_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void UserIndexResponse_Item::clear_lockeda_at() {
  if (_impl_.lockeda_at_ != nullptr) _impl_.lockeda_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void UserIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void UserIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
UserIndexResponse_Item::UserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserIndexResponse.Item)
}
UserIndexResponse_Item::UserIndexResponse_Item(const UserIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.current_sign_in_ip_){}
    , decltype(_impl_.last_sign_in_ip_){}
    , decltype(_impl_.current_sign_in_at_){nullptr}
    , decltype(_impl_.last_sign_in_at_){nullptr}
    , decltype(_impl_.lockeda_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.sign_in_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.current_sign_in_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_sign_in_ip()) {
    _this->_impl_.current_sign_in_ip_.Set(from._internal_current_sign_in_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_sign_in_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_sign_in_ip()) {
    _this->_impl_.last_sign_in_ip_.Set(from._internal_last_sign_in_ip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_current_sign_in_at()) {
    _this->_impl_.current_sign_in_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.current_sign_in_at_);
  }
  if (from._internal_has_last_sign_in_at()) {
    _this->_impl_.last_sign_in_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_sign_in_at_);
  }
  if (from._internal_has_lockeda_at()) {
    _this->_impl_.lockeda_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.lockeda_at_);
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sign_in_count_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sign_in_count_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserIndexResponse.Item)
}

inline void UserIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.current_sign_in_ip_){}
    , decltype(_impl_.last_sign_in_ip_){}
    , decltype(_impl_.current_sign_in_at_){nullptr}
    , decltype(_impl_.last_sign_in_at_){nullptr}
    , decltype(_impl_.lockeda_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.sign_in_count_){0u}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_sign_in_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_sign_in_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserIndexResponse_Item::~UserIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.timezone_.Destroy();
  _impl_.current_sign_in_ip_.Destroy();
  _impl_.last_sign_in_ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.current_sign_in_at_;
  if (this != internal_default_instance()) delete _impl_.last_sign_in_at_;
  if (this != internal_default_instance()) delete _impl_.lockeda_at_;
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void UserIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.current_sign_in_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.last_sign_in_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.current_sign_in_at_ != nullptr);
      _impl_.current_sign_in_at_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.last_sign_in_at_ != nullptr);
      _impl_.last_sign_in_at_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.lockeda_at_ != nullptr);
      _impl_.lockeda_at_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sign_in_count_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sign_in_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserIndexResponse.Item.uid"));
        } else
          goto handle_unusual;
        continue;
      // string lang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserIndexResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserIndexResponse.Item.timezone"));
        } else
          goto handle_unusual;
        continue;
      // uint32 sign_in_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sign_in_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp current_sign_in_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_sign_in_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string current_sign_in_ip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserIndexResponse.Item.current_sign_in_ip"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp last_sign_in_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_sign_in_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_sign_in_ip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserIndexResponse.Item.last_sign_in_ip"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp lockeda_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_lockeda_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string uid = 2;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserIndexResponse.Item.uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // string lang = 3;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lang(), target);
  }

  // string timezone = 4;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserIndexResponse.Item.timezone");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timezone(), target);
  }

  // uint32 sign_in_count = 5;
  if (this->_internal_sign_in_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sign_in_count(), target);
  }

  // optional .google.protobuf.Timestamp current_sign_in_at = 6;
  if (_internal_has_current_sign_in_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::current_sign_in_at(this),
        _Internal::current_sign_in_at(this).GetCachedSize(), target, stream);
  }

  // optional string current_sign_in_ip = 7;
  if (_internal_has_current_sign_in_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserIndexResponse.Item.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_current_sign_in_ip(), target);
  }

  // optional .google.protobuf.Timestamp last_sign_in_at = 8;
  if (_internal_has_last_sign_in_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::last_sign_in_at(this),
        _Internal::last_sign_in_at(this).GetCachedSize(), target, stream);
  }

  // optional string last_sign_in_ip = 9;
  if (_internal_has_last_sign_in_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserIndexResponse.Item.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_last_sign_in_ip(), target);
  }

  // optional .google.protobuf.Timestamp lockeda_at = 10;
  if (_internal_has_lockeda_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::lockeda_at(this),
        _Internal::lockeda_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp deleted_at = 11;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 12;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserIndexResponse.Item)
  return target;
}

size_t UserIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 2;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string lang = 3;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string timezone = 4;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string current_sign_in_ip = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_sign_in_ip());
    }

    // optional string last_sign_in_ip = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_sign_in_ip());
    }

    // optional .google.protobuf.Timestamp current_sign_in_at = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.current_sign_in_at_);
    }

    // optional .google.protobuf.Timestamp last_sign_in_at = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_sign_in_at_);
    }

    // optional .google.protobuf.Timestamp lockeda_at = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lockeda_at_);
    }

    // optional .google.protobuf.Timestamp deleted_at = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_at_);
    }

  }
  // .google.protobuf.Timestamp updated_at = 12;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint32 sign_in_count = 5;
  if (this->_internal_sign_in_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sign_in_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIndexResponse_Item::GetClassData() const { return &_class_data_; }


void UserIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const UserIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_current_sign_in_ip(from._internal_current_sign_in_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_last_sign_in_ip(from._internal_last_sign_in_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_current_sign_in_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_current_sign_in_at());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_last_sign_in_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_last_sign_in_at());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_lockeda_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_lockeda_at());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_sign_in_count() != 0) {
    _this->_internal_set_sign_in_count(from._internal_sign_in_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIndexResponse_Item::CopyFrom(const UserIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIndexResponse_Item::IsInitialized() const {
  return true;
}

void UserIndexResponse_Item::InternalSwap(UserIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_sign_in_ip_, lhs_arena,
      &other->_impl_.current_sign_in_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_sign_in_ip_, lhs_arena,
      &other->_impl_.last_sign_in_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserIndexResponse_Item, _impl_.sign_in_count_)
      + sizeof(UserIndexResponse_Item::_impl_.sign_in_count_)
      - PROTOBUF_FIELD_OFFSET(UserIndexResponse_Item, _impl_.current_sign_in_at_)>(
          reinterpret_cast<char*>(&_impl_.current_sign_in_at_),
          reinterpret_cast<char*>(&other->_impl_.current_sign_in_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[13]);
}

// ===================================================================

class UserIndexResponse::_Internal {
 public:
};

UserIndexResponse::UserIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserIndexResponse)
}
UserIndexResponse::UserIndexResponse(const UserIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserIndexResponse)
}

inline void UserIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserIndexResponse::~UserIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void UserIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.UserIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.UserIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 9;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserIndexResponse)
  return target;
}

size_t UserIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.UserIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 9;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIndexResponse::GetClassData() const { return &_class_data_; }


void UserIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserIndexResponse*>(&to_msg);
  auto& from = static_cast<const UserIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIndexResponse::CopyFrom(const UserIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIndexResponse::IsInitialized() const {
  return true;
}

void UserIndexResponse::InternalSwap(UserIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[14]);
}

// ===================================================================

class LogsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LogsRequest>()._impl_._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LogsRequest::LogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.LogsRequest)
}
LogsRequest::LogsRequest(const LogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){}
    , decltype(_impl_.page_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_, &from._impl_.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.user_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.LogsRequest)
}

inline void LogsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){uint64_t{0u}}
    , decltype(_impl_.page_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
  };
}

LogsRequest::~LogsRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.LogsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.LogsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ = uint64_t{0u};
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.size_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user(&has_bits);
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 page = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.LogsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 user = 1;
  if (_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user(), target);
  }

  // uint64 page = 11;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_page(), target);
  }

  // uint64 size = 12;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.LogsRequest)
  return target;
}

size_t LogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.LogsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user());
  }

  // uint64 page = 11;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_page());
  }

  // uint64 size = 12;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogsRequest::GetClassData() const { return &_class_data_; }


void LogsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogsRequest*>(&to_msg);
  auto& from = static_cast<const LogsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.LogsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogsRequest::CopyFrom(const LogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.LogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsRequest::IsInitialized() const {
  return true;
}

void LogsRequest::InternalSwap(LogsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogsRequest, _impl_.size_)
      + sizeof(LogsRequest::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(LogsRequest, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[15]);
}

// ===================================================================

class UserLogsResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLogsResponse_Item>()._impl_._has_bits_);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const UserLogsResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserLogsResponse_Item::_Internal::created_at(const UserLogsResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
void UserLogsResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
UserLogsResponse_Item::UserLogsResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserLogsResponse.Item)
}
UserLogsResponse_Item::UserLogsResponse_Item(const UserLogsResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLogsResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.resource_type_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.resource_id_){}
    , decltype(_impl_.level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plugin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plugin().empty()) {
    _this->_impl_.plugin_.Set(from._internal_plugin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_type().empty()) {
    _this->_impl_.resource_type_.Set(from._internal_resource_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserLogsResponse.Item)
}

inline void UserLogsResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.resource_type_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.resource_id_){uint64_t{0u}}
    , decltype(_impl_.level_){0}
  };
  _impl_.plugin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLogsResponse_Item::~UserLogsResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserLogsResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLogsResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plugin_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.resource_type_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void UserLogsResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLogsResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserLogsResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plugin_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.resource_type_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _impl_.id_ = uint64_t{0u};
  _impl_.resource_id_ = uint64_t{0u};
  _impl_.level_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string plugin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_plugin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserLogsResponse.Item.plugin"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserLogsResponse.Item.ip"));
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.UserLogsResponse.Item.Level level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::palm::balsam::v1::UserLogsResponse_Item_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string resource_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_resource_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserLogsResponse.Item.resource_type"));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 resource_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_resource_id(&has_bits);
          _impl_.resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserLogsResponse.Item.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLogsResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserLogsResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string plugin = 2;
  if (!this->_internal_plugin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plugin().data(), static_cast<int>(this->_internal_plugin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserLogsResponse.Item.plugin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_plugin(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserLogsResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // .palm.balsam.v1.UserLogsResponse.Item.Level level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_level(), target);
  }

  // string resource_type = 5;
  if (!this->_internal_resource_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_type().data(), static_cast<int>(this->_internal_resource_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserLogsResponse.Item.resource_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_resource_type(), target);
  }

  // optional uint64 resource_id = 6;
  if (_internal_has_resource_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_resource_id(), target);
  }

  // string message = 7;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserLogsResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserLogsResponse.Item)
  return target;
}

size_t UserLogsResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserLogsResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plugin = 2;
  if (!this->_internal_plugin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plugin());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string resource_type = 5;
  if (!this->_internal_resource_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_type());
  }

  // string message = 7;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // optional uint64 resource_id = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_resource_id());
  }

  // .palm.balsam.v1.UserLogsResponse.Item.Level level = 4;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLogsResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsResponse_Item::GetClassData() const { return &_class_data_; }


void UserLogsResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLogsResponse_Item*>(&to_msg);
  auto& from = static_cast<const UserLogsResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserLogsResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plugin().empty()) {
    _this->_internal_set_plugin(from._internal_plugin());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_resource_type().empty()) {
    _this->_internal_set_resource_type(from._internal_resource_type());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_resource_id()) {
    _this->_internal_set_resource_id(from._internal_resource_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsResponse_Item::CopyFrom(const UserLogsResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserLogsResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsResponse_Item::IsInitialized() const {
  return true;
}

void UserLogsResponse_Item::InternalSwap(UserLogsResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plugin_, lhs_arena,
      &other->_impl_.plugin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_type_, lhs_arena,
      &other->_impl_.resource_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLogsResponse_Item, _impl_.level_)
      + sizeof(UserLogsResponse_Item::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(UserLogsResponse_Item, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[16]);
}

// ===================================================================

class UserLogsResponse::_Internal {
 public:
};

UserLogsResponse::UserLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserLogsResponse)
}
UserLogsResponse::UserLogsResponse(const UserLogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLogsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserLogsResponse)
}

inline void UserLogsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserLogsResponse::~UserLogsResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserLogsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void UserLogsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserLogsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.UserLogsResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLogsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserLogsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.UserLogsResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 9;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserLogsResponse)
  return target;
}

size_t UserLogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserLogsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.UserLogsResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 9;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsResponse::GetClassData() const { return &_class_data_; }


void UserLogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLogsResponse*>(&to_msg);
  auto& from = static_cast<const UserLogsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserLogsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsResponse::CopyFrom(const UserLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsResponse::IsInitialized() const {
  return true;
}

void UserLogsResponse::InternalSwap(UserLogsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[17]);
}

// ===================================================================

class EmailUserByEmailRequest::_Internal {
 public:
};

EmailUserByEmailRequest::EmailUserByEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.EmailUserByEmailRequest)
}
EmailUserByEmailRequest::EmailUserByEmailRequest(const EmailUserByEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailUserByEmailRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.EmailUserByEmailRequest)
}

inline void EmailUserByEmailRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailUserByEmailRequest::~EmailUserByEmailRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.EmailUserByEmailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailUserByEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
}

void EmailUserByEmailRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailUserByEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.EmailUserByEmailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailUserByEmailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.EmailUserByEmailRequest.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailUserByEmailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.EmailUserByEmailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.EmailUserByEmailRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.EmailUserByEmailRequest)
  return target;
}

size_t EmailUserByEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.EmailUserByEmailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailUserByEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailUserByEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailUserByEmailRequest::GetClassData() const { return &_class_data_; }


void EmailUserByEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailUserByEmailRequest*>(&to_msg);
  auto& from = static_cast<const EmailUserByEmailRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.EmailUserByEmailRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailUserByEmailRequest::CopyFrom(const EmailUserByEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.EmailUserByEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailUserByEmailRequest::IsInitialized() const {
  return true;
}

void EmailUserByEmailRequest::InternalSwap(EmailUserByEmailRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailUserByEmailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[18]);
}

// ===================================================================

class EmailUserByNicknameRequest::_Internal {
 public:
};

EmailUserByNicknameRequest::EmailUserByNicknameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.EmailUserByNicknameRequest)
}
EmailUserByNicknameRequest::EmailUserByNicknameRequest(const EmailUserByNicknameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailUserByNicknameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.EmailUserByNicknameRequest)
}

inline void EmailUserByNicknameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailUserByNicknameRequest::~EmailUserByNicknameRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.EmailUserByNicknameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailUserByNicknameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
}

void EmailUserByNicknameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailUserByNicknameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.EmailUserByNicknameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailUserByNicknameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.EmailUserByNicknameRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailUserByNicknameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.EmailUserByNicknameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.EmailUserByNicknameRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.EmailUserByNicknameRequest)
  return target;
}

size_t EmailUserByNicknameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.EmailUserByNicknameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailUserByNicknameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailUserByNicknameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailUserByNicknameRequest::GetClassData() const { return &_class_data_; }


void EmailUserByNicknameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailUserByNicknameRequest*>(&to_msg);
  auto& from = static_cast<const EmailUserByNicknameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.EmailUserByNicknameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailUserByNicknameRequest::CopyFrom(const EmailUserByNicknameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.EmailUserByNicknameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailUserByNicknameRequest::IsInitialized() const {
  return true;
}

void EmailUserByNicknameRequest::InternalSwap(EmailUserByNicknameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailUserByNicknameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[19]);
}

// ===================================================================

class EmailUserIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<EmailUserIndexResponse_Item>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& confirmed_at(const EmailUserIndexResponse_Item* msg);
  static void set_has_confirmed_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const EmailUserIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const EmailUserIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EmailUserIndexResponse_Item::_Internal::confirmed_at(const EmailUserIndexResponse_Item* msg) {
  return *msg->_impl_.confirmed_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EmailUserIndexResponse_Item::_Internal::deleted_at(const EmailUserIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EmailUserIndexResponse_Item::_Internal::updated_at(const EmailUserIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void EmailUserIndexResponse_Item::clear_confirmed_at() {
  if (_impl_.confirmed_at_ != nullptr) _impl_.confirmed_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void EmailUserIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void EmailUserIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
EmailUserIndexResponse_Item::EmailUserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.EmailUserIndexResponse.Item)
}
EmailUserIndexResponse_Item::EmailUserIndexResponse_Item(const EmailUserIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailUserIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.confirmed_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar().empty()) {
    _this->_impl_.avatar_.Set(from._internal_avatar(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_confirmed_at()) {
    _this->_impl_.confirmed_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.confirmed_at_);
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.EmailUserIndexResponse.Item)
}

inline void EmailUserIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.confirmed_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.user_id_){uint64_t{0u}}
  };
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailUserIndexResponse_Item::~EmailUserIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.EmailUserIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailUserIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.real_name_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.email_.Destroy();
  _impl_.avatar_.Destroy();
  if (this != internal_default_instance()) delete _impl_.confirmed_at_;
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void EmailUserIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailUserIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.EmailUserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.real_name_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.avatar_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.confirmed_at_ != nullptr);
      _impl_.confirmed_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailUserIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string real_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.EmailUserIndexResponse.Item.real_name"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.EmailUserIndexResponse.Item.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string email = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.EmailUserIndexResponse.Item.email"));
        } else
          goto handle_unusual;
        continue;
      // string avatar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.EmailUserIndexResponse.Item.avatar"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp confirmed_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailUserIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.EmailUserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string real_name = 3;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.EmailUserIndexResponse.Item.real_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_real_name(), target);
  }

  // string nickname = 4;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.EmailUserIndexResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nickname(), target);
  }

  // string email = 5;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.EmailUserIndexResponse.Item.email");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_email(), target);
  }

  // string avatar = 6;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.EmailUserIndexResponse.Item.avatar");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_avatar(), target);
  }

  // optional .google.protobuf.Timestamp confirmed_at = 7;
  if (_internal_has_confirmed_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::confirmed_at(this),
        _Internal::confirmed_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp deleted_at = 8;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.EmailUserIndexResponse.Item)
  return target;
}

size_t EmailUserIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.EmailUserIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string real_name = 3;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string nickname = 4;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string email = 5;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string avatar = 6;
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp confirmed_at = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.confirmed_at_);
    }

    // optional .google.protobuf.Timestamp deleted_at = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_at_);
    }

  }
  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailUserIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailUserIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailUserIndexResponse_Item::GetClassData() const { return &_class_data_; }


void EmailUserIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailUserIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const EmailUserIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.EmailUserIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_avatar().empty()) {
    _this->_internal_set_avatar(from._internal_avatar());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_confirmed_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_confirmed_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailUserIndexResponse_Item::CopyFrom(const EmailUserIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.EmailUserIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailUserIndexResponse_Item::IsInitialized() const {
  return true;
}

void EmailUserIndexResponse_Item::InternalSwap(EmailUserIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_, lhs_arena,
      &other->_impl_.avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmailUserIndexResponse_Item, _impl_.user_id_)
      + sizeof(EmailUserIndexResponse_Item::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(EmailUserIndexResponse_Item, _impl_.confirmed_at_)>(
          reinterpret_cast<char*>(&_impl_.confirmed_at_),
          reinterpret_cast<char*>(&other->_impl_.confirmed_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailUserIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[20]);
}

// ===================================================================

class EmailUserIndexResponse::_Internal {
 public:
};

EmailUserIndexResponse::EmailUserIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.EmailUserIndexResponse)
}
EmailUserIndexResponse::EmailUserIndexResponse(const EmailUserIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailUserIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.EmailUserIndexResponse)
}

inline void EmailUserIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EmailUserIndexResponse::~EmailUserIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.EmailUserIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailUserIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void EmailUserIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailUserIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.EmailUserIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailUserIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.EmailUserIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailUserIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.EmailUserIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.EmailUserIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.EmailUserIndexResponse)
  return target;
}

size_t EmailUserIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.EmailUserIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.EmailUserIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailUserIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailUserIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailUserIndexResponse::GetClassData() const { return &_class_data_; }


void EmailUserIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailUserIndexResponse*>(&to_msg);
  auto& from = static_cast<const EmailUserIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.EmailUserIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailUserIndexResponse::CopyFrom(const EmailUserIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.EmailUserIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailUserIndexResponse::IsInitialized() const {
  return true;
}

void EmailUserIndexResponse::InternalSwap(EmailUserIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailUserIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[21]);
}

// ===================================================================

class UserResetPasswordRequest::_Internal {
 public:
};

UserResetPasswordRequest::UserResetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserResetPasswordRequest)
}
UserResetPasswordRequest::UserResetPasswordRequest(const UserResetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserResetPasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserResetPasswordRequest)
}

inline void UserResetPasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserResetPasswordRequest::~UserResetPasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserResetPasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserResetPasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.password_.Destroy();
}

void UserResetPasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserResetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserResetPasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserResetPasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserResetPasswordRequest.token"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserResetPasswordRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserResetPasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserResetPasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserResetPasswordRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserResetPasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserResetPasswordRequest)
  return target;
}

size_t UserResetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserResetPasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserResetPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserResetPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserResetPasswordRequest::GetClassData() const { return &_class_data_; }


void UserResetPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserResetPasswordRequest*>(&to_msg);
  auto& from = static_cast<const UserResetPasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserResetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserResetPasswordRequest::CopyFrom(const UserResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserResetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResetPasswordRequest::IsInitialized() const {
  return true;
}

void UserResetPasswordRequest::InternalSwap(UserResetPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserResetPasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[22]);
}

// ===================================================================

class UserByEmailRequest::_Internal {
 public:
};

UserByEmailRequest::UserByEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserByEmailRequest)
}
UserByEmailRequest::UserByEmailRequest(const UserByEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserByEmailRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_user();
  switch (from.user_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserByEmailRequest)
}

inline void UserByEmailRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_user();
}

UserByEmailRequest::~UserByEmailRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserByEmailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserByEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_user()) {
    clear_user();
  }
}

void UserByEmailRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserByEmailRequest::clear_user() {
// @@protoc_insertion_point(one_of_clear_start:palm.balsam.v1.UserByEmailRequest)
  switch (user_case()) {
    case kEmail: {
      _impl_.user_.email_.Destroy();
      break;
    }
    case kNickname: {
      _impl_.user_.nickname_.Destroy();
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = USER_NOT_SET;
}


void UserByEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserByEmailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_user();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserByEmailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserByEmailRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserByEmailRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserByEmailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserByEmailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserByEmailRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string nickname = 2;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserByEmailRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserByEmailRequest)
  return target;
}

size_t UserByEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserByEmailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (user_case()) {
    // string email = 1;
    case kEmail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
      break;
    }
    // string nickname = 2;
    case kNickname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserByEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserByEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserByEmailRequest::GetClassData() const { return &_class_data_; }


void UserByEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserByEmailRequest*>(&to_msg);
  auto& from = static_cast<const UserByEmailRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserByEmailRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.user_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserByEmailRequest::CopyFrom(const UserByEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserByEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserByEmailRequest::IsInitialized() const {
  return true;
}

void UserByEmailRequest::InternalSwap(UserByEmailRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_, other->_impl_.user_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserByEmailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[23]);
}

// ===================================================================

class UserByTokenRequest::_Internal {
 public:
};

UserByTokenRequest::UserByTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserByTokenRequest)
}
UserByTokenRequest::UserByTokenRequest(const UserByTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserByTokenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserByTokenRequest)
}

inline void UserByTokenRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserByTokenRequest::~UserByTokenRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserByTokenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserByTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void UserByTokenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserByTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserByTokenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserByTokenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserByTokenRequest.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserByTokenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserByTokenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserByTokenRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserByTokenRequest)
  return target;
}

size_t UserByTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserByTokenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserByTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserByTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserByTokenRequest::GetClassData() const { return &_class_data_; }


void UserByTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserByTokenRequest*>(&to_msg);
  auto& from = static_cast<const UserByTokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserByTokenRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserByTokenRequest::CopyFrom(const UserByTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserByTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserByTokenRequest::IsInitialized() const {
  return true;
}

void UserByTokenRequest::InternalSwap(UserByTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserByTokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[24]);
}

// ===================================================================

class UserSignInByEmailRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const UserSignInByEmailRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
UserSignInByEmailRequest::_Internal::ttl(const UserSignInByEmailRequest* msg) {
  return *msg->_impl_.ttl_;
}
void UserSignInByEmailRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
UserSignInByEmailRequest::UserSignInByEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserSignInByEmailRequest)
}
UserSignInByEmailRequest::UserSignInByEmailRequest(const UserSignInByEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInByEmailRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  clear_has_user();
  switch (from.user_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserSignInByEmailRequest)
}

inline void UserSignInByEmailRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_user();
}

UserSignInByEmailRequest::~UserSignInByEmailRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserSignInByEmailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInByEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
  if (has_user()) {
    clear_user();
  }
}

void UserSignInByEmailRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInByEmailRequest::clear_user() {
// @@protoc_insertion_point(one_of_clear_start:palm.balsam.v1.UserSignInByEmailRequest)
  switch (user_case()) {
    case kEmail: {
      _impl_.user_.email_.Destroy();
      break;
    }
    case kNickname: {
      _impl_.user_.nickname_.Destroy();
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = USER_NOT_SET;
}


void UserSignInByEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserSignInByEmailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  clear_user();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInByEmailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInByEmailRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInByEmailRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string password = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInByEmailRequest.password"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInByEmailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserSignInByEmailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInByEmailRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string nickname = 2;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInByEmailRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string password = 8;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInByEmailRequest.password");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_password(), target);
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserSignInByEmailRequest)
  return target;
}

size_t UserSignInByEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserSignInByEmailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 8;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  switch (user_case()) {
    // string email = 1;
    case kEmail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
      break;
    }
    // string nickname = 2;
    case kNickname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInByEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInByEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInByEmailRequest::GetClassData() const { return &_class_data_; }


void UserSignInByEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInByEmailRequest*>(&to_msg);
  auto& from = static_cast<const UserSignInByEmailRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserSignInByEmailRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  switch (from.user_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInByEmailRequest::CopyFrom(const UserSignInByEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserSignInByEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInByEmailRequest::IsInitialized() const {
  return true;
}

void UserSignInByEmailRequest::InternalSwap(UserSignInByEmailRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
  swap(_impl_.user_, other->_impl_.user_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInByEmailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[25]);
}

// ===================================================================

class UserSignUpByEmailRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const UserSignUpByEmailRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
UserSignUpByEmailRequest::_Internal::ttl(const UserSignUpByEmailRequest* msg) {
  return *msg->_impl_.ttl_;
}
void UserSignUpByEmailRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
UserSignUpByEmailRequest::UserSignUpByEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserSignUpByEmailRequest)
}
UserSignUpByEmailRequest::UserSignUpByEmailRequest(const UserSignUpByEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignUpByEmailRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.real_name_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.home_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserSignUpByEmailRequest)
}

inline void UserSignUpByEmailRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.real_name_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.home_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSignUpByEmailRequest::~UserSignUpByEmailRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserSignUpByEmailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignUpByEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.real_name_.Destroy();
  _impl_.email_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.password_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.timezone_.Destroy();
  _impl_.home_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void UserSignUpByEmailRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignUpByEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserSignUpByEmailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.real_name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  _impl_.home_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignUpByEmailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string real_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignUpByEmailRequest.real_name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignUpByEmailRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignUpByEmailRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignUpByEmailRequest.password"));
        } else
          goto handle_unusual;
        continue;
      // string lang = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignUpByEmailRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignUpByEmailRequest.timezone"));
        } else
          goto handle_unusual;
        continue;
      // string home = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignUpByEmailRequest.home"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignUpByEmailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserSignUpByEmailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignUpByEmailRequest.real_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_real_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignUpByEmailRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignUpByEmailRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignUpByEmailRequest.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // string lang = 5;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignUpByEmailRequest.lang");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lang(), target);
  }

  // string timezone = 6;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignUpByEmailRequest.timezone");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_timezone(), target);
  }

  // string home = 7;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignUpByEmailRequest.home");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_home(), target);
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserSignUpByEmailRequest)
  return target;
}

size_t UserSignUpByEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserSignUpByEmailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string lang = 5;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string timezone = 6;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // string home = 7;
  if (!this->_internal_home().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignUpByEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignUpByEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignUpByEmailRequest::GetClassData() const { return &_class_data_; }


void UserSignUpByEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignUpByEmailRequest*>(&to_msg);
  auto& from = static_cast<const UserSignUpByEmailRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserSignUpByEmailRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignUpByEmailRequest::CopyFrom(const UserSignUpByEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserSignUpByEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignUpByEmailRequest::IsInitialized() const {
  return true;
}

void UserSignUpByEmailRequest::InternalSwap(UserSignUpByEmailRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.home_, lhs_arena,
      &other->_impl_.home_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignUpByEmailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[26]);
}

// ===================================================================

class UserSignInResponse_Detail::_Internal {
 public:
  using HasBits = decltype(std::declval<UserSignInResponse_Detail>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserSignInResponse_Detail::UserSignInResponse_Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserSignInResponse.Detail)
}
UserSignInResponse_Detail::UserSignInResponse_Detail(const UserSignInResponse_Detail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInResponse_Detail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.provider_id_){}
    , decltype(_impl_.provider_type_){}
    , decltype(_impl_.has_email_){}
    , decltype(_impl_.has_phone_){}
    , decltype(_impl_.has_google_oauth2_){}
    , decltype(_impl_.has_wechat_oauth2_){}
    , decltype(_impl_.has_wechat_mini_program_){}
    , decltype(_impl_.has_facebook_oauth2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar()) {
    _this->_impl_.avatar_.Set(from._internal_avatar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.provider_id_, &from._impl_.provider_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_facebook_oauth2_) -
    reinterpret_cast<char*>(&_impl_.provider_id_)) + sizeof(_impl_.has_facebook_oauth2_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserSignInResponse.Detail)
}

inline void UserSignInResponse_Detail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.provider_id_){uint64_t{0u}}
    , decltype(_impl_.provider_type_){0}
    , decltype(_impl_.has_email_){false}
    , decltype(_impl_.has_phone_){false}
    , decltype(_impl_.has_google_oauth2_){false}
    , decltype(_impl_.has_wechat_oauth2_){false}
    , decltype(_impl_.has_wechat_mini_program_){false}
    , decltype(_impl_.has_facebook_oauth2_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSignInResponse_Detail::~UserSignInResponse_Detail() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserSignInResponse.Detail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInResponse_Detail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.avatar_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.timezone_.Destroy();
}

void UserSignInResponse_Detail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInResponse_Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserSignInResponse.Detail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.avatar_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.lang_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  ::memset(&_impl_.provider_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_facebook_oauth2_) -
      reinterpret_cast<char*>(&_impl_.provider_id_)) + sizeof(_impl_.has_facebook_oauth2_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInResponse_Detail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.Detail.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string avatar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.Detail.avatar"));
        } else
          goto handle_unusual;
        continue;
      // string lang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.Detail.lang"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.Detail.timezone"));
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.UserSignInResponse.Detail.ProviderType provider_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_provider_type(static_cast<::palm::balsam::v1::UserSignInResponse_Detail_ProviderType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 provider_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.provider_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_email = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.has_email_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_phone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.has_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_google_oauth2 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.has_google_oauth2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_wechat_oauth2 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.has_wechat_oauth2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_wechat_mini_program = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.has_wechat_mini_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_facebook_oauth2 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.has_facebook_oauth2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInResponse_Detail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserSignInResponse.Detail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.Detail.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string avatar = 2;
  if (_internal_has_avatar()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.Detail.avatar");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatar(), target);
  }

  // string lang = 3;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.Detail.lang");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lang(), target);
  }

  // string timezone = 4;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.Detail.timezone");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timezone(), target);
  }

  // .palm.balsam.v1.UserSignInResponse.Detail.ProviderType provider_type = 8;
  if (this->_internal_provider_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_provider_type(), target);
  }

  // uint64 provider_id = 9;
  if (this->_internal_provider_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_provider_id(), target);
  }

  // bool has_email = 11;
  if (this->_internal_has_email() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_has_email(), target);
  }

  // bool has_phone = 12;
  if (this->_internal_has_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_has_phone(), target);
  }

  // bool has_google_oauth2 = 21;
  if (this->_internal_has_google_oauth2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_has_google_oauth2(), target);
  }

  // bool has_wechat_oauth2 = 22;
  if (this->_internal_has_wechat_oauth2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_has_wechat_oauth2(), target);
  }

  // bool has_wechat_mini_program = 23;
  if (this->_internal_has_wechat_mini_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_has_wechat_mini_program(), target);
  }

  // bool has_facebook_oauth2 = 24;
  if (this->_internal_has_facebook_oauth2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_has_facebook_oauth2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserSignInResponse.Detail)
  return target;
}

size_t UserSignInResponse_Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserSignInResponse.Detail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string avatar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar());
    }

  }
  // string lang = 3;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string timezone = 4;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // uint64 provider_id = 9;
  if (this->_internal_provider_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_provider_id());
  }

  // .palm.balsam.v1.UserSignInResponse.Detail.ProviderType provider_type = 8;
  if (this->_internal_provider_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_provider_type());
  }

  // bool has_email = 11;
  if (this->_internal_has_email() != 0) {
    total_size += 1 + 1;
  }

  // bool has_phone = 12;
  if (this->_internal_has_phone() != 0) {
    total_size += 1 + 1;
  }

  // bool has_google_oauth2 = 21;
  if (this->_internal_has_google_oauth2() != 0) {
    total_size += 2 + 1;
  }

  // bool has_wechat_oauth2 = 22;
  if (this->_internal_has_wechat_oauth2() != 0) {
    total_size += 2 + 1;
  }

  // bool has_wechat_mini_program = 23;
  if (this->_internal_has_wechat_mini_program() != 0) {
    total_size += 2 + 1;
  }

  // bool has_facebook_oauth2 = 24;
  if (this->_internal_has_facebook_oauth2() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInResponse_Detail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInResponse_Detail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInResponse_Detail::GetClassData() const { return &_class_data_; }


void UserSignInResponse_Detail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInResponse_Detail*>(&to_msg);
  auto& from = static_cast<const UserSignInResponse_Detail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserSignInResponse.Detail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_avatar(from._internal_avatar());
    }
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (from._internal_provider_id() != 0) {
    _this->_internal_set_provider_id(from._internal_provider_id());
  }
  if (from._internal_provider_type() != 0) {
    _this->_internal_set_provider_type(from._internal_provider_type());
  }
  if (from._internal_has_email() != 0) {
    _this->_internal_set_has_email(from._internal_has_email());
  }
  if (from._internal_has_phone() != 0) {
    _this->_internal_set_has_phone(from._internal_has_phone());
  }
  if (from._internal_has_google_oauth2() != 0) {
    _this->_internal_set_has_google_oauth2(from._internal_has_google_oauth2());
  }
  if (from._internal_has_wechat_oauth2() != 0) {
    _this->_internal_set_has_wechat_oauth2(from._internal_has_wechat_oauth2());
  }
  if (from._internal_has_wechat_mini_program() != 0) {
    _this->_internal_set_has_wechat_mini_program(from._internal_has_wechat_mini_program());
  }
  if (from._internal_has_facebook_oauth2() != 0) {
    _this->_internal_set_has_facebook_oauth2(from._internal_has_facebook_oauth2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInResponse_Detail::CopyFrom(const UserSignInResponse_Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserSignInResponse.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInResponse_Detail::IsInitialized() const {
  return true;
}

void UserSignInResponse_Detail::InternalSwap(UserSignInResponse_Detail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_, lhs_arena,
      &other->_impl_.avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserSignInResponse_Detail, _impl_.has_facebook_oauth2_)
      + sizeof(UserSignInResponse_Detail::_impl_.has_facebook_oauth2_)
      - PROTOBUF_FIELD_OFFSET(UserSignInResponse_Detail, _impl_.provider_id_)>(
          reinterpret_cast<char*>(&_impl_.provider_id_),
          reinterpret_cast<char*>(&other->_impl_.provider_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInResponse_Detail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[27]);
}

// ===================================================================

class UserSignInResponse_Permission::_Internal {
 public:
  using HasBits = decltype(std::declval<UserSignInResponse_Permission>()._impl_._has_bits_);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserSignInResponse_Permission::UserSignInResponse_Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserSignInResponse.Permission)
}
UserSignInResponse_Permission::UserSignInResponse_Permission(const UserSignInResponse_Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInResponse_Permission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.resource_type_){}
    , decltype(_impl_.resource_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    _this->_impl_.operation_.Set(from._internal_operation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_type().empty()) {
    _this->_impl_.resource_type_.Set(from._internal_resource_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.resource_id_ = from._impl_.resource_id_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserSignInResponse.Permission)
}

inline void UserSignInResponse_Permission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.resource_type_){}
    , decltype(_impl_.resource_id_){uint64_t{0u}}
  };
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSignInResponse_Permission::~UserSignInResponse_Permission() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserSignInResponse.Permission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInResponse_Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_.Destroy();
  _impl_.resource_type_.Destroy();
}

void UserSignInResponse_Permission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInResponse_Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserSignInResponse.Permission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_.ClearToEmpty();
  _impl_.resource_type_.ClearToEmpty();
  _impl_.resource_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInResponse_Permission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.Permission.operation"));
        } else
          goto handle_unusual;
        continue;
      // string resource_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resource_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.Permission.resource_type"));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 resource_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_resource_id(&has_bits);
          _impl_.resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInResponse_Permission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserSignInResponse.Permission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation = 1;
  if (!this->_internal_operation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.Permission.operation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation(), target);
  }

  // string resource_type = 2;
  if (!this->_internal_resource_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_type().data(), static_cast<int>(this->_internal_resource_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.Permission.resource_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_type(), target);
  }

  // optional uint64 resource_id = 3;
  if (_internal_has_resource_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_resource_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserSignInResponse.Permission)
  return target;
}

size_t UserSignInResponse_Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserSignInResponse.Permission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation = 1;
  if (!this->_internal_operation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation());
  }

  // string resource_type = 2;
  if (!this->_internal_resource_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_type());
  }

  // optional uint64 resource_id = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_resource_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInResponse_Permission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInResponse_Permission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInResponse_Permission::GetClassData() const { return &_class_data_; }


void UserSignInResponse_Permission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInResponse_Permission*>(&to_msg);
  auto& from = static_cast<const UserSignInResponse_Permission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserSignInResponse.Permission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (!from._internal_resource_type().empty()) {
    _this->_internal_set_resource_type(from._internal_resource_type());
  }
  if (from._internal_has_resource_id()) {
    _this->_internal_set_resource_id(from._internal_resource_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInResponse_Permission::CopyFrom(const UserSignInResponse_Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserSignInResponse.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInResponse_Permission::IsInitialized() const {
  return true;
}

void UserSignInResponse_Permission::InternalSwap(UserSignInResponse_Permission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_, lhs_arena,
      &other->_impl_.operation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_type_, lhs_arena,
      &other->_impl_.resource_type_, rhs_arena
  );
  swap(_impl_.resource_id_, other->_impl_.resource_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInResponse_Permission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[28]);
}

// ===================================================================

class UserSignInResponse_Menu::_Internal {
 public:
  using HasBits = decltype(std::declval<UserSignInResponse_Menu>()._impl_._has_bits_);
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserSignInResponse_Menu::UserSignInResponse_Menu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserSignInResponse.Menu)
}
UserSignInResponse_Menu::UserSignInResponse_Menu(const UserSignInResponse_Menu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInResponse_Menu* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.menus_){from._impl_.menus_}
    , decltype(_impl_.label_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.icon_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    _this->_impl_.icon_.Set(from._internal_icon(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserSignInResponse.Menu)
}

inline void UserSignInResponse_Menu::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.menus_){arena}
    , decltype(_impl_.label_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.icon_){}
  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSignInResponse_Menu::~UserSignInResponse_Menu() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserSignInResponse.Menu)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInResponse_Menu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.menus_.~RepeatedPtrField();
  _impl_.label_.Destroy();
  _impl_.to_.Destroy();
  _impl_.icon_.Destroy();
}

void UserSignInResponse_Menu::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInResponse_Menu::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserSignInResponse.Menu)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.menus_.Clear();
  _impl_.label_.ClearToEmpty();
  _impl_.to_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.icon_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInResponse_Menu::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.Menu.label"));
        } else
          goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.Menu.to"));
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.Menu.icon"));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.balsam.v1.UserSignInResponse.Menu menus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_menus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInResponse_Menu::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserSignInResponse.Menu)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.Menu.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.Menu.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // optional string icon = 3;
  if (_internal_has_icon()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.Menu.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // repeated .palm.balsam.v1.UserSignInResponse.Menu menus = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_menus_size()); i < n; i++) {
    const auto& repfield = this->_internal_menus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserSignInResponse.Menu)
  return target;
}

size_t UserSignInResponse_Menu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserSignInResponse.Menu)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.UserSignInResponse.Menu menus = 9;
  total_size += 1UL * this->_internal_menus_size();
  for (const auto& msg : this->_impl_.menus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // optional string icon = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInResponse_Menu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInResponse_Menu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInResponse_Menu::GetClassData() const { return &_class_data_; }


void UserSignInResponse_Menu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInResponse_Menu*>(&to_msg);
  auto& from = static_cast<const UserSignInResponse_Menu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserSignInResponse.Menu)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.menus_.MergeFrom(from._impl_.menus_);
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (from._internal_has_icon()) {
    _this->_internal_set_icon(from._internal_icon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInResponse_Menu::CopyFrom(const UserSignInResponse_Menu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserSignInResponse.Menu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInResponse_Menu::IsInitialized() const {
  return true;
}

void UserSignInResponse_Menu::InternalSwap(UserSignInResponse_Menu* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.menus_.InternalSwap(&other->_impl_.menus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.icon_, lhs_arena,
      &other->_impl_.icon_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInResponse_Menu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[29]);
}

// ===================================================================

class UserSignInResponse::_Internal {
 public:
  static const ::palm::balsam::v1::UserSignInResponse_Detail& detail(const UserSignInResponse* msg);
};

const ::palm::balsam::v1::UserSignInResponse_Detail&
UserSignInResponse::_Internal::detail(const UserSignInResponse* msg) {
  return *msg->_impl_.detail_;
}
UserSignInResponse::UserSignInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserSignInResponse)
}
UserSignInResponse::UserSignInResponse(const UserSignInResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){from._impl_.roles_}
    , decltype(_impl_.permissions_){from._impl_.permissions_}
    , decltype(_impl_.menus_){from._impl_.menus_}
    , decltype(_impl_.token_){}
    , decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_detail()) {
    _this->_impl_.detail_ = new ::palm::balsam::v1::UserSignInResponse_Detail(*from._impl_.detail_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserSignInResponse)
}

inline void UserSignInResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){arena}
    , decltype(_impl_.permissions_){arena}
    , decltype(_impl_.menus_){arena}
    , decltype(_impl_.token_){}
    , decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSignInResponse::~UserSignInResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserSignInResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roles_.~RepeatedPtrField();
  _impl_.permissions_.~RepeatedPtrField();
  _impl_.menus_.~RepeatedPtrField();
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.detail_;
}

void UserSignInResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserSignInResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roles_.Clear();
  _impl_.permissions_.Clear();
  _impl_.menus_.Clear();
  _impl_.token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.token"));
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.UserSignInResponse.Detail detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string roles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInResponse.roles"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.balsam.v1.UserSignInResponse.Permission permissions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.balsam.v1.UserSignInResponse.Menu menus = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_menus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserSignInResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .palm.balsam.v1.UserSignInResponse.Detail detail = 2;
  if (this->_internal_has_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::detail(this),
        _Internal::detail(this).GetCachedSize(), target, stream);
  }

  // repeated string roles = 11;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInResponse.roles");
    target = stream->WriteString(11, s, target);
  }

  // repeated .palm.balsam.v1.UserSignInResponse.Permission permissions = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.balsam.v1.UserSignInResponse.Menu menus = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_menus_size()); i < n; i++) {
    const auto& repfield = this->_internal_menus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserSignInResponse)
  return target;
}

size_t UserSignInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserSignInResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.roles_.size());
  for (int i = 0, n = _impl_.roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.roles_.Get(i));
  }

  // repeated .palm.balsam.v1.UserSignInResponse.Permission permissions = 12;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_impl_.permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.balsam.v1.UserSignInResponse.Menu menus = 13;
  total_size += 1UL * this->_internal_menus_size();
  for (const auto& msg : this->_impl_.menus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .palm.balsam.v1.UserSignInResponse.Detail detail = 2;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInResponse::GetClassData() const { return &_class_data_; }


void UserSignInResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInResponse*>(&to_msg);
  auto& from = static_cast<const UserSignInResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserSignInResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roles_.MergeFrom(from._impl_.roles_);
  _this->_impl_.permissions_.MergeFrom(from._impl_.permissions_);
  _this->_impl_.menus_.MergeFrom(from._impl_.menus_);
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_has_detail()) {
    _this->_internal_mutable_detail()->::palm::balsam::v1::UserSignInResponse_Detail::MergeFrom(
        from._internal_detail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInResponse::CopyFrom(const UserSignInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserSignInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInResponse::IsInitialized() const {
  return true;
}

void UserSignInResponse::InternalSwap(UserSignInResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.roles_.InternalSwap(&other->_impl_.roles_);
  _impl_.permissions_.InternalSwap(&other->_impl_.permissions_);
  _impl_.menus_.InternalSwap(&other->_impl_.menus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.detail_, other->_impl_.detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[30]);
}

// ===================================================================

class GoogleOauth2UserBySubjectRequest::_Internal {
 public:
};

GoogleOauth2UserBySubjectRequest::GoogleOauth2UserBySubjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.GoogleOauth2UserBySubjectRequest)
}
GoogleOauth2UserBySubjectRequest::GoogleOauth2UserBySubjectRequest(const GoogleOauth2UserBySubjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleOauth2UserBySubjectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.GoogleOauth2UserBySubjectRequest)
}

inline void GoogleOauth2UserBySubjectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleOauth2UserBySubjectRequest::~GoogleOauth2UserBySubjectRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.GoogleOauth2UserBySubjectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleOauth2UserBySubjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subject_.Destroy();
}

void GoogleOauth2UserBySubjectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleOauth2UserBySubjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.GoogleOauth2UserBySubjectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleOauth2UserBySubjectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.GoogleOauth2UserBySubjectRequest.subject"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleOauth2UserBySubjectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.GoogleOauth2UserBySubjectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.GoogleOauth2UserBySubjectRequest.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.GoogleOauth2UserBySubjectRequest)
  return target;
}

size_t GoogleOauth2UserBySubjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.GoogleOauth2UserBySubjectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleOauth2UserBySubjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleOauth2UserBySubjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleOauth2UserBySubjectRequest::GetClassData() const { return &_class_data_; }


void GoogleOauth2UserBySubjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleOauth2UserBySubjectRequest*>(&to_msg);
  auto& from = static_cast<const GoogleOauth2UserBySubjectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.GoogleOauth2UserBySubjectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleOauth2UserBySubjectRequest::CopyFrom(const GoogleOauth2UserBySubjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.GoogleOauth2UserBySubjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleOauth2UserBySubjectRequest::IsInitialized() const {
  return true;
}

void GoogleOauth2UserBySubjectRequest::InternalSwap(GoogleOauth2UserBySubjectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleOauth2UserBySubjectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[31]);
}

// ===================================================================

class GoogleOauth2UserIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<GoogleOauth2UserIndexResponse_Item>()._impl_._has_bits_);
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_picture(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const GoogleOauth2UserIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const GoogleOauth2UserIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GoogleOauth2UserIndexResponse_Item::_Internal::deleted_at(const GoogleOauth2UserIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GoogleOauth2UserIndexResponse_Item::_Internal::updated_at(const GoogleOauth2UserIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void GoogleOauth2UserIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void GoogleOauth2UserIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
GoogleOauth2UserIndexResponse_Item::GoogleOauth2UserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.GoogleOauth2UserIndexResponse.Item)
}
GoogleOauth2UserIndexResponse_Item::GoogleOauth2UserIndexResponse_Item(const GoogleOauth2UserIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleOauth2UserIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.picture_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.email_verified_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.picture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_picture()) {
    _this->_impl_.picture_.Set(from._internal_picture(), 
      _this->GetArenaForAllocation());
  }
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    _this->_impl_.locale_.Set(from._internal_locale(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.email_verified_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.email_verified_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.GoogleOauth2UserIndexResponse.Item)
}

inline void GoogleOauth2UserIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.picture_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.email_verified_){false}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.picture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleOauth2UserIndexResponse_Item::~GoogleOauth2UserIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.GoogleOauth2UserIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleOauth2UserIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subject_.Destroy();
  _impl_.email_.Destroy();
  _impl_.name_.Destroy();
  _impl_.picture_.Destroy();
  _impl_.locale_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void GoogleOauth2UserIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleOauth2UserIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.GoogleOauth2UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.picture_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.email_verified_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.email_verified_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleOauth2UserIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subject = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.subject"));
        } else
          goto handle_unusual;
        continue;
      // optional string email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.email"));
        } else
          goto handle_unusual;
        continue;
      // bool email_verified = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.email_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string picture = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_picture();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.picture"));
        } else
          goto handle_unusual;
        continue;
      // optional string locale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.locale"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleOauth2UserIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.GoogleOauth2UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string subject = 3;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.subject");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subject(), target);
  }

  // optional string email = 4;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.email");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_email(), target);
  }

  // bool email_verified = 5;
  if (this->_internal_email_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_email_verified(), target);
  }

  // optional string name = 6;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // optional string picture = 7;
  if (_internal_has_picture()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picture().data(), static_cast<int>(this->_internal_picture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.picture");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_picture(), target);
  }

  // optional string locale = 8;
  if (_internal_has_locale()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.GoogleOauth2UserIndexResponse.Item.locale");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_locale(), target);
  }

  // optional .google.protobuf.Timestamp deleted_at = 9;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 10;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.GoogleOauth2UserIndexResponse.Item)
  return target;
}

size_t GoogleOauth2UserIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.GoogleOauth2UserIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 3;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string email = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
    }

    // optional string name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string picture = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_picture());
    }

    // optional string locale = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale());
    }

    // optional .google.protobuf.Timestamp deleted_at = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_at_);
    }

  }
  // .google.protobuf.Timestamp updated_at = 10;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // bool email_verified = 5;
  if (this->_internal_email_verified() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleOauth2UserIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleOauth2UserIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleOauth2UserIndexResponse_Item::GetClassData() const { return &_class_data_; }


void GoogleOauth2UserIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleOauth2UserIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const GoogleOauth2UserIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.GoogleOauth2UserIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_picture(from._internal_picture());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_locale(from._internal_locale());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_email_verified() != 0) {
    _this->_internal_set_email_verified(from._internal_email_verified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleOauth2UserIndexResponse_Item::CopyFrom(const GoogleOauth2UserIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.GoogleOauth2UserIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleOauth2UserIndexResponse_Item::IsInitialized() const {
  return true;
}

void GoogleOauth2UserIndexResponse_Item::InternalSwap(GoogleOauth2UserIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.picture_, lhs_arena,
      &other->_impl_.picture_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locale_, lhs_arena,
      &other->_impl_.locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GoogleOauth2UserIndexResponse_Item, _impl_.email_verified_)
      + sizeof(GoogleOauth2UserIndexResponse_Item::_impl_.email_verified_)
      - PROTOBUF_FIELD_OFFSET(GoogleOauth2UserIndexResponse_Item, _impl_.deleted_at_)>(
          reinterpret_cast<char*>(&_impl_.deleted_at_),
          reinterpret_cast<char*>(&other->_impl_.deleted_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleOauth2UserIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[32]);
}

// ===================================================================

class GoogleOauth2UserIndexResponse::_Internal {
 public:
};

GoogleOauth2UserIndexResponse::GoogleOauth2UserIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.GoogleOauth2UserIndexResponse)
}
GoogleOauth2UserIndexResponse::GoogleOauth2UserIndexResponse(const GoogleOauth2UserIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleOauth2UserIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.GoogleOauth2UserIndexResponse)
}

inline void GoogleOauth2UserIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GoogleOauth2UserIndexResponse::~GoogleOauth2UserIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.GoogleOauth2UserIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleOauth2UserIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void GoogleOauth2UserIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleOauth2UserIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.GoogleOauth2UserIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleOauth2UserIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.GoogleOauth2UserIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleOauth2UserIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.GoogleOauth2UserIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.GoogleOauth2UserIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.GoogleOauth2UserIndexResponse)
  return target;
}

size_t GoogleOauth2UserIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.GoogleOauth2UserIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.GoogleOauth2UserIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleOauth2UserIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleOauth2UserIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleOauth2UserIndexResponse::GetClassData() const { return &_class_data_; }


void GoogleOauth2UserIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleOauth2UserIndexResponse*>(&to_msg);
  auto& from = static_cast<const GoogleOauth2UserIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.GoogleOauth2UserIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleOauth2UserIndexResponse::CopyFrom(const GoogleOauth2UserIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.GoogleOauth2UserIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleOauth2UserIndexResponse::IsInitialized() const {
  return true;
}

void GoogleOauth2UserIndexResponse::InternalSwap(GoogleOauth2UserIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleOauth2UserIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[33]);
}

// ===================================================================

class WechatByUnionIdRequest::_Internal {
 public:
};

WechatByUnionIdRequest::WechatByUnionIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.WechatByUnionIdRequest)
}
WechatByUnionIdRequest::WechatByUnionIdRequest(const WechatByUnionIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatByUnionIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.union_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.WechatByUnionIdRequest)
}

inline void WechatByUnionIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.union_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatByUnionIdRequest::~WechatByUnionIdRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.WechatByUnionIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatByUnionIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.union_id_.Destroy();
}

void WechatByUnionIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatByUnionIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.WechatByUnionIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.union_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatByUnionIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string union_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatByUnionIdRequest.union_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatByUnionIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.WechatByUnionIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string union_id = 1;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatByUnionIdRequest.union_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_union_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.WechatByUnionIdRequest)
  return target;
}

size_t WechatByUnionIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.WechatByUnionIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string union_id = 1;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatByUnionIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatByUnionIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatByUnionIdRequest::GetClassData() const { return &_class_data_; }


void WechatByUnionIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatByUnionIdRequest*>(&to_msg);
  auto& from = static_cast<const WechatByUnionIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.WechatByUnionIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatByUnionIdRequest::CopyFrom(const WechatByUnionIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.WechatByUnionIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatByUnionIdRequest::IsInitialized() const {
  return true;
}

void WechatByUnionIdRequest::InternalSwap(WechatByUnionIdRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatByUnionIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[34]);
}

// ===================================================================

class WechatByAppIdAndOpenIdRequest::_Internal {
 public:
};

WechatByAppIdAndOpenIdRequest::WechatByAppIdAndOpenIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.WechatByAppIdAndOpenIdRequest)
}
WechatByAppIdAndOpenIdRequest::WechatByAppIdAndOpenIdRequest(const WechatByAppIdAndOpenIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatByAppIdAndOpenIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.WechatByAppIdAndOpenIdRequest)
}

inline void WechatByAppIdAndOpenIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatByAppIdAndOpenIdRequest::~WechatByAppIdAndOpenIdRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.WechatByAppIdAndOpenIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatByAppIdAndOpenIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
}

void WechatByAppIdAndOpenIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatByAppIdAndOpenIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.WechatByAppIdAndOpenIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatByAppIdAndOpenIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatByAppIdAndOpenIdRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatByAppIdAndOpenIdRequest.open_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatByAppIdAndOpenIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.WechatByAppIdAndOpenIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatByAppIdAndOpenIdRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string open_id = 2;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatByAppIdAndOpenIdRequest.open_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_open_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.WechatByAppIdAndOpenIdRequest)
  return target;
}

size_t WechatByAppIdAndOpenIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.WechatByAppIdAndOpenIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 2;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatByAppIdAndOpenIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatByAppIdAndOpenIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatByAppIdAndOpenIdRequest::GetClassData() const { return &_class_data_; }


void WechatByAppIdAndOpenIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatByAppIdAndOpenIdRequest*>(&to_msg);
  auto& from = static_cast<const WechatByAppIdAndOpenIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.WechatByAppIdAndOpenIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatByAppIdAndOpenIdRequest::CopyFrom(const WechatByAppIdAndOpenIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.WechatByAppIdAndOpenIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatByAppIdAndOpenIdRequest::IsInitialized() const {
  return true;
}

void WechatByAppIdAndOpenIdRequest::InternalSwap(WechatByAppIdAndOpenIdRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatByAppIdAndOpenIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[35]);
}

// ===================================================================

class WechatOauth2UserIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<WechatOauth2UserIndexResponse_Item>()._impl_._has_bits_);
  static void set_has_head_img_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_picture(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const WechatOauth2UserIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const WechatOauth2UserIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WechatOauth2UserIndexResponse_Item::_Internal::deleted_at(const WechatOauth2UserIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WechatOauth2UserIndexResponse_Item::_Internal::updated_at(const WechatOauth2UserIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void WechatOauth2UserIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void WechatOauth2UserIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
WechatOauth2UserIndexResponse_Item::WechatOauth2UserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.WechatOauth2UserIndexResponse.Item)
}
WechatOauth2UserIndexResponse_Item::WechatOauth2UserIndexResponse_Item(const WechatOauth2UserIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2UserIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_){from._impl_.privilege_}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.head_img_url_){}
    , decltype(_impl_.picture_){}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.sex_){}
    , decltype(_impl_.lang_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_city().empty()) {
    _this->_impl_.city_.Set(from._internal_city(), 
      _this->GetArenaForAllocation());
  }
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_province().empty()) {
    _this->_impl_.province_.Set(from._internal_province(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.head_img_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_img_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_head_img_url()) {
    _this->_impl_.head_img_url_.Set(from._internal_head_img_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.picture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_picture()) {
    _this->_impl_.picture_.Set(from._internal_picture(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lang_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.lang_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.WechatOauth2UserIndexResponse.Item)
}

inline void WechatOauth2UserIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_){arena}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.head_img_url_){}
    , decltype(_impl_.picture_){}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.sex_){0}
    , decltype(_impl_.lang_){0}
  };
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_img_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_img_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.picture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatOauth2UserIndexResponse_Item::~WechatOauth2UserIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.WechatOauth2UserIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2UserIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.privilege_.~RepeatedPtrField();
  _impl_.union_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.city_.Destroy();
  _impl_.province_.Destroy();
  _impl_.country_.Destroy();
  _impl_.head_img_url_.Destroy();
  _impl_.picture_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void WechatOauth2UserIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2UserIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.WechatOauth2UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.privilege_.Clear();
  _impl_.union_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.city_.ClearToEmpty();
  _impl_.province_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.head_img_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.picture_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lang_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.lang_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2UserIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string union_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.union_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.open_id"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.nickname"));
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Sex sex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sex(static_cast<::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Sex>(val));
        } else
          goto handle_unusual;
        continue;
      // string city = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.city"));
        } else
          goto handle_unusual;
        continue;
      // string province = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_province();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.province"));
        } else
          goto handle_unusual;
        continue;
      // string country = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.country"));
        } else
          goto handle_unusual;
        continue;
      // optional string head_img_url = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_head_img_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.head_img_url"));
        } else
          goto handle_unusual;
        continue;
      // repeated string privilege = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_privilege();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.privilege"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string picture = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_picture();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.picture"));
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lang(static_cast<::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2UserIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.WechatOauth2UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.union_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_union_id(), target);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.open_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_open_id(), target);
  }

  // string nickname = 6;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_nickname(), target);
  }

  // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Sex sex = 7;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_sex(), target);
  }

  // string city = 8;
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.city");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_city(), target);
  }

  // string province = 9;
  if (!this->_internal_province().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_province().data(), static_cast<int>(this->_internal_province().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.province");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_province(), target);
  }

  // string country = 10;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.country");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_country(), target);
  }

  // optional string head_img_url = 11;
  if (_internal_has_head_img_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head_img_url().data(), static_cast<int>(this->_internal_head_img_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.head_img_url");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_head_img_url(), target);
  }

  // repeated string privilege = 12;
  for (int i = 0, n = this->_internal_privilege_size(); i < n; i++) {
    const auto& s = this->_internal_privilege(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.privilege");
    target = stream->WriteString(12, s, target);
  }

  // optional string picture = 13;
  if (_internal_has_picture()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picture().data(), static_cast<int>(this->_internal_picture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatOauth2UserIndexResponse.Item.picture");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_picture(), target);
  }

  // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 14;
  if (this->_internal_lang() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_lang(), target);
  }

  // optional .google.protobuf.Timestamp deleted_at = 15;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 16;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.WechatOauth2UserIndexResponse.Item)
  return target;
}

size_t WechatOauth2UserIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.WechatOauth2UserIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string privilege = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.privilege_.size());
  for (int i = 0, n = _impl_.privilege_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.privilege_.Get(i));
  }

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  // string nickname = 6;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string city = 8;
  if (!this->_internal_city().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string province = 9;
  if (!this->_internal_province().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_province());
  }

  // string country = 10;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string head_img_url = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_head_img_url());
    }

    // optional string picture = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_picture());
    }

    // optional .google.protobuf.Timestamp deleted_at = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_at_);
    }

  }
  // .google.protobuf.Timestamp updated_at = 16;
  if (this->_internal_has_updated_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Sex sex = 7;
  if (this->_internal_sex() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sex());
  }

  // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 14;
  if (this->_internal_lang() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lang());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2UserIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2UserIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2UserIndexResponse_Item::GetClassData() const { return &_class_data_; }


void WechatOauth2UserIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2UserIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const WechatOauth2UserIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.WechatOauth2UserIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.privilege_.MergeFrom(from._impl_.privilege_);
  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_city().empty()) {
    _this->_internal_set_city(from._internal_city());
  }
  if (!from._internal_province().empty()) {
    _this->_internal_set_province(from._internal_province());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_head_img_url(from._internal_head_img_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_picture(from._internal_picture());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_sex() != 0) {
    _this->_internal_set_sex(from._internal_sex());
  }
  if (from._internal_lang() != 0) {
    _this->_internal_set_lang(from._internal_lang());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2UserIndexResponse_Item::CopyFrom(const WechatOauth2UserIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.WechatOauth2UserIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2UserIndexResponse_Item::IsInitialized() const {
  return true;
}

void WechatOauth2UserIndexResponse_Item::InternalSwap(WechatOauth2UserIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.privilege_.InternalSwap(&other->_impl_.privilege_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_, lhs_arena,
      &other->_impl_.city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.province_, lhs_arena,
      &other->_impl_.province_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.head_img_url_, lhs_arena,
      &other->_impl_.head_img_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.picture_, lhs_arena,
      &other->_impl_.picture_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WechatOauth2UserIndexResponse_Item, _impl_.lang_)
      + sizeof(WechatOauth2UserIndexResponse_Item::_impl_.lang_)
      - PROTOBUF_FIELD_OFFSET(WechatOauth2UserIndexResponse_Item, _impl_.deleted_at_)>(
          reinterpret_cast<char*>(&_impl_.deleted_at_),
          reinterpret_cast<char*>(&other->_impl_.deleted_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2UserIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[36]);
}

// ===================================================================

class WechatOauth2UserIndexResponse::_Internal {
 public:
};

WechatOauth2UserIndexResponse::WechatOauth2UserIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.WechatOauth2UserIndexResponse)
}
WechatOauth2UserIndexResponse::WechatOauth2UserIndexResponse(const WechatOauth2UserIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2UserIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.WechatOauth2UserIndexResponse)
}

inline void WechatOauth2UserIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WechatOauth2UserIndexResponse::~WechatOauth2UserIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.WechatOauth2UserIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2UserIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void WechatOauth2UserIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2UserIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.WechatOauth2UserIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2UserIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.WechatOauth2UserIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2UserIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.WechatOauth2UserIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.WechatOauth2UserIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.WechatOauth2UserIndexResponse)
  return target;
}

size_t WechatOauth2UserIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.WechatOauth2UserIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.WechatOauth2UserIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2UserIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2UserIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2UserIndexResponse::GetClassData() const { return &_class_data_; }


void WechatOauth2UserIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2UserIndexResponse*>(&to_msg);
  auto& from = static_cast<const WechatOauth2UserIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.WechatOauth2UserIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2UserIndexResponse::CopyFrom(const WechatOauth2UserIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.WechatOauth2UserIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2UserIndexResponse::IsInitialized() const {
  return true;
}

void WechatOauth2UserIndexResponse::InternalSwap(WechatOauth2UserIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2UserIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[37]);
}

// ===================================================================

class WechatMiniProgramUserIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<WechatMiniProgramUserIndexResponse_Item>()._impl_._has_bits_);
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avatar_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const WechatMiniProgramUserIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const WechatMiniProgramUserIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WechatMiniProgramUserIndexResponse_Item::_Internal::deleted_at(const WechatMiniProgramUserIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WechatMiniProgramUserIndexResponse_Item::_Internal::updated_at(const WechatMiniProgramUserIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void WechatMiniProgramUserIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void WechatMiniProgramUserIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
WechatMiniProgramUserIndexResponse_Item::WechatMiniProgramUserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item)
}
WechatMiniProgramUserIndexResponse_Item::WechatMiniProgramUserIndexResponse_Item(const WechatMiniProgramUserIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatMiniProgramUserIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_url()) {
    _this->_impl_.avatar_url_.Set(from._internal_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item)
}

inline void WechatMiniProgramUserIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.user_id_){uint64_t{0u}}
  };
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatMiniProgramUserIndexResponse_Item::~WechatMiniProgramUserIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatMiniProgramUserIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.union_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.avatar_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void WechatMiniProgramUserIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatMiniProgramUserIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.union_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.avatar_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatMiniProgramUserIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string union_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.union_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.open_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.nickname"));
        } else
          goto handle_unusual;
        continue;
      // optional string avatar_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.avatar_url"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatMiniProgramUserIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.union_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_union_id(), target);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.open_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_open_id(), target);
  }

  // optional string nickname = 6;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_nickname(), target);
  }

  // optional string avatar_url = 7;
  if (_internal_has_avatar_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item.avatar_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_avatar_url(), target);
  }

  // optional .google.protobuf.Timestamp deleted_at = 8;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item)
  return target;
}

size_t WechatMiniProgramUserIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string nickname = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional string avatar_url = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_url());
    }

    // optional .google.protobuf.Timestamp deleted_at = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_at_);
    }

  }
  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatMiniProgramUserIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatMiniProgramUserIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatMiniProgramUserIndexResponse_Item::GetClassData() const { return &_class_data_; }


void WechatMiniProgramUserIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatMiniProgramUserIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const WechatMiniProgramUserIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_avatar_url(from._internal_avatar_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatMiniProgramUserIndexResponse_Item::CopyFrom(const WechatMiniProgramUserIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatMiniProgramUserIndexResponse_Item::IsInitialized() const {
  return true;
}

void WechatMiniProgramUserIndexResponse_Item::InternalSwap(WechatMiniProgramUserIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_url_, lhs_arena,
      &other->_impl_.avatar_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WechatMiniProgramUserIndexResponse_Item, _impl_.user_id_)
      + sizeof(WechatMiniProgramUserIndexResponse_Item::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(WechatMiniProgramUserIndexResponse_Item, _impl_.deleted_at_)>(
          reinterpret_cast<char*>(&_impl_.deleted_at_),
          reinterpret_cast<char*>(&other->_impl_.deleted_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatMiniProgramUserIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[38]);
}

// ===================================================================

class WechatMiniProgramUserIndexResponse::_Internal {
 public:
};

WechatMiniProgramUserIndexResponse::WechatMiniProgramUserIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.WechatMiniProgramUserIndexResponse)
}
WechatMiniProgramUserIndexResponse::WechatMiniProgramUserIndexResponse(const WechatMiniProgramUserIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatMiniProgramUserIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.WechatMiniProgramUserIndexResponse)
}

inline void WechatMiniProgramUserIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WechatMiniProgramUserIndexResponse::~WechatMiniProgramUserIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.WechatMiniProgramUserIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatMiniProgramUserIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void WechatMiniProgramUserIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatMiniProgramUserIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatMiniProgramUserIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatMiniProgramUserIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.WechatMiniProgramUserIndexResponse)
  return target;
}

size_t WechatMiniProgramUserIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.WechatMiniProgramUserIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatMiniProgramUserIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatMiniProgramUserIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatMiniProgramUserIndexResponse::GetClassData() const { return &_class_data_; }


void WechatMiniProgramUserIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatMiniProgramUserIndexResponse*>(&to_msg);
  auto& from = static_cast<const WechatMiniProgramUserIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatMiniProgramUserIndexResponse::CopyFrom(const WechatMiniProgramUserIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.WechatMiniProgramUserIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatMiniProgramUserIndexResponse::IsInitialized() const {
  return true;
}

void WechatMiniProgramUserIndexResponse::InternalSwap(WechatMiniProgramUserIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatMiniProgramUserIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[39]);
}

// ===================================================================

class SessionIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionIndexResponse_Item>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const SessionIndexResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const SessionIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const SessionIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SessionIndexResponse_Item::_Internal::expires_at(const SessionIndexResponse_Item* msg) {
  return *msg->_impl_.expires_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SessionIndexResponse_Item::_Internal::deleted_at(const SessionIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SessionIndexResponse_Item::_Internal::created_at(const SessionIndexResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
void SessionIndexResponse_Item::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
}
void SessionIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SessionIndexResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
SessionIndexResponse_Item::SessionIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SessionIndexResponse.Item)
}
SessionIndexResponse_Item::SessionIndexResponse_Item(const SessionIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.expires_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.user_){}
    , decltype(_impl_.provider_id_){}
    , decltype(_impl_.provider_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_expires_at()) {
    _this->_impl_.expires_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expires_at_);
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  ::memcpy(&_impl_.user_, &from._impl_.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.provider_type_) -
    reinterpret_cast<char*>(&_impl_.user_)) + sizeof(_impl_.provider_type_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SessionIndexResponse.Item)
}

inline void SessionIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.expires_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.user_){uint64_t{0u}}
    , decltype(_impl_.provider_id_){uint64_t{0u}}
    , decltype(_impl_.provider_type_){0}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionIndexResponse_Item::~SessionIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SessionIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.expires_at_;
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void SessionIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SessionIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
    _impl_.deleted_at_->Clear();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  ::memset(&_impl_.user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.provider_type_) -
      reinterpret_cast<char*>(&_impl_.user_)) + sizeof(_impl_.provider_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SessionIndexResponse.Item.uid"));
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.UserSignInResponse.Detail.ProviderType provider_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_provider_type(static_cast<::palm::balsam::v1::UserSignInResponse_Detail_ProviderType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 provider_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.provider_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SessionIndexResponse.Item.ip"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SessionIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user(), target);
  }

  // string uid = 2;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SessionIndexResponse.Item.uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // .palm.balsam.v1.UserSignInResponse.Detail.ProviderType provider_type = 3;
  if (this->_internal_provider_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_provider_type(), target);
  }

  // uint64 provider_id = 4;
  if (this->_internal_provider_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_provider_id(), target);
  }

  // string ip = 5;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SessionIndexResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ip(), target);
  }

  // .google.protobuf.Timestamp expires_at = 6;
  if (this->_internal_has_expires_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::expires_at(this),
        _Internal::expires_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp deleted_at = 7;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SessionIndexResponse.Item)
  return target;
}

size_t SessionIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SessionIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 2;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string ip = 5;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .google.protobuf.Timestamp expires_at = 6;
  if (this->_internal_has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expires_at_);
  }

  // optional .google.protobuf.Timestamp deleted_at = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deleted_at_);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user());
  }

  // uint64 provider_id = 4;
  if (this->_internal_provider_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_provider_id());
  }

  // .palm.balsam.v1.UserSignInResponse.Detail.ProviderType provider_type = 3;
  if (this->_internal_provider_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_provider_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionIndexResponse_Item::GetClassData() const { return &_class_data_; }


void SessionIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const SessionIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SessionIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_has_expires_at()) {
    _this->_internal_mutable_expires_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expires_at());
  }
  if (from._internal_has_deleted_at()) {
    _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_deleted_at());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_provider_id() != 0) {
    _this->_internal_set_provider_id(from._internal_provider_id());
  }
  if (from._internal_provider_type() != 0) {
    _this->_internal_set_provider_type(from._internal_provider_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionIndexResponse_Item::CopyFrom(const SessionIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SessionIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionIndexResponse_Item::IsInitialized() const {
  return true;
}

void SessionIndexResponse_Item::InternalSwap(SessionIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionIndexResponse_Item, _impl_.provider_type_)
      + sizeof(SessionIndexResponse_Item::_impl_.provider_type_)
      - PROTOBUF_FIELD_OFFSET(SessionIndexResponse_Item, _impl_.expires_at_)>(
          reinterpret_cast<char*>(&_impl_.expires_at_),
          reinterpret_cast<char*>(&other->_impl_.expires_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[40]);
}

// ===================================================================

class SessionIndexResponse::_Internal {
 public:
};

SessionIndexResponse::SessionIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SessionIndexResponse)
}
SessionIndexResponse::SessionIndexResponse(const SessionIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SessionIndexResponse)
}

inline void SessionIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SessionIndexResponse::~SessionIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SessionIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void SessionIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SessionIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.SessionIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SessionIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.SessionIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SessionIndexResponse)
  return target;
}

size_t SessionIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SessionIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.SessionIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionIndexResponse::GetClassData() const { return &_class_data_; }


void SessionIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionIndexResponse*>(&to_msg);
  auto& from = static_cast<const SessionIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SessionIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionIndexResponse::CopyFrom(const SessionIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SessionIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionIndexResponse::IsInitialized() const {
  return true;
}

void SessionIndexResponse::InternalSwap(SessionIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[41]);
}

// ===================================================================

class AttachmentCreateRequest::_Internal {
 public:
};

AttachmentCreateRequest::AttachmentCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AttachmentCreateRequest)
}
AttachmentCreateRequest::AttachmentCreateRequest(const AttachmentCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.object_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.public__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object().empty()) {
    _this->_impl_.object_.Set(from._internal_object(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_, &from._impl_.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.public__) -
    reinterpret_cast<char*>(&_impl_.user_)) + sizeof(_impl_.public__));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AttachmentCreateRequest)
}

inline void AttachmentCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.object_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.user_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.public__){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachmentCreateRequest::~AttachmentCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AttachmentCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.object_.Destroy();
  _impl_.title_.Destroy();
  _impl_.content_type_.Destroy();
}

void AttachmentCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AttachmentCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.object_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.content_type_.ClearToEmpty();
  ::memset(&_impl_.user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.public__) -
      reinterpret_cast<char*>(&_impl_.user_)) + sizeof(_impl_.public__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentCreateRequest.bucket"));
        } else
          goto handle_unusual;
        continue;
      // string object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_object();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentCreateRequest.object"));
        } else
          goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentCreateRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentCreateRequest.content_type"));
        } else
          goto handle_unusual;
        continue;
      // bool public = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AttachmentCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user(), target);
  }

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentCreateRequest.bucket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket(), target);
  }

  // string object = 3;
  if (!this->_internal_object().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object().data(), static_cast<int>(this->_internal_object().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentCreateRequest.object");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_object(), target);
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentCreateRequest.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // uint64 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size(), target);
  }

  // string content_type = 6;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentCreateRequest.content_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content_type(), target);
  }

  // bool public = 9;
  if (this->_internal_public_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_public_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AttachmentCreateRequest)
  return target;
}

size_t AttachmentCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AttachmentCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string object = 3;
  if (!this->_internal_object().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object());
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content_type = 6;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user());
  }

  // uint64 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // bool public = 9;
  if (this->_internal_public_() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentCreateRequest::GetClassData() const { return &_class_data_; }


void AttachmentCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentCreateRequest*>(&to_msg);
  auto& from = static_cast<const AttachmentCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AttachmentCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_content_type().empty()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_public_() != 0) {
    _this->_internal_set_public_(from._internal_public_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentCreateRequest::CopyFrom(const AttachmentCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AttachmentCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentCreateRequest::IsInitialized() const {
  return true;
}

void AttachmentCreateRequest::InternalSwap(AttachmentCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_, lhs_arena,
      &other->_impl_.object_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_type_, lhs_arena,
      &other->_impl_.content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttachmentCreateRequest, _impl_.public__)
      + sizeof(AttachmentCreateRequest::_impl_.public__)
      - PROTOBUF_FIELD_OFFSET(AttachmentCreateRequest, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[42]);
}

// ===================================================================

class AttachmentByResourceRequest::_Internal {
 public:
};

AttachmentByResourceRequest::AttachmentByResourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AttachmentByResourceRequest)
}
AttachmentByResourceRequest::AttachmentByResourceRequest(const AttachmentByResourceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentByResourceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_type_){}
    , decltype(_impl_.resource_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_type().empty()) {
    _this->_impl_.resource_type_.Set(from._internal_resource_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.resource_id_ = from._impl_.resource_id_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AttachmentByResourceRequest)
}

inline void AttachmentByResourceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_type_){}
    , decltype(_impl_.resource_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachmentByResourceRequest::~AttachmentByResourceRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AttachmentByResourceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentByResourceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_type_.Destroy();
}

void AttachmentByResourceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentByResourceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AttachmentByResourceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_type_.ClearToEmpty();
  _impl_.resource_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentByResourceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string resource_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resource_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentByResourceRequest.resource_type"));
        } else
          goto handle_unusual;
        continue;
      // uint64 resource_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentByResourceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AttachmentByResourceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_type = 1;
  if (!this->_internal_resource_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_type().data(), static_cast<int>(this->_internal_resource_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentByResourceRequest.resource_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_type(), target);
  }

  // uint64 resource_id = 2;
  if (this->_internal_resource_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_resource_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AttachmentByResourceRequest)
  return target;
}

size_t AttachmentByResourceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AttachmentByResourceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_type = 1;
  if (!this->_internal_resource_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_type());
  }

  // uint64 resource_id = 2;
  if (this->_internal_resource_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_resource_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentByResourceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentByResourceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentByResourceRequest::GetClassData() const { return &_class_data_; }


void AttachmentByResourceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentByResourceRequest*>(&to_msg);
  auto& from = static_cast<const AttachmentByResourceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AttachmentByResourceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_type().empty()) {
    _this->_internal_set_resource_type(from._internal_resource_type());
  }
  if (from._internal_resource_id() != 0) {
    _this->_internal_set_resource_id(from._internal_resource_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentByResourceRequest::CopyFrom(const AttachmentByResourceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AttachmentByResourceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentByResourceRequest::IsInitialized() const {
  return true;
}

void AttachmentByResourceRequest::InternalSwap(AttachmentByResourceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_type_, lhs_arena,
      &other->_impl_.resource_type_, rhs_arena
  );
  swap(_impl_.resource_id_, other->_impl_.resource_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentByResourceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[43]);
}

// ===================================================================

class AttachmentSetTitleRequest::_Internal {
 public:
};

AttachmentSetTitleRequest::AttachmentSetTitleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AttachmentSetTitleRequest)
}
AttachmentSetTitleRequest::AttachmentSetTitleRequest(const AttachmentSetTitleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentSetTitleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AttachmentSetTitleRequest)
}

inline void AttachmentSetTitleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachmentSetTitleRequest::~AttachmentSetTitleRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AttachmentSetTitleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentSetTitleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
}

void AttachmentSetTitleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentSetTitleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AttachmentSetTitleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentSetTitleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentSetTitleRequest.title"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentSetTitleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AttachmentSetTitleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentSetTitleRequest.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AttachmentSetTitleRequest)
  return target;
}

size_t AttachmentSetTitleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AttachmentSetTitleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentSetTitleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentSetTitleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentSetTitleRequest::GetClassData() const { return &_class_data_; }


void AttachmentSetTitleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentSetTitleRequest*>(&to_msg);
  auto& from = static_cast<const AttachmentSetTitleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AttachmentSetTitleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentSetTitleRequest::CopyFrom(const AttachmentSetTitleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AttachmentSetTitleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentSetTitleRequest::IsInitialized() const {
  return true;
}

void AttachmentSetTitleRequest::InternalSwap(AttachmentSetTitleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentSetTitleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[44]);
}

// ===================================================================

class AttachmentShowResponse::_Internal {
 public:
};

AttachmentShowResponse::AttachmentShowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AttachmentShowResponse)
}
AttachmentShowResponse::AttachmentShowResponse(const AttachmentShowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentShowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AttachmentShowResponse)
}

inline void AttachmentShowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachmentShowResponse::~AttachmentShowResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AttachmentShowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentShowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void AttachmentShowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentShowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AttachmentShowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentShowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentShowResponse.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentShowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AttachmentShowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentShowResponse.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AttachmentShowResponse)
  return target;
}

size_t AttachmentShowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AttachmentShowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentShowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentShowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentShowResponse::GetClassData() const { return &_class_data_; }


void AttachmentShowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentShowResponse*>(&to_msg);
  auto& from = static_cast<const AttachmentShowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AttachmentShowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentShowResponse::CopyFrom(const AttachmentShowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AttachmentShowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentShowResponse::IsInitialized() const {
  return true;
}

void AttachmentShowResponse::InternalSwap(AttachmentShowResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentShowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[45]);
}

// ===================================================================

class AttachmentIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<AttachmentIndexResponse_Item>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& published_at(const AttachmentIndexResponse_Item* msg);
  static void set_has_published_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const AttachmentIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const AttachmentIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttachmentIndexResponse_Item::_Internal::published_at(const AttachmentIndexResponse_Item* msg) {
  return *msg->_impl_.published_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttachmentIndexResponse_Item::_Internal::deleted_at(const AttachmentIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttachmentIndexResponse_Item::_Internal::updated_at(const AttachmentIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void AttachmentIndexResponse_Item::clear_published_at() {
  if (_impl_.published_at_ != nullptr) _impl_.published_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AttachmentIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AttachmentIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
AttachmentIndexResponse_Item::AttachmentIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AttachmentIndexResponse.Item)
}
AttachmentIndexResponse_Item::AttachmentIndexResponse_Item(const AttachmentIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.object_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.user_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.public__){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object().empty()) {
    _this->_impl_.object_.Set(from._internal_object(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_published_at()) {
    _this->_impl_.published_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.published_at_);
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.user_, &from._impl_.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.public__) -
    reinterpret_cast<char*>(&_impl_.user_)) + sizeof(_impl_.public__));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AttachmentIndexResponse.Item)
}

inline void AttachmentIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.object_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.user_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.public__){false}
  };
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachmentIndexResponse_Item::~AttachmentIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AttachmentIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.object_.Destroy();
  _impl_.title_.Destroy();
  _impl_.content_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.published_at_;
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void AttachmentIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AttachmentIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.object_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.content_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.published_at_ != nullptr);
      _impl_.published_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.public__) -
      reinterpret_cast<char*>(&_impl_.user_)) + sizeof(_impl_.public__));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentIndexResponse.Item.bucket"));
        } else
          goto handle_unusual;
        continue;
      // string object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_object();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentIndexResponse.Item.object"));
        } else
          goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentIndexResponse.Item.title"));
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.AttachmentIndexResponse.Item.content_type"));
        } else
          goto handle_unusual;
        continue;
      // bool public = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp published_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_published_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AttachmentIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user(), target);
  }

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentIndexResponse.Item.bucket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket(), target);
  }

  // string object = 3;
  if (!this->_internal_object().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object().data(), static_cast<int>(this->_internal_object().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentIndexResponse.Item.object");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_object(), target);
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentIndexResponse.Item.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // uint64 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size(), target);
  }

  // string content_type = 6;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.AttachmentIndexResponse.Item.content_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content_type(), target);
  }

  // bool public = 7;
  if (this->_internal_public_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_public_(), target);
  }

  // optional .google.protobuf.Timestamp published_at = 8;
  if (_internal_has_published_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::published_at(this),
        _Internal::published_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp deleted_at = 9;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 10;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AttachmentIndexResponse.Item)
  return target;
}

size_t AttachmentIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AttachmentIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string object = 3;
  if (!this->_internal_object().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object());
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content_type = 6;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp published_at = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.published_at_);
    }

    // optional .google.protobuf.Timestamp deleted_at = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_at_);
    }

  }
  // .google.protobuf.Timestamp updated_at = 10;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user());
  }

  // uint64 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // bool public = 7;
  if (this->_internal_public_() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentIndexResponse_Item::GetClassData() const { return &_class_data_; }


void AttachmentIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const AttachmentIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AttachmentIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_content_type().empty()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_published_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_published_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_public_() != 0) {
    _this->_internal_set_public_(from._internal_public_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentIndexResponse_Item::CopyFrom(const AttachmentIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AttachmentIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentIndexResponse_Item::IsInitialized() const {
  return true;
}

void AttachmentIndexResponse_Item::InternalSwap(AttachmentIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_, lhs_arena,
      &other->_impl_.object_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_type_, lhs_arena,
      &other->_impl_.content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttachmentIndexResponse_Item, _impl_.public__)
      + sizeof(AttachmentIndexResponse_Item::_impl_.public__)
      - PROTOBUF_FIELD_OFFSET(AttachmentIndexResponse_Item, _impl_.published_at_)>(
          reinterpret_cast<char*>(&_impl_.published_at_),
          reinterpret_cast<char*>(&other->_impl_.published_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[46]);
}

// ===================================================================

class AttachmentIndexResponse::_Internal {
 public:
};

AttachmentIndexResponse::AttachmentIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AttachmentIndexResponse)
}
AttachmentIndexResponse::AttachmentIndexResponse(const AttachmentIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AttachmentIndexResponse)
}

inline void AttachmentIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttachmentIndexResponse::~AttachmentIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AttachmentIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void AttachmentIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AttachmentIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.AttachmentIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AttachmentIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.AttachmentIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AttachmentIndexResponse)
  return target;
}

size_t AttachmentIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AttachmentIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.AttachmentIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentIndexResponse::GetClassData() const { return &_class_data_; }


void AttachmentIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentIndexResponse*>(&to_msg);
  auto& from = static_cast<const AttachmentIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AttachmentIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentIndexResponse::CopyFrom(const AttachmentIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AttachmentIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentIndexResponse::IsInitialized() const {
  return true;
}

void AttachmentIndexResponse::InternalSwap(AttachmentIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[47]);
}

// ===================================================================

class LocaleSetRequest::_Internal {
 public:
};

LocaleSetRequest::LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.LocaleSetRequest)
}
LocaleSetRequest::LocaleSetRequest(const LocaleSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleSetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.LocaleSetRequest)
}

inline void LocaleSetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleSetRequest::~LocaleSetRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.LocaleSetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
  _impl_.message_.Destroy();
}

void LocaleSetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.LocaleSetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleSetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LocaleSetRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LocaleSetRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LocaleSetRequest.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleSetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.LocaleSetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LocaleSetRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LocaleSetRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LocaleSetRequest.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.LocaleSetRequest)
  return target;
}

size_t LocaleSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.LocaleSetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleSetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleSetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleSetRequest::GetClassData() const { return &_class_data_; }


void LocaleSetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleSetRequest*>(&to_msg);
  auto& from = static_cast<const LocaleSetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.LocaleSetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleSetRequest::CopyFrom(const LocaleSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.LocaleSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleSetRequest::IsInitialized() const {
  return true;
}

void LocaleSetRequest::InternalSwap(LocaleSetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleSetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[48]);
}

// ===================================================================

class LocaleIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LocaleIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LocaleIndexResponse_Item::_Internal::updated_at(const LocaleIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void LocaleIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.LocaleIndexResponse.Item)
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.LocaleIndexResponse.Item)
}

inline void LocaleIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleIndexResponse_Item::~LocaleIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.LocaleIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void LocaleIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.LocaleIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LocaleIndexResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LocaleIndexResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LocaleIndexResponse.Item.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.LocaleIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LocaleIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LocaleIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LocaleIndexResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.LocaleIndexResponse.Item)
  return target;
}

size_t LocaleIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.LocaleIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleIndexResponse_Item::GetClassData() const { return &_class_data_; }


void LocaleIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const LocaleIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.LocaleIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleIndexResponse_Item::CopyFrom(const LocaleIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.LocaleIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse_Item::IsInitialized() const {
  return true;
}

void LocaleIndexResponse_Item::InternalSwap(LocaleIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, _impl_.id_)
      + sizeof(LocaleIndexResponse_Item::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[49]);
}

// ===================================================================

class LocaleIndexResponse::_Internal {
 public:
};

LocaleIndexResponse::LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.LocaleIndexResponse)
}
LocaleIndexResponse::LocaleIndexResponse(const LocaleIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.LocaleIndexResponse)
}

inline void LocaleIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocaleIndexResponse::~LocaleIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.LocaleIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void LocaleIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.LocaleIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.LocaleIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.LocaleIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.LocaleIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.LocaleIndexResponse)
  return target;
}

size_t LocaleIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.LocaleIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.LocaleIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleIndexResponse::GetClassData() const { return &_class_data_; }


void LocaleIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleIndexResponse*>(&to_msg);
  auto& from = static_cast<const LocaleIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.LocaleIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleIndexResponse::CopyFrom(const LocaleIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.LocaleIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse::IsInitialized() const {
  return true;
}

void LocaleIndexResponse::InternalSwap(LocaleIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[50]);
}

// ===================================================================

class LocaleByLangRequest::_Internal {
 public:
};

LocaleByLangRequest::LocaleByLangRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.LocaleByLangRequest)
}
LocaleByLangRequest::LocaleByLangRequest(const LocaleByLangRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleByLangRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.LocaleByLangRequest)
}

inline void LocaleByLangRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleByLangRequest::~LocaleByLangRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.LocaleByLangRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleByLangRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
}

void LocaleByLangRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleByLangRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.LocaleByLangRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleByLangRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LocaleByLangRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleByLangRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.LocaleByLangRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LocaleByLangRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.LocaleByLangRequest)
  return target;
}

size_t LocaleByLangRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.LocaleByLangRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleByLangRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleByLangRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleByLangRequest::GetClassData() const { return &_class_data_; }


void LocaleByLangRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleByLangRequest*>(&to_msg);
  auto& from = static_cast<const LocaleByLangRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.LocaleByLangRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleByLangRequest::CopyFrom(const LocaleByLangRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.LocaleByLangRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleByLangRequest::IsInitialized() const {
  return true;
}

void LocaleByLangRequest::InternalSwap(LocaleByLangRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleByLangRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[51]);
}

// ===================================================================

class LeaveWordCreateRequest::_Internal {
 public:
};

LeaveWordCreateRequest::LeaveWordCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.LeaveWordCreateRequest)
}
LeaveWordCreateRequest::LeaveWordCreateRequest(const LeaveWordCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveWordCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , decltype(_impl_.editor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.editor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.editor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_editor().empty()) {
    _this->_impl_.editor_.Set(from._internal_editor(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.LeaveWordCreateRequest)
}

inline void LeaveWordCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , decltype(_impl_.editor_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.editor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.editor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LeaveWordCreateRequest::~LeaveWordCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.LeaveWordCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveWordCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
  _impl_.editor_.Destroy();
}

void LeaveWordCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveWordCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.LeaveWordCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_.ClearToEmpty();
  _impl_.editor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveWordCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LeaveWordCreateRequest.body"));
        } else
          goto handle_unusual;
        continue;
      // string editor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_editor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LeaveWordCreateRequest.editor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveWordCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.LeaveWordCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string body = 1;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LeaveWordCreateRequest.body");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_body(), target);
  }

  // string editor = 2;
  if (!this->_internal_editor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_editor().data(), static_cast<int>(this->_internal_editor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LeaveWordCreateRequest.editor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_editor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.LeaveWordCreateRequest)
  return target;
}

size_t LeaveWordCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.LeaveWordCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string body = 1;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // string editor = 2;
  if (!this->_internal_editor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_editor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveWordCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveWordCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveWordCreateRequest::GetClassData() const { return &_class_data_; }


void LeaveWordCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveWordCreateRequest*>(&to_msg);
  auto& from = static_cast<const LeaveWordCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.LeaveWordCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (!from._internal_editor().empty()) {
    _this->_internal_set_editor(from._internal_editor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveWordCreateRequest::CopyFrom(const LeaveWordCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.LeaveWordCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveWordCreateRequest::IsInitialized() const {
  return true;
}

void LeaveWordCreateRequest::InternalSwap(LeaveWordCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.editor_, lhs_arena,
      &other->_impl_.editor_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveWordCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[52]);
}

// ===================================================================

class LeaveWordIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveWordIndexResponse_Item>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& published_at(const LeaveWordIndexResponse_Item* msg);
  static void set_has_published_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const LeaveWordIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LeaveWordIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LeaveWordIndexResponse_Item::_Internal::published_at(const LeaveWordIndexResponse_Item* msg) {
  return *msg->_impl_.published_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LeaveWordIndexResponse_Item::_Internal::deleted_at(const LeaveWordIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LeaveWordIndexResponse_Item::_Internal::updated_at(const LeaveWordIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void LeaveWordIndexResponse_Item::clear_published_at() {
  if (_impl_.published_at_ != nullptr) _impl_.published_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LeaveWordIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LeaveWordIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
LeaveWordIndexResponse_Item::LeaveWordIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.LeaveWordIndexResponse.Item)
}
LeaveWordIndexResponse_Item::LeaveWordIndexResponse_Item(const LeaveWordIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveWordIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.editor_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_published_at()) {
    _this->_impl_.published_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.published_at_);
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.LeaveWordIndexResponse.Item)
}

inline void LeaveWordIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.editor_){0}
    , decltype(_impl_.status_){0}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LeaveWordIndexResponse_Item::~LeaveWordIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.LeaveWordIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveWordIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.published_at_;
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void LeaveWordIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveWordIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.LeaveWordIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.published_at_ != nullptr);
      _impl_.published_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveWordIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LeaveWordIndexResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LeaveWordIndexResponse.Item.ip"));
        } else
          goto handle_unusual;
        continue;
      // string body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.LeaveWordIndexResponse.Item.body"));
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.MediaEditor editor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_editor(static_cast<::palm::balsam::v1::MediaEditor>(val));
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.LeaveWordIndexResponse.Item.Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::palm::balsam::v1::LeaveWordIndexResponse_Item_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp published_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_published_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveWordIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.LeaveWordIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LeaveWordIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LeaveWordIndexResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // string body = 4;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.LeaveWordIndexResponse.Item.body");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_body(), target);
  }

  // .palm.balsam.v1.MediaEditor editor = 5;
  if (this->_internal_editor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_editor(), target);
  }

  // .palm.balsam.v1.LeaveWordIndexResponse.Item.Status status = 6;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // optional .google.protobuf.Timestamp published_at = 7;
  if (_internal_has_published_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::published_at(this),
        _Internal::published_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp deleted_at = 8;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.LeaveWordIndexResponse.Item)
  return target;
}

size_t LeaveWordIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.LeaveWordIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string body = 4;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp published_at = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.published_at_);
    }

    // optional .google.protobuf.Timestamp deleted_at = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_at_);
    }

  }
  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // .palm.balsam.v1.MediaEditor editor = 5;
  if (this->_internal_editor() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_editor());
  }

  // .palm.balsam.v1.LeaveWordIndexResponse.Item.Status status = 6;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveWordIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveWordIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveWordIndexResponse_Item::GetClassData() const { return &_class_data_; }


void LeaveWordIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveWordIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const LeaveWordIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.LeaveWordIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_published_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_published_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_editor() != 0) {
    _this->_internal_set_editor(from._internal_editor());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveWordIndexResponse_Item::CopyFrom(const LeaveWordIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.LeaveWordIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveWordIndexResponse_Item::IsInitialized() const {
  return true;
}

void LeaveWordIndexResponse_Item::InternalSwap(LeaveWordIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveWordIndexResponse_Item, _impl_.status_)
      + sizeof(LeaveWordIndexResponse_Item::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(LeaveWordIndexResponse_Item, _impl_.published_at_)>(
          reinterpret_cast<char*>(&_impl_.published_at_),
          reinterpret_cast<char*>(&other->_impl_.published_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveWordIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[53]);
}

// ===================================================================

class LeaveWordIndexResponse::_Internal {
 public:
};

LeaveWordIndexResponse::LeaveWordIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.LeaveWordIndexResponse)
}
LeaveWordIndexResponse::LeaveWordIndexResponse(const LeaveWordIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveWordIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.LeaveWordIndexResponse)
}

inline void LeaveWordIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){arena}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaveWordIndexResponse::~LeaveWordIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.LeaveWordIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveWordIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
}

void LeaveWordIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveWordIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.LeaveWordIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveWordIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.balsam.v1.LeaveWordIndexResponse.Item item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveWordIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.LeaveWordIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.LeaveWordIndexResponse.Item item = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.LeaveWordIndexResponse)
  return target;
}

size_t LeaveWordIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.LeaveWordIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.balsam.v1.LeaveWordIndexResponse.Item item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveWordIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveWordIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveWordIndexResponse::GetClassData() const { return &_class_data_; }


void LeaveWordIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveWordIndexResponse*>(&to_msg);
  auto& from = static_cast<const LeaveWordIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.LeaveWordIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveWordIndexResponse::CopyFrom(const LeaveWordIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.LeaveWordIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveWordIndexResponse::IsInitialized() const {
  return true;
}

void LeaveWordIndexResponse::InternalSwap(LeaveWordIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveWordIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[54]);
}

// ===================================================================

class SiteStatusResponse_Redis::_Internal {
 public:
};

SiteStatusResponse_Redis::SiteStatusResponse_Redis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteStatusResponse.Redis)
}
SiteStatusResponse_Redis::SiteStatusResponse_Redis(const SiteStatusResponse_Redis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Redis* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){from._impl_.info_}
    , decltype(_impl_.nodes_){from._impl_.nodes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteStatusResponse.Redis)
}

inline void SiteStatusResponse_Redis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){arena}
    , decltype(_impl_.nodes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteStatusResponse_Redis::~SiteStatusResponse_Redis() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteStatusResponse.Redis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Redis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.~RepeatedPtrField();
  _impl_.nodes_.~RepeatedPtrField();
}

void SiteStatusResponse_Redis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Redis::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteStatusResponse.Redis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  _impl_.nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Redis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_info();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteStatusResponse.Redis.info"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nodes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteStatusResponse.Redis.nodes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Redis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteStatusResponse.Redis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string info = 1;
  for (int i = 0, n = this->_internal_info_size(); i < n; i++) {
    const auto& s = this->_internal_info(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteStatusResponse.Redis.info");
    target = stream->WriteString(1, s, target);
  }

  // repeated string nodes = 2;
  for (int i = 0, n = this->_internal_nodes_size(); i < n; i++) {
    const auto& s = this->_internal_nodes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteStatusResponse.Redis.nodes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteStatusResponse.Redis)
  return target;
}

size_t SiteStatusResponse_Redis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteStatusResponse.Redis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.info_.size());
  for (int i = 0, n = _impl_.info_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.info_.Get(i));
  }

  // repeated string nodes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.nodes_.size());
  for (int i = 0, n = _impl_.nodes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.nodes_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Redis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Redis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Redis::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Redis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Redis*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Redis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteStatusResponse.Redis)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_.MergeFrom(from._impl_.info_);
  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Redis::CopyFrom(const SiteStatusResponse_Redis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteStatusResponse.Redis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Redis::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Redis::InternalSwap(SiteStatusResponse_Redis* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Redis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[55]);
}

// ===================================================================

class SiteStatusResponse_PostgreSql::_Internal {
 public:
};

SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteStatusResponse.PostgreSql)
}
SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(const SiteStatusResponse_PostgreSql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_PostgreSql* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.versions_){from._impl_.versions_}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteStatusResponse.PostgreSql)
}

inline void SiteStatusResponse_PostgreSql::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.versions_){arena}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_PostgreSql::~SiteStatusResponse_PostgreSql() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteStatusResponse.PostgreSql)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_PostgreSql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.versions_.~RepeatedPtrField();
  _impl_.version_.Destroy();
}

void SiteStatusResponse_PostgreSql::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_PostgreSql::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteStatusResponse.PostgreSql)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.versions_.Clear();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_PostgreSql::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteStatusResponse.PostgreSql.version"));
        } else
          goto handle_unusual;
        continue;
      // repeated string versions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_versions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteStatusResponse.PostgreSql.versions"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_PostgreSql::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteStatusResponse.PostgreSql)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteStatusResponse.PostgreSql.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated string versions = 2;
  for (int i = 0, n = this->_internal_versions_size(); i < n; i++) {
    const auto& s = this->_internal_versions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteStatusResponse.PostgreSql.versions");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteStatusResponse.PostgreSql)
  return target;
}

size_t SiteStatusResponse_PostgreSql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteStatusResponse.PostgreSql)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string versions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.versions_.size());
  for (int i = 0, n = _impl_.versions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.versions_.Get(i));
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_PostgreSql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_PostgreSql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_PostgreSql::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_PostgreSql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_PostgreSql*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_PostgreSql&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteStatusResponse.PostgreSql)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.versions_.MergeFrom(from._impl_.versions_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_PostgreSql::CopyFrom(const SiteStatusResponse_PostgreSql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteStatusResponse.PostgreSql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_PostgreSql::IsInitialized() const {
  return true;
}

void SiteStatusResponse_PostgreSql::InternalSwap(SiteStatusResponse_PostgreSql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.versions_.InternalSwap(&other->_impl_.versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_PostgreSql::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[56]);
}

// ===================================================================

class SiteStatusResponse_OpenSearch::_Internal {
 public:
};

SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteStatusResponse.OpenSearch)
}
SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(const SiteStatusResponse_OpenSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_OpenSearch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plugins_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plugins_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugins_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plugins().empty()) {
    _this->_impl_.plugins_.Set(from._internal_plugins(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteStatusResponse.OpenSearch)
}

inline void SiteStatusResponse_OpenSearch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plugins_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.plugins_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugins_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_OpenSearch::~SiteStatusResponse_OpenSearch() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteStatusResponse.OpenSearch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_OpenSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plugins_.Destroy();
}

void SiteStatusResponse_OpenSearch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_OpenSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteStatusResponse.OpenSearch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plugins_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_OpenSearch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string plugins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plugins();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteStatusResponse.OpenSearch.plugins"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_OpenSearch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteStatusResponse.OpenSearch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string plugins = 1;
  if (!this->_internal_plugins().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plugins().data(), static_cast<int>(this->_internal_plugins().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteStatusResponse.OpenSearch.plugins");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plugins(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteStatusResponse.OpenSearch)
  return target;
}

size_t SiteStatusResponse_OpenSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteStatusResponse.OpenSearch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plugins = 1;
  if (!this->_internal_plugins().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plugins());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_OpenSearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_OpenSearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_OpenSearch::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_OpenSearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_OpenSearch*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_OpenSearch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteStatusResponse.OpenSearch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plugins().empty()) {
    _this->_internal_set_plugins(from._internal_plugins());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_OpenSearch::CopyFrom(const SiteStatusResponse_OpenSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteStatusResponse.OpenSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_OpenSearch::IsInitialized() const {
  return true;
}

void SiteStatusResponse_OpenSearch::InternalSwap(SiteStatusResponse_OpenSearch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plugins_, lhs_arena,
      &other->_impl_.plugins_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_OpenSearch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[57]);
}

// ===================================================================

class SiteStatusResponse::_Internal {
 public:
  static const ::palm::balsam::v1::SiteStatusResponse_PostgreSql& postgresql(const SiteStatusResponse* msg);
  static const ::palm::balsam::v1::SiteStatusResponse_Redis& redis(const SiteStatusResponse* msg);
  static const ::palm::balsam::v1::SiteStatusResponse_OpenSearch& opensearch(const SiteStatusResponse* msg);
};

const ::palm::balsam::v1::SiteStatusResponse_PostgreSql&
SiteStatusResponse::_Internal::postgresql(const SiteStatusResponse* msg) {
  return *msg->_impl_.postgresql_;
}
const ::palm::balsam::v1::SiteStatusResponse_Redis&
SiteStatusResponse::_Internal::redis(const SiteStatusResponse* msg) {
  return *msg->_impl_.redis_;
}
const ::palm::balsam::v1::SiteStatusResponse_OpenSearch&
SiteStatusResponse::_Internal::opensearch(const SiteStatusResponse* msg) {
  return *msg->_impl_.opensearch_;
}
SiteStatusResponse::SiteStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteStatusResponse)
}
SiteStatusResponse::SiteStatusResponse(const SiteStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.postgresql_){nullptr}
    , decltype(_impl_.redis_){nullptr}
    , decltype(_impl_.opensearch_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_postgresql()) {
    _this->_impl_.postgresql_ = new ::palm::balsam::v1::SiteStatusResponse_PostgreSql(*from._impl_.postgresql_);
  }
  if (from._internal_has_redis()) {
    _this->_impl_.redis_ = new ::palm::balsam::v1::SiteStatusResponse_Redis(*from._impl_.redis_);
  }
  if (from._internal_has_opensearch()) {
    _this->_impl_.opensearch_ = new ::palm::balsam::v1::SiteStatusResponse_OpenSearch(*from._impl_.opensearch_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteStatusResponse)
}

inline void SiteStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.postgresql_){nullptr}
    , decltype(_impl_.redis_){nullptr}
    , decltype(_impl_.opensearch_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteStatusResponse::~SiteStatusResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.postgresql_;
  if (this != internal_default_instance()) delete _impl_.redis_;
  if (this != internal_default_instance()) delete _impl_.opensearch_;
}

void SiteStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.postgresql_ != nullptr) {
    delete _impl_.postgresql_;
  }
  _impl_.postgresql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.redis_ != nullptr) {
    delete _impl_.redis_;
  }
  _impl_.redis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.opensearch_ != nullptr) {
    delete _impl_.opensearch_;
  }
  _impl_.opensearch_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.balsam.v1.SiteStatusResponse.PostgreSql postgresql = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_postgresql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.SiteStatusResponse.Redis redis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_redis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.SiteStatusResponse.OpenSearch opensearch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_opensearch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.balsam.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::postgresql(this),
        _Internal::postgresql(this).GetCachedSize(), target, stream);
  }

  // .palm.balsam.v1.SiteStatusResponse.Redis redis = 2;
  if (this->_internal_has_redis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::redis(this),
        _Internal::redis(this).GetCachedSize(), target, stream);
  }

  // .palm.balsam.v1.SiteStatusResponse.OpenSearch opensearch = 3;
  if (this->_internal_has_opensearch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::opensearch(this),
        _Internal::opensearch(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteStatusResponse)
  return target;
}

size_t SiteStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .palm.balsam.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.postgresql_);
  }

  // .palm.balsam.v1.SiteStatusResponse.Redis redis = 2;
  if (this->_internal_has_redis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redis_);
  }

  // .palm.balsam.v1.SiteStatusResponse.OpenSearch opensearch = 3;
  if (this->_internal_has_opensearch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opensearch_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse::GetClassData() const { return &_class_data_; }


void SiteStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_postgresql()) {
    _this->_internal_mutable_postgresql()->::palm::balsam::v1::SiteStatusResponse_PostgreSql::MergeFrom(
        from._internal_postgresql());
  }
  if (from._internal_has_redis()) {
    _this->_internal_mutable_redis()->::palm::balsam::v1::SiteStatusResponse_Redis::MergeFrom(
        from._internal_redis());
  }
  if (from._internal_has_opensearch()) {
    _this->_internal_mutable_opensearch()->::palm::balsam::v1::SiteStatusResponse_OpenSearch::MergeFrom(
        from._internal_opensearch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse::CopyFrom(const SiteStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse::IsInitialized() const {
  return true;
}

void SiteStatusResponse::InternalSwap(SiteStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteStatusResponse, _impl_.opensearch_)
      + sizeof(SiteStatusResponse::_impl_.opensearch_)
      - PROTOBUF_FIELD_OFFSET(SiteStatusResponse, _impl_.postgresql_)>(
          reinterpret_cast<char*>(&_impl_.postgresql_),
          reinterpret_cast<char*>(&other->_impl_.postgresql_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[58]);
}

// ===================================================================

class SiteIndexNowAccount_WebSiteVerify::_Internal {
 public:
};

SiteIndexNowAccount_WebSiteVerify::SiteIndexNowAccount_WebSiteVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify)
}
SiteIndexNowAccount_WebSiteVerify::SiteIndexNowAccount_WebSiteVerify(const SiteIndexNowAccount_WebSiteVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteIndexNowAccount_WebSiteVerify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify)
}

inline void SiteIndexNowAccount_WebSiteVerify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteIndexNowAccount_WebSiteVerify::~SiteIndexNowAccount_WebSiteVerify() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteIndexNowAccount_WebSiteVerify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void SiteIndexNowAccount_WebSiteVerify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteIndexNowAccount_WebSiteVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteIndexNowAccount_WebSiteVerify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify.key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteIndexNowAccount_WebSiteVerify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify)
  return target;
}

size_t SiteIndexNowAccount_WebSiteVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteIndexNowAccount_WebSiteVerify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteIndexNowAccount_WebSiteVerify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteIndexNowAccount_WebSiteVerify::GetClassData() const { return &_class_data_; }


void SiteIndexNowAccount_WebSiteVerify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteIndexNowAccount_WebSiteVerify*>(&to_msg);
  auto& from = static_cast<const SiteIndexNowAccount_WebSiteVerify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteIndexNowAccount_WebSiteVerify::CopyFrom(const SiteIndexNowAccount_WebSiteVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteIndexNowAccount_WebSiteVerify::IsInitialized() const {
  return true;
}

void SiteIndexNowAccount_WebSiteVerify::InternalSwap(SiteIndexNowAccount_WebSiteVerify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteIndexNowAccount_WebSiteVerify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[59]);
}

// ===================================================================

class SiteIndexNowAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteIndexNowAccount>()._impl_._has_bits_);
  static const ::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify& web_site_verify(const SiteIndexNowAccount* msg);
  static void set_has_web_site_verify(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify&
SiteIndexNowAccount::_Internal::web_site_verify(const SiteIndexNowAccount* msg) {
  return *msg->_impl_.web_site_verify_;
}
SiteIndexNowAccount::SiteIndexNowAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteIndexNowAccount)
}
SiteIndexNowAccount::SiteIndexNowAccount(const SiteIndexNowAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteIndexNowAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.web_site_verify_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_web_site_verify()) {
    _this->_impl_.web_site_verify_ = new ::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify(*from._impl_.web_site_verify_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteIndexNowAccount)
}

inline void SiteIndexNowAccount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.web_site_verify_){nullptr}
  };
}

SiteIndexNowAccount::~SiteIndexNowAccount() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteIndexNowAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteIndexNowAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.web_site_verify_;
}

void SiteIndexNowAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteIndexNowAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteIndexNowAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.web_site_verify_ != nullptr);
    _impl_.web_site_verify_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteIndexNowAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify web_site_verify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_site_verify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteIndexNowAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteIndexNowAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify web_site_verify = 1;
  if (_internal_has_web_site_verify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::web_site_verify(this),
        _Internal::web_site_verify(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteIndexNowAccount)
  return target;
}

size_t SiteIndexNowAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteIndexNowAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .palm.balsam.v1.SiteIndexNowAccount.WebSiteVerify web_site_verify = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.web_site_verify_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteIndexNowAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteIndexNowAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteIndexNowAccount::GetClassData() const { return &_class_data_; }


void SiteIndexNowAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteIndexNowAccount*>(&to_msg);
  auto& from = static_cast<const SiteIndexNowAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteIndexNowAccount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_web_site_verify()) {
    _this->_internal_mutable_web_site_verify()->::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify::MergeFrom(
        from._internal_web_site_verify());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteIndexNowAccount::CopyFrom(const SiteIndexNowAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteIndexNowAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteIndexNowAccount::IsInitialized() const {
  return true;
}

void SiteIndexNowAccount::InternalSwap(SiteIndexNowAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.web_site_verify_, other->_impl_.web_site_verify_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteIndexNowAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[60]);
}

// ===================================================================

class SiteGoogleAccount_WebSiteVerify::_Internal {
 public:
};

SiteGoogleAccount_WebSiteVerify::SiteGoogleAccount_WebSiteVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteGoogleAccount.WebSiteVerify)
}
SiteGoogleAccount_WebSiteVerify::SiteGoogleAccount_WebSiteVerify(const SiteGoogleAccount_WebSiteVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteGoogleAccount_WebSiteVerify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteGoogleAccount.WebSiteVerify)
}

inline void SiteGoogleAccount_WebSiteVerify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteGoogleAccount_WebSiteVerify::~SiteGoogleAccount_WebSiteVerify() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteGoogleAccount.WebSiteVerify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteGoogleAccount_WebSiteVerify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void SiteGoogleAccount_WebSiteVerify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteGoogleAccount_WebSiteVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteGoogleAccount.WebSiteVerify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteGoogleAccount_WebSiteVerify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteGoogleAccount.WebSiteVerify.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteGoogleAccount_WebSiteVerify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteGoogleAccount.WebSiteVerify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteGoogleAccount.WebSiteVerify.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteGoogleAccount.WebSiteVerify)
  return target;
}

size_t SiteGoogleAccount_WebSiteVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteGoogleAccount.WebSiteVerify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteGoogleAccount_WebSiteVerify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteGoogleAccount_WebSiteVerify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteGoogleAccount_WebSiteVerify::GetClassData() const { return &_class_data_; }


void SiteGoogleAccount_WebSiteVerify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteGoogleAccount_WebSiteVerify*>(&to_msg);
  auto& from = static_cast<const SiteGoogleAccount_WebSiteVerify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteGoogleAccount.WebSiteVerify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteGoogleAccount_WebSiteVerify::CopyFrom(const SiteGoogleAccount_WebSiteVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteGoogleAccount.WebSiteVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteGoogleAccount_WebSiteVerify::IsInitialized() const {
  return true;
}

void SiteGoogleAccount_WebSiteVerify::InternalSwap(SiteGoogleAccount_WebSiteVerify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteGoogleAccount_WebSiteVerify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[61]);
}

// ===================================================================

class SiteGoogleAccount_ReCaptcha::_Internal {
 public:
};

SiteGoogleAccount_ReCaptcha::SiteGoogleAccount_ReCaptcha(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteGoogleAccount.ReCaptcha)
}
SiteGoogleAccount_ReCaptcha::SiteGoogleAccount_ReCaptcha(const SiteGoogleAccount_ReCaptcha& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteGoogleAccount_ReCaptcha* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.site_key_){}
    , decltype(_impl_.secret_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.site_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site_key().empty()) {
    _this->_impl_.site_key_.Set(from._internal_site_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteGoogleAccount.ReCaptcha)
}

inline void SiteGoogleAccount_ReCaptcha::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.site_key_){}
    , decltype(_impl_.secret_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.site_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteGoogleAccount_ReCaptcha::~SiteGoogleAccount_ReCaptcha() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteGoogleAccount.ReCaptcha)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteGoogleAccount_ReCaptcha::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_key_.Destroy();
  _impl_.secret_.Destroy();
}

void SiteGoogleAccount_ReCaptcha::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteGoogleAccount_ReCaptcha::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteGoogleAccount.ReCaptcha)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.site_key_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteGoogleAccount_ReCaptcha::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string site_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_site_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteGoogleAccount.ReCaptcha.site_key"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteGoogleAccount.ReCaptcha.secret"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteGoogleAccount_ReCaptcha::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteGoogleAccount.ReCaptcha)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_key().data(), static_cast<int>(this->_internal_site_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteGoogleAccount.ReCaptcha.site_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_key(), target);
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteGoogleAccount.ReCaptcha.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteGoogleAccount.ReCaptcha)
  return target;
}

size_t SiteGoogleAccount_ReCaptcha::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteGoogleAccount.ReCaptcha)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_key());
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteGoogleAccount_ReCaptcha::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteGoogleAccount_ReCaptcha::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteGoogleAccount_ReCaptcha::GetClassData() const { return &_class_data_; }


void SiteGoogleAccount_ReCaptcha::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteGoogleAccount_ReCaptcha*>(&to_msg);
  auto& from = static_cast<const SiteGoogleAccount_ReCaptcha&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteGoogleAccount.ReCaptcha)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_site_key().empty()) {
    _this->_internal_set_site_key(from._internal_site_key());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteGoogleAccount_ReCaptcha::CopyFrom(const SiteGoogleAccount_ReCaptcha& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteGoogleAccount.ReCaptcha)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteGoogleAccount_ReCaptcha::IsInitialized() const {
  return true;
}

void SiteGoogleAccount_ReCaptcha::InternalSwap(SiteGoogleAccount_ReCaptcha* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.site_key_, lhs_arena,
      &other->_impl_.site_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteGoogleAccount_ReCaptcha::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[62]);
}

// ===================================================================

class SiteGoogleAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteGoogleAccount>()._impl_._has_bits_);
  static const ::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify& web_site_verify(const SiteGoogleAccount* msg);
  static void set_has_web_site_verify(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::palm::balsam::v1::SiteGoogleAccount_ReCaptcha& re_captcha(const SiteGoogleAccount* msg);
  static void set_has_re_captcha(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify&
SiteGoogleAccount::_Internal::web_site_verify(const SiteGoogleAccount* msg) {
  return *msg->_impl_.web_site_verify_;
}
const ::palm::balsam::v1::SiteGoogleAccount_ReCaptcha&
SiteGoogleAccount::_Internal::re_captcha(const SiteGoogleAccount* msg) {
  return *msg->_impl_.re_captcha_;
}
SiteGoogleAccount::SiteGoogleAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteGoogleAccount)
}
SiteGoogleAccount::SiteGoogleAccount(const SiteGoogleAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteGoogleAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.web_site_verify_){nullptr}
    , decltype(_impl_.re_captcha_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_web_site_verify()) {
    _this->_impl_.web_site_verify_ = new ::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify(*from._impl_.web_site_verify_);
  }
  if (from._internal_has_re_captcha()) {
    _this->_impl_.re_captcha_ = new ::palm::balsam::v1::SiteGoogleAccount_ReCaptcha(*from._impl_.re_captcha_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteGoogleAccount)
}

inline void SiteGoogleAccount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.web_site_verify_){nullptr}
    , decltype(_impl_.re_captcha_){nullptr}
  };
}

SiteGoogleAccount::~SiteGoogleAccount() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteGoogleAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteGoogleAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.web_site_verify_;
  if (this != internal_default_instance()) delete _impl_.re_captcha_;
}

void SiteGoogleAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteGoogleAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteGoogleAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.web_site_verify_ != nullptr);
      _impl_.web_site_verify_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.re_captcha_ != nullptr);
      _impl_.re_captcha_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteGoogleAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .palm.balsam.v1.SiteGoogleAccount.WebSiteVerify web_site_verify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_site_verify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .palm.balsam.v1.SiteGoogleAccount.ReCaptcha re_captcha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_re_captcha(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteGoogleAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteGoogleAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .palm.balsam.v1.SiteGoogleAccount.WebSiteVerify web_site_verify = 1;
  if (_internal_has_web_site_verify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::web_site_verify(this),
        _Internal::web_site_verify(this).GetCachedSize(), target, stream);
  }

  // optional .palm.balsam.v1.SiteGoogleAccount.ReCaptcha re_captcha = 2;
  if (_internal_has_re_captcha()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::re_captcha(this),
        _Internal::re_captcha(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteGoogleAccount)
  return target;
}

size_t SiteGoogleAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteGoogleAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .palm.balsam.v1.SiteGoogleAccount.WebSiteVerify web_site_verify = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.web_site_verify_);
    }

    // optional .palm.balsam.v1.SiteGoogleAccount.ReCaptcha re_captcha = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.re_captcha_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteGoogleAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteGoogleAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteGoogleAccount::GetClassData() const { return &_class_data_; }


void SiteGoogleAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteGoogleAccount*>(&to_msg);
  auto& from = static_cast<const SiteGoogleAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteGoogleAccount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_web_site_verify()->::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify::MergeFrom(
          from._internal_web_site_verify());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_re_captcha()->::palm::balsam::v1::SiteGoogleAccount_ReCaptcha::MergeFrom(
          from._internal_re_captcha());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteGoogleAccount::CopyFrom(const SiteGoogleAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteGoogleAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteGoogleAccount::IsInitialized() const {
  return true;
}

void SiteGoogleAccount::InternalSwap(SiteGoogleAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteGoogleAccount, _impl_.re_captcha_)
      + sizeof(SiteGoogleAccount::_impl_.re_captcha_)
      - PROTOBUF_FIELD_OFFSET(SiteGoogleAccount, _impl_.web_site_verify_)>(
          reinterpret_cast<char*>(&_impl_.web_site_verify_),
          reinterpret_cast<char*>(&other->_impl_.web_site_verify_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteGoogleAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[63]);
}

// ===================================================================

class SiteBaiduAccount_WebSiteVerify::_Internal {
 public:
};

SiteBaiduAccount_WebSiteVerify::SiteBaiduAccount_WebSiteVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteBaiduAccount.WebSiteVerify)
}
SiteBaiduAccount_WebSiteVerify::SiteBaiduAccount_WebSiteVerify(const SiteBaiduAccount_WebSiteVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteBaiduAccount_WebSiteVerify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteBaiduAccount.WebSiteVerify)
}

inline void SiteBaiduAccount_WebSiteVerify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteBaiduAccount_WebSiteVerify::~SiteBaiduAccount_WebSiteVerify() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteBaiduAccount.WebSiteVerify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteBaiduAccount_WebSiteVerify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.content_.Destroy();
}

void SiteBaiduAccount_WebSiteVerify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteBaiduAccount_WebSiteVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteBaiduAccount.WebSiteVerify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteBaiduAccount_WebSiteVerify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteBaiduAccount.WebSiteVerify.code"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteBaiduAccount.WebSiteVerify.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteBaiduAccount_WebSiteVerify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteBaiduAccount.WebSiteVerify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteBaiduAccount.WebSiteVerify.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteBaiduAccount.WebSiteVerify.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteBaiduAccount.WebSiteVerify)
  return target;
}

size_t SiteBaiduAccount_WebSiteVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteBaiduAccount.WebSiteVerify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteBaiduAccount_WebSiteVerify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteBaiduAccount_WebSiteVerify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteBaiduAccount_WebSiteVerify::GetClassData() const { return &_class_data_; }


void SiteBaiduAccount_WebSiteVerify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteBaiduAccount_WebSiteVerify*>(&to_msg);
  auto& from = static_cast<const SiteBaiduAccount_WebSiteVerify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteBaiduAccount.WebSiteVerify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteBaiduAccount_WebSiteVerify::CopyFrom(const SiteBaiduAccount_WebSiteVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteBaiduAccount.WebSiteVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteBaiduAccount_WebSiteVerify::IsInitialized() const {
  return true;
}

void SiteBaiduAccount_WebSiteVerify::InternalSwap(SiteBaiduAccount_WebSiteVerify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteBaiduAccount_WebSiteVerify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[64]);
}

// ===================================================================

class SiteBaiduAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteBaiduAccount>()._impl_._has_bits_);
  static const ::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify& web_site_verify(const SiteBaiduAccount* msg);
  static void set_has_web_site_verify(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify&
SiteBaiduAccount::_Internal::web_site_verify(const SiteBaiduAccount* msg) {
  return *msg->_impl_.web_site_verify_;
}
SiteBaiduAccount::SiteBaiduAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteBaiduAccount)
}
SiteBaiduAccount::SiteBaiduAccount(const SiteBaiduAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteBaiduAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.web_site_verify_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_web_site_verify()) {
    _this->_impl_.web_site_verify_ = new ::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify(*from._impl_.web_site_verify_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteBaiduAccount)
}

inline void SiteBaiduAccount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.web_site_verify_){nullptr}
  };
}

SiteBaiduAccount::~SiteBaiduAccount() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteBaiduAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteBaiduAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.web_site_verify_;
}

void SiteBaiduAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteBaiduAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteBaiduAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.web_site_verify_ != nullptr);
    _impl_.web_site_verify_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteBaiduAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .palm.balsam.v1.SiteBaiduAccount.WebSiteVerify web_site_verify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_site_verify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteBaiduAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteBaiduAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .palm.balsam.v1.SiteBaiduAccount.WebSiteVerify web_site_verify = 1;
  if (_internal_has_web_site_verify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::web_site_verify(this),
        _Internal::web_site_verify(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteBaiduAccount)
  return target;
}

size_t SiteBaiduAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteBaiduAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .palm.balsam.v1.SiteBaiduAccount.WebSiteVerify web_site_verify = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.web_site_verify_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteBaiduAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteBaiduAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteBaiduAccount::GetClassData() const { return &_class_data_; }


void SiteBaiduAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteBaiduAccount*>(&to_msg);
  auto& from = static_cast<const SiteBaiduAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteBaiduAccount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_web_site_verify()) {
    _this->_internal_mutable_web_site_verify()->::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify::MergeFrom(
        from._internal_web_site_verify());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteBaiduAccount::CopyFrom(const SiteBaiduAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteBaiduAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteBaiduAccount::IsInitialized() const {
  return true;
}

void SiteBaiduAccount::InternalSwap(SiteBaiduAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.web_site_verify_, other->_impl_.web_site_verify_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteBaiduAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[65]);
}

// ===================================================================

class SiteGetInfoByLangRequest::_Internal {
 public:
};

SiteGetInfoByLangRequest::SiteGetInfoByLangRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteGetInfoByLangRequest)
}
SiteGetInfoByLangRequest::SiteGetInfoByLangRequest(const SiteGetInfoByLangRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteGetInfoByLangRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteGetInfoByLangRequest)
}

inline void SiteGetInfoByLangRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteGetInfoByLangRequest::~SiteGetInfoByLangRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteGetInfoByLangRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteGetInfoByLangRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
}

void SiteGetInfoByLangRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteGetInfoByLangRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteGetInfoByLangRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteGetInfoByLangRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteGetInfoByLangRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteGetInfoByLangRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteGetInfoByLangRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteGetInfoByLangRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteGetInfoByLangRequest)
  return target;
}

size_t SiteGetInfoByLangRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteGetInfoByLangRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteGetInfoByLangRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteGetInfoByLangRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteGetInfoByLangRequest::GetClassData() const { return &_class_data_; }


void SiteGetInfoByLangRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteGetInfoByLangRequest*>(&to_msg);
  auto& from = static_cast<const SiteGetInfoByLangRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteGetInfoByLangRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteGetInfoByLangRequest::CopyFrom(const SiteGetInfoByLangRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteGetInfoByLangRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteGetInfoByLangRequest::IsInitialized() const {
  return true;
}

void SiteGetInfoByLangRequest::InternalSwap(SiteGetInfoByLangRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteGetInfoByLangRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[66]);
}

// ===================================================================

class SiteGetInfoByLangResponse::_Internal {
 public:
};

SiteGetInfoByLangResponse::SiteGetInfoByLangResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteGetInfoByLangResponse)
}
SiteGetInfoByLangResponse::SiteGetInfoByLangResponse(const SiteGetInfoByLangResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteGetInfoByLangResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subhead().empty()) {
    _this->_impl_.subhead_.Set(from._internal_subhead(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_copyright().empty()) {
    _this->_impl_.copyright_.Set(from._internal_copyright(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteGetInfoByLangResponse)
}

inline void SiteGetInfoByLangResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteGetInfoByLangResponse::~SiteGetInfoByLangResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteGetInfoByLangResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteGetInfoByLangResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.subhead_.Destroy();
  _impl_.description_.Destroy();
  _impl_.copyright_.Destroy();
}

void SiteGetInfoByLangResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteGetInfoByLangResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteGetInfoByLangResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.subhead_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.copyright_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteGetInfoByLangResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteGetInfoByLangResponse.title"));
        } else
          goto handle_unusual;
        continue;
      // string subhead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subhead();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteGetInfoByLangResponse.subhead"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteGetInfoByLangResponse.description"));
        } else
          goto handle_unusual;
        continue;
      // string copyright = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_copyright();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteGetInfoByLangResponse.copyright"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteGetInfoByLangResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteGetInfoByLangResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteGetInfoByLangResponse.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteGetInfoByLangResponse.subhead");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subhead(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteGetInfoByLangResponse.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string copyright = 4;
  if (!this->_internal_copyright().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_copyright().data(), static_cast<int>(this->_internal_copyright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteGetInfoByLangResponse.copyright");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_copyright(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteGetInfoByLangResponse)
  return target;
}

size_t SiteGetInfoByLangResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteGetInfoByLangResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string copyright = 4;
  if (!this->_internal_copyright().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_copyright());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteGetInfoByLangResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteGetInfoByLangResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteGetInfoByLangResponse::GetClassData() const { return &_class_data_; }


void SiteGetInfoByLangResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteGetInfoByLangResponse*>(&to_msg);
  auto& from = static_cast<const SiteGetInfoByLangResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteGetInfoByLangResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _this->_internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_copyright().empty()) {
    _this->_internal_set_copyright(from._internal_copyright());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteGetInfoByLangResponse::CopyFrom(const SiteGetInfoByLangResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteGetInfoByLangResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteGetInfoByLangResponse::IsInitialized() const {
  return true;
}

void SiteGetInfoByLangResponse::InternalSwap(SiteGetInfoByLangResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subhead_, lhs_arena,
      &other->_impl_.subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.copyright_, lhs_arena,
      &other->_impl_.copyright_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteGetInfoByLangResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[67]);
}

// ===================================================================

class SiteLayoutResponse_Author::_Internal {
 public:
};

SiteLayoutResponse_Author::SiteLayoutResponse_Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteLayoutResponse.Author)
}
SiteLayoutResponse_Author::SiteLayoutResponse_Author(const SiteLayoutResponse_Author& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse_Author* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteLayoutResponse.Author)
}

inline void SiteLayoutResponse_Author::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse_Author::~SiteLayoutResponse_Author() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteLayoutResponse.Author)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse_Author::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.email_.Destroy();
}

void SiteLayoutResponse_Author::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse_Author::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteLayoutResponse.Author)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse_Author::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.Author.name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.Author.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse_Author::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteLayoutResponse.Author)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.Author.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.Author.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteLayoutResponse.Author)
  return target;
}

size_t SiteLayoutResponse_Author::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteLayoutResponse.Author)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse_Author::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse_Author::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse_Author::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse_Author::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse_Author*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse_Author&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteLayoutResponse.Author)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse_Author::CopyFrom(const SiteLayoutResponse_Author& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteLayoutResponse.Author)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse_Author::IsInitialized() const {
  return true;
}

void SiteLayoutResponse_Author::InternalSwap(SiteLayoutResponse_Author* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse_Author::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[68]);
}

// ===================================================================

class SiteLayoutResponse_CnGab::_Internal {
 public:
};

SiteLayoutResponse_CnGab::SiteLayoutResponse_CnGab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteLayoutResponse.CnGab)
}
SiteLayoutResponse_CnGab::SiteLayoutResponse_CnGab(const SiteLayoutResponse_CnGab& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse_CnGab* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteLayoutResponse.CnGab)
}

inline void SiteLayoutResponse_CnGab::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse_CnGab::~SiteLayoutResponse_CnGab() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteLayoutResponse.CnGab)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse_CnGab::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.name_.Destroy();
}

void SiteLayoutResponse_CnGab::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse_CnGab::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteLayoutResponse.CnGab)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse_CnGab::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.CnGab.code"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.CnGab.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse_CnGab::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteLayoutResponse.CnGab)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.CnGab.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.CnGab.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteLayoutResponse.CnGab)
  return target;
}

size_t SiteLayoutResponse_CnGab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteLayoutResponse.CnGab)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse_CnGab::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse_CnGab::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse_CnGab::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse_CnGab::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse_CnGab*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse_CnGab&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteLayoutResponse.CnGab)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse_CnGab::CopyFrom(const SiteLayoutResponse_CnGab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteLayoutResponse.CnGab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse_CnGab::IsInitialized() const {
  return true;
}

void SiteLayoutResponse_CnGab::InternalSwap(SiteLayoutResponse_CnGab* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse_CnGab::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[69]);
}

// ===================================================================

class SiteLayoutResponse_CnIcp::_Internal {
 public:
};

SiteLayoutResponse_CnIcp::SiteLayoutResponse_CnIcp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteLayoutResponse.CnIcp)
}
SiteLayoutResponse_CnIcp::SiteLayoutResponse_CnIcp(const SiteLayoutResponse_CnIcp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse_CnIcp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteLayoutResponse.CnIcp)
}

inline void SiteLayoutResponse_CnIcp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse_CnIcp::~SiteLayoutResponse_CnIcp() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteLayoutResponse.CnIcp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse_CnIcp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void SiteLayoutResponse_CnIcp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse_CnIcp::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteLayoutResponse.CnIcp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse_CnIcp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.CnIcp.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse_CnIcp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteLayoutResponse.CnIcp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.CnIcp.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteLayoutResponse.CnIcp)
  return target;
}

size_t SiteLayoutResponse_CnIcp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteLayoutResponse.CnIcp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse_CnIcp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse_CnIcp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse_CnIcp::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse_CnIcp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse_CnIcp*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse_CnIcp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteLayoutResponse.CnIcp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse_CnIcp::CopyFrom(const SiteLayoutResponse_CnIcp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteLayoutResponse.CnIcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse_CnIcp::IsInitialized() const {
  return true;
}

void SiteLayoutResponse_CnIcp::InternalSwap(SiteLayoutResponse_CnIcp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse_CnIcp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[70]);
}

// ===================================================================

class SiteLayoutResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteLayoutResponse>()._impl_._has_bits_);
  static const ::palm::balsam::v1::SiteLayoutResponse_Author& author(const SiteLayoutResponse* msg);
  static const ::palm::balsam::v1::SiteLayoutResponse_CnIcp& cn_icp(const SiteLayoutResponse* msg);
  static void set_has_cn_icp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::palm::balsam::v1::SiteLayoutResponse_CnGab& cn_gab(const SiteLayoutResponse* msg);
  static void set_has_cn_gab(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::palm::balsam::v1::SiteLayoutResponse_Author&
SiteLayoutResponse::_Internal::author(const SiteLayoutResponse* msg) {
  return *msg->_impl_.author_;
}
const ::palm::balsam::v1::SiteLayoutResponse_CnIcp&
SiteLayoutResponse::_Internal::cn_icp(const SiteLayoutResponse* msg) {
  return *msg->_impl_.cn_icp_;
}
const ::palm::balsam::v1::SiteLayoutResponse_CnGab&
SiteLayoutResponse::_Internal::cn_gab(const SiteLayoutResponse* msg) {
  return *msg->_impl_.cn_gab_;
}
SiteLayoutResponse::SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteLayoutResponse)
}
SiteLayoutResponse::SiteLayoutResponse(const SiteLayoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keywords_){from._impl_.keywords_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.languages_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.cn_icp_){nullptr}
    , decltype(_impl_.cn_gab_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subhead().empty()) {
    _this->_impl_.subhead_.Set(from._internal_subhead(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_copyright().empty()) {
    _this->_impl_.copyright_.Set(from._internal_copyright(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.languages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.languages_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_languages().empty()) {
    _this->_impl_.languages_.Set(from._internal_languages(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::palm::balsam::v1::SiteLayoutResponse_Author(*from._impl_.author_);
  }
  if (from._internal_has_cn_icp()) {
    _this->_impl_.cn_icp_ = new ::palm::balsam::v1::SiteLayoutResponse_CnIcp(*from._impl_.cn_icp_);
  }
  if (from._internal_has_cn_gab()) {
    _this->_impl_.cn_gab_ = new ::palm::balsam::v1::SiteLayoutResponse_CnGab(*from._impl_.cn_gab_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteLayoutResponse)
}

inline void SiteLayoutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keywords_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.languages_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.cn_icp_){nullptr}
    , decltype(_impl_.cn_gab_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.languages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.languages_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse::~SiteLayoutResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteLayoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keywords_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.subhead_.Destroy();
  _impl_.description_.Destroy();
  _impl_.copyright_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.languages_.Destroy();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.author_;
  if (this != internal_default_instance()) delete _impl_.cn_icp_;
  if (this != internal_default_instance()) delete _impl_.cn_gab_;
}

void SiteLayoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteLayoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keywords_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.subhead_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.copyright_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  _impl_.languages_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cn_icp_ != nullptr);
      _impl_.cn_icp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cn_gab_ != nullptr);
      _impl_.cn_gab_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.title"));
        } else
          goto handle_unusual;
        continue;
      // string subhead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subhead();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.subhead"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.description"));
        } else
          goto handle_unusual;
        continue;
      // string copyright = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_copyright();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.copyright"));
        } else
          goto handle_unusual;
        continue;
      // .palm.balsam.v1.SiteLayoutResponse.Author author = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string keywords = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keywords();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.keywords"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .palm.balsam.v1.SiteLayoutResponse.CnIcp cn_icp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cn_icp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .palm.balsam.v1.SiteLayoutResponse.CnGab cn_gab = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cn_gab(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.lang"));
        } else
          goto handle_unusual;
        continue;
      // string languages = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_languages();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.languages"));
        } else
          goto handle_unusual;
        continue;
      // string version = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteLayoutResponse.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteLayoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.subhead");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subhead(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string copyright = 4;
  if (!this->_internal_copyright().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_copyright().data(), static_cast<int>(this->_internal_copyright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.copyright");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_copyright(), target);
  }

  // .palm.balsam.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // repeated string keywords = 6;
  for (int i = 0, n = this->_internal_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.keywords");
    target = stream->WriteString(6, s, target);
  }

  // optional .palm.balsam.v1.SiteLayoutResponse.CnIcp cn_icp = 11;
  if (_internal_has_cn_icp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::cn_icp(this),
        _Internal::cn_icp(this).GetCachedSize(), target, stream);
  }

  // optional .palm.balsam.v1.SiteLayoutResponse.CnGab cn_gab = 12;
  if (_internal_has_cn_gab()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::cn_gab(this),
        _Internal::cn_gab(this).GetCachedSize(), target, stream);
  }

  // string lang = 97;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.lang");
    target = stream->WriteStringMaybeAliased(
        97, this->_internal_lang(), target);
  }

  // string languages = 98;
  if (!this->_internal_languages().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_languages().data(), static_cast<int>(this->_internal_languages().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.languages");
    target = stream->WriteStringMaybeAliased(
        98, this->_internal_languages(), target);
  }

  // string version = 99;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteLayoutResponse.version");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteLayoutResponse)
  return target;
}

size_t SiteLayoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteLayoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keywords = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keywords_.size());
  for (int i = 0, n = _impl_.keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keywords_.Get(i));
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string copyright = 4;
  if (!this->_internal_copyright().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_copyright());
  }

  // string lang = 97;
  if (!this->_internal_lang().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string languages = 98;
  if (!this->_internal_languages().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_languages());
  }

  // string version = 99;
  if (!this->_internal_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .palm.balsam.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.author_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .palm.balsam.v1.SiteLayoutResponse.CnIcp cn_icp = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cn_icp_);
    }

    // optional .palm.balsam.v1.SiteLayoutResponse.CnGab cn_gab = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cn_gab_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteLayoutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keywords_.MergeFrom(from._impl_.keywords_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _this->_internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_copyright().empty()) {
    _this->_internal_set_copyright(from._internal_copyright());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_languages().empty()) {
    _this->_internal_set_languages(from._internal_languages());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_author()) {
    _this->_internal_mutable_author()->::palm::balsam::v1::SiteLayoutResponse_Author::MergeFrom(
        from._internal_author());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cn_icp()->::palm::balsam::v1::SiteLayoutResponse_CnIcp::MergeFrom(
          from._internal_cn_icp());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cn_gab()->::palm::balsam::v1::SiteLayoutResponse_CnGab::MergeFrom(
          from._internal_cn_gab());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse::CopyFrom(const SiteLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteLayoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse::IsInitialized() const {
  return true;
}

void SiteLayoutResponse::InternalSwap(SiteLayoutResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keywords_.InternalSwap(&other->_impl_.keywords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subhead_, lhs_arena,
      &other->_impl_.subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.copyright_, lhs_arena,
      &other->_impl_.copyright_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.languages_, lhs_arena,
      &other->_impl_.languages_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteLayoutResponse, _impl_.cn_gab_)
      + sizeof(SiteLayoutResponse::_impl_.cn_gab_)
      - PROTOBUF_FIELD_OFFSET(SiteLayoutResponse, _impl_.author_)>(
          reinterpret_cast<char*>(&_impl_.author_),
          reinterpret_cast<char*>(&other->_impl_.author_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[71]);
}

// ===================================================================

class SiteInfoRequest::_Internal {
 public:
};

SiteInfoRequest::SiteInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteInfoRequest)
}
SiteInfoRequest::SiteInfoRequest(const SiteInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subhead().empty()) {
    _this->_impl_.subhead_.Set(from._internal_subhead(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_copyright().empty()) {
    _this->_impl_.copyright_.Set(from._internal_copyright(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteInfoRequest)
}

inline void SiteInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteInfoRequest::~SiteInfoRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.title_.Destroy();
  _impl_.subhead_.Destroy();
  _impl_.description_.Destroy();
  _impl_.copyright_.Destroy();
}

void SiteInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.subhead_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.copyright_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteInfoRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteInfoRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string subhead = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subhead();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteInfoRequest.subhead"));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteInfoRequest.description"));
        } else
          goto handle_unusual;
        continue;
      // string copyright = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_copyright();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteInfoRequest.copyright"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteInfoRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteInfoRequest.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string subhead = 3;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteInfoRequest.subhead");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subhead(), target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteInfoRequest.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string copyright = 5;
  if (!this->_internal_copyright().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_copyright().data(), static_cast<int>(this->_internal_copyright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteInfoRequest.copyright");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_copyright(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteInfoRequest)
  return target;
}

size_t SiteInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 3;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string copyright = 5;
  if (!this->_internal_copyright().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_copyright());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteInfoRequest::GetClassData() const { return &_class_data_; }


void SiteInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteInfoRequest*>(&to_msg);
  auto& from = static_cast<const SiteInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _this->_internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_copyright().empty()) {
    _this->_internal_set_copyright(from._internal_copyright());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteInfoRequest::CopyFrom(const SiteInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteInfoRequest::IsInitialized() const {
  return true;
}

void SiteInfoRequest::InternalSwap(SiteInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subhead_, lhs_arena,
      &other->_impl_.subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.copyright_, lhs_arena,
      &other->_impl_.copyright_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[72]);
}

// ===================================================================

class SiteKeywordsRequest::_Internal {
 public:
};

SiteKeywordsRequest::SiteKeywordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.SiteKeywordsRequest)
}
SiteKeywordsRequest::SiteKeywordsRequest(const SiteKeywordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteKeywordsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.SiteKeywordsRequest)
}

inline void SiteKeywordsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteKeywordsRequest::~SiteKeywordsRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.SiteKeywordsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteKeywordsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void SiteKeywordsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteKeywordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.SiteKeywordsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteKeywordsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.SiteKeywordsRequest.items"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteKeywordsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.SiteKeywordsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.SiteKeywordsRequest.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.SiteKeywordsRequest)
  return target;
}

size_t SiteKeywordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.SiteKeywordsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.items_.size());
  for (int i = 0, n = _impl_.items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.items_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteKeywordsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteKeywordsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteKeywordsRequest::GetClassData() const { return &_class_data_; }


void SiteKeywordsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteKeywordsRequest*>(&to_msg);
  auto& from = static_cast<const SiteKeywordsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.SiteKeywordsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteKeywordsRequest::CopyFrom(const SiteKeywordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.SiteKeywordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteKeywordsRequest::IsInitialized() const {
  return true;
}

void SiteKeywordsRequest::InternalSwap(SiteKeywordsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteKeywordsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[73]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace balsam
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::IdRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::IdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::IdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UidRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UidRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UidRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::Pager*
Arena::CreateMaybeMessage< ::palm::balsam::v1::Pager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::Pager >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AesPlainMessage*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AesPlainMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AesPlainMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AesCodeMessage*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AesCodeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AesCodeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::JwtSignRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::JwtSignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::JwtSignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::JwtSignResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::JwtSignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::JwtSignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::JwtVerifyRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::JwtVerifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::JwtVerifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::JwtVerifyResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::JwtVerifyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::JwtVerifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::HMacSignRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::HMacSignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::HMacSignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::HMacSignResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::HMacSignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::HMacSignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::HMacVerifyRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::HMacVerifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::HMacVerifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserUpdateProfileRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserUpdateProfileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserUpdateProfileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserIndexResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::LogsRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::LogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::LogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserLogsResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserLogsResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserLogsResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserLogsResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserLogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserLogsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::EmailUserByEmailRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::EmailUserByEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::EmailUserByEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::EmailUserByNicknameRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::EmailUserByNicknameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::EmailUserByNicknameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::EmailUserIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::EmailUserIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::EmailUserIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::EmailUserIndexResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::EmailUserIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::EmailUserIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserResetPasswordRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserResetPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserResetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserByEmailRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserByEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserByEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserByTokenRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserByTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserByTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserSignInByEmailRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserSignInByEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserSignInByEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserSignUpByEmailRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserSignUpByEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserSignUpByEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserSignInResponse_Detail*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserSignInResponse_Detail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserSignInResponse_Detail >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserSignInResponse_Permission*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserSignInResponse_Permission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserSignInResponse_Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserSignInResponse_Menu*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserSignInResponse_Menu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserSignInResponse_Menu >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserSignInResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserSignInResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserSignInResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::GoogleOauth2UserIndexResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::GoogleOauth2UserIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::GoogleOauth2UserIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::WechatByUnionIdRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::WechatByUnionIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::WechatByUnionIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::WechatOauth2UserIndexResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::WechatOauth2UserIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::WechatOauth2UserIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::WechatMiniProgramUserIndexResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SessionIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SessionIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SessionIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SessionIndexResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SessionIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SessionIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AttachmentCreateRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AttachmentCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AttachmentCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AttachmentByResourceRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AttachmentByResourceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AttachmentByResourceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AttachmentSetTitleRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AttachmentSetTitleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AttachmentSetTitleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AttachmentShowResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AttachmentShowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AttachmentShowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AttachmentIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AttachmentIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AttachmentIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AttachmentIndexResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AttachmentIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AttachmentIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::LocaleSetRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::LocaleSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::LocaleSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::LocaleIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::LocaleIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::LocaleIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::LocaleIndexResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::LocaleIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::LocaleIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::LocaleByLangRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::LocaleByLangRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::LocaleByLangRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::LeaveWordCreateRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::LeaveWordCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::LeaveWordCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::LeaveWordIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::balsam::v1::LeaveWordIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::LeaveWordIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::LeaveWordIndexResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::LeaveWordIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::LeaveWordIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteStatusResponse_Redis*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteStatusResponse_Redis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteStatusResponse_Redis >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteStatusResponse_PostgreSql*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteStatusResponse_PostgreSql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteStatusResponse_PostgreSql >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteStatusResponse_OpenSearch*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteStatusResponse_OpenSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteStatusResponse_OpenSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteStatusResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteIndexNowAccount_WebSiteVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteIndexNowAccount*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteIndexNowAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteIndexNowAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteGoogleAccount_WebSiteVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteGoogleAccount_ReCaptcha*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteGoogleAccount_ReCaptcha >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteGoogleAccount_ReCaptcha >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteGoogleAccount*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteGoogleAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteGoogleAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteBaiduAccount_WebSiteVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteBaiduAccount*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteBaiduAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteBaiduAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteGetInfoByLangRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteGetInfoByLangRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteGetInfoByLangRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteGetInfoByLangResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteGetInfoByLangResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteGetInfoByLangResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteLayoutResponse_Author*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteLayoutResponse_Author >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteLayoutResponse_Author >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteLayoutResponse_CnGab*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteLayoutResponse_CnGab >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteLayoutResponse_CnGab >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteLayoutResponse_CnIcp*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteLayoutResponse_CnIcp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteLayoutResponse_CnIcp >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteLayoutResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteLayoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteLayoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteInfoRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::SiteKeywordsRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::SiteKeywordsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::SiteKeywordsRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
