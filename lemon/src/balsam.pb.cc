// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: balsam.proto

#include "balsam.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace balsam {
namespace v1 {
PROTOBUF_CONSTEXPR AesPlainMessage::AesPlainMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AesPlainMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AesPlainMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AesPlainMessageDefaultTypeInternal() {}
  union {
    AesPlainMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AesPlainMessageDefaultTypeInternal _AesPlainMessage_default_instance_;
PROTOBUF_CONSTEXPR AesCodeMessage::AesCodeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AesCodeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AesCodeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AesCodeMessageDefaultTypeInternal() {}
  union {
    AesCodeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AesCodeMessageDefaultTypeInternal _AesCodeMessage_default_instance_;
PROTOBUF_CONSTEXPR JwtSignRequest::JwtSignRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audiences_)*/{}
  , /*decltype(_impl_.key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issuer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.not_before_)*/nullptr
  , /*decltype(_impl_.expires_at_)*/nullptr} {}
struct JwtSignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JwtSignRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JwtSignRequestDefaultTypeInternal() {}
  union {
    JwtSignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JwtSignRequestDefaultTypeInternal _JwtSignRequest_default_instance_;
PROTOBUF_CONSTEXPR JwtSignResponse::JwtSignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JwtSignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JwtSignResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JwtSignResponseDefaultTypeInternal() {}
  union {
    JwtSignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JwtSignResponseDefaultTypeInternal _JwtSignResponse_default_instance_;
PROTOBUF_CONSTEXPR JwtVerifyRequest::JwtVerifyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issuer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audience_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JwtVerifyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JwtVerifyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JwtVerifyRequestDefaultTypeInternal() {}
  union {
    JwtVerifyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JwtVerifyRequestDefaultTypeInternal _JwtVerifyRequest_default_instance_;
PROTOBUF_CONSTEXPR JwtVerifyResponse::JwtVerifyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.jwt_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct JwtVerifyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JwtVerifyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JwtVerifyResponseDefaultTypeInternal() {}
  union {
    JwtVerifyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JwtVerifyResponseDefaultTypeInternal _JwtVerifyResponse_default_instance_;
PROTOBUF_CONSTEXPR HMacSignRequest::HMacSignRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HMacSignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMacSignRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMacSignRequestDefaultTypeInternal() {}
  union {
    HMacSignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMacSignRequestDefaultTypeInternal _HMacSignRequest_default_instance_;
PROTOBUF_CONSTEXPR HMacSignResponse::HMacSignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HMacSignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMacSignResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMacSignResponseDefaultTypeInternal() {}
  union {
    HMacSignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMacSignResponseDefaultTypeInternal _HMacSignResponse_default_instance_;
PROTOBUF_CONSTEXPR HMacVerifyRequest::HMacVerifyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HMacVerifyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMacVerifyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMacVerifyRequestDefaultTypeInternal() {}
  union {
    HMacVerifyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMacVerifyRequestDefaultTypeInternal _HMacVerifyRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSignInByEmail::UserSignInByEmail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_.user_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserSignInByEmailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInByEmailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInByEmailDefaultTypeInternal() {}
  union {
    UserSignInByEmail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInByEmailDefaultTypeInternal _UserSignInByEmail_default_instance_;
PROTOBUF_CONSTEXPR UserSignInResponse::UserSignInResponse(
    ::_pbi::ConstantInitialized) {}
struct UserSignInResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInResponseDefaultTypeInternal() {}
  union {
    UserSignInResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInResponseDefaultTypeInternal _UserSignInResponse_default_instance_;
}  // namespace v1
}  // namespace balsam
}  // namespace palm
static ::_pb::Metadata file_level_metadata_balsam_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_balsam_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_balsam_2eproto = nullptr;

const uint32_t TableStruct_balsam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesPlainMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesPlainMessage, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesCodeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesCodeMessage, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::AesCodeMessage, _impl_.salt_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.key_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.issuer_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.audiences_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.not_before_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.expires_at_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignRequest, _impl_.extra_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtSignResponse, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyRequest, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyRequest, _impl_.issuer_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyRequest, _impl_.audience_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_.jwt_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_.key_id_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::JwtVerifyResponse, _impl_.extra_),
  ~0u,
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacSignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacSignRequest, _impl_.plain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacSignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacSignResponse, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacVerifyRequest, _impl_.plain_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::HMacVerifyRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmail, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmail, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmail, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInByEmail, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::balsam::v1::UserSignInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::balsam::v1::AesPlainMessage)},
  { 7, -1, -1, sizeof(::palm::balsam::v1::AesCodeMessage)},
  { 15, 28, -1, sizeof(::palm::balsam::v1::JwtSignRequest)},
  { 35, -1, -1, sizeof(::palm::balsam::v1::JwtSignResponse)},
  { 42, -1, -1, sizeof(::palm::balsam::v1::JwtVerifyRequest)},
  { 51, 61, -1, sizeof(::palm::balsam::v1::JwtVerifyResponse)},
  { 65, -1, -1, sizeof(::palm::balsam::v1::HMacSignRequest)},
  { 72, -1, -1, sizeof(::palm::balsam::v1::HMacSignResponse)},
  { 79, -1, -1, sizeof(::palm::balsam::v1::HMacVerifyRequest)},
  { 87, -1, -1, sizeof(::palm::balsam::v1::UserSignInByEmail)},
  { 98, -1, -1, sizeof(::palm::balsam::v1::UserSignInResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::balsam::v1::_AesPlainMessage_default_instance_._instance,
  &::palm::balsam::v1::_AesCodeMessage_default_instance_._instance,
  &::palm::balsam::v1::_JwtSignRequest_default_instance_._instance,
  &::palm::balsam::v1::_JwtSignResponse_default_instance_._instance,
  &::palm::balsam::v1::_JwtVerifyRequest_default_instance_._instance,
  &::palm::balsam::v1::_JwtVerifyResponse_default_instance_._instance,
  &::palm::balsam::v1::_HMacSignRequest_default_instance_._instance,
  &::palm::balsam::v1::_HMacSignResponse_default_instance_._instance,
  &::palm::balsam::v1::_HMacVerifyRequest_default_instance_._instance,
  &::palm::balsam::v1::_UserSignInByEmail_default_instance_._instance,
  &::palm::balsam::v1::_UserSignInResponse_default_instance_._instance,
};

const char descriptor_table_protodef_balsam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014balsam.proto\022\016palm.balsam.v1\032\033google/p"
  "rotobuf/empty.proto\032\036google/protobuf/dur"
  "ation.proto\032\037google/protobuf/timestamp.p"
  "roto\"\"\n\017AesPlainMessage\022\017\n\007payload\030\001 \001(\014"
  "\"/\n\016AesCodeMessage\022\017\n\007payload\030\001 \001(\014\022\014\n\004s"
  "alt\030\002 \001(\014\"\342\001\n\016JwtSignRequest\022\023\n\006key_id\030\001"
  " \001(\tH\000\210\001\001\022\016\n\006issuer\030\013 \001(\t\022\017\n\007subject\030\014 \001"
  "(\t\022\021\n\taudiences\030\r \003(\t\022.\n\nnot_before\030\022 \001("
  "\0132\032.google.protobuf.Timestamp\022.\n\nexpires"
  "_at\030\023 \001(\0132\032.google.protobuf.Timestamp\022\022\n"
  "\005extra\030c \001(\tH\001\210\001\001B\t\n\007_key_idB\010\n\006_extra\" "
  "\n\017JwtSignResponse\022\r\n\005token\030\001 \001(\t\"C\n\020JwtV"
  "erifyRequest\022\r\n\005token\030\001 \001(\t\022\016\n\006issuer\030\002 "
  "\001(\t\022\020\n\010audience\030\003 \001(\t\"r\n\021JwtVerifyRespon"
  "se\022\016\n\006jwt_id\030\001 \001(\t\022\023\n\006key_id\030\002 \001(\tH\000\210\001\001\022"
  "\017\n\007subject\030\013 \001(\t\022\022\n\005extra\030\023 \001(\tH\001\210\001\001B\t\n\007"
  "_key_idB\010\n\006_extra\" \n\017HMacSignRequest\022\r\n\005"
  "plain\030\001 \001(\014\" \n\020HMacSignResponse\022\014\n\004code\030"
  "\001 \001(\014\"0\n\021HMacVerifyRequest\022\r\n\005plain\030\001 \001("
  "\014\022\014\n\004code\030\002 \001(\014\"z\n\021UserSignInByEmail\022\017\n\005"
  "email\030\001 \001(\tH\000\022\022\n\010nickname\030\002 \001(\tH\000\022\020\n\010pas"
  "sword\030\010 \001(\t\022&\n\003ttl\030\t \001(\0132\031.google.protob"
  "uf.DurationB\006\n\004user\"\024\n\022UserSignInRespons"
  "e2\241\001\n\003Aes\022L\n\007Encrypt\022\037.palm.balsam.v1.Ae"
  "sPlainMessage\032\036.palm.balsam.v1.AesCodeMe"
  "ssage\"\000\022L\n\007Decrypt\022\036.palm.balsam.v1.AesC"
  "odeMessage\032\037.palm.balsam.v1.AesPlainMess"
  "age\"\0002\241\001\n\003Jwt\022I\n\004Sign\022\036.palm.balsam.v1.J"
  "wtSignRequest\032\037.palm.balsam.v1.JwtSignRe"
  "sponse\"\000\022O\n\006Verify\022 .palm.balsam.v1.JwtV"
  "erifyRequest\032!.palm.balsam.v1.JwtVerifyR"
  "esponse\"\0002\232\001\n\004HMac\022K\n\004Sign\022\037.palm.balsam"
  ".v1.HMacSignRequest\032 .palm.balsam.v1.HMa"
  "cSignResponse\"\000\022E\n\006Verify\022!.palm.balsam."
  "v1.HMacVerifyRequest\032\026.google.protobuf.E"
  "mpty\"\0002`\n\004User\022X\n\rSignInByEmail\022!.palm.b"
  "alsam.v1.UserSignInByEmail\032\".palm.balsam"
  ".v1.UserSignInResponse\"\000B_\n,com.github.s"
  "aturn_xiv.palm.plugins.balsam.v1P\001Z-gith"
  "ub.com/saturn-xiv/palm/balsam/services/v"
  "2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_balsam_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_balsam_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_balsam_2eproto = {
    false, false, 1609, descriptor_table_protodef_balsam_2eproto,
    "balsam.proto",
    &descriptor_table_balsam_2eproto_once, descriptor_table_balsam_2eproto_deps, 3, 11,
    schemas, file_default_instances, TableStruct_balsam_2eproto::offsets,
    file_level_metadata_balsam_2eproto, file_level_enum_descriptors_balsam_2eproto,
    file_level_service_descriptors_balsam_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_balsam_2eproto_getter() {
  return &descriptor_table_balsam_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_balsam_2eproto(&descriptor_table_balsam_2eproto);
namespace palm {
namespace balsam {
namespace v1 {

// ===================================================================

class AesPlainMessage::_Internal {
 public:
};

AesPlainMessage::AesPlainMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AesPlainMessage)
}
AesPlainMessage::AesPlainMessage(const AesPlainMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AesPlainMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AesPlainMessage)
}

inline void AesPlainMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AesPlainMessage::~AesPlainMessage() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AesPlainMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AesPlainMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void AesPlainMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AesPlainMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AesPlainMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AesPlainMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AesPlainMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AesPlainMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AesPlainMessage)
  return target;
}

size_t AesPlainMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AesPlainMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AesPlainMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AesPlainMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AesPlainMessage::GetClassData() const { return &_class_data_; }


void AesPlainMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AesPlainMessage*>(&to_msg);
  auto& from = static_cast<const AesPlainMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AesPlainMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AesPlainMessage::CopyFrom(const AesPlainMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AesPlainMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AesPlainMessage::IsInitialized() const {
  return true;
}

void AesPlainMessage::InternalSwap(AesPlainMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AesPlainMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[0]);
}

// ===================================================================

class AesCodeMessage::_Internal {
 public:
};

AesCodeMessage::AesCodeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.AesCodeMessage)
}
AesCodeMessage::AesCodeMessage(const AesCodeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AesCodeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.salt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.AesCodeMessage)
}

inline void AesCodeMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.salt_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AesCodeMessage::~AesCodeMessage() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.AesCodeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AesCodeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  _impl_.salt_.Destroy();
}

void AesCodeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AesCodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.AesCodeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.salt_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AesCodeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes salt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AesCodeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.AesCodeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  // bytes salt = 2;
  if (!this->_internal_salt().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_salt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.AesCodeMessage)
  return target;
}

size_t AesCodeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.AesCodeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // bytes salt = 2;
  if (!this->_internal_salt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_salt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AesCodeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AesCodeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AesCodeMessage::GetClassData() const { return &_class_data_; }


void AesCodeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AesCodeMessage*>(&to_msg);
  auto& from = static_cast<const AesCodeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.AesCodeMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AesCodeMessage::CopyFrom(const AesCodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.AesCodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AesCodeMessage::IsInitialized() const {
  return true;
}

void AesCodeMessage::InternalSwap(AesCodeMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_, lhs_arena,
      &other->_impl_.salt_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AesCodeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[1]);
}

// ===================================================================

class JwtSignRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<JwtSignRequest>()._impl_._has_bits_);
  static void set_has_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& not_before(const JwtSignRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const JwtSignRequest* msg);
  static void set_has_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
JwtSignRequest::_Internal::not_before(const JwtSignRequest* msg) {
  return *msg->_impl_.not_before_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
JwtSignRequest::_Internal::expires_at(const JwtSignRequest* msg) {
  return *msg->_impl_.expires_at_;
}
void JwtSignRequest::clear_not_before() {
  if (GetArenaForAllocation() == nullptr && _impl_.not_before_ != nullptr) {
    delete _impl_.not_before_;
  }
  _impl_.not_before_ = nullptr;
}
void JwtSignRequest::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
}
JwtSignRequest::JwtSignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.JwtSignRequest)
}
JwtSignRequest::JwtSignRequest(const JwtSignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JwtSignRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){from._impl_.audiences_}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.not_before_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_id()) {
    _this->_impl_.key_id_.Set(from._internal_key_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issuer().empty()) {
    _this->_impl_.issuer_.Set(from._internal_issuer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extra()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_not_before()) {
    _this->_impl_.not_before_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.not_before_);
  }
  if (from._internal_has_expires_at()) {
    _this->_impl_.expires_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expires_at_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.JwtSignRequest)
}

inline void JwtSignRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audiences_){arena}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.not_before_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
  };
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JwtSignRequest::~JwtSignRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.JwtSignRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JwtSignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audiences_.~RepeatedPtrField();
  _impl_.key_id_.Destroy();
  _impl_.issuer_.Destroy();
  _impl_.subject_.Destroy();
  _impl_.extra_.Destroy();
  if (this != internal_default_instance()) delete _impl_.not_before_;
  if (this != internal_default_instance()) delete _impl_.expires_at_;
}

void JwtSignRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JwtSignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.JwtSignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audiences_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_id_.ClearNonDefaultToEmpty();
  }
  _impl_.issuer_.ClearToEmpty();
  _impl_.subject_.ClearToEmpty();
  if (cached_has_bits & 0x00000002u) {
    _impl_.extra_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.not_before_ != nullptr) {
    delete _impl_.not_before_;
  }
  _impl_.not_before_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JwtSignRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.key_id"));
        } else
          goto handle_unusual;
        continue;
      // string issuer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_issuer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.issuer"));
        } else
          goto handle_unusual;
        continue;
      // string subject = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.subject"));
        } else
          goto handle_unusual;
        continue;
      // repeated string audiences = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audiences();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.audiences"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp not_before = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_before(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string extra = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignRequest.extra"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JwtSignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.JwtSignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string key_id = 1;
  if (_internal_has_key_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_id(), target);
  }

  // string issuer = 11;
  if (!this->_internal_issuer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuer().data(), static_cast<int>(this->_internal_issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.issuer");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_issuer(), target);
  }

  // string subject = 12;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.subject");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_subject(), target);
  }

  // repeated string audiences = 13;
  for (int i = 0, n = this->_internal_audiences_size(); i < n; i++) {
    const auto& s = this->_internal_audiences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.audiences");
    target = stream->WriteString(13, s, target);
  }

  // .google.protobuf.Timestamp not_before = 18;
  if (this->_internal_has_not_before()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::not_before(this),
        _Internal::not_before(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expires_at = 19;
  if (this->_internal_has_expires_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::expires_at(this),
        _Internal::expires_at(this).GetCachedSize(), target, stream);
  }

  // optional string extra = 99;
  if (_internal_has_extra()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignRequest.extra");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.JwtSignRequest)
  return target;
}

size_t JwtSignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.JwtSignRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audiences = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.audiences_.size());
  for (int i = 0, n = _impl_.audiences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.audiences_.Get(i));
  }

  // optional string key_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // string issuer = 11;
  if (!this->_internal_issuer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer());
  }

  // string subject = 12;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // optional string extra = 99;
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  // .google.protobuf.Timestamp not_before = 18;
  if (this->_internal_has_not_before()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.not_before_);
  }

  // .google.protobuf.Timestamp expires_at = 19;
  if (this->_internal_has_expires_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expires_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JwtSignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JwtSignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JwtSignRequest::GetClassData() const { return &_class_data_; }


void JwtSignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JwtSignRequest*>(&to_msg);
  auto& from = static_cast<const JwtSignRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.JwtSignRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audiences_.MergeFrom(from._impl_.audiences_);
  if (from._internal_has_key_id()) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (!from._internal_issuer().empty()) {
    _this->_internal_set_issuer(from._internal_issuer());
  }
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (from._internal_has_extra()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  if (from._internal_has_not_before()) {
    _this->_internal_mutable_not_before()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_not_before());
  }
  if (from._internal_has_expires_at()) {
    _this->_internal_mutable_expires_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expires_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JwtSignRequest::CopyFrom(const JwtSignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.JwtSignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JwtSignRequest::IsInitialized() const {
  return true;
}

void JwtSignRequest::InternalSwap(JwtSignRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.audiences_.InternalSwap(&other->_impl_.audiences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_id_, lhs_arena,
      &other->_impl_.key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issuer_, lhs_arena,
      &other->_impl_.issuer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JwtSignRequest, _impl_.expires_at_)
      + sizeof(JwtSignRequest::_impl_.expires_at_)
      - PROTOBUF_FIELD_OFFSET(JwtSignRequest, _impl_.not_before_)>(
          reinterpret_cast<char*>(&_impl_.not_before_),
          reinterpret_cast<char*>(&other->_impl_.not_before_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JwtSignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[2]);
}

// ===================================================================

class JwtSignResponse::_Internal {
 public:
};

JwtSignResponse::JwtSignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.JwtSignResponse)
}
JwtSignResponse::JwtSignResponse(const JwtSignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JwtSignResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.JwtSignResponse)
}

inline void JwtSignResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JwtSignResponse::~JwtSignResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.JwtSignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JwtSignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void JwtSignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JwtSignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.JwtSignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JwtSignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtSignResponse.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JwtSignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.JwtSignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtSignResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.JwtSignResponse)
  return target;
}

size_t JwtSignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.JwtSignResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JwtSignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JwtSignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JwtSignResponse::GetClassData() const { return &_class_data_; }


void JwtSignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JwtSignResponse*>(&to_msg);
  auto& from = static_cast<const JwtSignResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.JwtSignResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JwtSignResponse::CopyFrom(const JwtSignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.JwtSignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JwtSignResponse::IsInitialized() const {
  return true;
}

void JwtSignResponse::InternalSwap(JwtSignResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JwtSignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[3]);
}

// ===================================================================

class JwtVerifyRequest::_Internal {
 public:
};

JwtVerifyRequest::JwtVerifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.JwtVerifyRequest)
}
JwtVerifyRequest::JwtVerifyRequest(const JwtVerifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JwtVerifyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.audience_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issuer().empty()) {
    _this->_impl_.issuer_.Set(from._internal_issuer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.audience_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audience_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audience().empty()) {
    _this->_impl_.audience_.Set(from._internal_audience(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.JwtVerifyRequest)
}

inline void JwtVerifyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.audience_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audience_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audience_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JwtVerifyRequest::~JwtVerifyRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.JwtVerifyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JwtVerifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.issuer_.Destroy();
  _impl_.audience_.Destroy();
}

void JwtVerifyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JwtVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.JwtVerifyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.issuer_.ClearToEmpty();
  _impl_.audience_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JwtVerifyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyRequest.token"));
        } else
          goto handle_unusual;
        continue;
      // string issuer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_issuer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyRequest.issuer"));
        } else
          goto handle_unusual;
        continue;
      // string audience = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_audience();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyRequest.audience"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JwtVerifyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.JwtVerifyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string issuer = 2;
  if (!this->_internal_issuer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuer().data(), static_cast<int>(this->_internal_issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyRequest.issuer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_issuer(), target);
  }

  // string audience = 3;
  if (!this->_internal_audience().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audience().data(), static_cast<int>(this->_internal_audience().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyRequest.audience");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_audience(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.JwtVerifyRequest)
  return target;
}

size_t JwtVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.JwtVerifyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string issuer = 2;
  if (!this->_internal_issuer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer());
  }

  // string audience = 3;
  if (!this->_internal_audience().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audience());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JwtVerifyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JwtVerifyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JwtVerifyRequest::GetClassData() const { return &_class_data_; }


void JwtVerifyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JwtVerifyRequest*>(&to_msg);
  auto& from = static_cast<const JwtVerifyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.JwtVerifyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_issuer().empty()) {
    _this->_internal_set_issuer(from._internal_issuer());
  }
  if (!from._internal_audience().empty()) {
    _this->_internal_set_audience(from._internal_audience());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JwtVerifyRequest::CopyFrom(const JwtVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.JwtVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JwtVerifyRequest::IsInitialized() const {
  return true;
}

void JwtVerifyRequest::InternalSwap(JwtVerifyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issuer_, lhs_arena,
      &other->_impl_.issuer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audience_, lhs_arena,
      &other->_impl_.audience_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JwtVerifyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[4]);
}

// ===================================================================

class JwtVerifyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<JwtVerifyResponse>()._impl_._has_bits_);
  static void set_has_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

JwtVerifyResponse::JwtVerifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.JwtVerifyResponse)
}
JwtVerifyResponse::JwtVerifyResponse(const JwtVerifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JwtVerifyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.jwt_id_){}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.extra_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.jwt_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jwt_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_jwt_id().empty()) {
    _this->_impl_.jwt_id_.Set(from._internal_jwt_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_id()) {
    _this->_impl_.key_id_.Set(from._internal_key_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extra()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.JwtVerifyResponse)
}

inline void JwtVerifyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.jwt_id_){}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.extra_){}
  };
  _impl_.jwt_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jwt_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JwtVerifyResponse::~JwtVerifyResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.JwtVerifyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JwtVerifyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jwt_id_.Destroy();
  _impl_.key_id_.Destroy();
  _impl_.subject_.Destroy();
  _impl_.extra_.Destroy();
}

void JwtVerifyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JwtVerifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.JwtVerifyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jwt_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_id_.ClearNonDefaultToEmpty();
  }
  _impl_.subject_.ClearToEmpty();
  if (cached_has_bits & 0x00000002u) {
    _impl_.extra_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JwtVerifyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string jwt_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_jwt_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyResponse.jwt_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyResponse.key_id"));
        } else
          goto handle_unusual;
        continue;
      // string subject = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyResponse.subject"));
        } else
          goto handle_unusual;
        continue;
      // optional string extra = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.JwtVerifyResponse.extra"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JwtVerifyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.JwtVerifyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string jwt_id = 1;
  if (!this->_internal_jwt_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jwt_id().data(), static_cast<int>(this->_internal_jwt_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyResponse.jwt_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_jwt_id(), target);
  }

  // optional string key_id = 2;
  if (_internal_has_key_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyResponse.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  // string subject = 11;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyResponse.subject");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_subject(), target);
  }

  // optional string extra = 19;
  if (_internal_has_extra()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.JwtVerifyResponse.extra");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.JwtVerifyResponse)
  return target;
}

size_t JwtVerifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.JwtVerifyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string jwt_id = 1;
  if (!this->_internal_jwt_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jwt_id());
  }

  // optional string key_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // string subject = 11;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // optional string extra = 19;
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JwtVerifyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JwtVerifyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JwtVerifyResponse::GetClassData() const { return &_class_data_; }


void JwtVerifyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JwtVerifyResponse*>(&to_msg);
  auto& from = static_cast<const JwtVerifyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.JwtVerifyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_jwt_id().empty()) {
    _this->_internal_set_jwt_id(from._internal_jwt_id());
  }
  if (from._internal_has_key_id()) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (from._internal_has_extra()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JwtVerifyResponse::CopyFrom(const JwtVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.JwtVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JwtVerifyResponse::IsInitialized() const {
  return true;
}

void JwtVerifyResponse::InternalSwap(JwtVerifyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jwt_id_, lhs_arena,
      &other->_impl_.jwt_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_id_, lhs_arena,
      &other->_impl_.key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JwtVerifyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[5]);
}

// ===================================================================

class HMacSignRequest::_Internal {
 public:
};

HMacSignRequest::HMacSignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.HMacSignRequest)
}
HMacSignRequest::HMacSignRequest(const HMacSignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HMacSignRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plain_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plain().empty()) {
    _this->_impl_.plain_.Set(from._internal_plain(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.HMacSignRequest)
}

inline void HMacSignRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plain_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.plain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HMacSignRequest::~HMacSignRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.HMacSignRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HMacSignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plain_.Destroy();
}

void HMacSignRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HMacSignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.HMacSignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plain_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMacSignRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes plain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HMacSignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.HMacSignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes plain = 1;
  if (!this->_internal_plain().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_plain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.HMacSignRequest)
  return target;
}

size_t HMacSignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.HMacSignRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes plain = 1;
  if (!this->_internal_plain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_plain());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HMacSignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HMacSignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HMacSignRequest::GetClassData() const { return &_class_data_; }


void HMacSignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HMacSignRequest*>(&to_msg);
  auto& from = static_cast<const HMacSignRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.HMacSignRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plain().empty()) {
    _this->_internal_set_plain(from._internal_plain());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HMacSignRequest::CopyFrom(const HMacSignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.HMacSignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMacSignRequest::IsInitialized() const {
  return true;
}

void HMacSignRequest::InternalSwap(HMacSignRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plain_, lhs_arena,
      &other->_impl_.plain_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HMacSignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[6]);
}

// ===================================================================

class HMacSignResponse::_Internal {
 public:
};

HMacSignResponse::HMacSignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.HMacSignResponse)
}
HMacSignResponse::HMacSignResponse(const HMacSignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HMacSignResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.HMacSignResponse)
}

inline void HMacSignResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HMacSignResponse::~HMacSignResponse() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.HMacSignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HMacSignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void HMacSignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HMacSignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.HMacSignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMacSignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HMacSignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.HMacSignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes code = 1;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.HMacSignResponse)
  return target;
}

size_t HMacSignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.HMacSignResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HMacSignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HMacSignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HMacSignResponse::GetClassData() const { return &_class_data_; }


void HMacSignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HMacSignResponse*>(&to_msg);
  auto& from = static_cast<const HMacSignResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.HMacSignResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HMacSignResponse::CopyFrom(const HMacSignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.HMacSignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMacSignResponse::IsInitialized() const {
  return true;
}

void HMacSignResponse::InternalSwap(HMacSignResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HMacSignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[7]);
}

// ===================================================================

class HMacVerifyRequest::_Internal {
 public:
};

HMacVerifyRequest::HMacVerifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.HMacVerifyRequest)
}
HMacVerifyRequest::HMacVerifyRequest(const HMacVerifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HMacVerifyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plain_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plain().empty()) {
    _this->_impl_.plain_.Set(from._internal_plain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.HMacVerifyRequest)
}

inline void HMacVerifyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plain_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.plain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HMacVerifyRequest::~HMacVerifyRequest() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.HMacVerifyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HMacVerifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plain_.Destroy();
  _impl_.code_.Destroy();
}

void HMacVerifyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HMacVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.HMacVerifyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plain_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMacVerifyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes plain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HMacVerifyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.HMacVerifyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes plain = 1;
  if (!this->_internal_plain().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_plain(), target);
  }

  // bytes code = 2;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.HMacVerifyRequest)
  return target;
}

size_t HMacVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.HMacVerifyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes plain = 1;
  if (!this->_internal_plain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_plain());
  }

  // bytes code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HMacVerifyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HMacVerifyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HMacVerifyRequest::GetClassData() const { return &_class_data_; }


void HMacVerifyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HMacVerifyRequest*>(&to_msg);
  auto& from = static_cast<const HMacVerifyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.HMacVerifyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plain().empty()) {
    _this->_internal_set_plain(from._internal_plain());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HMacVerifyRequest::CopyFrom(const HMacVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.HMacVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMacVerifyRequest::IsInitialized() const {
  return true;
}

void HMacVerifyRequest::InternalSwap(HMacVerifyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plain_, lhs_arena,
      &other->_impl_.plain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HMacVerifyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[8]);
}

// ===================================================================

class UserSignInByEmail::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const UserSignInByEmail* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
UserSignInByEmail::_Internal::ttl(const UserSignInByEmail* msg) {
  return *msg->_impl_.ttl_;
}
void UserSignInByEmail::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
UserSignInByEmail::UserSignInByEmail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserSignInByEmail)
}
UserSignInByEmail::UserSignInByEmail(const UserSignInByEmail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInByEmail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  clear_has_user();
  switch (from.user_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserSignInByEmail)
}

inline void UserSignInByEmail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_user();
}

UserSignInByEmail::~UserSignInByEmail() {
  // @@protoc_insertion_point(destructor:palm.balsam.v1.UserSignInByEmail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInByEmail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
  if (has_user()) {
    clear_user();
  }
}

void UserSignInByEmail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInByEmail::clear_user() {
// @@protoc_insertion_point(one_of_clear_start:palm.balsam.v1.UserSignInByEmail)
  switch (user_case()) {
    case kEmail: {
      _impl_.user_.email_.Destroy();
      break;
    }
    case kNickname: {
      _impl_.user_.nickname_.Destroy();
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = USER_NOT_SET;
}


void UserSignInByEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.balsam.v1.UserSignInByEmail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  clear_user();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInByEmail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInByEmail.email"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInByEmail.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string password = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.balsam.v1.UserSignInByEmail.password"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInByEmail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.balsam.v1.UserSignInByEmail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInByEmail.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string nickname = 2;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInByEmail.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string password = 8;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.balsam.v1.UserSignInByEmail.password");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_password(), target);
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.balsam.v1.UserSignInByEmail)
  return target;
}

size_t UserSignInByEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.balsam.v1.UserSignInByEmail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 8;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .google.protobuf.Duration ttl = 9;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  switch (user_case()) {
    // string email = 1;
    case kEmail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
      break;
    }
    // string nickname = 2;
    case kNickname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInByEmail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInByEmail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInByEmail::GetClassData() const { return &_class_data_; }


void UserSignInByEmail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInByEmail*>(&to_msg);
  auto& from = static_cast<const UserSignInByEmail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.balsam.v1.UserSignInByEmail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  switch (from.user_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInByEmail::CopyFrom(const UserSignInByEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.balsam.v1.UserSignInByEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInByEmail::IsInitialized() const {
  return true;
}

void UserSignInByEmail::InternalSwap(UserSignInByEmail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
  swap(_impl_.user_, other->_impl_.user_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInByEmail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[9]);
}

// ===================================================================

class UserSignInResponse::_Internal {
 public:
};

UserSignInResponse::UserSignInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:palm.balsam.v1.UserSignInResponse)
}
UserSignInResponse::UserSignInResponse(const UserSignInResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UserSignInResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.balsam.v1.UserSignInResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UserSignInResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_balsam_2eproto_getter, &descriptor_table_balsam_2eproto_once,
      file_level_metadata_balsam_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace balsam
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AesPlainMessage*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AesPlainMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AesPlainMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::AesCodeMessage*
Arena::CreateMaybeMessage< ::palm::balsam::v1::AesCodeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::AesCodeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::JwtSignRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::JwtSignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::JwtSignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::JwtSignResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::JwtSignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::JwtSignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::JwtVerifyRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::JwtVerifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::JwtVerifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::JwtVerifyResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::JwtVerifyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::JwtVerifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::HMacSignRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::HMacSignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::HMacSignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::HMacSignResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::HMacSignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::HMacSignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::HMacVerifyRequest*
Arena::CreateMaybeMessage< ::palm::balsam::v1::HMacVerifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::HMacVerifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserSignInByEmail*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserSignInByEmail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserSignInByEmail >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::balsam::v1::UserSignInResponse*
Arena::CreateMaybeMessage< ::palm::balsam::v1::UserSignInResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::balsam::v1::UserSignInResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
