// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rbac.proto

#include "rbac.pb.h"
#include "rbac.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace rbac {
namespace v1 {

static const char* Policy_method_names[] = {
  "/palm.rbac.v1.Policy/Has",
  "/palm.rbac.v1.Policy/Can",
  "/palm.rbac.v1.Policy/DeleteUser",
  "/palm.rbac.v1.Policy/DeleteRole",
  "/palm.rbac.v1.Policy/GetRolesForUser",
  "/palm.rbac.v1.Policy/GetImplicitRolesForUser",
  "/palm.rbac.v1.Policy/GetUsersForRole",
  "/palm.rbac.v1.Policy/GetImplicitUsersForRole",
  "/palm.rbac.v1.Policy/AddRolesForUser",
  "/palm.rbac.v1.Policy/DeleteRolesForUser",
  "/palm.rbac.v1.Policy/GetPermissionsForUser",
  "/palm.rbac.v1.Policy/GetImplicitPermissionsForUser",
  "/palm.rbac.v1.Policy/AddPermissionsForUser",
  "/palm.rbac.v1.Policy/DeletePermissionsForUser",
  "/palm.rbac.v1.Policy/GetPermissionsForRole",
  "/palm.rbac.v1.Policy/GetImplicitPermissionsForRole",
  "/palm.rbac.v1.Policy/AddPermissionsForRole",
  "/palm.rbac.v1.Policy/DeletePermissionsForRole",
};

std::unique_ptr< Policy::Stub> Policy::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Policy::Stub> stub(new Policy::Stub(channel, options));
  return stub;
}

Policy::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Has_(Policy_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Can_(Policy_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUser_(Policy_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRole_(Policy_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRolesForUser_(Policy_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitRolesForUser_(Policy_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUsersForRole_(Policy_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitUsersForRole_(Policy_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRolesForUser_(Policy_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRolesForUser_(Policy_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissionsForUser_(Policy_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitPermissionsForUser_(Policy_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermissionsForUser_(Policy_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionsForUser_(Policy_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissionsForRole_(Policy_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitPermissionsForRole_(Policy_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermissionsForRole_(Policy_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionsForRole_(Policy_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Policy::Stub::Has(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyHasRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Has_, context, request, response);
}

void Policy::Stub::async::Has(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyHasRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Has_, context, request, response, std::move(f));
}

void Policy::Stub::async::Has(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyHasRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Has_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncHasRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyHasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyHasRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Has_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncHasRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyHasRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::Can(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyCanRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Can_, context, request, response);
}

void Policy::Stub::async::Can(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyCanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Can_, context, request, response, std::move(f));
}

void Policy::Stub::async::Can(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyCanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Can_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncCanRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyCanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyCanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Can_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncCanRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyCanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::DeleteUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteUser_, context, request, response);
}

void Policy::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, std::move(f));
}

void Policy::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyUsersResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::DeleteRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRole_, context, request, response);
}

void Policy::Stub::async::DeleteRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, std::move(f));
}

void Policy::Stub::async::DeleteRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyRolesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::GetRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::palm::rbac::v1::PolicyRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRolesForUser_, context, request, response);
}

void Policy::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyRolesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, std::move(f));
}

void Policy::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyRolesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyRolesResponse>* Policy::Stub::PrepareAsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::rbac::v1::PolicyRolesResponse, ::palm::rbac::v1::PolicyUsersResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyRolesResponse>* Policy::Stub::AsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::palm::rbac::v1::PolicyRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitRolesForUser_, context, request, response);
}

void Policy::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyRolesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, std::move(f));
}

void Policy::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyRolesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyRolesResponse>* Policy::Stub::PrepareAsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::rbac::v1::PolicyRolesResponse, ::palm::rbac::v1::PolicyUsersResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyRolesResponse>* Policy::Stub::AsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::GetUsersForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::palm::rbac::v1::PolicyUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUsersForRole_, context, request, response);
}

void Policy::Stub::async::GetUsersForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsersForRole_, context, request, response, std::move(f));
}

void Policy::Stub::async::GetUsersForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsersForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyUsersResponse>* Policy::Stub::PrepareAsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::rbac::v1::PolicyUsersResponse, ::palm::rbac::v1::PolicyRolesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUsersForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyUsersResponse>* Policy::Stub::AsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUsersForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::palm::rbac::v1::PolicyUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitUsersForRole_, context, request, response);
}

void Policy::Stub::async::GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitUsersForRole_, context, request, response, std::move(f));
}

void Policy::Stub::async::GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitUsersForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyUsersResponse>* Policy::Stub::PrepareAsyncGetImplicitUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::rbac::v1::PolicyUsersResponse, ::palm::rbac::v1::PolicyRolesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitUsersForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyUsersResponse>* Policy::Stub::AsyncGetImplicitUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitUsersForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::AddRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddRolesForUser_, context, request, response);
}

void Policy::Stub::async::AddRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRolesForUser_, context, request, response, std::move(f));
}

void Policy::Stub::async::AddRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyRolesForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRolesForUser_, context, request, response);
}

void Policy::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, std::move(f));
}

void Policy::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyRolesForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::palm::rbac::v1::PolicyPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPermissionsForUser_, context, request, response);
}

void Policy::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, std::move(f));
}

void Policy::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyPermissionsResponse>* Policy::Stub::PrepareAsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::rbac::v1::PolicyPermissionsResponse, ::palm::rbac::v1::PolicyUsersResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyPermissionsResponse>* Policy::Stub::AsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::palm::rbac::v1::PolicyPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitPermissionsForUser_, context, request, response);
}

void Policy::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, std::move(f));
}

void Policy::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyPermissionsResponse>* Policy::Stub::PrepareAsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::rbac::v1::PolicyPermissionsResponse, ::palm::rbac::v1::PolicyUsersResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyPermissionsResponse>* Policy::Stub::AsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPermissionsForUser_, context, request, response);
}

void Policy::Stub::async::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForUser_, context, request, response, std::move(f));
}

void Policy::Stub::async::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncAddPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyPermissionsForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncAddPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionsForUser_, context, request, response);
}

void Policy::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, std::move(f));
}

void Policy::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyPermissionsForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::GetPermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::palm::rbac::v1::PolicyPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPermissionsForRole_, context, request, response);
}

void Policy::Stub::async::GetPermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForRole_, context, request, response, std::move(f));
}

void Policy::Stub::async::GetPermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyPermissionsResponse>* Policy::Stub::PrepareAsyncGetPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::rbac::v1::PolicyPermissionsResponse, ::palm::rbac::v1::PolicyRolesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyPermissionsResponse>* Policy::Stub::AsyncGetPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::GetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::palm::rbac::v1::PolicyPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitPermissionsForRole_, context, request, response);
}

void Policy::Stub::async::GetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForRole_, context, request, response, std::move(f));
}

void Policy::Stub::async::GetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyPermissionsResponse>* Policy::Stub::PrepareAsyncGetImplicitPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::rbac::v1::PolicyPermissionsResponse, ::palm::rbac::v1::PolicyRolesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitPermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::rbac::v1::PolicyPermissionsResponse>* Policy::Stub::AsyncGetImplicitPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitPermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPermissionsForRole_, context, request, response);
}

void Policy::Stub::async::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForRole_, context, request, response, std::move(f));
}

void Policy::Stub::async::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncAddPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyPermissionsForRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncAddPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Policy::Stub::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::rbac::v1::PolicyPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionsForRole_, context, request, response);
}

void Policy::Stub::async::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::rbac::v1::PolicyPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForRole_, context, request, response, std::move(f));
}

void Policy::Stub::async::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::PrepareAsyncDeletePermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::rbac::v1::PolicyPermissionsForRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Policy::Stub::AsyncDeletePermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

Policy::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyHasRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Has(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyCanRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Can(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyUsersResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyUsersResponse_Item* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyRolesResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyRolesResponse_Item* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyUsersResponse_Item* req,
             ::palm::rbac::v1::PolicyRolesResponse* resp) {
               return service->GetRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyUsersResponse_Item* req,
             ::palm::rbac::v1::PolicyRolesResponse* resp) {
               return service->GetImplicitRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyRolesResponse_Item* req,
             ::palm::rbac::v1::PolicyUsersResponse* resp) {
               return service->GetUsersForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyRolesResponse_Item* req,
             ::palm::rbac::v1::PolicyUsersResponse* resp) {
               return service->GetImplicitUsersForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyRolesForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyRolesForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyUsersResponse_Item* req,
             ::palm::rbac::v1::PolicyPermissionsResponse* resp) {
               return service->GetPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyUsersResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyUsersResponse_Item* req,
             ::palm::rbac::v1::PolicyPermissionsResponse* resp) {
               return service->GetImplicitPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyPermissionsForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyPermissionsForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeletePermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyRolesResponse_Item* req,
             ::palm::rbac::v1::PolicyPermissionsResponse* resp) {
               return service->GetPermissionsForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyRolesResponse_Item, ::palm::rbac::v1::PolicyPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyRolesResponse_Item* req,
             ::palm::rbac::v1::PolicyPermissionsResponse* resp) {
               return service->GetImplicitPermissionsForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyPermissionsForRoleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddPermissionsForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Policy_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Policy::Service, ::palm::rbac::v1::PolicyPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Policy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::rbac::v1::PolicyPermissionsForRoleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeletePermissionsForRole(ctx, req, resp);
             }, this)));
}

Policy::Service::~Service() {
}

::grpc::Status Policy::Service::Has(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyHasRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::Can(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyCanRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::DeleteUser(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::DeleteRole(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::GetRolesForUser(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::GetImplicitRolesForUser(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::GetUsersForRole(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::GetImplicitUsersForRole(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::AddRolesForUser(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::DeleteRolesForUser(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyRolesForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::GetPermissionsForUser(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::GetImplicitPermissionsForUser(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyUsersResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::AddPermissionsForUser(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::DeletePermissionsForUser(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyPermissionsForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::GetPermissionsForRole(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::GetImplicitPermissionsForRole(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyRolesResponse_Item* request, ::palm::rbac::v1::PolicyPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::AddPermissionsForRole(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Policy::Service::DeletePermissionsForRole(::grpc::ServerContext* context, const ::palm::rbac::v1::PolicyPermissionsForRoleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace rbac
}  // namespace v1

