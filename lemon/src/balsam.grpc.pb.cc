// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: balsam.proto

#include "balsam.pb.h"
#include "balsam.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace balsam {
namespace v1 {

static const char* Aes_method_names[] = {
  "/palm.balsam.v1.Aes/Encrypt",
  "/palm.balsam.v1.Aes/Decrypt",
};

std::unique_ptr< Aes::Stub> Aes::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Aes::Stub> stub(new Aes::Stub(channel, options));
  return stub;
}

Aes::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Encrypt_(Aes_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Decrypt_(Aes_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Aes::Stub::Encrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::palm::balsam::v1::AesCodeMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::AesPlainMessage, ::palm::balsam::v1::AesCodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Encrypt_, context, request, response);
}

void Aes::Stub::async::Encrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage* request, ::palm::balsam::v1::AesCodeMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::AesPlainMessage, ::palm::balsam::v1::AesCodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, std::move(f));
}

void Aes::Stub::async::Encrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage* request, ::palm::balsam::v1::AesCodeMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesCodeMessage>* Aes::Stub::PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::AesCodeMessage, ::palm::balsam::v1::AesPlainMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Encrypt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesCodeMessage>* Aes::Stub::AsyncEncryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEncryptRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Aes::Stub::Decrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::palm::balsam::v1::AesPlainMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::AesCodeMessage, ::palm::balsam::v1::AesPlainMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Decrypt_, context, request, response);
}

void Aes::Stub::async::Decrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage* request, ::palm::balsam::v1::AesPlainMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::AesCodeMessage, ::palm::balsam::v1::AesPlainMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Decrypt_, context, request, response, std::move(f));
}

void Aes::Stub::async::Decrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage* request, ::palm::balsam::v1::AesPlainMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Decrypt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesPlainMessage>* Aes::Stub::PrepareAsyncDecryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::AesPlainMessage, ::palm::balsam::v1::AesCodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Decrypt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesPlainMessage>* Aes::Stub::AsyncDecryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDecryptRaw(context, request, cq);
  result->StartCall();
  return result;
}

Aes::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Aes_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Aes::Service, ::palm::balsam::v1::AesPlainMessage, ::palm::balsam::v1::AesCodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Aes::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::AesPlainMessage* req,
             ::palm::balsam::v1::AesCodeMessage* resp) {
               return service->Encrypt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Aes_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Aes::Service, ::palm::balsam::v1::AesCodeMessage, ::palm::balsam::v1::AesPlainMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Aes::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::AesCodeMessage* req,
             ::palm::balsam::v1::AesPlainMessage* resp) {
               return service->Decrypt(ctx, req, resp);
             }, this)));
}

Aes::Service::~Service() {
}

::grpc::Status Aes::Service::Encrypt(::grpc::ServerContext* context, const ::palm::balsam::v1::AesPlainMessage* request, ::palm::balsam::v1::AesCodeMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Aes::Service::Decrypt(::grpc::ServerContext* context, const ::palm::balsam::v1::AesCodeMessage* request, ::palm::balsam::v1::AesPlainMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Jwt_method_names[] = {
  "/palm.balsam.v1.Jwt/Sign",
  "/palm.balsam.v1.Jwt/Verify",
};

std::unique_ptr< Jwt::Stub> Jwt::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Jwt::Stub> stub(new Jwt::Stub(channel, options));
  return stub;
}

Jwt::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Sign_(Jwt_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Verify_(Jwt_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Jwt::Stub::Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::palm::balsam::v1::JwtSignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::JwtSignRequest, ::palm::balsam::v1::JwtSignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Sign_, context, request, response);
}

void Jwt::Stub::async::Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest* request, ::palm::balsam::v1::JwtSignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::JwtSignRequest, ::palm::balsam::v1::JwtSignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, std::move(f));
}

void Jwt::Stub::async::Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest* request, ::palm::balsam::v1::JwtSignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtSignResponse>* Jwt::Stub::PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::JwtSignResponse, ::palm::balsam::v1::JwtSignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Sign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtSignResponse>* Jwt::Stub::AsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Jwt::Stub::Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::palm::balsam::v1::JwtVerifyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::JwtVerifyRequest, ::palm::balsam::v1::JwtVerifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Verify_, context, request, response);
}

void Jwt::Stub::async::Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest* request, ::palm::balsam::v1::JwtVerifyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::JwtVerifyRequest, ::palm::balsam::v1::JwtVerifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, std::move(f));
}

void Jwt::Stub::async::Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest* request, ::palm::balsam::v1::JwtVerifyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtVerifyResponse>* Jwt::Stub::PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::JwtVerifyResponse, ::palm::balsam::v1::JwtVerifyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Verify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtVerifyResponse>* Jwt::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

Jwt::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Jwt_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Jwt::Service, ::palm::balsam::v1::JwtSignRequest, ::palm::balsam::v1::JwtSignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Jwt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::JwtSignRequest* req,
             ::palm::balsam::v1::JwtSignResponse* resp) {
               return service->Sign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Jwt_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Jwt::Service, ::palm::balsam::v1::JwtVerifyRequest, ::palm::balsam::v1::JwtVerifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Jwt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::JwtVerifyRequest* req,
             ::palm::balsam::v1::JwtVerifyResponse* resp) {
               return service->Verify(ctx, req, resp);
             }, this)));
}

Jwt::Service::~Service() {
}

::grpc::Status Jwt::Service::Sign(::grpc::ServerContext* context, const ::palm::balsam::v1::JwtSignRequest* request, ::palm::balsam::v1::JwtSignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Jwt::Service::Verify(::grpc::ServerContext* context, const ::palm::balsam::v1::JwtVerifyRequest* request, ::palm::balsam::v1::JwtVerifyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* HMac_method_names[] = {
  "/palm.balsam.v1.HMac/Sign",
  "/palm.balsam.v1.HMac/Verify",
};

std::unique_ptr< HMac::Stub> HMac::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HMac::Stub> stub(new HMac::Stub(channel, options));
  return stub;
}

HMac::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Sign_(HMac_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Verify_(HMac_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HMac::Stub::Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::palm::balsam::v1::HMacSignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::HMacSignRequest, ::palm::balsam::v1::HMacSignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Sign_, context, request, response);
}

void HMac::Stub::async::Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest* request, ::palm::balsam::v1::HMacSignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::HMacSignRequest, ::palm::balsam::v1::HMacSignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, std::move(f));
}

void HMac::Stub::async::Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest* request, ::palm::balsam::v1::HMacSignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::HMacSignResponse>* HMac::Stub::PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::HMacSignResponse, ::palm::balsam::v1::HMacSignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Sign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::HMacSignResponse>* HMac::Stub::AsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HMac::Stub::Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::HMacVerifyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Verify_, context, request, response);
}

void HMac::Stub::async::Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::HMacVerifyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, std::move(f));
}

void HMac::Stub::async::Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HMac::Stub::PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::HMacVerifyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Verify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HMac::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

HMac::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HMac_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HMac::Service, ::palm::balsam::v1::HMacSignRequest, ::palm::balsam::v1::HMacSignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HMac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::HMacSignRequest* req,
             ::palm::balsam::v1::HMacSignResponse* resp) {
               return service->Sign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HMac_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HMac::Service, ::palm::balsam::v1::HMacVerifyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HMac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::HMacVerifyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Verify(ctx, req, resp);
             }, this)));
}

HMac::Service::~Service() {
}

::grpc::Status HMac::Service::Sign(::grpc::ServerContext* context, const ::palm::balsam::v1::HMacSignRequest* request, ::palm::balsam::v1::HMacSignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HMac::Service::Verify(::grpc::ServerContext* context, const ::palm::balsam::v1::HMacVerifyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* User_method_names[] = {
  "/palm.balsam.v1.User/Lock",
  "/palm.balsam.v1.User/Unlock",
  "/palm.balsam.v1.User/Disable",
  "/palm.balsam.v1.User/Enable",
  "/palm.balsam.v1.User/Logs",
  "/palm.balsam.v1.User/SignOut",
  "/palm.balsam.v1.User/Index",
  "/palm.balsam.v1.User/UpdateProfile",
  "/palm.balsam.v1.User/ById",
  "/palm.balsam.v1.User/ByUid",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel, options));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Lock_(User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unlock_(User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disable_(User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(User_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logs_(User_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignOut_(User_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(User_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProfile_(User_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ById_(User_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByUid_(User_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status User::Stub::Lock(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Lock_, context, request, response);
}

void User::Stub::async::Lock(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, std::move(f));
}

void User::Stub::async::Lock(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Lock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncLockRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Unlock(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unlock_, context, request, response);
}

void User::Stub::async::Unlock(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, std::move(f));
}

void User::Stub::async::Unlock(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Enable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Logs(::grpc::ClientContext* context, const ::palm::balsam::v1::LogsRequest& request, ::palm::balsam::v1::UserLogsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::LogsRequest, ::palm::balsam::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logs_, context, request, response);
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::palm::balsam::v1::LogsRequest* request, ::palm::balsam::v1::UserLogsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::LogsRequest, ::palm::balsam::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, std::move(f));
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::palm::balsam::v1::LogsRequest* request, ::palm::balsam::v1::UserLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserLogsResponse>* User::Stub::PrepareAsyncLogsRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::LogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::UserLogsResponse, ::palm::balsam::v1::LogsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserLogsResponse>* User::Stub::AsyncLogsRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::LogsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignOut_, context, request, response);
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, std::move(f));
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignOut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignOutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::palm::balsam::v1::UserIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void User::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::UserIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void User::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::UserIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserIndexResponse>* User::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::UserIndexResponse, ::palm::balsam::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserIndexResponse>* User::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::UpdateProfile(::grpc::ClientContext* context, const ::palm::balsam::v1::UserUpdateProfileRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UserUpdateProfileRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateProfile_, context, request, response);
}

void User::Stub::async::UpdateProfile(::grpc::ClientContext* context, const ::palm::balsam::v1::UserUpdateProfileRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UserUpdateProfileRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProfile_, context, request, response, std::move(f));
}

void User::Stub::async::UpdateProfile(::grpc::ClientContext* context, const ::palm::balsam::v1::UserUpdateProfileRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUpdateProfileRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserUpdateProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::UserUpdateProfileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUpdateProfileRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserUpdateProfileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::palm::balsam::v1::UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ById_, context, request, response);
}

void User::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, std::move(f));
}

void User::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserIndexResponse_Item>* User::Stub::PrepareAsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::UserIndexResponse_Item, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserIndexResponse_Item>* User::Stub::AsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ByUid(::grpc::ClientContext* context, const ::palm::balsam::v1::UidRequest& request, ::palm::balsam::v1::UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UidRequest, ::palm::balsam::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByUid_, context, request, response);
}

void User::Stub::async::ByUid(::grpc::ClientContext* context, const ::palm::balsam::v1::UidRequest* request, ::palm::balsam::v1::UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UidRequest, ::palm::balsam::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUid_, context, request, response, std::move(f));
}

void User::Stub::async::ByUid(::grpc::ClientContext* context, const ::palm::balsam::v1::UidRequest* request, ::palm::balsam::v1::UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserIndexResponse_Item>* User::Stub::PrepareAsyncByUidRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::UserIndexResponse_Item, ::palm::balsam::v1::UidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByUid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserIndexResponse_Item>* User::Stub::AsyncByUidRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByUidRaw(context, request, cq);
  result->StartCall();
  return result;
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Lock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Unlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::balsam::v1::LogsRequest, ::palm::balsam::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::LogsRequest* req,
             ::palm::balsam::v1::UserLogsResponse* resp) {
               return service->Logs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SignOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::balsam::v1::Pager, ::palm::balsam::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::Pager* req,
             ::palm::balsam::v1::UserIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::balsam::v1::UserUpdateProfileRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UserUpdateProfileRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::palm::balsam::v1::UserIndexResponse_Item* resp) {
               return service->ById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::balsam::v1::UidRequest, ::palm::balsam::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UidRequest* req,
             ::palm::balsam::v1::UserIndexResponse_Item* resp) {
               return service->ByUid(ctx, req, resp);
             }, this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::Lock(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Unlock(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Disable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Enable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Logs(::grpc::ServerContext* context, const ::palm::balsam::v1::LogsRequest* request, ::palm::balsam::v1::UserLogsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SignOut(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Index(::grpc::ServerContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::UserIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UpdateProfile(::grpc::ServerContext* context, const ::palm::balsam::v1::UserUpdateProfileRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ById(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ByUid(::grpc::ServerContext* context, const ::palm::balsam::v1::UidRequest* request, ::palm::balsam::v1::UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* EmailUser_method_names[] = {
  "/palm.balsam.v1.EmailUser/SignIn",
  "/palm.balsam.v1.EmailUser/SignUp",
  "/palm.balsam.v1.EmailUser/ConfirmByEmail",
  "/palm.balsam.v1.EmailUser/ConfirmByToken",
  "/palm.balsam.v1.EmailUser/UnlockByEmail",
  "/palm.balsam.v1.EmailUser/UnlockByToken",
  "/palm.balsam.v1.EmailUser/ForgotPassword",
  "/palm.balsam.v1.EmailUser/ResetPassword",
  "/palm.balsam.v1.EmailUser/Confirm",
  "/palm.balsam.v1.EmailUser/Disable",
  "/palm.balsam.v1.EmailUser/Enable",
  "/palm.balsam.v1.EmailUser/Index",
  "/palm.balsam.v1.EmailUser/ById",
  "/palm.balsam.v1.EmailUser/ByNickname",
  "/palm.balsam.v1.EmailUser/ByEmail",
};

std::unique_ptr< EmailUser::Stub> EmailUser::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmailUser::Stub> stub(new EmailUser::Stub(channel, options));
  return stub;
}

EmailUser::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignIn_(EmailUser_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignUp_(EmailUser_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmByEmail_(EmailUser_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmByToken_(EmailUser_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockByEmail_(EmailUser_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockByToken_(EmailUser_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForgotPassword_(EmailUser_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPassword_(EmailUser_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Confirm_(EmailUser_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disable_(EmailUser_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(EmailUser_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(EmailUser_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ById_(EmailUser_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByNickname_(EmailUser_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByEmail_(EmailUser_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EmailUser::Stub::SignIn(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmailRequest& request, ::palm::balsam::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UserSignInByEmailRequest, ::palm::balsam::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignIn_, context, request, response);
}

void EmailUser::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmailRequest* request, ::palm::balsam::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UserSignInByEmailRequest, ::palm::balsam::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmailRequest* request, ::palm::balsam::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>* EmailUser::Stub::PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::UserSignInResponse, ::palm::balsam::v1::UserSignInByEmailRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignIn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>* EmailUser::Stub::AsyncSignInRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::SignUp(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignUpByEmailRequest& request, ::palm::balsam::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UserSignUpByEmailRequest, ::palm::balsam::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignUp_, context, request, response);
}

void EmailUser::Stub::async::SignUp(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignUpByEmailRequest* request, ::palm::balsam::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UserSignUpByEmailRequest, ::palm::balsam::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUp_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::SignUp(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignUpByEmailRequest* request, ::palm::balsam::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>* EmailUser::Stub::PrepareAsyncSignUpRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignUpByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::UserSignInResponse, ::palm::balsam::v1::UserSignUpByEmailRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>* EmailUser::Stub::AsyncSignUpRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignUpByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UserByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmByEmail_, context, request, response);
}

void EmailUser::Stub::async::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UserByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByEmail_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::PrepareAsyncConfirmByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::UserByEmailRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::AsyncConfirmByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::ConfirmByToken(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UserByTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmByToken_, context, request, response);
}

void EmailUser::Stub::async::ConfirmByToken(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UserByTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByToken_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::ConfirmByToken(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::PrepareAsyncConfirmByTokenRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::UserByTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmByToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::AsyncConfirmByTokenRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmByTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::UnlockByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UserByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockByEmail_, context, request, response);
}

void EmailUser::Stub::async::UnlockByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UserByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByEmail_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::UnlockByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::PrepareAsyncUnlockByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::UserByEmailRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::AsyncUnlockByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::UnlockByToken(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UserByTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockByToken_, context, request, response);
}

void EmailUser::Stub::async::UnlockByToken(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UserByTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByToken_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::UnlockByToken(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::PrepareAsyncUnlockByTokenRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::UserByTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockByToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::AsyncUnlockByTokenRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockByTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::ForgotPassword(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UserByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForgotPassword_, context, request, response);
}

void EmailUser::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UserByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::PrepareAsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::UserByEmailRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForgotPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::AsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForgotPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::ResetPassword(::grpc::ClientContext* context, const ::palm::balsam::v1::UserResetPasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetPassword_, context, request, response);
}

void EmailUser::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::palm::balsam::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::palm::balsam::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::UserResetPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::Confirm(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Confirm_, context, request, response);
}

void EmailUser::Stub::async::Confirm(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Confirm_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::Confirm(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Confirm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::PrepareAsyncConfirmRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Confirm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::AsyncConfirmRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void EmailUser::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void EmailUser::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Enable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmailUser::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::palm::balsam::v1::EmailUserIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::EmailUserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void EmailUser::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::EmailUserIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::EmailUserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::EmailUserIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::EmailUserIndexResponse>* EmailUser::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::EmailUserIndexResponse, ::palm::balsam::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::EmailUserIndexResponse>* EmailUser::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::EmailUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ById_, context, request, response);
}

void EmailUser::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::EmailUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::EmailUserIndexResponse_Item>* EmailUser::Stub::PrepareAsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::EmailUserIndexResponse_Item, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::EmailUserIndexResponse_Item>* EmailUser::Stub::AsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::ByNickname(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByNicknameRequest& request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::EmailUserByNicknameRequest, ::palm::balsam::v1::EmailUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByNickname_, context, request, response);
}

void EmailUser::Stub::async::ByNickname(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByNicknameRequest* request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::EmailUserByNicknameRequest, ::palm::balsam::v1::EmailUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByNickname_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::ByNickname(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByNicknameRequest* request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByNickname_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::EmailUserIndexResponse_Item>* EmailUser::Stub::PrepareAsyncByNicknameRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByNicknameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::EmailUserIndexResponse_Item, ::palm::balsam::v1::EmailUserByNicknameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByNickname_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::EmailUserIndexResponse_Item>* EmailUser::Stub::AsyncByNicknameRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByNicknameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByNicknameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmailUser::Stub::ByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByEmailRequest& request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::EmailUserByEmailRequest, ::palm::balsam::v1::EmailUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByEmail_, context, request, response);
}

void EmailUser::Stub::async::ByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByEmailRequest* request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::EmailUserByEmailRequest, ::palm::balsam::v1::EmailUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByEmail_, context, request, response, std::move(f));
}

void EmailUser::Stub::async::ByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByEmailRequest* request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::EmailUserIndexResponse_Item>* EmailUser::Stub::PrepareAsyncByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::EmailUserIndexResponse_Item, ::palm::balsam::v1::EmailUserByEmailRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::EmailUserIndexResponse_Item>* EmailUser::Stub::AsyncByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::EmailUserByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

EmailUser::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::UserSignInByEmailRequest, ::palm::balsam::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UserSignInByEmailRequest* req,
             ::palm::balsam::v1::UserSignInResponse* resp) {
               return service->SignIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::UserSignUpByEmailRequest, ::palm::balsam::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UserSignUpByEmailRequest* req,
             ::palm::balsam::v1::UserSignInResponse* resp) {
               return service->SignUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::UserByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UserByEmailRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ConfirmByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::UserByTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UserByTokenRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ConfirmByToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::UserByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UserByEmailRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UnlockByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::UserByTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UserByTokenRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UnlockByToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::UserByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UserByEmailRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ForgotPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::UserResetPasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ResetPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Confirm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::Pager, ::palm::balsam::v1::EmailUserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::Pager* req,
             ::palm::balsam::v1::EmailUserIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::EmailUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::palm::balsam::v1::EmailUserIndexResponse_Item* resp) {
               return service->ById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::EmailUserByNicknameRequest, ::palm::balsam::v1::EmailUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::EmailUserByNicknameRequest* req,
             ::palm::balsam::v1::EmailUserIndexResponse_Item* resp) {
               return service->ByNickname(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailUser_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailUser::Service, ::palm::balsam::v1::EmailUserByEmailRequest, ::palm::balsam::v1::EmailUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmailUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::EmailUserByEmailRequest* req,
             ::palm::balsam::v1::EmailUserIndexResponse_Item* resp) {
               return service->ByEmail(ctx, req, resp);
             }, this)));
}

EmailUser::Service::~Service() {
}

::grpc::Status EmailUser::Service::SignIn(::grpc::ServerContext* context, const ::palm::balsam::v1::UserSignInByEmailRequest* request, ::palm::balsam::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::SignUp(::grpc::ServerContext* context, const ::palm::balsam::v1::UserSignUpByEmailRequest* request, ::palm::balsam::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::ConfirmByEmail(::grpc::ServerContext* context, const ::palm::balsam::v1::UserByEmailRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::ConfirmByToken(::grpc::ServerContext* context, const ::palm::balsam::v1::UserByTokenRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::UnlockByEmail(::grpc::ServerContext* context, const ::palm::balsam::v1::UserByEmailRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::UnlockByToken(::grpc::ServerContext* context, const ::palm::balsam::v1::UserByTokenRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::ForgotPassword(::grpc::ServerContext* context, const ::palm::balsam::v1::UserByEmailRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::ResetPassword(::grpc::ServerContext* context, const ::palm::balsam::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::Confirm(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::Disable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::Enable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::Index(::grpc::ServerContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::EmailUserIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::ById(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::ByNickname(::grpc::ServerContext* context, const ::palm::balsam::v1::EmailUserByNicknameRequest* request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmailUser::Service::ByEmail(::grpc::ServerContext* context, const ::palm::balsam::v1::EmailUserByEmailRequest* request, ::palm::balsam::v1::EmailUserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* GoogleOauth2User_method_names[] = {
  "/palm.balsam.v1.GoogleOauth2User/Disable",
  "/palm.balsam.v1.GoogleOauth2User/Enable",
  "/palm.balsam.v1.GoogleOauth2User/Index",
  "/palm.balsam.v1.GoogleOauth2User/ById",
  "/palm.balsam.v1.GoogleOauth2User/BySubject",
};

std::unique_ptr< GoogleOauth2User::Stub> GoogleOauth2User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GoogleOauth2User::Stub> stub(new GoogleOauth2User::Stub(channel, options));
  return stub;
}

GoogleOauth2User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Disable_(GoogleOauth2User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(GoogleOauth2User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(GoogleOauth2User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ById_(GoogleOauth2User_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BySubject_(GoogleOauth2User_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GoogleOauth2User::Stub::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void GoogleOauth2User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void GoogleOauth2User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GoogleOauth2User::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GoogleOauth2User::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GoogleOauth2User::Stub::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void GoogleOauth2User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void GoogleOauth2User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GoogleOauth2User::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Enable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GoogleOauth2User::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GoogleOauth2User::Stub::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::GoogleOauth2UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void GoogleOauth2User::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::GoogleOauth2UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void GoogleOauth2User::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::GoogleOauth2UserIndexResponse>* GoogleOauth2User::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::GoogleOauth2UserIndexResponse, ::palm::balsam::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::GoogleOauth2UserIndexResponse>* GoogleOauth2User::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GoogleOauth2User::Stub::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ById_, context, request, response);
}

void GoogleOauth2User::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, std::move(f));
}

void GoogleOauth2User::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item>* GoogleOauth2User::Stub::PrepareAsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item>* GoogleOauth2User::Stub::AsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GoogleOauth2User::Stub::BySubject(::grpc::ClientContext* context, const ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest& request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BySubject_, context, request, response);
}

void GoogleOauth2User::Stub::async::BySubject(::grpc::ClientContext* context, const ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest* request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BySubject_, context, request, response, std::move(f));
}

void GoogleOauth2User::Stub::async::BySubject(::grpc::ClientContext* context, const ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest* request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BySubject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item>* GoogleOauth2User::Stub::PrepareAsyncBySubjectRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BySubject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item>* GoogleOauth2User::Stub::AsyncBySubjectRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBySubjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

GoogleOauth2User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GoogleOauth2User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GoogleOauth2User::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GoogleOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GoogleOauth2User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GoogleOauth2User::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GoogleOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GoogleOauth2User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GoogleOauth2User::Service, ::palm::balsam::v1::Pager, ::palm::balsam::v1::GoogleOauth2UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GoogleOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::Pager* req,
             ::palm::balsam::v1::GoogleOauth2UserIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GoogleOauth2User_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GoogleOauth2User::Service, ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GoogleOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* resp) {
               return service->ById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GoogleOauth2User_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GoogleOauth2User::Service, ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GoogleOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest* req,
             ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* resp) {
               return service->BySubject(ctx, req, resp);
             }, this)));
}

GoogleOauth2User::Service::~Service() {
}

::grpc::Status GoogleOauth2User::Service::Disable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GoogleOauth2User::Service::Enable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GoogleOauth2User::Service::Index(::grpc::ServerContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GoogleOauth2User::Service::ById(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GoogleOauth2User::Service::BySubject(::grpc::ServerContext* context, const ::palm::balsam::v1::GoogleOauth2UserBySubjectRequest* request, ::palm::balsam::v1::GoogleOauth2UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WechatOauth2User_method_names[] = {
  "/palm.balsam.v1.WechatOauth2User/Disable",
  "/palm.balsam.v1.WechatOauth2User/Enable",
  "/palm.balsam.v1.WechatOauth2User/Index",
  "/palm.balsam.v1.WechatOauth2User/ById",
  "/palm.balsam.v1.WechatOauth2User/ByUnionId",
  "/palm.balsam.v1.WechatOauth2User/ByAppIdAndUnionId",
};

std::unique_ptr< WechatOauth2User::Stub> WechatOauth2User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WechatOauth2User::Stub> stub(new WechatOauth2User::Stub(channel, options));
  return stub;
}

WechatOauth2User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Disable_(WechatOauth2User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(WechatOauth2User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(WechatOauth2User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ById_(WechatOauth2User_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByUnionId_(WechatOauth2User_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByAppIdAndUnionId_(WechatOauth2User_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WechatOauth2User::Stub::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void WechatOauth2User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void WechatOauth2User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatOauth2User::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatOauth2User::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatOauth2User::Stub::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void WechatOauth2User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void WechatOauth2User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatOauth2User::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Enable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatOauth2User::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatOauth2User::Stub::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::palm::balsam::v1::WechatOauth2UserIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::WechatOauth2UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void WechatOauth2User::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::WechatOauth2UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void WechatOauth2User::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatOauth2UserIndexResponse>* WechatOauth2User::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::WechatOauth2UserIndexResponse, ::palm::balsam::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatOauth2UserIndexResponse>* WechatOauth2User::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatOauth2User::Stub::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ById_, context, request, response);
}

void WechatOauth2User::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, std::move(f));
}

void WechatOauth2User::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item>* WechatOauth2User::Stub::PrepareAsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item>* WechatOauth2User::Stub::AsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatOauth2User::Stub::ByUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest& request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::WechatByUnionIdRequest, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByUnionId_, context, request, response);
}

void WechatOauth2User::Stub::async::ByUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::WechatByUnionIdRequest, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUnionId_, context, request, response, std::move(f));
}

void WechatOauth2User::Stub::async::ByUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUnionId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item>* WechatOauth2User::Stub::PrepareAsyncByUnionIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::palm::balsam::v1::WechatByUnionIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByUnionId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item>* WechatOauth2User::Stub::AsyncByUnionIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByUnionIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatOauth2User::Stub::ByAppIdAndUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest& request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByAppIdAndUnionId_, context, request, response);
}

void WechatOauth2User::Stub::async::ByAppIdAndUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByAppIdAndUnionId_, context, request, response, std::move(f));
}

void WechatOauth2User::Stub::async::ByAppIdAndUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByAppIdAndUnionId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item>* WechatOauth2User::Stub::PrepareAsyncByAppIdAndUnionIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByAppIdAndUnionId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item>* WechatOauth2User::Stub::AsyncByAppIdAndUnionIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByAppIdAndUnionIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

WechatOauth2User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatOauth2User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatOauth2User::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatOauth2User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatOauth2User::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatOauth2User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatOauth2User::Service, ::palm::balsam::v1::Pager, ::palm::balsam::v1::WechatOauth2UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::Pager* req,
             ::palm::balsam::v1::WechatOauth2UserIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatOauth2User_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatOauth2User::Service, ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* resp) {
               return service->ById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatOauth2User_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatOauth2User::Service, ::palm::balsam::v1::WechatByUnionIdRequest, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::WechatByUnionIdRequest* req,
             ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* resp) {
               return service->ByUnionId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatOauth2User_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatOauth2User::Service, ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatOauth2User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest* req,
             ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* resp) {
               return service->ByAppIdAndUnionId(ctx, req, resp);
             }, this)));
}

WechatOauth2User::Service::~Service() {
}

::grpc::Status WechatOauth2User::Service::Disable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatOauth2User::Service::Enable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatOauth2User::Service::Index(::grpc::ServerContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatOauth2User::Service::ById(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatOauth2User::Service::ByUnionId(::grpc::ServerContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatOauth2User::Service::ByAppIdAndUnionId(::grpc::ServerContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest* request, ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WechatMiniProgramUser_method_names[] = {
  "/palm.balsam.v1.WechatMiniProgramUser/Disable",
  "/palm.balsam.v1.WechatMiniProgramUser/Enable",
  "/palm.balsam.v1.WechatMiniProgramUser/Index",
  "/palm.balsam.v1.WechatMiniProgramUser/ById",
  "/palm.balsam.v1.WechatMiniProgramUser/ByUnionId",
  "/palm.balsam.v1.WechatMiniProgramUser/ByAppIdAndUnionId",
};

std::unique_ptr< WechatMiniProgramUser::Stub> WechatMiniProgramUser::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WechatMiniProgramUser::Stub> stub(new WechatMiniProgramUser::Stub(channel, options));
  return stub;
}

WechatMiniProgramUser::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Disable_(WechatMiniProgramUser_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(WechatMiniProgramUser_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(WechatMiniProgramUser_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ById_(WechatMiniProgramUser_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByUnionId_(WechatMiniProgramUser_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByAppIdAndUnionId_(WechatMiniProgramUser_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WechatMiniProgramUser::Stub::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void WechatMiniProgramUser::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void WechatMiniProgramUser::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatMiniProgramUser::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatMiniProgramUser::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatMiniProgramUser::Stub::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void WechatMiniProgramUser::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void WechatMiniProgramUser::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatMiniProgramUser::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Enable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatMiniProgramUser::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatMiniProgramUser::Stub::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void WechatMiniProgramUser::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void WechatMiniProgramUser::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse>* WechatMiniProgramUser::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse, ::palm::balsam::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse>* WechatMiniProgramUser::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatMiniProgramUser::Stub::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ById_, context, request, response);
}

void WechatMiniProgramUser::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, std::move(f));
}

void WechatMiniProgramUser::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item>* WechatMiniProgramUser::Stub::PrepareAsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item>* WechatMiniProgramUser::Stub::AsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatMiniProgramUser::Stub::ByUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest& request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::WechatByUnionIdRequest, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByUnionId_, context, request, response);
}

void WechatMiniProgramUser::Stub::async::ByUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::WechatByUnionIdRequest, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUnionId_, context, request, response, std::move(f));
}

void WechatMiniProgramUser::Stub::async::ByUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUnionId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item>* WechatMiniProgramUser::Stub::PrepareAsyncByUnionIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::palm::balsam::v1::WechatByUnionIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByUnionId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item>* WechatMiniProgramUser::Stub::AsyncByUnionIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByUnionIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatMiniProgramUser::Stub::ByAppIdAndUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest& request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByAppIdAndUnionId_, context, request, response);
}

void WechatMiniProgramUser::Stub::async::ByAppIdAndUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByAppIdAndUnionId_, context, request, response, std::move(f));
}

void WechatMiniProgramUser::Stub::async::ByAppIdAndUnionId(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByAppIdAndUnionId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item>* WechatMiniProgramUser::Stub::PrepareAsyncByAppIdAndUnionIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByAppIdAndUnionId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item>* WechatMiniProgramUser::Stub::AsyncByAppIdAndUnionIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByAppIdAndUnionIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

WechatMiniProgramUser::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatMiniProgramUser_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatMiniProgramUser::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatMiniProgramUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatMiniProgramUser_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatMiniProgramUser::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatMiniProgramUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatMiniProgramUser_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatMiniProgramUser::Service, ::palm::balsam::v1::Pager, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatMiniProgramUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::Pager* req,
             ::palm::balsam::v1::WechatMiniProgramUserIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatMiniProgramUser_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatMiniProgramUser::Service, ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatMiniProgramUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* resp) {
               return service->ById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatMiniProgramUser_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatMiniProgramUser::Service, ::palm::balsam::v1::WechatByUnionIdRequest, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatMiniProgramUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::WechatByUnionIdRequest* req,
             ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* resp) {
               return service->ByUnionId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatMiniProgramUser_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatMiniProgramUser::Service, ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatMiniProgramUser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest* req,
             ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* resp) {
               return service->ByAppIdAndUnionId(ctx, req, resp);
             }, this)));
}

WechatMiniProgramUser::Service::~Service() {
}

::grpc::Status WechatMiniProgramUser::Service::Disable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatMiniProgramUser::Service::Enable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatMiniProgramUser::Service::Index(::grpc::ServerContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatMiniProgramUser::Service::ById(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatMiniProgramUser::Service::ByUnionId(::grpc::ServerContext* context, const ::palm::balsam::v1::WechatByUnionIdRequest* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatMiniProgramUser::Service::ByAppIdAndUnionId(::grpc::ServerContext* context, const ::palm::balsam::v1::WechatByAppIdAndOpenIdRequest* request, ::palm::balsam::v1::WechatMiniProgramUserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Session_method_names[] = {
  "/palm.balsam.v1.Session/Disable",
  "/palm.balsam.v1.Session/Index",
  "/palm.balsam.v1.Session/ByUser",
};

std::unique_ptr< Session::Stub> Session::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Session::Stub> stub(new Session::Stub(channel, options));
  return stub;
}

Session::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Disable_(Session_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Session_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByUser_(Session_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Session::Stub::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void Session::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void Session::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Session::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Session::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Session::Stub::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::palm::balsam::v1::SessionIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::SessionIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Session::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::SessionIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::SessionIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Session::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::SessionIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SessionIndexResponse>* Session::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::SessionIndexResponse, ::palm::balsam::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SessionIndexResponse>* Session::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Session::Stub::ByUser(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::palm::balsam::v1::SessionIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::SessionIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByUser_, context, request, response);
}

void Session::Stub::async::ByUser(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::SessionIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::SessionIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUser_, context, request, response, std::move(f));
}

void Session::Stub::async::ByUser(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::SessionIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SessionIndexResponse>* Session::Stub::PrepareAsyncByUserRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::SessionIndexResponse, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SessionIndexResponse>* Session::Stub::AsyncByUserRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

Session::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Session_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Session::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Session::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Session_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Session::Service, ::palm::balsam::v1::Pager, ::palm::balsam::v1::SessionIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Session::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::Pager* req,
             ::palm::balsam::v1::SessionIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Session_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Session::Service, ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::SessionIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Session::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::palm::balsam::v1::SessionIndexResponse* resp) {
               return service->ByUser(ctx, req, resp);
             }, this)));
}

Session::Service::~Service() {
}

::grpc::Status Session::Service::Disable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Session::Service::Index(::grpc::ServerContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::SessionIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Session::Service::ByUser(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::SessionIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Locale_method_names[] = {
  "/palm.balsam.v1.Locale/Set",
  "/palm.balsam.v1.Locale/Index",
  "/palm.balsam.v1.Locale/ByLang",
};

std::unique_ptr< Locale::Stub> Locale::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Locale::Stub> stub(new Locale::Stub(channel, options));
  return stub;
}

Locale::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Set_(Locale_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Locale_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByLang_(Locale_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Locale::Stub::Set(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleSetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void Locale::Stub::async::Set(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void Locale::Stub::async::Set(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::LocaleSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::palm::balsam::v1::LocaleIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::LocaleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Locale::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::LocaleIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::LocaleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Locale::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::LocaleIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::LocaleIndexResponse>* Locale::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::LocaleIndexResponse, ::palm::balsam::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::LocaleIndexResponse>* Locale::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::ByLang(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleByLangRequest& request, ::palm::balsam::v1::LocaleByLangResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::LocaleByLangRequest, ::palm::balsam::v1::LocaleByLangResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByLang_, context, request, response);
}

void Locale::Stub::async::ByLang(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleByLangRequest* request, ::palm::balsam::v1::LocaleByLangResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::LocaleByLangRequest, ::palm::balsam::v1::LocaleByLangResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLang_, context, request, response, std::move(f));
}

void Locale::Stub::async::ByLang(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleByLangRequest* request, ::palm::balsam::v1::LocaleByLangResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLang_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::LocaleByLangResponse>* Locale::Stub::PrepareAsyncByLangRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleByLangRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::LocaleByLangResponse, ::palm::balsam::v1::LocaleByLangRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByLang_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::LocaleByLangResponse>* Locale::Stub::AsyncByLangRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::LocaleByLangRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByLangRaw(context, request, cq);
  result->StartCall();
  return result;
}

Locale::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::balsam::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::LocaleSetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::balsam::v1::Pager, ::palm::balsam::v1::LocaleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::Pager* req,
             ::palm::balsam::v1::LocaleIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::balsam::v1::LocaleByLangRequest, ::palm::balsam::v1::LocaleByLangResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::LocaleByLangRequest* req,
             ::palm::balsam::v1::LocaleByLangResponse* resp) {
               return service->ByLang(ctx, req, resp);
             }, this)));
}

Locale::Service::~Service() {
}

::grpc::Status Locale::Service::Set(::grpc::ServerContext* context, const ::palm::balsam::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::Index(::grpc::ServerContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::LocaleIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::ByLang(::grpc::ServerContext* context, const ::palm::balsam::v1::LocaleByLangRequest* request, ::palm::balsam::v1::LocaleByLangResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Attachment_method_names[] = {
  "/palm.balsam.v1.Attachment/Disable",
  "/palm.balsam.v1.Attachment/Index",
  "/palm.balsam.v1.Attachment/SetTitle",
  "/palm.balsam.v1.Attachment/ById",
  "/palm.balsam.v1.Attachment/ByUser",
  "/palm.balsam.v1.Attachment/Clear",
  "/palm.balsam.v1.Attachment/ByResource",
  "/palm.balsam.v1.Attachment/Create",
  "/palm.balsam.v1.Attachment/SetUploadedAt",
};

std::unique_ptr< Attachment::Stub> Attachment::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Attachment::Stub> stub(new Attachment::Stub(channel, options));
  return stub;
}

Attachment::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Disable_(Attachment_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Attachment_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTitle_(Attachment_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ById_(Attachment_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByUser_(Attachment_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Clear_(Attachment_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByResource_(Attachment_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(Attachment_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetUploadedAt_(Attachment_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Attachment::Stub::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void Attachment::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::palm::balsam::v1::AttachmentIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Attachment::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::AttachmentIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::AttachmentIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AttachmentIndexResponse>* Attachment::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::AttachmentIndexResponse, ::palm::balsam::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AttachmentIndexResponse>* Attachment::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::SetTitle(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentSetTitleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::AttachmentSetTitleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTitle_, context, request, response);
}

void Attachment::Stub::async::SetTitle(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentSetTitleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::AttachmentSetTitleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTitle_, context, request, response, std::move(f));
}

void Attachment::Stub::async::SetTitle(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentSetTitleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTitle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::PrepareAsyncSetTitleRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentSetTitleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::AttachmentSetTitleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTitle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::AsyncSetTitleRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentSetTitleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTitleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::palm::balsam::v1::AttachmentIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::AttachmentIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ById_, context, request, response);
}

void Attachment::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::AttachmentIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::AttachmentIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, std::move(f));
}

void Attachment::Stub::async::ById(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::AttachmentIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AttachmentIndexResponse_Item>* Attachment::Stub::PrepareAsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::AttachmentIndexResponse_Item, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AttachmentIndexResponse_Item>* Attachment::Stub::AsyncByIdRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::ByUser(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::palm::balsam::v1::AttachmentIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByUser_, context, request, response);
}

void Attachment::Stub::async::ByUser(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::AttachmentIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUser_, context, request, response, std::move(f));
}

void Attachment::Stub::async::ByUser(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::AttachmentIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AttachmentIndexResponse>* Attachment::Stub::PrepareAsyncByUserRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::AttachmentIndexResponse, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AttachmentIndexResponse>* Attachment::Stub::AsyncByUserRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Clear_, context, request, response);
}

void Attachment::Stub::async::Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Clear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::AsyncClearRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::ByResource(::grpc::ClientContext* context, const ::palm::balsam::v1::ResourceRequest& request, ::palm::balsam::v1::AttachmentListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::ResourceRequest, ::palm::balsam::v1::AttachmentListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByResource_, context, request, response);
}

void Attachment::Stub::async::ByResource(::grpc::ClientContext* context, const ::palm::balsam::v1::ResourceRequest* request, ::palm::balsam::v1::AttachmentListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::ResourceRequest, ::palm::balsam::v1::AttachmentListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByResource_, context, request, response, std::move(f));
}

void Attachment::Stub::async::ByResource(::grpc::ClientContext* context, const ::palm::balsam::v1::ResourceRequest* request, ::palm::balsam::v1::AttachmentListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AttachmentListResponse>* Attachment::Stub::PrepareAsyncByResourceRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::ResourceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::AttachmentListResponse, ::palm::balsam::v1::ResourceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AttachmentListResponse>* Attachment::Stub::AsyncByResourceRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::ResourceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::Create(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::AttachmentCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Attachment::Stub::async::Create(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::AttachmentCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Create(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::AttachmentCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AttachmentCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::SetUploadedAt(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetUploadedAt_, context, request, response);
}

void Attachment::Stub::async::SetUploadedAt(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetUploadedAt_, context, request, response, std::move(f));
}

void Attachment::Stub::async::SetUploadedAt(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetUploadedAt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::PrepareAsyncSetUploadedAtRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetUploadedAt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::AsyncSetUploadedAtRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetUploadedAtRaw(context, request, cq);
  result->StartCall();
  return result;
}

Attachment::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::balsam::v1::Pager, ::palm::balsam::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::Pager* req,
             ::palm::balsam::v1::AttachmentIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::balsam::v1::AttachmentSetTitleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::AttachmentSetTitleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetTitle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::AttachmentIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::palm::balsam::v1::AttachmentIndexResponse_Item* resp) {
               return service->ById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::balsam::v1::IdRequest, ::palm::balsam::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::palm::balsam::v1::AttachmentIndexResponse* resp) {
               return service->ByUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Clear(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::balsam::v1::ResourceRequest, ::palm::balsam::v1::AttachmentListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::ResourceRequest* req,
             ::palm::balsam::v1::AttachmentListResponse* resp) {
               return service->ByResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::balsam::v1::AttachmentCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::AttachmentCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetUploadedAt(ctx, req, resp);
             }, this)));
}

Attachment::Service::~Service() {
}

::grpc::Status Attachment::Service::Disable(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::Index(::grpc::ServerContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::AttachmentIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::SetTitle(::grpc::ServerContext* context, const ::palm::balsam::v1::AttachmentSetTitleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::ById(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::AttachmentIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::ByUser(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::palm::balsam::v1::AttachmentIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::ByResource(::grpc::ServerContext* context, const ::palm::balsam::v1::ResourceRequest* request, ::palm::balsam::v1::AttachmentListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::Create(::grpc::ServerContext* context, const ::palm::balsam::v1::AttachmentCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::SetUploadedAt(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* LeaveWord_method_names[] = {
  "/palm.balsam.v1.LeaveWord/Create",
  "/palm.balsam.v1.LeaveWord/Index",
  "/palm.balsam.v1.LeaveWord/Publish",
  "/palm.balsam.v1.LeaveWord/Destroy",
};

std::unique_ptr< LeaveWord::Stub> LeaveWord::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LeaveWord::Stub> stub(new LeaveWord::Stub(channel, options));
  return stub;
}

LeaveWord::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(LeaveWord_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(LeaveWord_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Publish_(LeaveWord_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(LeaveWord_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LeaveWord::Stub::Create(::grpc::ClientContext* context, const ::palm::balsam::v1::LeaveWordCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::LeaveWordCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void LeaveWord::Stub::async::Create(::grpc::ClientContext* context, const ::palm::balsam::v1::LeaveWordCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::LeaveWordCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Create(::grpc::ClientContext* context, const ::palm::balsam::v1::LeaveWordCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::LeaveWordCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::LeaveWordCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::LeaveWordCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LeaveWord::Stub::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::palm::balsam::v1::LeaveWordIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::LeaveWordIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void LeaveWord::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::LeaveWordIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::Pager, ::palm::balsam::v1::LeaveWordIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Index(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::LeaveWordIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::LeaveWordIndexResponse>* LeaveWord::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::LeaveWordIndexResponse, ::palm::balsam::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::LeaveWordIndexResponse>* LeaveWord::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LeaveWord::Stub::Publish(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Publish_, context, request, response);
}

void LeaveWord::Stub::async::Publish(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Publish(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Publish_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::AsyncPublishRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LeaveWord::Stub::Destroy(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void LeaveWord::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

LeaveWord::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::balsam::v1::LeaveWordCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::LeaveWordCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::balsam::v1::Pager, ::palm::balsam::v1::LeaveWordIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::Pager* req,
             ::palm::balsam::v1::LeaveWordIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Publish(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::balsam::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
}

LeaveWord::Service::~Service() {
}

::grpc::Status LeaveWord::Service::Create(::grpc::ServerContext* context, const ::palm::balsam::v1::LeaveWordCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaveWord::Service::Index(::grpc::ServerContext* context, const ::palm::balsam::v1::Pager* request, ::palm::balsam::v1::LeaveWordIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaveWord::Service::Publish(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaveWord::Service::Destroy(::grpc::ServerContext* context, const ::palm::balsam::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Site_method_names[] = {
  "/palm.balsam.v1.Site/Status",
  "/palm.balsam.v1.Site/Layout",
  "/palm.balsam.v1.Site/GetInfoByLang",
  "/palm.balsam.v1.Site/SetInfo",
  "/palm.balsam.v1.Site/SetKeywords",
  "/palm.balsam.v1.Site/SetAuthor",
  "/palm.balsam.v1.Site/SetBaiduAccount",
  "/palm.balsam.v1.Site/GetBaiduAccount",
  "/palm.balsam.v1.Site/DeleteBaiduAccount",
  "/palm.balsam.v1.Site/SetGoogleAccount",
  "/palm.balsam.v1.Site/GetGoogleAccount",
  "/palm.balsam.v1.Site/DeleteGoogleAccount",
  "/palm.balsam.v1.Site/SetIndexNowAccount",
  "/palm.balsam.v1.Site/GetIndexNowAccount",
  "/palm.balsam.v1.Site/DeleteIndexNowAccount",
};

std::unique_ptr< Site::Stub> Site::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Site::Stub> stub(new Site::Stub(channel, options));
  return stub;
}

Site::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Status_(Site_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Layout_(Site_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInfoByLang_(Site_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetInfo_(Site_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetKeywords_(Site_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAuthor_(Site_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBaiduAccount_(Site_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBaiduAccount_(Site_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteBaiduAccount_(Site_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGoogleAccount_(Site_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGoogleAccount_(Site_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteGoogleAccount_(Site_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIndexNowAccount_(Site_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIndexNowAccount_(Site_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteIndexNowAccount_(Site_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Site::Stub::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::balsam::v1::SiteStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void Site::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Site::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteStatusResponse>* Site::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::SiteStatusResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteStatusResponse>* Site::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::balsam::v1::SiteLayoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Layout_, context, request, response);
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteLayoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, std::move(f));
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteLayoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteLayoutResponse>* Site::Stub::PrepareAsyncLayoutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::SiteLayoutResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Layout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteLayoutResponse>* Site::Stub::AsyncLayoutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLayoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetInfoByLang(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGetInfoByLangRequest& request, ::palm::balsam::v1::SiteGetInfoByLangResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::SiteGetInfoByLangRequest, ::palm::balsam::v1::SiteGetInfoByLangResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInfoByLang_, context, request, response);
}

void Site::Stub::async::GetInfoByLang(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGetInfoByLangRequest* request, ::palm::balsam::v1::SiteGetInfoByLangResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::SiteGetInfoByLangRequest, ::palm::balsam::v1::SiteGetInfoByLangResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInfoByLang_, context, request, response, std::move(f));
}

void Site::Stub::async::GetInfoByLang(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGetInfoByLangRequest* request, ::palm::balsam::v1::SiteGetInfoByLangResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInfoByLang_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteGetInfoByLangResponse>* Site::Stub::PrepareAsyncGetInfoByLangRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGetInfoByLangRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::SiteGetInfoByLangResponse, ::palm::balsam::v1::SiteGetInfoByLangRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInfoByLang_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteGetInfoByLangResponse>* Site::Stub::AsyncGetInfoByLangRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGetInfoByLangRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInfoByLangRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetInfo(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteInfoRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::SiteInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetInfo_, context, request, response);
}

void Site::Stub::async::SetInfo(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteInfoRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::SiteInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInfo_, context, request, response, std::move(f));
}

void Site::Stub::async::SetInfo(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteInfoRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetInfoRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::SiteInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetInfoRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetKeywords(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteKeywordsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::SiteKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetKeywords_, context, request, response);
}

void Site::Stub::async::SetKeywords(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteKeywordsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::SiteKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKeywords_, context, request, response, std::move(f));
}

void Site::Stub::async::SetKeywords(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteKeywordsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKeywords_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetKeywordsRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteKeywordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::SiteKeywordsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetKeywords_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetKeywordsRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteKeywordsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetKeywordsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetAuthor(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteLayoutResponse_Author& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAuthor_, context, request, response);
}

void Site::Stub::async::SetAuthor(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAuthor_, context, request, response, std::move(f));
}

void Site::Stub::async::SetAuthor(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAuthor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetAuthorRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteLayoutResponse_Author& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::SiteLayoutResponse_Author, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAuthor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetAuthorRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteLayoutResponse_Author& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAuthorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetBaiduAccount(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteBaiduAccount& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::SiteBaiduAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBaiduAccount_, context, request, response);
}

void Site::Stub::async::SetBaiduAccount(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteBaiduAccount* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::SiteBaiduAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaiduAccount_, context, request, response, std::move(f));
}

void Site::Stub::async::SetBaiduAccount(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteBaiduAccount* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaiduAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetBaiduAccountRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteBaiduAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::SiteBaiduAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBaiduAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetBaiduAccountRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteBaiduAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBaiduAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetBaiduAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::balsam::v1::SiteBaiduAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteBaiduAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBaiduAccount_, context, request, response);
}

void Site::Stub::async::GetBaiduAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteBaiduAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteBaiduAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaiduAccount_, context, request, response, std::move(f));
}

void Site::Stub::async::GetBaiduAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteBaiduAccount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaiduAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteBaiduAccount>* Site::Stub::PrepareAsyncGetBaiduAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::SiteBaiduAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBaiduAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteBaiduAccount>* Site::Stub::AsyncGetBaiduAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBaiduAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::DeleteBaiduAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteBaiduAccount_, context, request, response);
}

void Site::Stub::async::DeleteBaiduAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBaiduAccount_, context, request, response, std::move(f));
}

void Site::Stub::async::DeleteBaiduAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBaiduAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncDeleteBaiduAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteBaiduAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncDeleteBaiduAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteBaiduAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetGoogleAccount(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGoogleAccount& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::SiteGoogleAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGoogleAccount_, context, request, response);
}

void Site::Stub::async::SetGoogleAccount(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGoogleAccount* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::SiteGoogleAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGoogleAccount_, context, request, response, std::move(f));
}

void Site::Stub::async::SetGoogleAccount(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGoogleAccount* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGoogleAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetGoogleAccountRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGoogleAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::SiteGoogleAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGoogleAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetGoogleAccountRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteGoogleAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGoogleAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetGoogleAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::balsam::v1::SiteGoogleAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteGoogleAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGoogleAccount_, context, request, response);
}

void Site::Stub::async::GetGoogleAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteGoogleAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteGoogleAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGoogleAccount_, context, request, response, std::move(f));
}

void Site::Stub::async::GetGoogleAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteGoogleAccount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGoogleAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteGoogleAccount>* Site::Stub::PrepareAsyncGetGoogleAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::SiteGoogleAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGoogleAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteGoogleAccount>* Site::Stub::AsyncGetGoogleAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGoogleAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::DeleteGoogleAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteGoogleAccount_, context, request, response);
}

void Site::Stub::async::DeleteGoogleAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteGoogleAccount_, context, request, response, std::move(f));
}

void Site::Stub::async::DeleteGoogleAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteGoogleAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncDeleteGoogleAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteGoogleAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncDeleteGoogleAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteGoogleAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetIndexNowAccount(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteIndexNowAccount& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::balsam::v1::SiteIndexNowAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetIndexNowAccount_, context, request, response);
}

void Site::Stub::async::SetIndexNowAccount(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteIndexNowAccount* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::balsam::v1::SiteIndexNowAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIndexNowAccount_, context, request, response, std::move(f));
}

void Site::Stub::async::SetIndexNowAccount(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteIndexNowAccount* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIndexNowAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetIndexNowAccountRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteIndexNowAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::balsam::v1::SiteIndexNowAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetIndexNowAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetIndexNowAccountRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::SiteIndexNowAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetIndexNowAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetIndexNowAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::balsam::v1::SiteIndexNowAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteIndexNowAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIndexNowAccount_, context, request, response);
}

void Site::Stub::async::GetIndexNowAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteIndexNowAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::balsam::v1::SiteIndexNowAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIndexNowAccount_, context, request, response, std::move(f));
}

void Site::Stub::async::GetIndexNowAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteIndexNowAccount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIndexNowAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteIndexNowAccount>* Site::Stub::PrepareAsyncGetIndexNowAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::balsam::v1::SiteIndexNowAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIndexNowAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::SiteIndexNowAccount>* Site::Stub::AsyncGetIndexNowAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIndexNowAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::DeleteIndexNowAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteIndexNowAccount_, context, request, response);
}

void Site::Stub::async::DeleteIndexNowAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteIndexNowAccount_, context, request, response, std::move(f));
}

void Site::Stub::async::DeleteIndexNowAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteIndexNowAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncDeleteIndexNowAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteIndexNowAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncDeleteIndexNowAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteIndexNowAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

Site::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::balsam::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::balsam::v1::SiteStatusResponse* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::balsam::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::balsam::v1::SiteLayoutResponse* resp) {
               return service->Layout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::balsam::v1::SiteGetInfoByLangRequest, ::palm::balsam::v1::SiteGetInfoByLangResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::SiteGetInfoByLangRequest* req,
             ::palm::balsam::v1::SiteGetInfoByLangResponse* resp) {
               return service->GetInfoByLang(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::balsam::v1::SiteInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::SiteInfoRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::balsam::v1::SiteKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::SiteKeywordsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetKeywords(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::balsam::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::SiteLayoutResponse_Author* req,
             ::google::protobuf::Empty* resp) {
               return service->SetAuthor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::balsam::v1::SiteBaiduAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::SiteBaiduAccount* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBaiduAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::balsam::v1::SiteBaiduAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::balsam::v1::SiteBaiduAccount* resp) {
               return service->GetBaiduAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteBaiduAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::balsam::v1::SiteGoogleAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::SiteGoogleAccount* req,
             ::google::protobuf::Empty* resp) {
               return service->SetGoogleAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::balsam::v1::SiteGoogleAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::balsam::v1::SiteGoogleAccount* resp) {
               return service->GetGoogleAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteGoogleAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::balsam::v1::SiteIndexNowAccount, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::balsam::v1::SiteIndexNowAccount* req,
             ::google::protobuf::Empty* resp) {
               return service->SetIndexNowAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::balsam::v1::SiteIndexNowAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::balsam::v1::SiteIndexNowAccount* resp) {
               return service->GetIndexNowAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteIndexNowAccount(ctx, req, resp);
             }, this)));
}

Site::Service::~Service() {
}

::grpc::Status Site::Service::Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Layout(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteLayoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetInfoByLang(::grpc::ServerContext* context, const ::palm::balsam::v1::SiteGetInfoByLangRequest* request, ::palm::balsam::v1::SiteGetInfoByLangResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetInfo(::grpc::ServerContext* context, const ::palm::balsam::v1::SiteInfoRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetKeywords(::grpc::ServerContext* context, const ::palm::balsam::v1::SiteKeywordsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetAuthor(::grpc::ServerContext* context, const ::palm::balsam::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetBaiduAccount(::grpc::ServerContext* context, const ::palm::balsam::v1::SiteBaiduAccount* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetBaiduAccount(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteBaiduAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::DeleteBaiduAccount(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetGoogleAccount(::grpc::ServerContext* context, const ::palm::balsam::v1::SiteGoogleAccount* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetGoogleAccount(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteGoogleAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::DeleteGoogleAccount(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetIndexNowAccount(::grpc::ServerContext* context, const ::palm::balsam::v1::SiteIndexNowAccount* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetIndexNowAccount(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::balsam::v1::SiteIndexNowAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::DeleteIndexNowAccount(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace balsam
}  // namespace v1

