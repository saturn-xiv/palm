// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daisy.proto

#include "daisy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace daisy {
namespace v1 {
PROTOBUF_CONSTEXPR SmsSendRequest::SmsSendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.to_)*/{}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.callback_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SmsSendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmsSendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmsSendRequestDefaultTypeInternal() {}
  union {
    SmsSendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmsSendRequestDefaultTypeInternal _SmsSendRequest_default_instance_;
PROTOBUF_CONSTEXPR EmailSendRequest_Address::EmailSendRequest_Address(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailSendRequest_AddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailSendRequest_AddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailSendRequest_AddressDefaultTypeInternal() {}
  union {
    EmailSendRequest_Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailSendRequest_AddressDefaultTypeInternal _EmailSendRequest_Address_default_instance_;
PROTOBUF_CONSTEXPR EmailSendRequest_Body::EmailSendRequest_Body(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.html_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailSendRequest_BodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailSendRequest_BodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailSendRequest_BodyDefaultTypeInternal() {}
  union {
    EmailSendRequest_Body _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailSendRequest_BodyDefaultTypeInternal _EmailSendRequest_Body_default_instance_;
PROTOBUF_CONSTEXPR EmailSendRequest_Attachment::EmailSendRequest_Attachment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inline__)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailSendRequest_AttachmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailSendRequest_AttachmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailSendRequest_AttachmentDefaultTypeInternal() {}
  union {
    EmailSendRequest_Attachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailSendRequest_AttachmentDefaultTypeInternal _EmailSendRequest_Attachment_default_instance_;
PROTOBUF_CONSTEXPR EmailSendRequest::EmailSendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cc_)*/{}
  , /*decltype(_impl_.bcc_)*/{}
  , /*decltype(_impl_.attachments_)*/{}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailSendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailSendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailSendRequestDefaultTypeInternal() {}
  union {
    EmailSendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailSendRequestDefaultTypeInternal _EmailSendRequest_default_instance_;
}  // namespace v1
}  // namespace daisy
}  // namespace palm
static ::_pb::Metadata file_level_metadata_daisy_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_daisy_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_daisy_2eproto = nullptr;

const uint32_t TableStruct_daisy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::SmsSendRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::SmsSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::SmsSendRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::SmsSendRequest, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::SmsSendRequest, _impl_.callback_uri_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Address, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Address, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Body, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Body, _impl_.html_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Attachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Attachment, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Attachment, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Attachment, _impl_.inline__),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest_Attachment, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest, _impl_.cc_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest, _impl_.bcc_),
  PROTOBUF_FIELD_OFFSET(::palm::daisy::v1::EmailSendRequest, _impl_.attachments_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::palm::daisy::v1::SmsSendRequest)},
  { 12, -1, -1, sizeof(::palm::daisy::v1::EmailSendRequest_Address)},
  { 20, -1, -1, sizeof(::palm::daisy::v1::EmailSendRequest_Body)},
  { 28, -1, -1, sizeof(::palm::daisy::v1::EmailSendRequest_Attachment)},
  { 38, -1, -1, sizeof(::palm::daisy::v1::EmailSendRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::daisy::v1::_SmsSendRequest_default_instance_._instance,
  &::palm::daisy::v1::_EmailSendRequest_Address_default_instance_._instance,
  &::palm::daisy::v1::_EmailSendRequest_Body_default_instance_._instance,
  &::palm::daisy::v1::_EmailSendRequest_Attachment_default_instance_._instance,
  &::palm::daisy::v1::_EmailSendRequest_default_instance_._instance,
};

const char descriptor_table_protodef_daisy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013daisy.proto\022\rpalm.daisy.v1\"V\n\016SmsSendR"
  "equest\022\n\n\002to\030\001 \003(\t\022\014\n\004body\030\002 \001(\t\022\031\n\014call"
  "back_uri\030\003 \001(\tH\000\210\001\001B\017\n\r_callback_uri\"\325\003\n"
  "\020EmailSendRequest\022\017\n\007subject\030\001 \001(\t\0222\n\004bo"
  "dy\030\002 \001(\0132$.palm.daisy.v1.EmailSendReques"
  "t.Body\0223\n\002to\030\003 \001(\0132\'.palm.daisy.v1.Email"
  "SendRequest.Address\0223\n\002cc\030\004 \003(\0132\'.palm.d"
  "aisy.v1.EmailSendRequest.Address\0224\n\003bcc\030"
  "\005 \003(\0132\'.palm.daisy.v1.EmailSendRequest.A"
  "ddress\022\?\n\013attachments\030\t \003(\0132*.palm.daisy"
  ".v1.EmailSendRequest.Attachment\032&\n\007Addre"
  "ss\022\014\n\004name\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\032\"\n\004Body\022"
  "\014\n\004text\030\001 \001(\t\022\014\n\004html\030\002 \001(\010\032O\n\nAttachmen"
  "t\022\r\n\005title\030\001 \001(\t\022\024\n\014content_type\030\002 \001(\t\022\016"
  "\n\006inline\030\003 \001(\010\022\014\n\004body\030\t \001(\014B]\n+com.gith"
  "ub.saturn_xiv.palm.plugins.daisy.v1P\001Z,g"
  "ithub.com/saturn-xiv/palm/daisy/services"
  "/v2b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_daisy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_daisy_2eproto = {
    false, false, 691, descriptor_table_protodef_daisy_2eproto,
    "daisy.proto",
    &descriptor_table_daisy_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_daisy_2eproto::offsets,
    file_level_metadata_daisy_2eproto, file_level_enum_descriptors_daisy_2eproto,
    file_level_service_descriptors_daisy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_daisy_2eproto_getter() {
  return &descriptor_table_daisy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_daisy_2eproto(&descriptor_table_daisy_2eproto);
namespace palm {
namespace daisy {
namespace v1 {

// ===================================================================

class SmsSendRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SmsSendRequest>()._impl_._has_bits_);
  static void set_has_callback_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SmsSendRequest::SmsSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.daisy.v1.SmsSendRequest)
}
SmsSendRequest::SmsSendRequest(const SmsSendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmsSendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_){from._impl_.to_}
    , decltype(_impl_.body_){}
    , decltype(_impl_.callback_uri_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.callback_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callback_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_callback_uri()) {
    _this->_impl_.callback_uri_.Set(from._internal_callback_uri(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.daisy.v1.SmsSendRequest)
}

inline void SmsSendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_){arena}
    , decltype(_impl_.body_){}
    , decltype(_impl_.callback_uri_){}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.callback_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callback_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmsSendRequest::~SmsSendRequest() {
  // @@protoc_insertion_point(destructor:palm.daisy.v1.SmsSendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmsSendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.~RepeatedPtrField();
  _impl_.body_.Destroy();
  _impl_.callback_uri_.Destroy();
}

void SmsSendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmsSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.daisy.v1.SmsSendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.Clear();
  _impl_.body_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.callback_uri_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmsSendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_to();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.daisy.v1.SmsSendRequest.to"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.daisy.v1.SmsSendRequest.body"));
        } else
          goto handle_unusual;
        continue;
      // optional string callback_uri = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_callback_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.daisy.v1.SmsSendRequest.callback_uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmsSendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.daisy.v1.SmsSendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string to = 1;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    const auto& s = this->_internal_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.daisy.v1.SmsSendRequest.to");
    target = stream->WriteString(1, s, target);
  }

  // string body = 2;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.daisy.v1.SmsSendRequest.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // optional string callback_uri = 3;
  if (_internal_has_callback_uri()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callback_uri().data(), static_cast<int>(this->_internal_callback_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.daisy.v1.SmsSendRequest.callback_uri");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_callback_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.daisy.v1.SmsSendRequest)
  return target;
}

size_t SmsSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.daisy.v1.SmsSendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string to = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.to_.size());
  for (int i = 0, n = _impl_.to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.to_.Get(i));
  }

  // string body = 2;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // optional string callback_uri = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callback_uri());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmsSendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmsSendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmsSendRequest::GetClassData() const { return &_class_data_; }


void SmsSendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmsSendRequest*>(&to_msg);
  auto& from = static_cast<const SmsSendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.daisy.v1.SmsSendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.to_.MergeFrom(from._impl_.to_);
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_has_callback_uri()) {
    _this->_internal_set_callback_uri(from._internal_callback_uri());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmsSendRequest::CopyFrom(const SmsSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.daisy.v1.SmsSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsSendRequest::IsInitialized() const {
  return true;
}

void SmsSendRequest::InternalSwap(SmsSendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.to_.InternalSwap(&other->_impl_.to_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.callback_uri_, lhs_arena,
      &other->_impl_.callback_uri_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SmsSendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_daisy_2eproto_getter, &descriptor_table_daisy_2eproto_once,
      file_level_metadata_daisy_2eproto[0]);
}

// ===================================================================

class EmailSendRequest_Address::_Internal {
 public:
};

EmailSendRequest_Address::EmailSendRequest_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.daisy.v1.EmailSendRequest.Address)
}
EmailSendRequest_Address::EmailSendRequest_Address(const EmailSendRequest_Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailSendRequest_Address* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.daisy.v1.EmailSendRequest.Address)
}

inline void EmailSendRequest_Address::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailSendRequest_Address::~EmailSendRequest_Address() {
  // @@protoc_insertion_point(destructor:palm.daisy.v1.EmailSendRequest.Address)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailSendRequest_Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.email_.Destroy();
}

void EmailSendRequest_Address::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailSendRequest_Address::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.daisy.v1.EmailSendRequest.Address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailSendRequest_Address::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.daisy.v1.EmailSendRequest.Address.name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.daisy.v1.EmailSendRequest.Address.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailSendRequest_Address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.daisy.v1.EmailSendRequest.Address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.daisy.v1.EmailSendRequest.Address.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.daisy.v1.EmailSendRequest.Address.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.daisy.v1.EmailSendRequest.Address)
  return target;
}

size_t EmailSendRequest_Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.daisy.v1.EmailSendRequest.Address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailSendRequest_Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailSendRequest_Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailSendRequest_Address::GetClassData() const { return &_class_data_; }


void EmailSendRequest_Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailSendRequest_Address*>(&to_msg);
  auto& from = static_cast<const EmailSendRequest_Address&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.daisy.v1.EmailSendRequest.Address)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailSendRequest_Address::CopyFrom(const EmailSendRequest_Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.daisy.v1.EmailSendRequest.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailSendRequest_Address::IsInitialized() const {
  return true;
}

void EmailSendRequest_Address::InternalSwap(EmailSendRequest_Address* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailSendRequest_Address::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_daisy_2eproto_getter, &descriptor_table_daisy_2eproto_once,
      file_level_metadata_daisy_2eproto[1]);
}

// ===================================================================

class EmailSendRequest_Body::_Internal {
 public:
};

EmailSendRequest_Body::EmailSendRequest_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.daisy.v1.EmailSendRequest.Body)
}
EmailSendRequest_Body::EmailSendRequest_Body(const EmailSendRequest_Body& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailSendRequest_Body* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.html_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.html_ = from._impl_.html_;
  // @@protoc_insertion_point(copy_constructor:palm.daisy.v1.EmailSendRequest.Body)
}

inline void EmailSendRequest_Body::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.html_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailSendRequest_Body::~EmailSendRequest_Body() {
  // @@protoc_insertion_point(destructor:palm.daisy.v1.EmailSendRequest.Body)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailSendRequest_Body::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void EmailSendRequest_Body::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailSendRequest_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.daisy.v1.EmailSendRequest.Body)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.html_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailSendRequest_Body::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.daisy.v1.EmailSendRequest.Body.text"));
        } else
          goto handle_unusual;
        continue;
      // bool html = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.html_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailSendRequest_Body::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.daisy.v1.EmailSendRequest.Body)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.daisy.v1.EmailSendRequest.Body.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // bool html = 2;
  if (this->_internal_html() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_html(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.daisy.v1.EmailSendRequest.Body)
  return target;
}

size_t EmailSendRequest_Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.daisy.v1.EmailSendRequest.Body)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // bool html = 2;
  if (this->_internal_html() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailSendRequest_Body::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailSendRequest_Body::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailSendRequest_Body::GetClassData() const { return &_class_data_; }


void EmailSendRequest_Body::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailSendRequest_Body*>(&to_msg);
  auto& from = static_cast<const EmailSendRequest_Body&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.daisy.v1.EmailSendRequest.Body)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_html() != 0) {
    _this->_internal_set_html(from._internal_html());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailSendRequest_Body::CopyFrom(const EmailSendRequest_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.daisy.v1.EmailSendRequest.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailSendRequest_Body::IsInitialized() const {
  return true;
}

void EmailSendRequest_Body::InternalSwap(EmailSendRequest_Body* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.html_, other->_impl_.html_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailSendRequest_Body::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_daisy_2eproto_getter, &descriptor_table_daisy_2eproto_once,
      file_level_metadata_daisy_2eproto[2]);
}

// ===================================================================

class EmailSendRequest_Attachment::_Internal {
 public:
};

EmailSendRequest_Attachment::EmailSendRequest_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.daisy.v1.EmailSendRequest.Attachment)
}
EmailSendRequest_Attachment::EmailSendRequest_Attachment(const EmailSendRequest_Attachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailSendRequest_Attachment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.inline__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.inline__ = from._impl_.inline__;
  // @@protoc_insertion_point(copy_constructor:palm.daisy.v1.EmailSendRequest.Attachment)
}

inline void EmailSendRequest_Attachment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.inline__){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailSendRequest_Attachment::~EmailSendRequest_Attachment() {
  // @@protoc_insertion_point(destructor:palm.daisy.v1.EmailSendRequest.Attachment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailSendRequest_Attachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.content_type_.Destroy();
  _impl_.body_.Destroy();
}

void EmailSendRequest_Attachment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailSendRequest_Attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.daisy.v1.EmailSendRequest.Attachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.content_type_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  _impl_.inline__ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailSendRequest_Attachment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.daisy.v1.EmailSendRequest.Attachment.title"));
        } else
          goto handle_unusual;
        continue;
      // string content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.daisy.v1.EmailSendRequest.Attachment.content_type"));
        } else
          goto handle_unusual;
        continue;
      // bool inline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.inline__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes body = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailSendRequest_Attachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.daisy.v1.EmailSendRequest.Attachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.daisy.v1.EmailSendRequest.Attachment.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string content_type = 2;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.daisy.v1.EmailSendRequest.Attachment.content_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content_type(), target);
  }

  // bool inline = 3;
  if (this->_internal_inline_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_inline_(), target);
  }

  // bytes body = 9;
  if (!this->_internal_body().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.daisy.v1.EmailSendRequest.Attachment)
  return target;
}

size_t EmailSendRequest_Attachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.daisy.v1.EmailSendRequest.Attachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content_type = 2;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // bytes body = 9;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // bool inline = 3;
  if (this->_internal_inline_() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailSendRequest_Attachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailSendRequest_Attachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailSendRequest_Attachment::GetClassData() const { return &_class_data_; }


void EmailSendRequest_Attachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailSendRequest_Attachment*>(&to_msg);
  auto& from = static_cast<const EmailSendRequest_Attachment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.daisy.v1.EmailSendRequest.Attachment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_content_type().empty()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_inline_() != 0) {
    _this->_internal_set_inline_(from._internal_inline_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailSendRequest_Attachment::CopyFrom(const EmailSendRequest_Attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.daisy.v1.EmailSendRequest.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailSendRequest_Attachment::IsInitialized() const {
  return true;
}

void EmailSendRequest_Attachment::InternalSwap(EmailSendRequest_Attachment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_type_, lhs_arena,
      &other->_impl_.content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  swap(_impl_.inline__, other->_impl_.inline__);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailSendRequest_Attachment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_daisy_2eproto_getter, &descriptor_table_daisy_2eproto_once,
      file_level_metadata_daisy_2eproto[3]);
}

// ===================================================================

class EmailSendRequest::_Internal {
 public:
  static const ::palm::daisy::v1::EmailSendRequest_Body& body(const EmailSendRequest* msg);
  static const ::palm::daisy::v1::EmailSendRequest_Address& to(const EmailSendRequest* msg);
};

const ::palm::daisy::v1::EmailSendRequest_Body&
EmailSendRequest::_Internal::body(const EmailSendRequest* msg) {
  return *msg->_impl_.body_;
}
const ::palm::daisy::v1::EmailSendRequest_Address&
EmailSendRequest::_Internal::to(const EmailSendRequest* msg) {
  return *msg->_impl_.to_;
}
EmailSendRequest::EmailSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.daisy.v1.EmailSendRequest)
}
EmailSendRequest::EmailSendRequest(const EmailSendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailSendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){from._impl_.cc_}
    , decltype(_impl_.bcc_){from._impl_.bcc_}
    , decltype(_impl_.attachments_){from._impl_.attachments_}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.body_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::palm::daisy::v1::EmailSendRequest_Body(*from._impl_.body_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::palm::daisy::v1::EmailSendRequest_Address(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.daisy.v1.EmailSendRequest)
}

inline void EmailSendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){arena}
    , decltype(_impl_.bcc_){arena}
    , decltype(_impl_.attachments_){arena}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.body_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailSendRequest::~EmailSendRequest() {
  // @@protoc_insertion_point(destructor:palm.daisy.v1.EmailSendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailSendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cc_.~RepeatedPtrField();
  _impl_.bcc_.~RepeatedPtrField();
  _impl_.attachments_.~RepeatedPtrField();
  _impl_.subject_.Destroy();
  if (this != internal_default_instance()) delete _impl_.body_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void EmailSendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.daisy.v1.EmailSendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cc_.Clear();
  _impl_.bcc_.Clear();
  _impl_.attachments_.Clear();
  _impl_.subject_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailSendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.daisy.v1.EmailSendRequest.subject"));
        } else
          goto handle_unusual;
        continue;
      // .palm.daisy.v1.EmailSendRequest.Body body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.daisy.v1.EmailSendRequest.Address to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.daisy.v1.EmailSendRequest.Address cc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.daisy.v1.EmailSendRequest.Address bcc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bcc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.daisy.v1.EmailSendRequest.Attachment attachments = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailSendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.daisy.v1.EmailSendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.daisy.v1.EmailSendRequest.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // .palm.daisy.v1.EmailSendRequest.Body body = 2;
  if (this->_internal_has_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  // .palm.daisy.v1.EmailSendRequest.Address to = 3;
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.daisy.v1.EmailSendRequest.Address cc = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cc_size()); i < n; i++) {
    const auto& repfield = this->_internal_cc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.daisy.v1.EmailSendRequest.Address bcc = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bcc_size()); i < n; i++) {
    const auto& repfield = this->_internal_bcc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.daisy.v1.EmailSendRequest.Attachment attachments = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attachments_size()); i < n; i++) {
    const auto& repfield = this->_internal_attachments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.daisy.v1.EmailSendRequest)
  return target;
}

size_t EmailSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.daisy.v1.EmailSendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.daisy.v1.EmailSendRequest.Address cc = 4;
  total_size += 1UL * this->_internal_cc_size();
  for (const auto& msg : this->_impl_.cc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.daisy.v1.EmailSendRequest.Address bcc = 5;
  total_size += 1UL * this->_internal_bcc_size();
  for (const auto& msg : this->_impl_.bcc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.daisy.v1.EmailSendRequest.Attachment attachments = 9;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->_impl_.attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .palm.daisy.v1.EmailSendRequest.Body body = 2;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  // .palm.daisy.v1.EmailSendRequest.Address to = 3;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailSendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailSendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailSendRequest::GetClassData() const { return &_class_data_; }


void EmailSendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailSendRequest*>(&to_msg);
  auto& from = static_cast<const EmailSendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.daisy.v1.EmailSendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cc_.MergeFrom(from._impl_.cc_);
  _this->_impl_.bcc_.MergeFrom(from._impl_.bcc_);
  _this->_impl_.attachments_.MergeFrom(from._impl_.attachments_);
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (from._internal_has_body()) {
    _this->_internal_mutable_body()->::palm::daisy::v1::EmailSendRequest_Body::MergeFrom(
        from._internal_body());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::palm::daisy::v1::EmailSendRequest_Address::MergeFrom(
        from._internal_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailSendRequest::CopyFrom(const EmailSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.daisy.v1.EmailSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailSendRequest::IsInitialized() const {
  return true;
}

void EmailSendRequest::InternalSwap(EmailSendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cc_.InternalSwap(&other->_impl_.cc_);
  _impl_.bcc_.InternalSwap(&other->_impl_.bcc_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmailSendRequest, _impl_.to_)
      + sizeof(EmailSendRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(EmailSendRequest, _impl_.body_)>(
          reinterpret_cast<char*>(&_impl_.body_),
          reinterpret_cast<char*>(&other->_impl_.body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailSendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_daisy_2eproto_getter, &descriptor_table_daisy_2eproto_once,
      file_level_metadata_daisy_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace daisy
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::daisy::v1::SmsSendRequest*
Arena::CreateMaybeMessage< ::palm::daisy::v1::SmsSendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::daisy::v1::SmsSendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::daisy::v1::EmailSendRequest_Address*
Arena::CreateMaybeMessage< ::palm::daisy::v1::EmailSendRequest_Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::daisy::v1::EmailSendRequest_Address >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::daisy::v1::EmailSendRequest_Body*
Arena::CreateMaybeMessage< ::palm::daisy::v1::EmailSendRequest_Body >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::daisy::v1::EmailSendRequest_Body >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::daisy::v1::EmailSendRequest_Attachment*
Arena::CreateMaybeMessage< ::palm::daisy::v1::EmailSendRequest_Attachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::daisy::v1::EmailSendRequest_Attachment >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::daisy::v1::EmailSendRequest*
Arena::CreateMaybeMessage< ::palm::daisy::v1::EmailSendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::daisy::v1::EmailSendRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
