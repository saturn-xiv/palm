// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: s3.proto

#include "s3.pb.h"
#include "s3.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace s3 {
namespace v1 {

static const char* S3_method_names[] = {
  "/palm.s3.v1.S3/CreateBucket",
  "/palm.s3.v1.S3/Upload",
  "/palm.s3.v1.S3/PermanentUrl",
  "/palm.s3.v1.S3/PresignedUrl",
};

std::unique_ptr< S3::Stub> S3::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< S3::Stub> stub(new S3::Stub(channel, options));
  return stub;
}

S3::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateBucket_(S3_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Upload_(S3_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PermanentUrl_(S3_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresignedUrl_(S3_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status S3::Stub::CreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::palm::s3::v1::S3CreateBucketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::s3::v1::S3CreateBucketRequest, ::palm::s3::v1::S3CreateBucketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBucket_, context, request, response);
}

void S3::Stub::async::CreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest* request, ::palm::s3::v1::S3CreateBucketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::s3::v1::S3CreateBucketRequest, ::palm::s3::v1::S3CreateBucketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBucket_, context, request, response, std::move(f));
}

void S3::Stub::async::CreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest* request, ::palm::s3::v1::S3CreateBucketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3CreateBucketResponse>* S3::Stub::PrepareAsyncCreateBucketRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::s3::v1::S3CreateBucketResponse, ::palm::s3::v1::S3CreateBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3CreateBucketResponse>* S3::Stub::AsyncCreateBucketRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status S3::Stub::Upload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::palm::s3::v1::S3UploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::s3::v1::S3UploadRequest, ::palm::s3::v1::S3UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Upload_, context, request, response);
}

void S3::Stub::async::Upload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest* request, ::palm::s3::v1::S3UploadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::s3::v1::S3UploadRequest, ::palm::s3::v1::S3UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, std::move(f));
}

void S3::Stub::async::Upload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest* request, ::palm::s3::v1::S3UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UploadResponse>* S3::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::s3::v1::S3UploadResponse, ::palm::s3::v1::S3UploadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Upload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UploadResponse>* S3::Stub::AsyncUploadRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status S3::Stub::PermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::palm::s3::v1::S3UrlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::s3::v1::S3PermanentUrlRequest, ::palm::s3::v1::S3UrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PermanentUrl_, context, request, response);
}

void S3::Stub::async::PermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::s3::v1::S3PermanentUrlRequest, ::palm::s3::v1::S3UrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PermanentUrl_, context, request, response, std::move(f));
}

void S3::Stub::async::PermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PermanentUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>* S3::Stub::PrepareAsyncPermanentUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::s3::v1::S3UrlResponse, ::palm::s3::v1::S3PermanentUrlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PermanentUrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>* S3::Stub::AsyncPermanentUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPermanentUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status S3::Stub::PresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::palm::s3::v1::S3UrlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::s3::v1::S3PresignedUrlRequest, ::palm::s3::v1::S3UrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PresignedUrl_, context, request, response);
}

void S3::Stub::async::PresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::s3::v1::S3PresignedUrlRequest, ::palm::s3::v1::S3UrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PresignedUrl_, context, request, response, std::move(f));
}

void S3::Stub::async::PresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PresignedUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>* S3::Stub::PrepareAsyncPresignedUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::s3::v1::S3UrlResponse, ::palm::s3::v1::S3PresignedUrlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PresignedUrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>* S3::Stub::AsyncPresignedUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPresignedUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

S3::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S3_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S3::Service, ::palm::s3::v1::S3CreateBucketRequest, ::palm::s3::v1::S3CreateBucketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S3::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::s3::v1::S3CreateBucketRequest* req,
             ::palm::s3::v1::S3CreateBucketResponse* resp) {
               return service->CreateBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S3_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S3::Service, ::palm::s3::v1::S3UploadRequest, ::palm::s3::v1::S3UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S3::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::s3::v1::S3UploadRequest* req,
             ::palm::s3::v1::S3UploadResponse* resp) {
               return service->Upload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S3_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S3::Service, ::palm::s3::v1::S3PermanentUrlRequest, ::palm::s3::v1::S3UrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S3::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::s3::v1::S3PermanentUrlRequest* req,
             ::palm::s3::v1::S3UrlResponse* resp) {
               return service->PermanentUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S3_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S3::Service, ::palm::s3::v1::S3PresignedUrlRequest, ::palm::s3::v1::S3UrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S3::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::s3::v1::S3PresignedUrlRequest* req,
             ::palm::s3::v1::S3UrlResponse* resp) {
               return service->PresignedUrl(ctx, req, resp);
             }, this)));
}

S3::Service::~Service() {
}

::grpc::Status S3::Service::CreateBucket(::grpc::ServerContext* context, const ::palm::s3::v1::S3CreateBucketRequest* request, ::palm::s3::v1::S3CreateBucketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status S3::Service::Upload(::grpc::ServerContext* context, const ::palm::s3::v1::S3UploadRequest* request, ::palm::s3::v1::S3UploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status S3::Service::PermanentUrl(::grpc::ServerContext* context, const ::palm::s3::v1::S3PermanentUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status S3::Service::PresignedUrl(::grpc::ServerContext* context, const ::palm::s3::v1::S3PresignedUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace s3
}  // namespace v1

