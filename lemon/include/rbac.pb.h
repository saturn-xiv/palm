// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbac.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_rbac_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rbac_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rbac_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_rbac_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_rbac_2eproto;
namespace palm {
namespace rbac {
namespace v1 {
class PolicyCanRequest;
struct PolicyCanRequestDefaultTypeInternal;
extern PolicyCanRequestDefaultTypeInternal _PolicyCanRequest_default_instance_;
class PolicyHasRequest;
struct PolicyHasRequestDefaultTypeInternal;
extern PolicyHasRequestDefaultTypeInternal _PolicyHasRequest_default_instance_;
class PolicyPermissionsForRoleRequest;
struct PolicyPermissionsForRoleRequestDefaultTypeInternal;
extern PolicyPermissionsForRoleRequestDefaultTypeInternal _PolicyPermissionsForRoleRequest_default_instance_;
class PolicyPermissionsForUserRequest;
struct PolicyPermissionsForUserRequestDefaultTypeInternal;
extern PolicyPermissionsForUserRequestDefaultTypeInternal _PolicyPermissionsForUserRequest_default_instance_;
class PolicyPermissionsResponse;
struct PolicyPermissionsResponseDefaultTypeInternal;
extern PolicyPermissionsResponseDefaultTypeInternal _PolicyPermissionsResponse_default_instance_;
class PolicyPermissionsResponse_Item;
struct PolicyPermissionsResponse_ItemDefaultTypeInternal;
extern PolicyPermissionsResponse_ItemDefaultTypeInternal _PolicyPermissionsResponse_Item_default_instance_;
class PolicyPermissionsResponse_Item_Operation;
struct PolicyPermissionsResponse_Item_OperationDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_OperationDefaultTypeInternal _PolicyPermissionsResponse_Item_Operation_default_instance_;
class PolicyPermissionsResponse_Item_Operation_Append;
struct PolicyPermissionsResponse_Item_Operation_AppendDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_Operation_AppendDefaultTypeInternal _PolicyPermissionsResponse_Item_Operation_Append_default_instance_;
class PolicyPermissionsResponse_Item_Operation_Credit;
struct PolicyPermissionsResponse_Item_Operation_CreditDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_Operation_CreditDefaultTypeInternal _PolicyPermissionsResponse_Item_Operation_Credit_default_instance_;
class PolicyPermissionsResponse_Item_Operation_Debit;
struct PolicyPermissionsResponse_Item_Operation_DebitDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_Operation_DebitDefaultTypeInternal _PolicyPermissionsResponse_Item_Operation_Debit_default_instance_;
class PolicyPermissionsResponse_Item_Operation_Execute;
struct PolicyPermissionsResponse_Item_Operation_ExecuteDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_Operation_ExecuteDefaultTypeInternal _PolicyPermissionsResponse_Item_Operation_Execute_default_instance_;
class PolicyPermissionsResponse_Item_Operation_Inquiry;
struct PolicyPermissionsResponse_Item_Operation_InquiryDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_Operation_InquiryDefaultTypeInternal _PolicyPermissionsResponse_Item_Operation_Inquiry_default_instance_;
class PolicyPermissionsResponse_Item_Operation_Read;
struct PolicyPermissionsResponse_Item_Operation_ReadDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_Operation_ReadDefaultTypeInternal _PolicyPermissionsResponse_Item_Operation_Read_default_instance_;
class PolicyPermissionsResponse_Item_Operation_Write;
struct PolicyPermissionsResponse_Item_Operation_WriteDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_Operation_WriteDefaultTypeInternal _PolicyPermissionsResponse_Item_Operation_Write_default_instance_;
class PolicyPermissionsResponse_Item_Resource;
struct PolicyPermissionsResponse_Item_ResourceDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_ResourceDefaultTypeInternal _PolicyPermissionsResponse_Item_Resource_default_instance_;
class PolicyPermissionsResponse_Item_Resource_Id;
struct PolicyPermissionsResponse_Item_Resource_IdDefaultTypeInternal;
extern PolicyPermissionsResponse_Item_Resource_IdDefaultTypeInternal _PolicyPermissionsResponse_Item_Resource_Id_default_instance_;
class PolicyRolesForUserRequest;
struct PolicyRolesForUserRequestDefaultTypeInternal;
extern PolicyRolesForUserRequestDefaultTypeInternal _PolicyRolesForUserRequest_default_instance_;
class PolicyRolesResponse;
struct PolicyRolesResponseDefaultTypeInternal;
extern PolicyRolesResponseDefaultTypeInternal _PolicyRolesResponse_default_instance_;
class PolicyRolesResponse_Item;
struct PolicyRolesResponse_ItemDefaultTypeInternal;
extern PolicyRolesResponse_ItemDefaultTypeInternal _PolicyRolesResponse_Item_default_instance_;
class PolicyRolesResponse_Item_Administrator;
struct PolicyRolesResponse_Item_AdministratorDefaultTypeInternal;
extern PolicyRolesResponse_Item_AdministratorDefaultTypeInternal _PolicyRolesResponse_Item_Administrator_default_instance_;
class PolicyRolesResponse_Item_Root;
struct PolicyRolesResponse_Item_RootDefaultTypeInternal;
extern PolicyRolesResponse_Item_RootDefaultTypeInternal _PolicyRolesResponse_Item_Root_default_instance_;
class PolicyUsersResponse;
struct PolicyUsersResponseDefaultTypeInternal;
extern PolicyUsersResponseDefaultTypeInternal _PolicyUsersResponse_default_instance_;
class PolicyUsersResponse_Item;
struct PolicyUsersResponse_ItemDefaultTypeInternal;
extern PolicyUsersResponse_ItemDefaultTypeInternal _PolicyUsersResponse_Item_default_instance_;
}  // namespace v1
}  // namespace rbac
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace rbac {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class PolicyUsersResponse_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyUsersResponse.Item) */ {
 public:
  inline PolicyUsersResponse_Item() : PolicyUsersResponse_Item(nullptr) {}
  ~PolicyUsersResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyUsersResponse_Item(::google::protobuf::internal::ConstantInitialized);

  inline PolicyUsersResponse_Item(const PolicyUsersResponse_Item& from)
      : PolicyUsersResponse_Item(nullptr, from) {}
  PolicyUsersResponse_Item(PolicyUsersResponse_Item&& from) noexcept
    : PolicyUsersResponse_Item() {
    *this = ::std::move(from);
  }

  inline PolicyUsersResponse_Item& operator=(const PolicyUsersResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyUsersResponse_Item& operator=(PolicyUsersResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyUsersResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  enum IdCase {
    kI = 2,
    kS = 9,
    ID_NOT_SET = 0,
  };

  static inline const PolicyUsersResponse_Item* internal_default_instance() {
    return reinterpret_cast<const PolicyUsersResponse_Item*>(
               &_PolicyUsersResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PolicyUsersResponse_Item& a, PolicyUsersResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyUsersResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyUsersResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyUsersResponse_Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyUsersResponse_Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyUsersResponse_Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyUsersResponse_Item& from) {
    PolicyUsersResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyUsersResponse_Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyUsersResponse.Item";
  }
  protected:
  explicit PolicyUsersResponse_Item(::google::protobuf::Arena* arena);
  PolicyUsersResponse_Item(::google::protobuf::Arena* arena, const PolicyUsersResponse_Item& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 2,
    kSFieldNumber = 9,
  };
  // int64 i = 2;
  bool has_i() const;
  void clear_i() ;
  ::int64_t i() const;
  void set_i(::int64_t value);

  private:
  ::int64_t _internal_i() const;
  void _internal_set_i(::int64_t value);

  public:
  // string s = 9;
  bool has_s() const;
  void clear_s() ;
  const std::string& s() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_s(Arg_&& arg, Args_... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* value);

  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(
      const std::string& value);
  std::string* _internal_mutable_s();

  public:
  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyUsersResponse.Item)
 private:
  class _Internal;
  void set_has_i();
  void set_has_s();

  inline bool has_id() const;
  inline void clear_has_id();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union IdUnion {
      constexpr IdUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int64_t i_;
      ::google::protobuf::internal::ArenaStringPtr s_;
    } id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyRolesResponse_Item_Root final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyRolesResponse.Item.Root) */ {
 public:
  inline PolicyRolesResponse_Item_Root() : PolicyRolesResponse_Item_Root(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyRolesResponse_Item_Root(::google::protobuf::internal::ConstantInitialized);

  inline PolicyRolesResponse_Item_Root(const PolicyRolesResponse_Item_Root& from)
      : PolicyRolesResponse_Item_Root(nullptr, from) {}
  PolicyRolesResponse_Item_Root(PolicyRolesResponse_Item_Root&& from) noexcept
    : PolicyRolesResponse_Item_Root() {
    *this = ::std::move(from);
  }

  inline PolicyRolesResponse_Item_Root& operator=(const PolicyRolesResponse_Item_Root& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyRolesResponse_Item_Root& operator=(PolicyRolesResponse_Item_Root&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyRolesResponse_Item_Root& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyRolesResponse_Item_Root* internal_default_instance() {
    return reinterpret_cast<const PolicyRolesResponse_Item_Root*>(
               &_PolicyRolesResponse_Item_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PolicyRolesResponse_Item_Root& a, PolicyRolesResponse_Item_Root& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyRolesResponse_Item_Root* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyRolesResponse_Item_Root* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyRolesResponse_Item_Root* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyRolesResponse_Item_Root>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PolicyRolesResponse_Item_Root& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PolicyRolesResponse_Item_Root& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyRolesResponse.Item.Root";
  }
  protected:
  explicit PolicyRolesResponse_Item_Root(::google::protobuf::Arena* arena);
  PolicyRolesResponse_Item_Root(::google::protobuf::Arena* arena, const PolicyRolesResponse_Item_Root& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyRolesResponse.Item.Root)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyRolesResponse_Item_Administrator final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyRolesResponse.Item.Administrator) */ {
 public:
  inline PolicyRolesResponse_Item_Administrator() : PolicyRolesResponse_Item_Administrator(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyRolesResponse_Item_Administrator(::google::protobuf::internal::ConstantInitialized);

  inline PolicyRolesResponse_Item_Administrator(const PolicyRolesResponse_Item_Administrator& from)
      : PolicyRolesResponse_Item_Administrator(nullptr, from) {}
  PolicyRolesResponse_Item_Administrator(PolicyRolesResponse_Item_Administrator&& from) noexcept
    : PolicyRolesResponse_Item_Administrator() {
    *this = ::std::move(from);
  }

  inline PolicyRolesResponse_Item_Administrator& operator=(const PolicyRolesResponse_Item_Administrator& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyRolesResponse_Item_Administrator& operator=(PolicyRolesResponse_Item_Administrator&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyRolesResponse_Item_Administrator& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyRolesResponse_Item_Administrator* internal_default_instance() {
    return reinterpret_cast<const PolicyRolesResponse_Item_Administrator*>(
               &_PolicyRolesResponse_Item_Administrator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PolicyRolesResponse_Item_Administrator& a, PolicyRolesResponse_Item_Administrator& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyRolesResponse_Item_Administrator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyRolesResponse_Item_Administrator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyRolesResponse_Item_Administrator* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyRolesResponse_Item_Administrator>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PolicyRolesResponse_Item_Administrator& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PolicyRolesResponse_Item_Administrator& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyRolesResponse.Item.Administrator";
  }
  protected:
  explicit PolicyRolesResponse_Item_Administrator(::google::protobuf::Arena* arena);
  PolicyRolesResponse_Item_Administrator(::google::protobuf::Arena* arena, const PolicyRolesResponse_Item_Administrator& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyRolesResponse.Item.Administrator)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Resource_Id final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id) */ {
 public:
  inline PolicyPermissionsResponse_Item_Resource_Id() : PolicyPermissionsResponse_Item_Resource_Id(nullptr) {}
  ~PolicyPermissionsResponse_Item_Resource_Id() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Resource_Id(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Resource_Id(const PolicyPermissionsResponse_Item_Resource_Id& from)
      : PolicyPermissionsResponse_Item_Resource_Id(nullptr, from) {}
  PolicyPermissionsResponse_Item_Resource_Id(PolicyPermissionsResponse_Item_Resource_Id&& from) noexcept
    : PolicyPermissionsResponse_Item_Resource_Id() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Resource_Id& operator=(const PolicyPermissionsResponse_Item_Resource_Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Resource_Id& operator=(PolicyPermissionsResponse_Item_Resource_Id&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Resource_Id& default_instance() {
    return *internal_default_instance();
  }
  enum ByCase {
    kI = 11,
    kS = 12,
    BY_NOT_SET = 0,
  };

  static inline const PolicyPermissionsResponse_Item_Resource_Id* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Resource_Id*>(
               &_PolicyPermissionsResponse_Item_Resource_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PolicyPermissionsResponse_Item_Resource_Id& a, PolicyPermissionsResponse_Item_Resource_Id& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Resource_Id* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Resource_Id* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Resource_Id* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Resource_Id>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyPermissionsResponse_Item_Resource_Id& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyPermissionsResponse_Item_Resource_Id& from) {
    PolicyPermissionsResponse_Item_Resource_Id::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyPermissionsResponse_Item_Resource_Id* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Resource_Id(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Resource_Id(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Resource_Id& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 11,
    kSFieldNumber = 12,
  };
  // int64 i = 11;
  bool has_i() const;
  void clear_i() ;
  ::int64_t i() const;
  void set_i(::int64_t value);

  private:
  ::int64_t _internal_i() const;
  void _internal_set_i(::int64_t value);

  public:
  // string s = 12;
  bool has_s() const;
  void clear_s() ;
  const std::string& s() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_s(Arg_&& arg, Args_... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* value);

  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(
      const std::string& value);
  std::string* _internal_mutable_s();

  public:
  void clear_by();
  ByCase by_case() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id)
 private:
  class _Internal;
  void set_has_i();
  void set_has_s();

  inline bool has_by() const;
  inline void clear_has_by();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ByUnion {
      constexpr ByUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int64_t i_;
      ::google::protobuf::internal::ArenaStringPtr s_;
    } by_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Operation_Write final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Write) */ {
 public:
  inline PolicyPermissionsResponse_Item_Operation_Write() : PolicyPermissionsResponse_Item_Operation_Write(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Operation_Write(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Operation_Write(const PolicyPermissionsResponse_Item_Operation_Write& from)
      : PolicyPermissionsResponse_Item_Operation_Write(nullptr, from) {}
  PolicyPermissionsResponse_Item_Operation_Write(PolicyPermissionsResponse_Item_Operation_Write&& from) noexcept
    : PolicyPermissionsResponse_Item_Operation_Write() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Operation_Write& operator=(const PolicyPermissionsResponse_Item_Operation_Write& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Operation_Write& operator=(PolicyPermissionsResponse_Item_Operation_Write&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Operation_Write& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse_Item_Operation_Write* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Operation_Write*>(
               &_PolicyPermissionsResponse_Item_Operation_Write_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PolicyPermissionsResponse_Item_Operation_Write& a, PolicyPermissionsResponse_Item_Operation_Write& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Operation_Write* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Operation_Write* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Operation_Write* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Operation_Write>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PolicyPermissionsResponse_Item_Operation_Write& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PolicyPermissionsResponse_Item_Operation_Write& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Write";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Operation_Write(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Operation_Write(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Operation_Write& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Write)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Operation_Read final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Read) */ {
 public:
  inline PolicyPermissionsResponse_Item_Operation_Read() : PolicyPermissionsResponse_Item_Operation_Read(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Operation_Read(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Operation_Read(const PolicyPermissionsResponse_Item_Operation_Read& from)
      : PolicyPermissionsResponse_Item_Operation_Read(nullptr, from) {}
  PolicyPermissionsResponse_Item_Operation_Read(PolicyPermissionsResponse_Item_Operation_Read&& from) noexcept
    : PolicyPermissionsResponse_Item_Operation_Read() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Operation_Read& operator=(const PolicyPermissionsResponse_Item_Operation_Read& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Operation_Read& operator=(PolicyPermissionsResponse_Item_Operation_Read&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Operation_Read& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse_Item_Operation_Read* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Operation_Read*>(
               &_PolicyPermissionsResponse_Item_Operation_Read_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PolicyPermissionsResponse_Item_Operation_Read& a, PolicyPermissionsResponse_Item_Operation_Read& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Operation_Read* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Operation_Read* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Operation_Read* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Operation_Read>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PolicyPermissionsResponse_Item_Operation_Read& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PolicyPermissionsResponse_Item_Operation_Read& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Read";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Operation_Read(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Operation_Read(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Operation_Read& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Read)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Operation_Inquiry final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Inquiry) */ {
 public:
  inline PolicyPermissionsResponse_Item_Operation_Inquiry() : PolicyPermissionsResponse_Item_Operation_Inquiry(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Operation_Inquiry(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Operation_Inquiry(const PolicyPermissionsResponse_Item_Operation_Inquiry& from)
      : PolicyPermissionsResponse_Item_Operation_Inquiry(nullptr, from) {}
  PolicyPermissionsResponse_Item_Operation_Inquiry(PolicyPermissionsResponse_Item_Operation_Inquiry&& from) noexcept
    : PolicyPermissionsResponse_Item_Operation_Inquiry() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Operation_Inquiry& operator=(const PolicyPermissionsResponse_Item_Operation_Inquiry& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Operation_Inquiry& operator=(PolicyPermissionsResponse_Item_Operation_Inquiry&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Operation_Inquiry& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse_Item_Operation_Inquiry* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Operation_Inquiry*>(
               &_PolicyPermissionsResponse_Item_Operation_Inquiry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PolicyPermissionsResponse_Item_Operation_Inquiry& a, PolicyPermissionsResponse_Item_Operation_Inquiry& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Operation_Inquiry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Operation_Inquiry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Operation_Inquiry* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Operation_Inquiry>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PolicyPermissionsResponse_Item_Operation_Inquiry& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PolicyPermissionsResponse_Item_Operation_Inquiry& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Inquiry";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Operation_Inquiry(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Operation_Inquiry(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Operation_Inquiry& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Inquiry)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Operation_Execute final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Execute) */ {
 public:
  inline PolicyPermissionsResponse_Item_Operation_Execute() : PolicyPermissionsResponse_Item_Operation_Execute(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Operation_Execute(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Operation_Execute(const PolicyPermissionsResponse_Item_Operation_Execute& from)
      : PolicyPermissionsResponse_Item_Operation_Execute(nullptr, from) {}
  PolicyPermissionsResponse_Item_Operation_Execute(PolicyPermissionsResponse_Item_Operation_Execute&& from) noexcept
    : PolicyPermissionsResponse_Item_Operation_Execute() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Operation_Execute& operator=(const PolicyPermissionsResponse_Item_Operation_Execute& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Operation_Execute& operator=(PolicyPermissionsResponse_Item_Operation_Execute&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Operation_Execute& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse_Item_Operation_Execute* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Operation_Execute*>(
               &_PolicyPermissionsResponse_Item_Operation_Execute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PolicyPermissionsResponse_Item_Operation_Execute& a, PolicyPermissionsResponse_Item_Operation_Execute& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Operation_Execute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Operation_Execute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Operation_Execute* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Operation_Execute>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PolicyPermissionsResponse_Item_Operation_Execute& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PolicyPermissionsResponse_Item_Operation_Execute& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Execute";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Operation_Execute(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Operation_Execute(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Operation_Execute& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Execute)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Operation_Debit final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Debit) */ {
 public:
  inline PolicyPermissionsResponse_Item_Operation_Debit() : PolicyPermissionsResponse_Item_Operation_Debit(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Operation_Debit(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Operation_Debit(const PolicyPermissionsResponse_Item_Operation_Debit& from)
      : PolicyPermissionsResponse_Item_Operation_Debit(nullptr, from) {}
  PolicyPermissionsResponse_Item_Operation_Debit(PolicyPermissionsResponse_Item_Operation_Debit&& from) noexcept
    : PolicyPermissionsResponse_Item_Operation_Debit() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Operation_Debit& operator=(const PolicyPermissionsResponse_Item_Operation_Debit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Operation_Debit& operator=(PolicyPermissionsResponse_Item_Operation_Debit&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Operation_Debit& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse_Item_Operation_Debit* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Operation_Debit*>(
               &_PolicyPermissionsResponse_Item_Operation_Debit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PolicyPermissionsResponse_Item_Operation_Debit& a, PolicyPermissionsResponse_Item_Operation_Debit& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Operation_Debit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Operation_Debit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Operation_Debit* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Operation_Debit>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PolicyPermissionsResponse_Item_Operation_Debit& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PolicyPermissionsResponse_Item_Operation_Debit& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Debit";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Operation_Debit(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Operation_Debit(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Operation_Debit& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Debit)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Operation_Credit final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Credit) */ {
 public:
  inline PolicyPermissionsResponse_Item_Operation_Credit() : PolicyPermissionsResponse_Item_Operation_Credit(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Operation_Credit(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Operation_Credit(const PolicyPermissionsResponse_Item_Operation_Credit& from)
      : PolicyPermissionsResponse_Item_Operation_Credit(nullptr, from) {}
  PolicyPermissionsResponse_Item_Operation_Credit(PolicyPermissionsResponse_Item_Operation_Credit&& from) noexcept
    : PolicyPermissionsResponse_Item_Operation_Credit() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Operation_Credit& operator=(const PolicyPermissionsResponse_Item_Operation_Credit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Operation_Credit& operator=(PolicyPermissionsResponse_Item_Operation_Credit&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Operation_Credit& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse_Item_Operation_Credit* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Operation_Credit*>(
               &_PolicyPermissionsResponse_Item_Operation_Credit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PolicyPermissionsResponse_Item_Operation_Credit& a, PolicyPermissionsResponse_Item_Operation_Credit& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Operation_Credit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Operation_Credit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Operation_Credit* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Operation_Credit>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PolicyPermissionsResponse_Item_Operation_Credit& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PolicyPermissionsResponse_Item_Operation_Credit& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Credit";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Operation_Credit(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Operation_Credit(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Operation_Credit& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Credit)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Operation_Append final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Append) */ {
 public:
  inline PolicyPermissionsResponse_Item_Operation_Append() : PolicyPermissionsResponse_Item_Operation_Append(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Operation_Append(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Operation_Append(const PolicyPermissionsResponse_Item_Operation_Append& from)
      : PolicyPermissionsResponse_Item_Operation_Append(nullptr, from) {}
  PolicyPermissionsResponse_Item_Operation_Append(PolicyPermissionsResponse_Item_Operation_Append&& from) noexcept
    : PolicyPermissionsResponse_Item_Operation_Append() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Operation_Append& operator=(const PolicyPermissionsResponse_Item_Operation_Append& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Operation_Append& operator=(PolicyPermissionsResponse_Item_Operation_Append&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Operation_Append& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse_Item_Operation_Append* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Operation_Append*>(
               &_PolicyPermissionsResponse_Item_Operation_Append_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PolicyPermissionsResponse_Item_Operation_Append& a, PolicyPermissionsResponse_Item_Operation_Append& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Operation_Append* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Operation_Append* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Operation_Append* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Operation_Append>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PolicyPermissionsResponse_Item_Operation_Append& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PolicyPermissionsResponse_Item_Operation_Append& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Append";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Operation_Append(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Operation_Append(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Operation_Append& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Append)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyUsersResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyUsersResponse) */ {
 public:
  inline PolicyUsersResponse() : PolicyUsersResponse(nullptr) {}
  ~PolicyUsersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyUsersResponse(::google::protobuf::internal::ConstantInitialized);

  inline PolicyUsersResponse(const PolicyUsersResponse& from)
      : PolicyUsersResponse(nullptr, from) {}
  PolicyUsersResponse(PolicyUsersResponse&& from) noexcept
    : PolicyUsersResponse() {
    *this = ::std::move(from);
  }

  inline PolicyUsersResponse& operator=(const PolicyUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyUsersResponse& operator=(PolicyUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyUsersResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyUsersResponse*>(
               &_PolicyUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PolicyUsersResponse& a, PolicyUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyUsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyUsersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyUsersResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyUsersResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyUsersResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyUsersResponse& from) {
    PolicyUsersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyUsersResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyUsersResponse";
  }
  protected:
  explicit PolicyUsersResponse(::google::protobuf::Arena* arena);
  PolicyUsersResponse(::google::protobuf::Arena* arena, const PolicyUsersResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Item = PolicyUsersResponse_Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PolicyUsersResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::rbac::v1::PolicyUsersResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyUsersResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyUsersResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyUsersResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::rbac::v1::PolicyUsersResponse_Item& items(int index) const;
  ::palm::rbac::v1::PolicyUsersResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyUsersResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyUsersResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyUsersResponse_Item > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyRolesResponse_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyRolesResponse.Item) */ {
 public:
  inline PolicyRolesResponse_Item() : PolicyRolesResponse_Item(nullptr) {}
  ~PolicyRolesResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyRolesResponse_Item(::google::protobuf::internal::ConstantInitialized);

  inline PolicyRolesResponse_Item(const PolicyRolesResponse_Item& from)
      : PolicyRolesResponse_Item(nullptr, from) {}
  PolicyRolesResponse_Item(PolicyRolesResponse_Item&& from) noexcept
    : PolicyRolesResponse_Item() {
    *this = ::std::move(from);
  }

  inline PolicyRolesResponse_Item& operator=(const PolicyRolesResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyRolesResponse_Item& operator=(PolicyRolesResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyRolesResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  enum ByCase {
    kRoot = 1,
    kAdministrator = 2,
    kCode = 9,
    BY_NOT_SET = 0,
  };

  static inline const PolicyRolesResponse_Item* internal_default_instance() {
    return reinterpret_cast<const PolicyRolesResponse_Item*>(
               &_PolicyRolesResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PolicyRolesResponse_Item& a, PolicyRolesResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyRolesResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyRolesResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyRolesResponse_Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyRolesResponse_Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyRolesResponse_Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyRolesResponse_Item& from) {
    PolicyRolesResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyRolesResponse_Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyRolesResponse.Item";
  }
  protected:
  explicit PolicyRolesResponse_Item(::google::protobuf::Arena* arena);
  PolicyRolesResponse_Item(::google::protobuf::Arena* arena, const PolicyRolesResponse_Item& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Administrator = PolicyRolesResponse_Item_Administrator;
  using Root = PolicyRolesResponse_Item_Root;

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
    kAdministratorFieldNumber = 2,
    kCodeFieldNumber = 9,
  };
  // .palm.rbac.v1.PolicyRolesResponse.Item.Root root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;

  public:
  void clear_root() ;
  const ::palm::rbac::v1::PolicyRolesResponse_Item_Root& root() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyRolesResponse_Item_Root* release_root();
  ::palm::rbac::v1::PolicyRolesResponse_Item_Root* mutable_root();
  void set_allocated_root(::palm::rbac::v1::PolicyRolesResponse_Item_Root* value);
  void unsafe_arena_set_allocated_root(::palm::rbac::v1::PolicyRolesResponse_Item_Root* value);
  ::palm::rbac::v1::PolicyRolesResponse_Item_Root* unsafe_arena_release_root();

  private:
  const ::palm::rbac::v1::PolicyRolesResponse_Item_Root& _internal_root() const;
  ::palm::rbac::v1::PolicyRolesResponse_Item_Root* _internal_mutable_root();

  public:
  // .palm.rbac.v1.PolicyRolesResponse.Item.Administrator administrator = 2;
  bool has_administrator() const;
  private:
  bool _internal_has_administrator() const;

  public:
  void clear_administrator() ;
  const ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator& administrator() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* release_administrator();
  ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* mutable_administrator();
  void set_allocated_administrator(::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* value);
  void unsafe_arena_set_allocated_administrator(::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* value);
  ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* unsafe_arena_release_administrator();

  private:
  const ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator& _internal_administrator() const;
  ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* _internal_mutable_administrator();

  public:
  // string code = 9;
  bool has_code() const;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  void clear_by();
  ByCase by_case() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyRolesResponse.Item)
 private:
  class _Internal;
  void set_has_root();
  void set_has_administrator();
  void set_has_code();

  inline bool has_by() const;
  inline void clear_has_by();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 2,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ByUnion {
      constexpr ByUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::palm::rbac::v1::PolicyRolesResponse_Item_Root* root_;
      ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* administrator_;
      ::google::protobuf::internal::ArenaStringPtr code_;
    } by_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Resource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource) */ {
 public:
  inline PolicyPermissionsResponse_Item_Resource() : PolicyPermissionsResponse_Item_Resource(nullptr) {}
  ~PolicyPermissionsResponse_Item_Resource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Resource(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Resource(const PolicyPermissionsResponse_Item_Resource& from)
      : PolicyPermissionsResponse_Item_Resource(nullptr, from) {}
  PolicyPermissionsResponse_Item_Resource(PolicyPermissionsResponse_Item_Resource&& from) noexcept
    : PolicyPermissionsResponse_Item_Resource() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Resource& operator=(const PolicyPermissionsResponse_Item_Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Resource& operator=(PolicyPermissionsResponse_Item_Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse_Item_Resource* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Resource*>(
               &_PolicyPermissionsResponse_Item_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PolicyPermissionsResponse_Item_Resource& a, PolicyPermissionsResponse_Item_Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Resource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Resource* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Resource>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyPermissionsResponse_Item_Resource& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyPermissionsResponse_Item_Resource& from) {
    PolicyPermissionsResponse_Item_Resource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyPermissionsResponse_Item_Resource* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Resource";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Resource(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Resource(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Resource& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Id = PolicyPermissionsResponse_Item_Resource_Id;

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional .palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id id = 2;
  bool has_id() const;
  void clear_id() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id& id() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* release_id();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* mutable_id();
  void set_allocated_id(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* value);
  void unsafe_arena_set_allocated_id(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* unsafe_arena_release_id();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id& _internal_id() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item_Operation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation) */ {
 public:
  inline PolicyPermissionsResponse_Item_Operation() : PolicyPermissionsResponse_Item_Operation(nullptr) {}
  ~PolicyPermissionsResponse_Item_Operation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item_Operation(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item_Operation(const PolicyPermissionsResponse_Item_Operation& from)
      : PolicyPermissionsResponse_Item_Operation(nullptr, from) {}
  PolicyPermissionsResponse_Item_Operation(PolicyPermissionsResponse_Item_Operation&& from) noexcept
    : PolicyPermissionsResponse_Item_Operation() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item_Operation& operator=(const PolicyPermissionsResponse_Item_Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item_Operation& operator=(PolicyPermissionsResponse_Item_Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item_Operation& default_instance() {
    return *internal_default_instance();
  }
  enum ByCase {
    kRead = 1,
    kWrite = 2,
    kAppend = 3,
    kExecute = 4,
    kCredit = 5,
    kDebit = 6,
    kInquiry = 7,
    kCode = 99,
    BY_NOT_SET = 0,
  };

  static inline const PolicyPermissionsResponse_Item_Operation* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item_Operation*>(
               &_PolicyPermissionsResponse_Item_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PolicyPermissionsResponse_Item_Operation& a, PolicyPermissionsResponse_Item_Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item_Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item_Operation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item_Operation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item_Operation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyPermissionsResponse_Item_Operation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyPermissionsResponse_Item_Operation& from) {
    PolicyPermissionsResponse_Item_Operation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyPermissionsResponse_Item_Operation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item.Operation";
  }
  protected:
  explicit PolicyPermissionsResponse_Item_Operation(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item_Operation(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item_Operation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Read = PolicyPermissionsResponse_Item_Operation_Read;
  using Write = PolicyPermissionsResponse_Item_Operation_Write;
  using Append = PolicyPermissionsResponse_Item_Operation_Append;
  using Execute = PolicyPermissionsResponse_Item_Operation_Execute;
  using Credit = PolicyPermissionsResponse_Item_Operation_Credit;
  using Debit = PolicyPermissionsResponse_Item_Operation_Debit;
  using Inquiry = PolicyPermissionsResponse_Item_Operation_Inquiry;

  // accessors -------------------------------------------------------

  enum : int {
    kReadFieldNumber = 1,
    kWriteFieldNumber = 2,
    kAppendFieldNumber = 3,
    kExecuteFieldNumber = 4,
    kCreditFieldNumber = 5,
    kDebitFieldNumber = 6,
    kInquiryFieldNumber = 7,
    kCodeFieldNumber = 99,
  };
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Read read = 1;
  bool has_read() const;
  private:
  bool _internal_has_read() const;

  public:
  void clear_read() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read& read() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* release_read();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* mutable_read();
  void set_allocated_read(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* value);
  void unsafe_arena_set_allocated_read(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* unsafe_arena_release_read();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read& _internal_read() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* _internal_mutable_read();

  public:
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Write write = 2;
  bool has_write() const;
  private:
  bool _internal_has_write() const;

  public:
  void clear_write() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write& write() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* release_write();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* mutable_write();
  void set_allocated_write(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* value);
  void unsafe_arena_set_allocated_write(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* unsafe_arena_release_write();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write& _internal_write() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* _internal_mutable_write();

  public:
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Append append = 3;
  bool has_append() const;
  private:
  bool _internal_has_append() const;

  public:
  void clear_append() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append& append() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* release_append();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* mutable_append();
  void set_allocated_append(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* value);
  void unsafe_arena_set_allocated_append(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* unsafe_arena_release_append();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append& _internal_append() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* _internal_mutable_append();

  public:
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Execute execute = 4;
  bool has_execute() const;
  private:
  bool _internal_has_execute() const;

  public:
  void clear_execute() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute& execute() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* release_execute();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* mutable_execute();
  void set_allocated_execute(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* value);
  void unsafe_arena_set_allocated_execute(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* unsafe_arena_release_execute();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute& _internal_execute() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* _internal_mutable_execute();

  public:
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Credit credit = 5;
  bool has_credit() const;
  private:
  bool _internal_has_credit() const;

  public:
  void clear_credit() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit& credit() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* release_credit();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* mutable_credit();
  void set_allocated_credit(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* value);
  void unsafe_arena_set_allocated_credit(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* unsafe_arena_release_credit();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit& _internal_credit() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* _internal_mutable_credit();

  public:
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Debit debit = 6;
  bool has_debit() const;
  private:
  bool _internal_has_debit() const;

  public:
  void clear_debit() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit& debit() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* release_debit();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* mutable_debit();
  void set_allocated_debit(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* value);
  void unsafe_arena_set_allocated_debit(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* unsafe_arena_release_debit();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit& _internal_debit() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* _internal_mutable_debit();

  public:
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Inquiry inquiry = 7;
  bool has_inquiry() const;
  private:
  bool _internal_has_inquiry() const;

  public:
  void clear_inquiry() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry& inquiry() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* release_inquiry();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* mutable_inquiry();
  void set_allocated_inquiry(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* value);
  void unsafe_arena_set_allocated_inquiry(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* unsafe_arena_release_inquiry();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry& _internal_inquiry() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* _internal_mutable_inquiry();

  public:
  // string code = 99;
  bool has_code() const;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  void clear_by();
  ByCase by_case() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation)
 private:
  class _Internal;
  void set_has_read();
  void set_has_write();
  void set_has_append();
  void set_has_execute();
  void set_has_credit();
  void set_has_debit();
  void set_has_inquiry();
  void set_has_code();

  inline bool has_by() const;
  inline void clear_has_by();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 8, 7,
      74, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ByUnion {
      constexpr ByUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* read_;
      ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* write_;
      ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* append_;
      ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* execute_;
      ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* credit_;
      ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* debit_;
      ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* inquiry_;
      ::google::protobuf::internal::ArenaStringPtr code_;
    } by_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyRolesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyRolesResponse) */ {
 public:
  inline PolicyRolesResponse() : PolicyRolesResponse(nullptr) {}
  ~PolicyRolesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyRolesResponse(::google::protobuf::internal::ConstantInitialized);

  inline PolicyRolesResponse(const PolicyRolesResponse& from)
      : PolicyRolesResponse(nullptr, from) {}
  PolicyRolesResponse(PolicyRolesResponse&& from) noexcept
    : PolicyRolesResponse() {
    *this = ::std::move(from);
  }

  inline PolicyRolesResponse& operator=(const PolicyRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyRolesResponse& operator=(PolicyRolesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyRolesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyRolesResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyRolesResponse*>(
               &_PolicyRolesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PolicyRolesResponse& a, PolicyRolesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyRolesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyRolesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyRolesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyRolesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyRolesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyRolesResponse& from) {
    PolicyRolesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyRolesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyRolesResponse";
  }
  protected:
  explicit PolicyRolesResponse(::google::protobuf::Arena* arena);
  PolicyRolesResponse(::google::protobuf::Arena* arena, const PolicyRolesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Item = PolicyRolesResponse_Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PolicyRolesResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::rbac::v1::PolicyRolesResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyRolesResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::rbac::v1::PolicyRolesResponse_Item& items(int index) const;
  ::palm::rbac::v1::PolicyRolesResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyRolesResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyRolesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyRolesResponse_Item > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyRolesForUserRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyRolesForUserRequest) */ {
 public:
  inline PolicyRolesForUserRequest() : PolicyRolesForUserRequest(nullptr) {}
  ~PolicyRolesForUserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyRolesForUserRequest(::google::protobuf::internal::ConstantInitialized);

  inline PolicyRolesForUserRequest(const PolicyRolesForUserRequest& from)
      : PolicyRolesForUserRequest(nullptr, from) {}
  PolicyRolesForUserRequest(PolicyRolesForUserRequest&& from) noexcept
    : PolicyRolesForUserRequest() {
    *this = ::std::move(from);
  }

  inline PolicyRolesForUserRequest& operator=(const PolicyRolesForUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyRolesForUserRequest& operator=(PolicyRolesForUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyRolesForUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyRolesForUserRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyRolesForUserRequest*>(
               &_PolicyRolesForUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PolicyRolesForUserRequest& a, PolicyRolesForUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyRolesForUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyRolesForUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyRolesForUserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyRolesForUserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyRolesForUserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyRolesForUserRequest& from) {
    PolicyRolesForUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyRolesForUserRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyRolesForUserRequest";
  }
  protected:
  explicit PolicyRolesForUserRequest(::google::protobuf::Arena* arena);
  PolicyRolesForUserRequest(::google::protobuf::Arena* arena, const PolicyRolesForUserRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PolicyRolesResponse.Item roles = 2;
  int roles_size() const;
  private:
  int _internal_roles_size() const;

  public:
  void clear_roles() ;
  ::palm::rbac::v1::PolicyRolesResponse_Item* mutable_roles(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyRolesResponse_Item >*
      mutable_roles();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>& _internal_roles() const;
  ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>* _internal_mutable_roles();
  public:
  const ::palm::rbac::v1::PolicyRolesResponse_Item& roles(int index) const;
  ::palm::rbac::v1::PolicyRolesResponse_Item* add_roles();
  const ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyRolesResponse_Item >&
      roles() const;
  // .palm.rbac.v1.PolicyUsersResponse.Item user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::palm::rbac::v1::PolicyUsersResponse_Item& user() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyUsersResponse_Item* release_user();
  ::palm::rbac::v1::PolicyUsersResponse_Item* mutable_user();
  void set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value);
  void unsafe_arena_set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value);
  ::palm::rbac::v1::PolicyUsersResponse_Item* unsafe_arena_release_user();

  private:
  const ::palm::rbac::v1::PolicyUsersResponse_Item& _internal_user() const;
  ::palm::rbac::v1::PolicyUsersResponse_Item* _internal_mutable_user();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyRolesForUserRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyRolesResponse_Item > roles_;
    ::palm::rbac::v1::PolicyUsersResponse_Item* user_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse.Item) */ {
 public:
  inline PolicyPermissionsResponse_Item() : PolicyPermissionsResponse_Item(nullptr) {}
  ~PolicyPermissionsResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse_Item(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse_Item(const PolicyPermissionsResponse_Item& from)
      : PolicyPermissionsResponse_Item(nullptr, from) {}
  PolicyPermissionsResponse_Item(PolicyPermissionsResponse_Item&& from) noexcept
    : PolicyPermissionsResponse_Item() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse_Item& operator=(const PolicyPermissionsResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse_Item& operator=(PolicyPermissionsResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse_Item* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse_Item*>(
               &_PolicyPermissionsResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PolicyPermissionsResponse_Item& a, PolicyPermissionsResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse_Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse_Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyPermissionsResponse_Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyPermissionsResponse_Item& from) {
    PolicyPermissionsResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyPermissionsResponse_Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse.Item";
  }
  protected:
  explicit PolicyPermissionsResponse_Item(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse_Item(::google::protobuf::Arena* arena, const PolicyPermissionsResponse_Item& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Resource = PolicyPermissionsResponse_Item_Resource;
  using Operation = PolicyPermissionsResponse_Item_Operation;

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
    kOperationFieldNumber = 2,
  };
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Resource resource = 1;
  bool has_resource() const;
  void clear_resource() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource& resource() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* release_resource();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* mutable_resource();
  void set_allocated_resource(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* value);
  void unsafe_arena_set_allocated_resource(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* unsafe_arena_release_resource();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource& _internal_resource() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* _internal_mutable_resource();

  public:
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation operation = 2;
  bool has_operation() const;
  void clear_operation() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation& operation() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* release_operation();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* mutable_operation();
  void set_allocated_operation(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* value);
  void unsafe_arena_set_allocated_operation(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* unsafe_arena_release_operation();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation& _internal_operation() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* _internal_mutable_operation();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse.Item)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* resource_;
    ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* operation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyHasRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyHasRequest) */ {
 public:
  inline PolicyHasRequest() : PolicyHasRequest(nullptr) {}
  ~PolicyHasRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyHasRequest(::google::protobuf::internal::ConstantInitialized);

  inline PolicyHasRequest(const PolicyHasRequest& from)
      : PolicyHasRequest(nullptr, from) {}
  PolicyHasRequest(PolicyHasRequest&& from) noexcept
    : PolicyHasRequest() {
    *this = ::std::move(from);
  }

  inline PolicyHasRequest& operator=(const PolicyHasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyHasRequest& operator=(PolicyHasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyHasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyHasRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyHasRequest*>(
               &_PolicyHasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PolicyHasRequest& a, PolicyHasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyHasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyHasRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyHasRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyHasRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyHasRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyHasRequest& from) {
    PolicyHasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyHasRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyHasRequest";
  }
  protected:
  explicit PolicyHasRequest(::google::protobuf::Arena* arena);
  PolicyHasRequest(::google::protobuf::Arena* arena, const PolicyHasRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kRoleFieldNumber = 2,
  };
  // .palm.rbac.v1.PolicyUsersResponse.Item user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::palm::rbac::v1::PolicyUsersResponse_Item& user() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyUsersResponse_Item* release_user();
  ::palm::rbac::v1::PolicyUsersResponse_Item* mutable_user();
  void set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value);
  void unsafe_arena_set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value);
  ::palm::rbac::v1::PolicyUsersResponse_Item* unsafe_arena_release_user();

  private:
  const ::palm::rbac::v1::PolicyUsersResponse_Item& _internal_user() const;
  ::palm::rbac::v1::PolicyUsersResponse_Item* _internal_mutable_user();

  public:
  // .palm.rbac.v1.PolicyRolesResponse.Item role = 2;
  bool has_role() const;
  void clear_role() ;
  const ::palm::rbac::v1::PolicyRolesResponse_Item& role() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyRolesResponse_Item* release_role();
  ::palm::rbac::v1::PolicyRolesResponse_Item* mutable_role();
  void set_allocated_role(::palm::rbac::v1::PolicyRolesResponse_Item* value);
  void unsafe_arena_set_allocated_role(::palm::rbac::v1::PolicyRolesResponse_Item* value);
  ::palm::rbac::v1::PolicyRolesResponse_Item* unsafe_arena_release_role();

  private:
  const ::palm::rbac::v1::PolicyRolesResponse_Item& _internal_role() const;
  ::palm::rbac::v1::PolicyRolesResponse_Item* _internal_mutable_role();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyHasRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::palm::rbac::v1::PolicyUsersResponse_Item* user_;
    ::palm::rbac::v1::PolicyRolesResponse_Item* role_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyCanRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyCanRequest) */ {
 public:
  inline PolicyCanRequest() : PolicyCanRequest(nullptr) {}
  ~PolicyCanRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyCanRequest(::google::protobuf::internal::ConstantInitialized);

  inline PolicyCanRequest(const PolicyCanRequest& from)
      : PolicyCanRequest(nullptr, from) {}
  PolicyCanRequest(PolicyCanRequest&& from) noexcept
    : PolicyCanRequest() {
    *this = ::std::move(from);
  }

  inline PolicyCanRequest& operator=(const PolicyCanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyCanRequest& operator=(PolicyCanRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyCanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyCanRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyCanRequest*>(
               &_PolicyCanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PolicyCanRequest& a, PolicyCanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyCanRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyCanRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyCanRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyCanRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyCanRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyCanRequest& from) {
    PolicyCanRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyCanRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyCanRequest";
  }
  protected:
  explicit PolicyCanRequest(::google::protobuf::Arena* arena);
  PolicyCanRequest(::google::protobuf::Arena* arena, const PolicyCanRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kResourceFieldNumber = 2,
    kOperationFieldNumber = 3,
  };
  // .palm.rbac.v1.PolicyUsersResponse.Item user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::palm::rbac::v1::PolicyUsersResponse_Item& user() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyUsersResponse_Item* release_user();
  ::palm::rbac::v1::PolicyUsersResponse_Item* mutable_user();
  void set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value);
  void unsafe_arena_set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value);
  ::palm::rbac::v1::PolicyUsersResponse_Item* unsafe_arena_release_user();

  private:
  const ::palm::rbac::v1::PolicyUsersResponse_Item& _internal_user() const;
  ::palm::rbac::v1::PolicyUsersResponse_Item* _internal_mutable_user();

  public:
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Resource resource = 2;
  bool has_resource() const;
  void clear_resource() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource& resource() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* release_resource();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* mutable_resource();
  void set_allocated_resource(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* value);
  void unsafe_arena_set_allocated_resource(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* unsafe_arena_release_resource();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource& _internal_resource() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* _internal_mutable_resource();

  public:
  // .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation operation = 3;
  bool has_operation() const;
  void clear_operation() ;
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation& operation() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* release_operation();
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* mutable_operation();
  void set_allocated_operation(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* value);
  void unsafe_arena_set_allocated_operation(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* value);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* unsafe_arena_release_operation();

  private:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation& _internal_operation() const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* _internal_mutable_operation();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyCanRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::palm::rbac::v1::PolicyUsersResponse_Item* user_;
    ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* resource_;
    ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* operation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsResponse) */ {
 public:
  inline PolicyPermissionsResponse() : PolicyPermissionsResponse(nullptr) {}
  ~PolicyPermissionsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsResponse(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsResponse(const PolicyPermissionsResponse& from)
      : PolicyPermissionsResponse(nullptr, from) {}
  PolicyPermissionsResponse(PolicyPermissionsResponse&& from) noexcept
    : PolicyPermissionsResponse() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsResponse& operator=(const PolicyPermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsResponse& operator=(PolicyPermissionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsResponse*>(
               &_PolicyPermissionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PolicyPermissionsResponse& a, PolicyPermissionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyPermissionsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyPermissionsResponse& from) {
    PolicyPermissionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyPermissionsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsResponse";
  }
  protected:
  explicit PolicyPermissionsResponse(::google::protobuf::Arena* arena);
  PolicyPermissionsResponse(::google::protobuf::Arena* arena, const PolicyPermissionsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Item = PolicyPermissionsResponse_Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PolicyPermissionsResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyPermissionsResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item& items(int index) const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyPermissionsResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyPermissionsResponse_Item > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsForUserRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsForUserRequest) */ {
 public:
  inline PolicyPermissionsForUserRequest() : PolicyPermissionsForUserRequest(nullptr) {}
  ~PolicyPermissionsForUserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsForUserRequest(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsForUserRequest(const PolicyPermissionsForUserRequest& from)
      : PolicyPermissionsForUserRequest(nullptr, from) {}
  PolicyPermissionsForUserRequest(PolicyPermissionsForUserRequest&& from) noexcept
    : PolicyPermissionsForUserRequest() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsForUserRequest& operator=(const PolicyPermissionsForUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsForUserRequest& operator=(PolicyPermissionsForUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsForUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsForUserRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsForUserRequest*>(
               &_PolicyPermissionsForUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PolicyPermissionsForUserRequest& a, PolicyPermissionsForUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsForUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsForUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsForUserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsForUserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyPermissionsForUserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyPermissionsForUserRequest& from) {
    PolicyPermissionsForUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyPermissionsForUserRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsForUserRequest";
  }
  protected:
  explicit PolicyPermissionsForUserRequest(::google::protobuf::Arena* arena);
  PolicyPermissionsForUserRequest(::google::protobuf::Arena* arena, const PolicyPermissionsForUserRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PolicyPermissionsResponse.Item permissions = 2;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item* mutable_permissions(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyPermissionsResponse_Item >*
      mutable_permissions();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>& _internal_permissions() const;
  ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>* _internal_mutable_permissions();
  public:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item& permissions(int index) const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item* add_permissions();
  const ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyPermissionsResponse_Item >&
      permissions() const;
  // .palm.rbac.v1.PolicyUsersResponse.Item user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::palm::rbac::v1::PolicyUsersResponse_Item& user() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyUsersResponse_Item* release_user();
  ::palm::rbac::v1::PolicyUsersResponse_Item* mutable_user();
  void set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value);
  void unsafe_arena_set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value);
  ::palm::rbac::v1::PolicyUsersResponse_Item* unsafe_arena_release_user();

  private:
  const ::palm::rbac::v1::PolicyUsersResponse_Item& _internal_user() const;
  ::palm::rbac::v1::PolicyUsersResponse_Item* _internal_mutable_user();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsForUserRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyPermissionsResponse_Item > permissions_;
    ::palm::rbac::v1::PolicyUsersResponse_Item* user_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PolicyPermissionsForRoleRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PolicyPermissionsForRoleRequest) */ {
 public:
  inline PolicyPermissionsForRoleRequest() : PolicyPermissionsForRoleRequest(nullptr) {}
  ~PolicyPermissionsForRoleRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyPermissionsForRoleRequest(::google::protobuf::internal::ConstantInitialized);

  inline PolicyPermissionsForRoleRequest(const PolicyPermissionsForRoleRequest& from)
      : PolicyPermissionsForRoleRequest(nullptr, from) {}
  PolicyPermissionsForRoleRequest(PolicyPermissionsForRoleRequest&& from) noexcept
    : PolicyPermissionsForRoleRequest() {
    *this = ::std::move(from);
  }

  inline PolicyPermissionsForRoleRequest& operator=(const PolicyPermissionsForRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyPermissionsForRoleRequest& operator=(PolicyPermissionsForRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyPermissionsForRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyPermissionsForRoleRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyPermissionsForRoleRequest*>(
               &_PolicyPermissionsForRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PolicyPermissionsForRoleRequest& a, PolicyPermissionsForRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyPermissionsForRoleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyPermissionsForRoleRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyPermissionsForRoleRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyPermissionsForRoleRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyPermissionsForRoleRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PolicyPermissionsForRoleRequest& from) {
    PolicyPermissionsForRoleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PolicyPermissionsForRoleRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PolicyPermissionsForRoleRequest";
  }
  protected:
  explicit PolicyPermissionsForRoleRequest(::google::protobuf::Arena* arena);
  PolicyPermissionsForRoleRequest(::google::protobuf::Arena* arena, const PolicyPermissionsForRoleRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 2,
    kRoleFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PolicyPermissionsResponse.Item permissions = 2;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item* mutable_permissions(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyPermissionsResponse_Item >*
      mutable_permissions();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>& _internal_permissions() const;
  ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>* _internal_mutable_permissions();
  public:
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item& permissions(int index) const;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item* add_permissions();
  const ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyPermissionsResponse_Item >&
      permissions() const;
  // .palm.rbac.v1.PolicyRolesResponse.Item role = 1;
  bool has_role() const;
  void clear_role() ;
  const ::palm::rbac::v1::PolicyRolesResponse_Item& role() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::PolicyRolesResponse_Item* release_role();
  ::palm::rbac::v1::PolicyRolesResponse_Item* mutable_role();
  void set_allocated_role(::palm::rbac::v1::PolicyRolesResponse_Item* value);
  void unsafe_arena_set_allocated_role(::palm::rbac::v1::PolicyRolesResponse_Item* value);
  ::palm::rbac::v1::PolicyRolesResponse_Item* unsafe_arena_release_role();

  private:
  const ::palm::rbac::v1::PolicyRolesResponse_Item& _internal_role() const;
  ::palm::rbac::v1::PolicyRolesResponse_Item* _internal_mutable_role();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PolicyPermissionsForRoleRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PolicyPermissionsResponse_Item > permissions_;
    ::palm::rbac::v1::PolicyRolesResponse_Item* role_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PolicyHasRequest

// .palm.rbac.v1.PolicyUsersResponse.Item user = 1;
inline bool PolicyHasRequest::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void PolicyHasRequest::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::rbac::v1::PolicyUsersResponse_Item& PolicyHasRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyUsersResponse_Item* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyUsersResponse_Item&>(::palm::rbac::v1::_PolicyUsersResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::PolicyUsersResponse_Item& PolicyHasRequest::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyHasRequest.user)
  return _internal_user();
}
inline void PolicyHasRequest::unsafe_arena_set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyHasRequest.user)
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyHasRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyUsersResponse_Item* released = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyHasRequest::unsafe_arena_release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyHasRequest.user)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyUsersResponse_Item* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyHasRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyUsersResponse_Item>(GetArena());
    _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(p);
  }
  return _impl_.user_;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyHasRequest::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyUsersResponse_Item* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyHasRequest.user)
  return _msg;
}
inline void PolicyHasRequest::set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyHasRequest.user)
}

// .palm.rbac.v1.PolicyRolesResponse.Item role = 2;
inline bool PolicyHasRequest::has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.role_ != nullptr);
  return value;
}
inline void PolicyHasRequest::clear_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.role_ != nullptr) _impl_.role_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item& PolicyHasRequest::_internal_role() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyRolesResponse_Item* p = _impl_.role_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyRolesResponse_Item&>(::palm::rbac::v1::_PolicyRolesResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item& PolicyHasRequest::role() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyHasRequest.role)
  return _internal_role();
}
inline void PolicyHasRequest::unsafe_arena_set_allocated_role(::palm::rbac::v1::PolicyRolesResponse_Item* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.role_);
  }
  _impl_.role_ = reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyHasRequest.role)
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyHasRequest::release_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::rbac::v1::PolicyRolesResponse_Item* released = _impl_.role_;
  _impl_.role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyHasRequest::unsafe_arena_release_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyHasRequest.role)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::rbac::v1::PolicyRolesResponse_Item* temp = _impl_.role_;
  _impl_.role_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyHasRequest::_internal_mutable_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.role_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyRolesResponse_Item>(GetArena());
    _impl_.role_ = reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(p);
  }
  return _impl_.role_;
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyHasRequest::mutable_role() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyRolesResponse_Item* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyHasRequest.role)
  return _msg;
}
inline void PolicyHasRequest::set_allocated_role(::palm::rbac::v1::PolicyRolesResponse_Item* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(_impl_.role_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.role_ = reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyHasRequest.role)
}

// -------------------------------------------------------------------

// PolicyCanRequest

// .palm.rbac.v1.PolicyUsersResponse.Item user = 1;
inline bool PolicyCanRequest::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void PolicyCanRequest::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::rbac::v1::PolicyUsersResponse_Item& PolicyCanRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyUsersResponse_Item* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyUsersResponse_Item&>(::palm::rbac::v1::_PolicyUsersResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::PolicyUsersResponse_Item& PolicyCanRequest::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyCanRequest.user)
  return _internal_user();
}
inline void PolicyCanRequest::unsafe_arena_set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyCanRequest.user)
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyCanRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyUsersResponse_Item* released = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyCanRequest::unsafe_arena_release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyCanRequest.user)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyUsersResponse_Item* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyCanRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyUsersResponse_Item>(GetArena());
    _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(p);
  }
  return _impl_.user_;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyCanRequest::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyUsersResponse_Item* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyCanRequest.user)
  return _msg;
}
inline void PolicyCanRequest::set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyCanRequest.user)
}

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Resource resource = 2;
inline bool PolicyCanRequest::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline void PolicyCanRequest::clear_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.resource_ != nullptr) _impl_.resource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource& PolicyCanRequest::_internal_resource() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Resource_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource& PolicyCanRequest::resource() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyCanRequest.resource)
  return _internal_resource();
}
inline void PolicyCanRequest::unsafe_arena_set_allocated_resource(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyCanRequest.resource)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* PolicyCanRequest::release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* released = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* PolicyCanRequest::unsafe_arena_release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyCanRequest.resource)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* PolicyCanRequest::_internal_mutable_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource>(GetArena());
    _impl_.resource_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(p);
  }
  return _impl_.resource_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* PolicyCanRequest::mutable_resource() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyCanRequest.resource)
  return _msg;
}
inline void PolicyCanRequest::set_allocated_resource(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(_impl_.resource_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.resource_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyCanRequest.resource)
}

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation operation = 3;
inline bool PolicyCanRequest::has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.operation_ != nullptr);
  return value;
}
inline void PolicyCanRequest::clear_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.operation_ != nullptr) _impl_.operation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation& PolicyCanRequest::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* p = _impl_.operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Operation_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation& PolicyCanRequest::operation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyCanRequest.operation)
  return _internal_operation();
}
inline void PolicyCanRequest::unsafe_arena_set_allocated_operation(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.operation_);
  }
  _impl_.operation_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyCanRequest.operation)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* PolicyCanRequest::release_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* released = _impl_.operation_;
  _impl_.operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* PolicyCanRequest::unsafe_arena_release_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyCanRequest.operation)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* PolicyCanRequest::_internal_mutable_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation>(GetArena());
    _impl_.operation_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(p);
  }
  return _impl_.operation_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* PolicyCanRequest::mutable_operation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* _msg = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyCanRequest.operation)
  return _msg;
}
inline void PolicyCanRequest::set_allocated_operation(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(_impl_.operation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.operation_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyCanRequest.operation)
}

// -------------------------------------------------------------------

// PolicyUsersResponse_Item

// int64 i = 2;
inline bool PolicyUsersResponse_Item::has_i() const {
  return id_case() == kI;
}
inline void PolicyUsersResponse_Item::set_has_i() {
  _impl_._oneof_case_[0] = kI;
}
inline void PolicyUsersResponse_Item::clear_i() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_case() == kI) {
    _impl_.id_.i_ = ::int64_t{0};
    clear_has_id();
  }
}
inline ::int64_t PolicyUsersResponse_Item::i() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyUsersResponse.Item.i)
  return _internal_i();
}
inline void PolicyUsersResponse_Item::set_i(::int64_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PolicyUsersResponse.Item.i)
}
inline ::int64_t PolicyUsersResponse_Item::_internal_i() const {
  if (id_case() == kI) {
    return _impl_.id_.i_;
  }
  return ::int64_t{0};
}
inline void PolicyUsersResponse_Item::_internal_set_i(::int64_t value) {
  if (id_case() != kI) {
    clear_id();
    set_has_i();
  }
  _impl_.id_.i_ = value;
}

// string s = 9;
inline bool PolicyUsersResponse_Item::has_s() const {
  return id_case() == kS;
}
inline void PolicyUsersResponse_Item::set_has_s() {
  _impl_._oneof_case_[0] = kS;
}
inline void PolicyUsersResponse_Item::clear_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_case() == kS) {
    _impl_.id_.s_.Destroy();
    clear_has_id();
  }
}
inline const std::string& PolicyUsersResponse_Item::s() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyUsersResponse.Item.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyUsersResponse_Item::set_s(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_case() != kS) {
    clear_id();

    set_has_s();
    _impl_.id_.s_.InitDefault();
  }
  _impl_.id_.s_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PolicyUsersResponse.Item.s)
}
inline std::string* PolicyUsersResponse_Item::mutable_s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyUsersResponse.Item.s)
  return _s;
}
inline const std::string& PolicyUsersResponse_Item::_internal_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (id_case() != kS) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.id_.s_.Get();
}
inline void PolicyUsersResponse_Item::_internal_set_s(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_case() != kS) {
    clear_id();

    set_has_s();
    _impl_.id_.s_.InitDefault();
  }
  _impl_.id_.s_.Set(value, GetArena());
}
inline std::string* PolicyUsersResponse_Item::_internal_mutable_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_case() != kS) {
    clear_id();

    set_has_s();
    _impl_.id_.s_.InitDefault();
  }
  return _impl_.id_.s_.Mutable( GetArena());
}
inline std::string* PolicyUsersResponse_Item::release_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyUsersResponse.Item.s)
  if (id_case() != kS) {
    return nullptr;
  }
  clear_has_id();
  return _impl_.id_.s_.Release();
}
inline void PolicyUsersResponse_Item::set_allocated_s(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_id()) {
    clear_id();
  }
  if (value != nullptr) {
    set_has_s();
    _impl_.id_.s_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyUsersResponse.Item.s)
}

inline bool PolicyUsersResponse_Item::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void PolicyUsersResponse_Item::clear_has_id() {
  _impl_._oneof_case_[0] = ID_NOT_SET;
}
inline PolicyUsersResponse_Item::IdCase PolicyUsersResponse_Item::id_case() const {
  return PolicyUsersResponse_Item::IdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PolicyUsersResponse

// repeated .palm.rbac.v1.PolicyUsersResponse.Item items = 1;
inline int PolicyUsersResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int PolicyUsersResponse::items_size() const {
  return _internal_items_size();
}
inline void PolicyUsersResponse::clear_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.items_.Clear();
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyUsersResponse::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyUsersResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyUsersResponse_Item>* PolicyUsersResponse::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PolicyUsersResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::rbac::v1::PolicyUsersResponse_Item& PolicyUsersResponse::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyUsersResponse.items)
  return _internal_items().Get(index);
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyUsersResponse::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::rbac::v1::PolicyUsersResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PolicyUsersResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyUsersResponse_Item>& PolicyUsersResponse::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PolicyUsersResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyUsersResponse_Item>&
PolicyUsersResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyUsersResponse_Item>*
PolicyUsersResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// PolicyRolesResponse_Item_Administrator

// -------------------------------------------------------------------

// PolicyRolesResponse_Item_Root

// -------------------------------------------------------------------

// PolicyRolesResponse_Item

// .palm.rbac.v1.PolicyRolesResponse.Item.Root root = 1;
inline bool PolicyRolesResponse_Item::has_root() const {
  return by_case() == kRoot;
}
inline bool PolicyRolesResponse_Item::_internal_has_root() const {
  return by_case() == kRoot;
}
inline void PolicyRolesResponse_Item::set_has_root() {
  _impl_._oneof_case_[0] = kRoot;
}
inline void PolicyRolesResponse_Item::clear_root() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kRoot) {
    if (GetArena() == nullptr) {
      delete _impl_.by_.root_;
    }
    clear_has_by();
  }
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item_Root* PolicyRolesResponse_Item::release_root() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyRolesResponse.Item.root)
  if (by_case() == kRoot) {
    clear_has_by();
    auto* temp = _impl_.by_.root_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.by_.root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item_Root& PolicyRolesResponse_Item::_internal_root() const {
  return by_case() == kRoot ? *_impl_.by_.root_ : reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item_Root&>(::palm::rbac::v1::_PolicyRolesResponse_Item_Root_default_instance_);
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item_Root& PolicyRolesResponse_Item::root() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyRolesResponse.Item.root)
  return _internal_root();
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item_Root* PolicyRolesResponse_Item::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.rbac.v1.PolicyRolesResponse.Item.root)
  if (by_case() == kRoot) {
    clear_has_by();
    auto* temp = _impl_.by_.root_;
    _impl_.by_.root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyRolesResponse_Item::unsafe_arena_set_allocated_root(::palm::rbac::v1::PolicyRolesResponse_Item_Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_by();
  if (value) {
    set_has_root();
    _impl_.by_.root_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyRolesResponse.Item.root)
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item_Root* PolicyRolesResponse_Item::_internal_mutable_root() {
  if (by_case() != kRoot) {
    clear_by();
    set_has_root();
    _impl_.by_.root_ = CreateMaybeMessage<::palm::rbac::v1::PolicyRolesResponse_Item_Root>(GetArena());
  }
  return _impl_.by_.root_;
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item_Root* PolicyRolesResponse_Item::mutable_root() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyRolesResponse_Item_Root* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyRolesResponse.Item.root)
  return _msg;
}

// .palm.rbac.v1.PolicyRolesResponse.Item.Administrator administrator = 2;
inline bool PolicyRolesResponse_Item::has_administrator() const {
  return by_case() == kAdministrator;
}
inline bool PolicyRolesResponse_Item::_internal_has_administrator() const {
  return by_case() == kAdministrator;
}
inline void PolicyRolesResponse_Item::set_has_administrator() {
  _impl_._oneof_case_[0] = kAdministrator;
}
inline void PolicyRolesResponse_Item::clear_administrator() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kAdministrator) {
    if (GetArena() == nullptr) {
      delete _impl_.by_.administrator_;
    }
    clear_has_by();
  }
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* PolicyRolesResponse_Item::release_administrator() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyRolesResponse.Item.administrator)
  if (by_case() == kAdministrator) {
    clear_has_by();
    auto* temp = _impl_.by_.administrator_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.by_.administrator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator& PolicyRolesResponse_Item::_internal_administrator() const {
  return by_case() == kAdministrator ? *_impl_.by_.administrator_ : reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item_Administrator&>(::palm::rbac::v1::_PolicyRolesResponse_Item_Administrator_default_instance_);
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator& PolicyRolesResponse_Item::administrator() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyRolesResponse.Item.administrator)
  return _internal_administrator();
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* PolicyRolesResponse_Item::unsafe_arena_release_administrator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.rbac.v1.PolicyRolesResponse.Item.administrator)
  if (by_case() == kAdministrator) {
    clear_has_by();
    auto* temp = _impl_.by_.administrator_;
    _impl_.by_.administrator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyRolesResponse_Item::unsafe_arena_set_allocated_administrator(::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_by();
  if (value) {
    set_has_administrator();
    _impl_.by_.administrator_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyRolesResponse.Item.administrator)
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* PolicyRolesResponse_Item::_internal_mutable_administrator() {
  if (by_case() != kAdministrator) {
    clear_by();
    set_has_administrator();
    _impl_.by_.administrator_ = CreateMaybeMessage<::palm::rbac::v1::PolicyRolesResponse_Item_Administrator>(GetArena());
  }
  return _impl_.by_.administrator_;
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* PolicyRolesResponse_Item::mutable_administrator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyRolesResponse_Item_Administrator* _msg = _internal_mutable_administrator();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyRolesResponse.Item.administrator)
  return _msg;
}

// string code = 9;
inline bool PolicyRolesResponse_Item::has_code() const {
  return by_case() == kCode;
}
inline void PolicyRolesResponse_Item::set_has_code() {
  _impl_._oneof_case_[0] = kCode;
}
inline void PolicyRolesResponse_Item::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kCode) {
    _impl_.by_.code_.Destroy();
    clear_has_by();
  }
}
inline const std::string& PolicyRolesResponse_Item::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyRolesResponse.Item.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyRolesResponse_Item::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() != kCode) {
    clear_by();

    set_has_code();
    _impl_.by_.code_.InitDefault();
  }
  _impl_.by_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PolicyRolesResponse.Item.code)
}
inline std::string* PolicyRolesResponse_Item::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyRolesResponse.Item.code)
  return _s;
}
inline const std::string& PolicyRolesResponse_Item::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (by_case() != kCode) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.by_.code_.Get();
}
inline void PolicyRolesResponse_Item::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() != kCode) {
    clear_by();

    set_has_code();
    _impl_.by_.code_.InitDefault();
  }
  _impl_.by_.code_.Set(value, GetArena());
}
inline std::string* PolicyRolesResponse_Item::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() != kCode) {
    clear_by();

    set_has_code();
    _impl_.by_.code_.InitDefault();
  }
  return _impl_.by_.code_.Mutable( GetArena());
}
inline std::string* PolicyRolesResponse_Item::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyRolesResponse.Item.code)
  if (by_case() != kCode) {
    return nullptr;
  }
  clear_has_by();
  return _impl_.by_.code_.Release();
}
inline void PolicyRolesResponse_Item::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_by()) {
    clear_by();
  }
  if (value != nullptr) {
    set_has_code();
    _impl_.by_.code_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyRolesResponse.Item.code)
}

inline bool PolicyRolesResponse_Item::has_by() const {
  return by_case() != BY_NOT_SET;
}
inline void PolicyRolesResponse_Item::clear_has_by() {
  _impl_._oneof_case_[0] = BY_NOT_SET;
}
inline PolicyRolesResponse_Item::ByCase PolicyRolesResponse_Item::by_case() const {
  return PolicyRolesResponse_Item::ByCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PolicyRolesResponse

// repeated .palm.rbac.v1.PolicyRolesResponse.Item items = 1;
inline int PolicyRolesResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int PolicyRolesResponse::items_size() const {
  return _internal_items_size();
}
inline void PolicyRolesResponse::clear_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.items_.Clear();
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyRolesResponse::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyRolesResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>* PolicyRolesResponse::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PolicyRolesResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item& PolicyRolesResponse::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyRolesResponse.items)
  return _internal_items().Get(index);
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyRolesResponse::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::rbac::v1::PolicyRolesResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PolicyRolesResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>& PolicyRolesResponse::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PolicyRolesResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>&
PolicyRolesResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>*
PolicyRolesResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// PolicyRolesForUserRequest

// .palm.rbac.v1.PolicyUsersResponse.Item user = 1;
inline bool PolicyRolesForUserRequest::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void PolicyRolesForUserRequest::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::rbac::v1::PolicyUsersResponse_Item& PolicyRolesForUserRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyUsersResponse_Item* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyUsersResponse_Item&>(::palm::rbac::v1::_PolicyUsersResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::PolicyUsersResponse_Item& PolicyRolesForUserRequest::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyRolesForUserRequest.user)
  return _internal_user();
}
inline void PolicyRolesForUserRequest::unsafe_arena_set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyRolesForUserRequest.user)
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyRolesForUserRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyUsersResponse_Item* released = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyRolesForUserRequest::unsafe_arena_release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyRolesForUserRequest.user)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyUsersResponse_Item* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyRolesForUserRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyUsersResponse_Item>(GetArena());
    _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(p);
  }
  return _impl_.user_;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyRolesForUserRequest::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyUsersResponse_Item* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyRolesForUserRequest.user)
  return _msg;
}
inline void PolicyRolesForUserRequest::set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyRolesForUserRequest.user)
}

// repeated .palm.rbac.v1.PolicyRolesResponse.Item roles = 2;
inline int PolicyRolesForUserRequest::_internal_roles_size() const {
  return _internal_roles().size();
}
inline int PolicyRolesForUserRequest::roles_size() const {
  return _internal_roles_size();
}
inline void PolicyRolesForUserRequest::clear_roles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roles_.Clear();
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyRolesForUserRequest::mutable_roles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyRolesForUserRequest.roles)
  return _internal_mutable_roles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>* PolicyRolesForUserRequest::mutable_roles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PolicyRolesForUserRequest.roles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_roles();
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item& PolicyRolesForUserRequest::roles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyRolesForUserRequest.roles)
  return _internal_roles().Get(index);
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyRolesForUserRequest::add_roles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::rbac::v1::PolicyRolesResponse_Item* _add = _internal_mutable_roles()->Add();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PolicyRolesForUserRequest.roles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>& PolicyRolesForUserRequest::roles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PolicyRolesForUserRequest.roles)
  return _internal_roles();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>&
PolicyRolesForUserRequest::_internal_roles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roles_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyRolesResponse_Item>*
PolicyRolesForUserRequest::_internal_mutable_roles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.roles_;
}

// -------------------------------------------------------------------

// PolicyPermissionsForUserRequest

// .palm.rbac.v1.PolicyUsersResponse.Item user = 1;
inline bool PolicyPermissionsForUserRequest::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void PolicyPermissionsForUserRequest::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::rbac::v1::PolicyUsersResponse_Item& PolicyPermissionsForUserRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyUsersResponse_Item* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyUsersResponse_Item&>(::palm::rbac::v1::_PolicyUsersResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::PolicyUsersResponse_Item& PolicyPermissionsForUserRequest::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsForUserRequest.user)
  return _internal_user();
}
inline void PolicyPermissionsForUserRequest::unsafe_arena_set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsForUserRequest.user)
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyPermissionsForUserRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyUsersResponse_Item* released = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyPermissionsForUserRequest::unsafe_arena_release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsForUserRequest.user)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyUsersResponse_Item* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyPermissionsForUserRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyUsersResponse_Item>(GetArena());
    _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(p);
  }
  return _impl_.user_;
}
inline ::palm::rbac::v1::PolicyUsersResponse_Item* PolicyPermissionsForUserRequest::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyUsersResponse_Item* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsForUserRequest.user)
  return _msg;
}
inline void PolicyPermissionsForUserRequest::set_allocated_user(::palm::rbac::v1::PolicyUsersResponse_Item* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_ = reinterpret_cast<::palm::rbac::v1::PolicyUsersResponse_Item*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyPermissionsForUserRequest.user)
}

// repeated .palm.rbac.v1.PolicyPermissionsResponse.Item permissions = 2;
inline int PolicyPermissionsForUserRequest::_internal_permissions_size() const {
  return _internal_permissions().size();
}
inline int PolicyPermissionsForUserRequest::permissions_size() const {
  return _internal_permissions_size();
}
inline void PolicyPermissionsForUserRequest::clear_permissions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.permissions_.Clear();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item* PolicyPermissionsForUserRequest::mutable_permissions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsForUserRequest.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>* PolicyPermissionsForUserRequest::mutable_permissions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PolicyPermissionsForUserRequest.permissions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_permissions();
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item& PolicyPermissionsForUserRequest::permissions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsForUserRequest.permissions)
  return _internal_permissions().Get(index);
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item* PolicyPermissionsForUserRequest::add_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item* _add = _internal_mutable_permissions()->Add();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PolicyPermissionsForUserRequest.permissions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>& PolicyPermissionsForUserRequest::permissions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PolicyPermissionsForUserRequest.permissions)
  return _internal_permissions();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>&
PolicyPermissionsForUserRequest::_internal_permissions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.permissions_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>*
PolicyPermissionsForUserRequest::_internal_mutable_permissions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.permissions_;
}

// -------------------------------------------------------------------

// PolicyPermissionsForRoleRequest

// .palm.rbac.v1.PolicyRolesResponse.Item role = 1;
inline bool PolicyPermissionsForRoleRequest::has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.role_ != nullptr);
  return value;
}
inline void PolicyPermissionsForRoleRequest::clear_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.role_ != nullptr) _impl_.role_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item& PolicyPermissionsForRoleRequest::_internal_role() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyRolesResponse_Item* p = _impl_.role_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyRolesResponse_Item&>(::palm::rbac::v1::_PolicyRolesResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::PolicyRolesResponse_Item& PolicyPermissionsForRoleRequest::role() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsForRoleRequest.role)
  return _internal_role();
}
inline void PolicyPermissionsForRoleRequest::unsafe_arena_set_allocated_role(::palm::rbac::v1::PolicyRolesResponse_Item* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.role_);
  }
  _impl_.role_ = reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsForRoleRequest.role)
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyPermissionsForRoleRequest::release_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyRolesResponse_Item* released = _impl_.role_;
  _impl_.role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyPermissionsForRoleRequest::unsafe_arena_release_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsForRoleRequest.role)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyRolesResponse_Item* temp = _impl_.role_;
  _impl_.role_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyPermissionsForRoleRequest::_internal_mutable_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.role_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyRolesResponse_Item>(GetArena());
    _impl_.role_ = reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(p);
  }
  return _impl_.role_;
}
inline ::palm::rbac::v1::PolicyRolesResponse_Item* PolicyPermissionsForRoleRequest::mutable_role() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyRolesResponse_Item* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsForRoleRequest.role)
  return _msg;
}
inline void PolicyPermissionsForRoleRequest::set_allocated_role(::palm::rbac::v1::PolicyRolesResponse_Item* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(_impl_.role_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.role_ = reinterpret_cast<::palm::rbac::v1::PolicyRolesResponse_Item*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyPermissionsForRoleRequest.role)
}

// repeated .palm.rbac.v1.PolicyPermissionsResponse.Item permissions = 2;
inline int PolicyPermissionsForRoleRequest::_internal_permissions_size() const {
  return _internal_permissions().size();
}
inline int PolicyPermissionsForRoleRequest::permissions_size() const {
  return _internal_permissions_size();
}
inline void PolicyPermissionsForRoleRequest::clear_permissions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.permissions_.Clear();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item* PolicyPermissionsForRoleRequest::mutable_permissions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsForRoleRequest.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>* PolicyPermissionsForRoleRequest::mutable_permissions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PolicyPermissionsForRoleRequest.permissions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_permissions();
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item& PolicyPermissionsForRoleRequest::permissions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsForRoleRequest.permissions)
  return _internal_permissions().Get(index);
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item* PolicyPermissionsForRoleRequest::add_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item* _add = _internal_mutable_permissions()->Add();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PolicyPermissionsForRoleRequest.permissions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>& PolicyPermissionsForRoleRequest::permissions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PolicyPermissionsForRoleRequest.permissions)
  return _internal_permissions();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>&
PolicyPermissionsForRoleRequest::_internal_permissions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.permissions_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>*
PolicyPermissionsForRoleRequest::_internal_mutable_permissions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.permissions_;
}

// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Resource_Id

// int64 i = 11;
inline bool PolicyPermissionsResponse_Item_Resource_Id::has_i() const {
  return by_case() == kI;
}
inline void PolicyPermissionsResponse_Item_Resource_Id::set_has_i() {
  _impl_._oneof_case_[0] = kI;
}
inline void PolicyPermissionsResponse_Item_Resource_Id::clear_i() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kI) {
    _impl_.by_.i_ = ::int64_t{0};
    clear_has_by();
  }
}
inline ::int64_t PolicyPermissionsResponse_Item_Resource_Id::i() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id.i)
  return _internal_i();
}
inline void PolicyPermissionsResponse_Item_Resource_Id::set_i(::int64_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id.i)
}
inline ::int64_t PolicyPermissionsResponse_Item_Resource_Id::_internal_i() const {
  if (by_case() == kI) {
    return _impl_.by_.i_;
  }
  return ::int64_t{0};
}
inline void PolicyPermissionsResponse_Item_Resource_Id::_internal_set_i(::int64_t value) {
  if (by_case() != kI) {
    clear_by();
    set_has_i();
  }
  _impl_.by_.i_ = value;
}

// string s = 12;
inline bool PolicyPermissionsResponse_Item_Resource_Id::has_s() const {
  return by_case() == kS;
}
inline void PolicyPermissionsResponse_Item_Resource_Id::set_has_s() {
  _impl_._oneof_case_[0] = kS;
}
inline void PolicyPermissionsResponse_Item_Resource_Id::clear_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kS) {
    _impl_.by_.s_.Destroy();
    clear_has_by();
  }
}
inline const std::string& PolicyPermissionsResponse_Item_Resource_Id::s() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyPermissionsResponse_Item_Resource_Id::set_s(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() != kS) {
    clear_by();

    set_has_s();
    _impl_.by_.s_.InitDefault();
  }
  _impl_.by_.s_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id.s)
}
inline std::string* PolicyPermissionsResponse_Item_Resource_Id::mutable_s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id.s)
  return _s;
}
inline const std::string& PolicyPermissionsResponse_Item_Resource_Id::_internal_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (by_case() != kS) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.by_.s_.Get();
}
inline void PolicyPermissionsResponse_Item_Resource_Id::_internal_set_s(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() != kS) {
    clear_by();

    set_has_s();
    _impl_.by_.s_.InitDefault();
  }
  _impl_.by_.s_.Set(value, GetArena());
}
inline std::string* PolicyPermissionsResponse_Item_Resource_Id::_internal_mutable_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() != kS) {
    clear_by();

    set_has_s();
    _impl_.by_.s_.InitDefault();
  }
  return _impl_.by_.s_.Mutable( GetArena());
}
inline std::string* PolicyPermissionsResponse_Item_Resource_Id::release_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id.s)
  if (by_case() != kS) {
    return nullptr;
  }
  clear_has_by();
  return _impl_.by_.s_.Release();
}
inline void PolicyPermissionsResponse_Item_Resource_Id::set_allocated_s(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_by()) {
    clear_by();
  }
  if (value != nullptr) {
    set_has_s();
    _impl_.by_.s_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id.s)
}

inline bool PolicyPermissionsResponse_Item_Resource_Id::has_by() const {
  return by_case() != BY_NOT_SET;
}
inline void PolicyPermissionsResponse_Item_Resource_Id::clear_has_by() {
  _impl_._oneof_case_[0] = BY_NOT_SET;
}
inline PolicyPermissionsResponse_Item_Resource_Id::ByCase PolicyPermissionsResponse_Item_Resource_Id::by_case() const {
  return PolicyPermissionsResponse_Item_Resource_Id::ByCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Resource

// string type = 1;
inline void PolicyPermissionsResponse_Item_Resource::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& PolicyPermissionsResponse_Item_Resource::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyPermissionsResponse_Item_Resource::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.type)
}
inline std::string* PolicyPermissionsResponse_Item_Resource::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.type)
  return _s;
}
inline const std::string& PolicyPermissionsResponse_Item_Resource::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void PolicyPermissionsResponse_Item_Resource::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* PolicyPermissionsResponse_Item_Resource::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* PolicyPermissionsResponse_Item_Resource::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.type)
  return _impl_.type_.Release();
}
inline void PolicyPermissionsResponse_Item_Resource::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.type)
}

// optional .palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id id = 2;
inline bool PolicyPermissionsResponse_Item_Resource::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline void PolicyPermissionsResponse_Item_Resource::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id& PolicyPermissionsResponse_Item_Resource::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Resource_Id_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id& PolicyPermissionsResponse_Item_Resource::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.id)
  return _internal_id();
}
inline void PolicyPermissionsResponse_Item_Resource::unsafe_arena_set_allocated_id(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.id)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* PolicyPermissionsResponse_Item_Resource::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* released = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* PolicyPermissionsResponse_Item_Resource::unsafe_arena_release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* PolicyPermissionsResponse_Item_Resource::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id>(GetArena());
    _impl_.id_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id*>(p);
  }
  return _impl_.id_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* PolicyPermissionsResponse_Item_Resource::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.id)
  return _msg;
}
inline void PolicyPermissionsResponse_Item_Resource::set_allocated_id(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id*>(_impl_.id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.id_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource_Id*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.id)
}

// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Operation_Read

// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Operation_Write

// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Operation_Append

// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Operation_Execute

// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Operation_Credit

// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Operation_Debit

// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Operation_Inquiry

// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item_Operation

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Read read = 1;
inline bool PolicyPermissionsResponse_Item_Operation::has_read() const {
  return by_case() == kRead;
}
inline bool PolicyPermissionsResponse_Item_Operation::_internal_has_read() const {
  return by_case() == kRead;
}
inline void PolicyPermissionsResponse_Item_Operation::set_has_read() {
  _impl_._oneof_case_[0] = kRead;
}
inline void PolicyPermissionsResponse_Item_Operation::clear_read() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kRead) {
    if (GetArena() == nullptr) {
      delete _impl_.by_.read_;
    }
    clear_has_by();
  }
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* PolicyPermissionsResponse_Item_Operation::release_read() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.read)
  if (by_case() == kRead) {
    clear_has_by();
    auto* temp = _impl_.by_.read_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.by_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read& PolicyPermissionsResponse_Item_Operation::_internal_read() const {
  return by_case() == kRead ? *_impl_.by_.read_ : reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Operation_Read_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read& PolicyPermissionsResponse_Item_Operation::read() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.read)
  return _internal_read();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* PolicyPermissionsResponse_Item_Operation::unsafe_arena_release_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.read)
  if (by_case() == kRead) {
    clear_has_by();
    auto* temp = _impl_.by_.read_;
    _impl_.by_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyPermissionsResponse_Item_Operation::unsafe_arena_set_allocated_read(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_by();
  if (value) {
    set_has_read();
    _impl_.by_.read_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.read)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* PolicyPermissionsResponse_Item_Operation::_internal_mutable_read() {
  if (by_case() != kRead) {
    clear_by();
    set_has_read();
    _impl_.by_.read_ = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read>(GetArena());
  }
  return _impl_.by_.read_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* PolicyPermissionsResponse_Item_Operation::mutable_read() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Read* _msg = _internal_mutable_read();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.read)
  return _msg;
}

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Write write = 2;
inline bool PolicyPermissionsResponse_Item_Operation::has_write() const {
  return by_case() == kWrite;
}
inline bool PolicyPermissionsResponse_Item_Operation::_internal_has_write() const {
  return by_case() == kWrite;
}
inline void PolicyPermissionsResponse_Item_Operation::set_has_write() {
  _impl_._oneof_case_[0] = kWrite;
}
inline void PolicyPermissionsResponse_Item_Operation::clear_write() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kWrite) {
    if (GetArena() == nullptr) {
      delete _impl_.by_.write_;
    }
    clear_has_by();
  }
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* PolicyPermissionsResponse_Item_Operation::release_write() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.write)
  if (by_case() == kWrite) {
    clear_has_by();
    auto* temp = _impl_.by_.write_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.by_.write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write& PolicyPermissionsResponse_Item_Operation::_internal_write() const {
  return by_case() == kWrite ? *_impl_.by_.write_ : reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Operation_Write_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write& PolicyPermissionsResponse_Item_Operation::write() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.write)
  return _internal_write();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* PolicyPermissionsResponse_Item_Operation::unsafe_arena_release_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.write)
  if (by_case() == kWrite) {
    clear_has_by();
    auto* temp = _impl_.by_.write_;
    _impl_.by_.write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyPermissionsResponse_Item_Operation::unsafe_arena_set_allocated_write(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_by();
  if (value) {
    set_has_write();
    _impl_.by_.write_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.write)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* PolicyPermissionsResponse_Item_Operation::_internal_mutable_write() {
  if (by_case() != kWrite) {
    clear_by();
    set_has_write();
    _impl_.by_.write_ = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write>(GetArena());
  }
  return _impl_.by_.write_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* PolicyPermissionsResponse_Item_Operation::mutable_write() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Write* _msg = _internal_mutable_write();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.write)
  return _msg;
}

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Append append = 3;
inline bool PolicyPermissionsResponse_Item_Operation::has_append() const {
  return by_case() == kAppend;
}
inline bool PolicyPermissionsResponse_Item_Operation::_internal_has_append() const {
  return by_case() == kAppend;
}
inline void PolicyPermissionsResponse_Item_Operation::set_has_append() {
  _impl_._oneof_case_[0] = kAppend;
}
inline void PolicyPermissionsResponse_Item_Operation::clear_append() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kAppend) {
    if (GetArena() == nullptr) {
      delete _impl_.by_.append_;
    }
    clear_has_by();
  }
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* PolicyPermissionsResponse_Item_Operation::release_append() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.append)
  if (by_case() == kAppend) {
    clear_has_by();
    auto* temp = _impl_.by_.append_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.by_.append_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append& PolicyPermissionsResponse_Item_Operation::_internal_append() const {
  return by_case() == kAppend ? *_impl_.by_.append_ : reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Operation_Append_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append& PolicyPermissionsResponse_Item_Operation::append() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.append)
  return _internal_append();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* PolicyPermissionsResponse_Item_Operation::unsafe_arena_release_append() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.append)
  if (by_case() == kAppend) {
    clear_has_by();
    auto* temp = _impl_.by_.append_;
    _impl_.by_.append_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyPermissionsResponse_Item_Operation::unsafe_arena_set_allocated_append(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_by();
  if (value) {
    set_has_append();
    _impl_.by_.append_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.append)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* PolicyPermissionsResponse_Item_Operation::_internal_mutable_append() {
  if (by_case() != kAppend) {
    clear_by();
    set_has_append();
    _impl_.by_.append_ = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append>(GetArena());
  }
  return _impl_.by_.append_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* PolicyPermissionsResponse_Item_Operation::mutable_append() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Append* _msg = _internal_mutable_append();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.append)
  return _msg;
}

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Execute execute = 4;
inline bool PolicyPermissionsResponse_Item_Operation::has_execute() const {
  return by_case() == kExecute;
}
inline bool PolicyPermissionsResponse_Item_Operation::_internal_has_execute() const {
  return by_case() == kExecute;
}
inline void PolicyPermissionsResponse_Item_Operation::set_has_execute() {
  _impl_._oneof_case_[0] = kExecute;
}
inline void PolicyPermissionsResponse_Item_Operation::clear_execute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kExecute) {
    if (GetArena() == nullptr) {
      delete _impl_.by_.execute_;
    }
    clear_has_by();
  }
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* PolicyPermissionsResponse_Item_Operation::release_execute() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.execute)
  if (by_case() == kExecute) {
    clear_has_by();
    auto* temp = _impl_.by_.execute_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.by_.execute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute& PolicyPermissionsResponse_Item_Operation::_internal_execute() const {
  return by_case() == kExecute ? *_impl_.by_.execute_ : reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Operation_Execute_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute& PolicyPermissionsResponse_Item_Operation::execute() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.execute)
  return _internal_execute();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* PolicyPermissionsResponse_Item_Operation::unsafe_arena_release_execute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.execute)
  if (by_case() == kExecute) {
    clear_has_by();
    auto* temp = _impl_.by_.execute_;
    _impl_.by_.execute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyPermissionsResponse_Item_Operation::unsafe_arena_set_allocated_execute(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_by();
  if (value) {
    set_has_execute();
    _impl_.by_.execute_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.execute)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* PolicyPermissionsResponse_Item_Operation::_internal_mutable_execute() {
  if (by_case() != kExecute) {
    clear_by();
    set_has_execute();
    _impl_.by_.execute_ = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute>(GetArena());
  }
  return _impl_.by_.execute_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* PolicyPermissionsResponse_Item_Operation::mutable_execute() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Execute* _msg = _internal_mutable_execute();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.execute)
  return _msg;
}

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Credit credit = 5;
inline bool PolicyPermissionsResponse_Item_Operation::has_credit() const {
  return by_case() == kCredit;
}
inline bool PolicyPermissionsResponse_Item_Operation::_internal_has_credit() const {
  return by_case() == kCredit;
}
inline void PolicyPermissionsResponse_Item_Operation::set_has_credit() {
  _impl_._oneof_case_[0] = kCredit;
}
inline void PolicyPermissionsResponse_Item_Operation::clear_credit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kCredit) {
    if (GetArena() == nullptr) {
      delete _impl_.by_.credit_;
    }
    clear_has_by();
  }
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* PolicyPermissionsResponse_Item_Operation::release_credit() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.credit)
  if (by_case() == kCredit) {
    clear_has_by();
    auto* temp = _impl_.by_.credit_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.by_.credit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit& PolicyPermissionsResponse_Item_Operation::_internal_credit() const {
  return by_case() == kCredit ? *_impl_.by_.credit_ : reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Operation_Credit_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit& PolicyPermissionsResponse_Item_Operation::credit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.credit)
  return _internal_credit();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* PolicyPermissionsResponse_Item_Operation::unsafe_arena_release_credit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.credit)
  if (by_case() == kCredit) {
    clear_has_by();
    auto* temp = _impl_.by_.credit_;
    _impl_.by_.credit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyPermissionsResponse_Item_Operation::unsafe_arena_set_allocated_credit(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_by();
  if (value) {
    set_has_credit();
    _impl_.by_.credit_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.credit)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* PolicyPermissionsResponse_Item_Operation::_internal_mutable_credit() {
  if (by_case() != kCredit) {
    clear_by();
    set_has_credit();
    _impl_.by_.credit_ = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit>(GetArena());
  }
  return _impl_.by_.credit_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* PolicyPermissionsResponse_Item_Operation::mutable_credit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Credit* _msg = _internal_mutable_credit();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.credit)
  return _msg;
}

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Debit debit = 6;
inline bool PolicyPermissionsResponse_Item_Operation::has_debit() const {
  return by_case() == kDebit;
}
inline bool PolicyPermissionsResponse_Item_Operation::_internal_has_debit() const {
  return by_case() == kDebit;
}
inline void PolicyPermissionsResponse_Item_Operation::set_has_debit() {
  _impl_._oneof_case_[0] = kDebit;
}
inline void PolicyPermissionsResponse_Item_Operation::clear_debit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kDebit) {
    if (GetArena() == nullptr) {
      delete _impl_.by_.debit_;
    }
    clear_has_by();
  }
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* PolicyPermissionsResponse_Item_Operation::release_debit() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.debit)
  if (by_case() == kDebit) {
    clear_has_by();
    auto* temp = _impl_.by_.debit_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.by_.debit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit& PolicyPermissionsResponse_Item_Operation::_internal_debit() const {
  return by_case() == kDebit ? *_impl_.by_.debit_ : reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Operation_Debit_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit& PolicyPermissionsResponse_Item_Operation::debit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.debit)
  return _internal_debit();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* PolicyPermissionsResponse_Item_Operation::unsafe_arena_release_debit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.debit)
  if (by_case() == kDebit) {
    clear_has_by();
    auto* temp = _impl_.by_.debit_;
    _impl_.by_.debit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyPermissionsResponse_Item_Operation::unsafe_arena_set_allocated_debit(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_by();
  if (value) {
    set_has_debit();
    _impl_.by_.debit_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.debit)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* PolicyPermissionsResponse_Item_Operation::_internal_mutable_debit() {
  if (by_case() != kDebit) {
    clear_by();
    set_has_debit();
    _impl_.by_.debit_ = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit>(GetArena());
  }
  return _impl_.by_.debit_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* PolicyPermissionsResponse_Item_Operation::mutable_debit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Debit* _msg = _internal_mutable_debit();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.debit)
  return _msg;
}

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Inquiry inquiry = 7;
inline bool PolicyPermissionsResponse_Item_Operation::has_inquiry() const {
  return by_case() == kInquiry;
}
inline bool PolicyPermissionsResponse_Item_Operation::_internal_has_inquiry() const {
  return by_case() == kInquiry;
}
inline void PolicyPermissionsResponse_Item_Operation::set_has_inquiry() {
  _impl_._oneof_case_[0] = kInquiry;
}
inline void PolicyPermissionsResponse_Item_Operation::clear_inquiry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kInquiry) {
    if (GetArena() == nullptr) {
      delete _impl_.by_.inquiry_;
    }
    clear_has_by();
  }
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* PolicyPermissionsResponse_Item_Operation::release_inquiry() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.inquiry)
  if (by_case() == kInquiry) {
    clear_has_by();
    auto* temp = _impl_.by_.inquiry_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.by_.inquiry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry& PolicyPermissionsResponse_Item_Operation::_internal_inquiry() const {
  return by_case() == kInquiry ? *_impl_.by_.inquiry_ : reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Operation_Inquiry_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry& PolicyPermissionsResponse_Item_Operation::inquiry() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.inquiry)
  return _internal_inquiry();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* PolicyPermissionsResponse_Item_Operation::unsafe_arena_release_inquiry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.inquiry)
  if (by_case() == kInquiry) {
    clear_has_by();
    auto* temp = _impl_.by_.inquiry_;
    _impl_.by_.inquiry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyPermissionsResponse_Item_Operation::unsafe_arena_set_allocated_inquiry(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_by();
  if (value) {
    set_has_inquiry();
    _impl_.by_.inquiry_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.inquiry)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* PolicyPermissionsResponse_Item_Operation::_internal_mutable_inquiry() {
  if (by_case() != kInquiry) {
    clear_by();
    set_has_inquiry();
    _impl_.by_.inquiry_ = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry>(GetArena());
  }
  return _impl_.by_.inquiry_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* PolicyPermissionsResponse_Item_Operation::mutable_inquiry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation_Inquiry* _msg = _internal_mutable_inquiry();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.inquiry)
  return _msg;
}

// string code = 99;
inline bool PolicyPermissionsResponse_Item_Operation::has_code() const {
  return by_case() == kCode;
}
inline void PolicyPermissionsResponse_Item_Operation::set_has_code() {
  _impl_._oneof_case_[0] = kCode;
}
inline void PolicyPermissionsResponse_Item_Operation::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() == kCode) {
    _impl_.by_.code_.Destroy();
    clear_has_by();
  }
}
inline const std::string& PolicyPermissionsResponse_Item_Operation::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyPermissionsResponse_Item_Operation::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() != kCode) {
    clear_by();

    set_has_code();
    _impl_.by_.code_.InitDefault();
  }
  _impl_.by_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.code)
}
inline std::string* PolicyPermissionsResponse_Item_Operation::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.code)
  return _s;
}
inline const std::string& PolicyPermissionsResponse_Item_Operation::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (by_case() != kCode) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.by_.code_.Get();
}
inline void PolicyPermissionsResponse_Item_Operation::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() != kCode) {
    clear_by();

    set_has_code();
    _impl_.by_.code_.InitDefault();
  }
  _impl_.by_.code_.Set(value, GetArena());
}
inline std::string* PolicyPermissionsResponse_Item_Operation::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (by_case() != kCode) {
    clear_by();

    set_has_code();
    _impl_.by_.code_.InitDefault();
  }
  return _impl_.by_.code_.Mutable( GetArena());
}
inline std::string* PolicyPermissionsResponse_Item_Operation::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.code)
  if (by_case() != kCode) {
    return nullptr;
  }
  clear_has_by();
  return _impl_.by_.code_.Release();
}
inline void PolicyPermissionsResponse_Item_Operation::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_by()) {
    clear_by();
  }
  if (value != nullptr) {
    set_has_code();
    _impl_.by_.code_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.code)
}

inline bool PolicyPermissionsResponse_Item_Operation::has_by() const {
  return by_case() != BY_NOT_SET;
}
inline void PolicyPermissionsResponse_Item_Operation::clear_has_by() {
  _impl_._oneof_case_[0] = BY_NOT_SET;
}
inline PolicyPermissionsResponse_Item_Operation::ByCase PolicyPermissionsResponse_Item_Operation::by_case() const {
  return PolicyPermissionsResponse_Item_Operation::ByCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PolicyPermissionsResponse_Item

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Resource resource = 1;
inline bool PolicyPermissionsResponse_Item::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline void PolicyPermissionsResponse_Item::clear_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.resource_ != nullptr) _impl_.resource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource& PolicyPermissionsResponse_Item::_internal_resource() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Resource_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource& PolicyPermissionsResponse_Item::resource() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.resource)
  return _internal_resource();
}
inline void PolicyPermissionsResponse_Item::unsafe_arena_set_allocated_resource(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.resource)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* PolicyPermissionsResponse_Item::release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* released = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* PolicyPermissionsResponse_Item::unsafe_arena_release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.resource)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* PolicyPermissionsResponse_Item::_internal_mutable_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource>(GetArena());
    _impl_.resource_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(p);
  }
  return _impl_.resource_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* PolicyPermissionsResponse_Item::mutable_resource() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.resource)
  return _msg;
}
inline void PolicyPermissionsResponse_Item::set_allocated_resource(::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(_impl_.resource_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.resource_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Resource*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.resource)
}

// .palm.rbac.v1.PolicyPermissionsResponse.Item.Operation operation = 2;
inline bool PolicyPermissionsResponse_Item::has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.operation_ != nullptr);
  return value;
}
inline void PolicyPermissionsResponse_Item::clear_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.operation_ != nullptr) _impl_.operation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation& PolicyPermissionsResponse_Item::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* p = _impl_.operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation&>(::palm::rbac::v1::_PolicyPermissionsResponse_Item_Operation_default_instance_);
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation& PolicyPermissionsResponse_Item::operation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.Item.operation)
  return _internal_operation();
}
inline void PolicyPermissionsResponse_Item::unsafe_arena_set_allocated_operation(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.operation_);
  }
  _impl_.operation_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.operation)
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* PolicyPermissionsResponse_Item::release_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* released = _impl_.operation_;
  _impl_.operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* PolicyPermissionsResponse_Item::unsafe_arena_release_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PolicyPermissionsResponse.Item.operation)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* PolicyPermissionsResponse_Item::_internal_mutable_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation>(GetArena());
    _impl_.operation_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(p);
  }
  return _impl_.operation_;
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* PolicyPermissionsResponse_Item::mutable_operation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* _msg = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.Item.operation)
  return _msg;
}
inline void PolicyPermissionsResponse_Item::set_allocated_operation(::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(_impl_.operation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.operation_ = reinterpret_cast<::palm::rbac::v1::PolicyPermissionsResponse_Item_Operation*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PolicyPermissionsResponse.Item.operation)
}

// -------------------------------------------------------------------

// PolicyPermissionsResponse

// repeated .palm.rbac.v1.PolicyPermissionsResponse.Item items = 1;
inline int PolicyPermissionsResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int PolicyPermissionsResponse::items_size() const {
  return _internal_items_size();
}
inline void PolicyPermissionsResponse::clear_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.items_.Clear();
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item* PolicyPermissionsResponse::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PolicyPermissionsResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>* PolicyPermissionsResponse::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PolicyPermissionsResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::rbac::v1::PolicyPermissionsResponse_Item& PolicyPermissionsResponse::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PolicyPermissionsResponse.items)
  return _internal_items().Get(index);
}
inline ::palm::rbac::v1::PolicyPermissionsResponse_Item* PolicyPermissionsResponse::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::rbac::v1::PolicyPermissionsResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PolicyPermissionsResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>& PolicyPermissionsResponse::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PolicyPermissionsResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>&
PolicyPermissionsResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PolicyPermissionsResponse_Item>*
PolicyPermissionsResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rbac
}  // namespace palm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rbac_2eproto_2epb_2eh
