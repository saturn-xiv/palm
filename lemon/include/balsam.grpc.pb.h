// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: balsam.proto
#ifndef GRPC_balsam_2eproto__INCLUDED
#define GRPC_balsam_2eproto__INCLUDED

#include "balsam.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace palm {
namespace balsam {
namespace v1 {

// ----------------------------------------------------------------------------
//
class Aes final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.balsam.v1.Aes";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Encrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::palm::balsam::v1::AesCodeMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesCodeMessage>> AsyncEncrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesCodeMessage>>(AsyncEncryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesCodeMessage>> PrepareAsyncEncrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesCodeMessage>>(PrepareAsyncEncryptRaw(context, request, cq));
    }
    virtual ::grpc::Status Decrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::palm::balsam::v1::AesPlainMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesPlainMessage>> AsyncDecrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesPlainMessage>>(AsyncDecryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesPlainMessage>> PrepareAsyncDecrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesPlainMessage>>(PrepareAsyncDecryptRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Encrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage* request, ::palm::balsam::v1::AesCodeMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Encrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage* request, ::palm::balsam::v1::AesCodeMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Decrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage* request, ::palm::balsam::v1::AesPlainMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Decrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage* request, ::palm::balsam::v1::AesPlainMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesCodeMessage>* AsyncEncryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesCodeMessage>* PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesPlainMessage>* AsyncDecryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::AesPlainMessage>* PrepareAsyncDecryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Encrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::palm::balsam::v1::AesCodeMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesCodeMessage>> AsyncEncrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesCodeMessage>>(AsyncEncryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesCodeMessage>> PrepareAsyncEncrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesCodeMessage>>(PrepareAsyncEncryptRaw(context, request, cq));
    }
    ::grpc::Status Decrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::palm::balsam::v1::AesPlainMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesPlainMessage>> AsyncDecrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesPlainMessage>>(AsyncDecryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesPlainMessage>> PrepareAsyncDecrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesPlainMessage>>(PrepareAsyncDecryptRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Encrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage* request, ::palm::balsam::v1::AesCodeMessage* response, std::function<void(::grpc::Status)>) override;
      void Encrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage* request, ::palm::balsam::v1::AesCodeMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Decrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage* request, ::palm::balsam::v1::AesPlainMessage* response, std::function<void(::grpc::Status)>) override;
      void Decrypt(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage* request, ::palm::balsam::v1::AesPlainMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesCodeMessage>* AsyncEncryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesCodeMessage>* PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesPlainMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesPlainMessage>* AsyncDecryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::AesPlainMessage>* PrepareAsyncDecryptRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::AesCodeMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Encrypt_;
    const ::grpc::internal::RpcMethod rpcmethod_Decrypt_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::palm::balsam::v1::AesPlainMessage* request, ::palm::balsam::v1::AesCodeMessage* response);
    virtual ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::palm::balsam::v1::AesCodeMessage* request, ::palm::balsam::v1::AesPlainMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Encrypt() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesPlainMessage* /*request*/, ::palm::balsam::v1::AesCodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncrypt(::grpc::ServerContext* context, ::palm::balsam::v1::AesPlainMessage* request, ::grpc::ServerAsyncResponseWriter< ::palm::balsam::v1::AesCodeMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Decrypt() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesCodeMessage* /*request*/, ::palm::balsam::v1::AesPlainMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecrypt(::grpc::ServerContext* context, ::palm::balsam::v1::AesCodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::palm::balsam::v1::AesPlainMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Encrypt<WithAsyncMethod_Decrypt<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Encrypt() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::AesPlainMessage, ::palm::balsam::v1::AesCodeMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::balsam::v1::AesPlainMessage* request, ::palm::balsam::v1::AesCodeMessage* response) { return this->Encrypt(context, request, response); }));}
    void SetMessageAllocatorFor_Encrypt(
        ::grpc::MessageAllocator< ::palm::balsam::v1::AesPlainMessage, ::palm::balsam::v1::AesCodeMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::AesPlainMessage, ::palm::balsam::v1::AesCodeMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesPlainMessage* /*request*/, ::palm::balsam::v1::AesCodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Encrypt(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::balsam::v1::AesPlainMessage* /*request*/, ::palm::balsam::v1::AesCodeMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Decrypt() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::AesCodeMessage, ::palm::balsam::v1::AesPlainMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::balsam::v1::AesCodeMessage* request, ::palm::balsam::v1::AesPlainMessage* response) { return this->Decrypt(context, request, response); }));}
    void SetMessageAllocatorFor_Decrypt(
        ::grpc::MessageAllocator< ::palm::balsam::v1::AesCodeMessage, ::palm::balsam::v1::AesPlainMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::AesCodeMessage, ::palm::balsam::v1::AesPlainMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesCodeMessage* /*request*/, ::palm::balsam::v1::AesPlainMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Decrypt(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::balsam::v1::AesCodeMessage* /*request*/, ::palm::balsam::v1::AesPlainMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Encrypt<WithCallbackMethod_Decrypt<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Encrypt() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesPlainMessage* /*request*/, ::palm::balsam::v1::AesCodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Decrypt() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesCodeMessage* /*request*/, ::palm::balsam::v1::AesPlainMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Encrypt() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesPlainMessage* /*request*/, ::palm::balsam::v1::AesCodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncrypt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Decrypt() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesCodeMessage* /*request*/, ::palm::balsam::v1::AesPlainMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecrypt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Encrypt() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Encrypt(context, request, response); }));
    }
    ~WithRawCallbackMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesPlainMessage* /*request*/, ::palm::balsam::v1::AesCodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Encrypt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Decrypt() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Decrypt(context, request, response); }));
    }
    ~WithRawCallbackMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesCodeMessage* /*request*/, ::palm::balsam::v1::AesPlainMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Decrypt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Encrypt() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::balsam::v1::AesPlainMessage, ::palm::balsam::v1::AesCodeMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::balsam::v1::AesPlainMessage, ::palm::balsam::v1::AesCodeMessage>* streamer) {
                       return this->StreamedEncrypt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesPlainMessage* /*request*/, ::palm::balsam::v1::AesCodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncrypt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::balsam::v1::AesPlainMessage,::palm::balsam::v1::AesCodeMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Decrypt() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::balsam::v1::AesCodeMessage, ::palm::balsam::v1::AesPlainMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::balsam::v1::AesCodeMessage, ::palm::balsam::v1::AesPlainMessage>* streamer) {
                       return this->StreamedDecrypt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::AesCodeMessage* /*request*/, ::palm::balsam::v1::AesPlainMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecrypt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::balsam::v1::AesCodeMessage,::palm::balsam::v1::AesPlainMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Encrypt<WithStreamedUnaryMethod_Decrypt<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Encrypt<WithStreamedUnaryMethod_Decrypt<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class Jwt final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.balsam.v1.Jwt";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::palm::balsam::v1::JwtSignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtSignResponse>> AsyncSign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtSignResponse>>(AsyncSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtSignResponse>> PrepareAsyncSign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtSignResponse>>(PrepareAsyncSignRaw(context, request, cq));
    }
    virtual ::grpc::Status Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::palm::balsam::v1::JwtVerifyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtVerifyResponse>> AsyncVerify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtVerifyResponse>>(AsyncVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtVerifyResponse>> PrepareAsyncVerify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtVerifyResponse>>(PrepareAsyncVerifyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest* request, ::palm::balsam::v1::JwtSignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest* request, ::palm::balsam::v1::JwtSignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest* request, ::palm::balsam::v1::JwtVerifyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest* request, ::palm::balsam::v1::JwtVerifyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtSignResponse>* AsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtSignResponse>* PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtVerifyResponse>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::JwtVerifyResponse>* PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::palm::balsam::v1::JwtSignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtSignResponse>> AsyncSign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtSignResponse>>(AsyncSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtSignResponse>> PrepareAsyncSign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtSignResponse>>(PrepareAsyncSignRaw(context, request, cq));
    }
    ::grpc::Status Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::palm::balsam::v1::JwtVerifyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtVerifyResponse>> AsyncVerify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtVerifyResponse>>(AsyncVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtVerifyResponse>> PrepareAsyncVerify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtVerifyResponse>>(PrepareAsyncVerifyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest* request, ::palm::balsam::v1::JwtSignResponse* response, std::function<void(::grpc::Status)>) override;
      void Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest* request, ::palm::balsam::v1::JwtSignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest* request, ::palm::balsam::v1::JwtVerifyResponse* response, std::function<void(::grpc::Status)>) override;
      void Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest* request, ::palm::balsam::v1::JwtVerifyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtSignResponse>* AsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtSignResponse>* PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtSignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtVerifyResponse>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::JwtVerifyResponse>* PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::JwtVerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Sign_;
    const ::grpc::internal::RpcMethod rpcmethod_Verify_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Sign(::grpc::ServerContext* context, const ::palm::balsam::v1::JwtSignRequest* request, ::palm::balsam::v1::JwtSignResponse* response);
    virtual ::grpc::Status Verify(::grpc::ServerContext* context, const ::palm::balsam::v1::JwtVerifyRequest* request, ::palm::balsam::v1::JwtVerifyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sign() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtSignRequest* /*request*/, ::palm::balsam::v1::JwtSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSign(::grpc::ServerContext* context, ::palm::balsam::v1::JwtSignRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::balsam::v1::JwtSignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Verify() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtVerifyRequest* /*request*/, ::palm::balsam::v1::JwtVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, ::palm::balsam::v1::JwtVerifyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::balsam::v1::JwtVerifyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Sign<WithAsyncMethod_Verify<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Sign() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::JwtSignRequest, ::palm::balsam::v1::JwtSignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::balsam::v1::JwtSignRequest* request, ::palm::balsam::v1::JwtSignResponse* response) { return this->Sign(context, request, response); }));}
    void SetMessageAllocatorFor_Sign(
        ::grpc::MessageAllocator< ::palm::balsam::v1::JwtSignRequest, ::palm::balsam::v1::JwtSignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::JwtSignRequest, ::palm::balsam::v1::JwtSignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtSignRequest* /*request*/, ::palm::balsam::v1::JwtSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sign(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::balsam::v1::JwtSignRequest* /*request*/, ::palm::balsam::v1::JwtSignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Verify() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::JwtVerifyRequest, ::palm::balsam::v1::JwtVerifyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::balsam::v1::JwtVerifyRequest* request, ::palm::balsam::v1::JwtVerifyResponse* response) { return this->Verify(context, request, response); }));}
    void SetMessageAllocatorFor_Verify(
        ::grpc::MessageAllocator< ::palm::balsam::v1::JwtVerifyRequest, ::palm::balsam::v1::JwtVerifyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::JwtVerifyRequest, ::palm::balsam::v1::JwtVerifyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtVerifyRequest* /*request*/, ::palm::balsam::v1::JwtVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Verify(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::balsam::v1::JwtVerifyRequest* /*request*/, ::palm::balsam::v1::JwtVerifyResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Sign<WithCallbackMethod_Verify<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sign() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtSignRequest* /*request*/, ::palm::balsam::v1::JwtSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Verify() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtVerifyRequest* /*request*/, ::palm::balsam::v1::JwtVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sign() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtSignRequest* /*request*/, ::palm::balsam::v1::JwtSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Verify() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtVerifyRequest* /*request*/, ::palm::balsam::v1::JwtVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Sign() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Sign(context, request, response); }));
    }
    ~WithRawCallbackMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtSignRequest* /*request*/, ::palm::balsam::v1::JwtSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Verify() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Verify(context, request, response); }));
    }
    ~WithRawCallbackMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtVerifyRequest* /*request*/, ::palm::balsam::v1::JwtVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Verify(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Sign() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::balsam::v1::JwtSignRequest, ::palm::balsam::v1::JwtSignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::balsam::v1::JwtSignRequest, ::palm::balsam::v1::JwtSignResponse>* streamer) {
                       return this->StreamedSign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtSignRequest* /*request*/, ::palm::balsam::v1::JwtSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::balsam::v1::JwtSignRequest,::palm::balsam::v1::JwtSignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Verify() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::balsam::v1::JwtVerifyRequest, ::palm::balsam::v1::JwtVerifyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::balsam::v1::JwtVerifyRequest, ::palm::balsam::v1::JwtVerifyResponse>* streamer) {
                       return this->StreamedVerify(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::JwtVerifyRequest* /*request*/, ::palm::balsam::v1::JwtVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::balsam::v1::JwtVerifyRequest,::palm::balsam::v1::JwtVerifyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Sign<WithStreamedUnaryMethod_Verify<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Sign<WithStreamedUnaryMethod_Verify<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class HMac final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.balsam.v1.HMac";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::palm::balsam::v1::HMacSignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::HMacSignResponse>> AsyncSign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::HMacSignResponse>>(AsyncSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::HMacSignResponse>> PrepareAsyncSign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::HMacSignResponse>>(PrepareAsyncSignRaw(context, request, cq));
    }
    virtual ::grpc::Status Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncVerify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncVerify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncVerifyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest* request, ::palm::balsam::v1::HMacSignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest* request, ::palm::balsam::v1::HMacSignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::HMacSignResponse>* AsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::HMacSignResponse>* PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::palm::balsam::v1::HMacSignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::HMacSignResponse>> AsyncSign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::HMacSignResponse>>(AsyncSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::HMacSignResponse>> PrepareAsyncSign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::HMacSignResponse>>(PrepareAsyncSignRaw(context, request, cq));
    }
    ::grpc::Status Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncVerify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncVerify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncVerifyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest* request, ::palm::balsam::v1::HMacSignResponse* response, std::function<void(::grpc::Status)>) override;
      void Sign(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest* request, ::palm::balsam::v1::HMacSignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Verify(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::HMacSignResponse>* AsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::HMacSignResponse>* PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacSignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::HMacVerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Sign_;
    const ::grpc::internal::RpcMethod rpcmethod_Verify_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Sign(::grpc::ServerContext* context, const ::palm::balsam::v1::HMacSignRequest* request, ::palm::balsam::v1::HMacSignResponse* response);
    virtual ::grpc::Status Verify(::grpc::ServerContext* context, const ::palm::balsam::v1::HMacVerifyRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sign() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacSignRequest* /*request*/, ::palm::balsam::v1::HMacSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSign(::grpc::ServerContext* context, ::palm::balsam::v1::HMacSignRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::balsam::v1::HMacSignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Verify() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacVerifyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, ::palm::balsam::v1::HMacVerifyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Sign<WithAsyncMethod_Verify<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Sign() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::HMacSignRequest, ::palm::balsam::v1::HMacSignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::balsam::v1::HMacSignRequest* request, ::palm::balsam::v1::HMacSignResponse* response) { return this->Sign(context, request, response); }));}
    void SetMessageAllocatorFor_Sign(
        ::grpc::MessageAllocator< ::palm::balsam::v1::HMacSignRequest, ::palm::balsam::v1::HMacSignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::HMacSignRequest, ::palm::balsam::v1::HMacSignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacSignRequest* /*request*/, ::palm::balsam::v1::HMacSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sign(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::balsam::v1::HMacSignRequest* /*request*/, ::palm::balsam::v1::HMacSignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Verify() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::HMacVerifyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::balsam::v1::HMacVerifyRequest* request, ::google::protobuf::Empty* response) { return this->Verify(context, request, response); }));}
    void SetMessageAllocatorFor_Verify(
        ::grpc::MessageAllocator< ::palm::balsam::v1::HMacVerifyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::HMacVerifyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacVerifyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Verify(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::balsam::v1::HMacVerifyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Sign<WithCallbackMethod_Verify<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sign() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacSignRequest* /*request*/, ::palm::balsam::v1::HMacSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Verify() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacVerifyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sign() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacSignRequest* /*request*/, ::palm::balsam::v1::HMacSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Verify() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacVerifyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Sign() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Sign(context, request, response); }));
    }
    ~WithRawCallbackMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacSignRequest* /*request*/, ::palm::balsam::v1::HMacSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Verify() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Verify(context, request, response); }));
    }
    ~WithRawCallbackMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacVerifyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Verify(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Sign() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::balsam::v1::HMacSignRequest, ::palm::balsam::v1::HMacSignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::balsam::v1::HMacSignRequest, ::palm::balsam::v1::HMacSignResponse>* streamer) {
                       return this->StreamedSign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacSignRequest* /*request*/, ::palm::balsam::v1::HMacSignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::balsam::v1::HMacSignRequest,::palm::balsam::v1::HMacSignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Verify() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::balsam::v1::HMacVerifyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::balsam::v1::HMacVerifyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedVerify(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Verify(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::HMacVerifyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::balsam::v1::HMacVerifyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Sign<WithStreamedUnaryMethod_Verify<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Sign<WithStreamedUnaryMethod_Verify<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class User final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.balsam.v1.User";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::palm::balsam::v1::UserSignInResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::UserSignInResponse>> AsyncSignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::UserSignInResponse>>(AsyncSignInByEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::UserSignInResponse>> PrepareAsyncSignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::UserSignInResponse>>(PrepareAsyncSignInByEmailRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail* request, ::palm::balsam::v1::UserSignInResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail* request, ::palm::balsam::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::UserSignInResponse>* AsyncSignInByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::balsam::v1::UserSignInResponse>* PrepareAsyncSignInByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::palm::balsam::v1::UserSignInResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>> AsyncSignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>>(AsyncSignInByEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>> PrepareAsyncSignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>>(PrepareAsyncSignInByEmailRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail* request, ::palm::balsam::v1::UserSignInResponse* response, std::function<void(::grpc::Status)>) override;
      void SignInByEmail(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail* request, ::palm::balsam::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>* AsyncSignInByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::balsam::v1::UserSignInResponse>* PrepareAsyncSignInByEmailRaw(::grpc::ClientContext* context, const ::palm::balsam::v1::UserSignInByEmail& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SignInByEmail_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SignInByEmail(::grpc::ServerContext* context, const ::palm::balsam::v1::UserSignInByEmail* request, ::palm::balsam::v1::UserSignInResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SignInByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignInByEmail() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SignInByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInByEmail(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::UserSignInByEmail* /*request*/, ::palm::balsam::v1::UserSignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignInByEmail(::grpc::ServerContext* context, ::palm::balsam::v1::UserSignInByEmail* request, ::grpc::ServerAsyncResponseWriter< ::palm::balsam::v1::UserSignInResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SignInByEmail<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SignInByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignInByEmail() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::UserSignInByEmail, ::palm::balsam::v1::UserSignInResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::balsam::v1::UserSignInByEmail* request, ::palm::balsam::v1::UserSignInResponse* response) { return this->SignInByEmail(context, request, response); }));}
    void SetMessageAllocatorFor_SignInByEmail(
        ::grpc::MessageAllocator< ::palm::balsam::v1::UserSignInByEmail, ::palm::balsam::v1::UserSignInResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::balsam::v1::UserSignInByEmail, ::palm::balsam::v1::UserSignInResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignInByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInByEmail(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::UserSignInByEmail* /*request*/, ::palm::balsam::v1::UserSignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignInByEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::balsam::v1::UserSignInByEmail* /*request*/, ::palm::balsam::v1::UserSignInResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SignInByEmail<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SignInByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignInByEmail() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SignInByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInByEmail(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::UserSignInByEmail* /*request*/, ::palm::balsam::v1::UserSignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignInByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignInByEmail() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SignInByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInByEmail(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::UserSignInByEmail* /*request*/, ::palm::balsam::v1::UserSignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignInByEmail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignInByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignInByEmail() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignInByEmail(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignInByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInByEmail(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::UserSignInByEmail* /*request*/, ::palm::balsam::v1::UserSignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignInByEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignInByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignInByEmail() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::balsam::v1::UserSignInByEmail, ::palm::balsam::v1::UserSignInResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::balsam::v1::UserSignInByEmail, ::palm::balsam::v1::UserSignInResponse>* streamer) {
                       return this->StreamedSignInByEmail(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignInByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignInByEmail(::grpc::ServerContext* /*context*/, const ::palm::balsam::v1::UserSignInByEmail* /*request*/, ::palm::balsam::v1::UserSignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignInByEmail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::balsam::v1::UserSignInByEmail,::palm::balsam::v1::UserSignInResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SignInByEmail<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SignInByEmail<Service > StreamedService;
};

}  // namespace v1
}  // namespace balsam
}  // namespace palm


#endif  // GRPC_balsam_2eproto__INCLUDED
