// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2eproto;
namespace palm {
namespace google {
namespace v1 {
class Oauth2AuthCodeURLRequest;
struct Oauth2AuthCodeURLRequestDefaultTypeInternal;
extern Oauth2AuthCodeURLRequestDefaultTypeInternal _Oauth2AuthCodeURLRequest_default_instance_;
class Oauth2AuthCodeURLResponse;
struct Oauth2AuthCodeURLResponseDefaultTypeInternal;
extern Oauth2AuthCodeURLResponseDefaultTypeInternal _Oauth2AuthCodeURLResponse_default_instance_;
class Oauth2SignInRequest;
struct Oauth2SignInRequestDefaultTypeInternal;
extern Oauth2SignInRequestDefaultTypeInternal _Oauth2SignInRequest_default_instance_;
class Oauth2SignInResponse;
struct Oauth2SignInResponseDefaultTypeInternal;
extern Oauth2SignInResponseDefaultTypeInternal _Oauth2SignInResponse_default_instance_;
class Oauth2SignInResponse_OpenId;
struct Oauth2SignInResponse_OpenIdDefaultTypeInternal;
extern Oauth2SignInResponse_OpenIdDefaultTypeInternal _Oauth2SignInResponse_OpenId_default_instance_;
}  // namespace v1
}  // namespace google
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::google::v1::Oauth2AuthCodeURLRequest* Arena::CreateMaybeMessage<::palm::google::v1::Oauth2AuthCodeURLRequest>(Arena*);
template<> ::palm::google::v1::Oauth2AuthCodeURLResponse* Arena::CreateMaybeMessage<::palm::google::v1::Oauth2AuthCodeURLResponse>(Arena*);
template<> ::palm::google::v1::Oauth2SignInRequest* Arena::CreateMaybeMessage<::palm::google::v1::Oauth2SignInRequest>(Arena*);
template<> ::palm::google::v1::Oauth2SignInResponse* Arena::CreateMaybeMessage<::palm::google::v1::Oauth2SignInResponse>(Arena*);
template<> ::palm::google::v1::Oauth2SignInResponse_OpenId* Arena::CreateMaybeMessage<::palm::google::v1::Oauth2SignInResponse_OpenId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace google {
namespace v1 {

// ===================================================================

class Oauth2AuthCodeURLRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.google.v1.Oauth2AuthCodeURLRequest) */ {
 public:
  inline Oauth2AuthCodeURLRequest() : Oauth2AuthCodeURLRequest(nullptr) {}
  ~Oauth2AuthCodeURLRequest() override;
  explicit PROTOBUF_CONSTEXPR Oauth2AuthCodeURLRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2AuthCodeURLRequest(const Oauth2AuthCodeURLRequest& from);
  Oauth2AuthCodeURLRequest(Oauth2AuthCodeURLRequest&& from) noexcept
    : Oauth2AuthCodeURLRequest() {
    *this = ::std::move(from);
  }

  inline Oauth2AuthCodeURLRequest& operator=(const Oauth2AuthCodeURLRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2AuthCodeURLRequest& operator=(Oauth2AuthCodeURLRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2AuthCodeURLRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2AuthCodeURLRequest* internal_default_instance() {
    return reinterpret_cast<const Oauth2AuthCodeURLRequest*>(
               &_Oauth2AuthCodeURLRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Oauth2AuthCodeURLRequest& a, Oauth2AuthCodeURLRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2AuthCodeURLRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2AuthCodeURLRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2AuthCodeURLRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2AuthCodeURLRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2AuthCodeURLRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2AuthCodeURLRequest& from) {
    Oauth2AuthCodeURLRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2AuthCodeURLRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.google.v1.Oauth2AuthCodeURLRequest";
  }
  protected:
  explicit Oauth2AuthCodeURLRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 1,
  };
  // optional string subject = 1;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // @@protoc_insertion_point(class_scope:palm.google.v1.Oauth2AuthCodeURLRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2eproto;
};
// -------------------------------------------------------------------

class Oauth2AuthCodeURLResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.google.v1.Oauth2AuthCodeURLResponse) */ {
 public:
  inline Oauth2AuthCodeURLResponse() : Oauth2AuthCodeURLResponse(nullptr) {}
  ~Oauth2AuthCodeURLResponse() override;
  explicit PROTOBUF_CONSTEXPR Oauth2AuthCodeURLResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2AuthCodeURLResponse(const Oauth2AuthCodeURLResponse& from);
  Oauth2AuthCodeURLResponse(Oauth2AuthCodeURLResponse&& from) noexcept
    : Oauth2AuthCodeURLResponse() {
    *this = ::std::move(from);
  }

  inline Oauth2AuthCodeURLResponse& operator=(const Oauth2AuthCodeURLResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2AuthCodeURLResponse& operator=(Oauth2AuthCodeURLResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2AuthCodeURLResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2AuthCodeURLResponse* internal_default_instance() {
    return reinterpret_cast<const Oauth2AuthCodeURLResponse*>(
               &_Oauth2AuthCodeURLResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Oauth2AuthCodeURLResponse& a, Oauth2AuthCodeURLResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2AuthCodeURLResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2AuthCodeURLResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2AuthCodeURLResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2AuthCodeURLResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2AuthCodeURLResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2AuthCodeURLResponse& from) {
    Oauth2AuthCodeURLResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2AuthCodeURLResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.google.v1.Oauth2AuthCodeURLResponse";
  }
  protected:
  explicit Oauth2AuthCodeURLResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:palm.google.v1.Oauth2AuthCodeURLResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2eproto;
};
// -------------------------------------------------------------------

class Oauth2SignInRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.google.v1.Oauth2SignInRequest) */ {
 public:
  inline Oauth2SignInRequest() : Oauth2SignInRequest(nullptr) {}
  ~Oauth2SignInRequest() override;
  explicit PROTOBUF_CONSTEXPR Oauth2SignInRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2SignInRequest(const Oauth2SignInRequest& from);
  Oauth2SignInRequest(Oauth2SignInRequest&& from) noexcept
    : Oauth2SignInRequest() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInRequest& operator=(const Oauth2SignInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInRequest& operator=(Oauth2SignInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInRequest* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInRequest*>(
               &_Oauth2SignInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Oauth2SignInRequest& a, Oauth2SignInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInRequest& from) {
    Oauth2SignInRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2SignInRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.google.v1.Oauth2SignInRequest";
  }
  protected:
  explicit Oauth2SignInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string state = 2;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:palm.google.v1.Oauth2SignInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2eproto;
};
// -------------------------------------------------------------------

class Oauth2SignInResponse_OpenId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.google.v1.Oauth2SignInResponse.OpenId) */ {
 public:
  inline Oauth2SignInResponse_OpenId() : Oauth2SignInResponse_OpenId(nullptr) {}
  ~Oauth2SignInResponse_OpenId() override;
  explicit PROTOBUF_CONSTEXPR Oauth2SignInResponse_OpenId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2SignInResponse_OpenId(const Oauth2SignInResponse_OpenId& from);
  Oauth2SignInResponse_OpenId(Oauth2SignInResponse_OpenId&& from) noexcept
    : Oauth2SignInResponse_OpenId() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInResponse_OpenId& operator=(const Oauth2SignInResponse_OpenId& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInResponse_OpenId& operator=(Oauth2SignInResponse_OpenId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInResponse_OpenId& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInResponse_OpenId* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInResponse_OpenId*>(
               &_Oauth2SignInResponse_OpenId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Oauth2SignInResponse_OpenId& a, Oauth2SignInResponse_OpenId& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInResponse_OpenId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInResponse_OpenId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInResponse_OpenId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInResponse_OpenId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInResponse_OpenId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInResponse_OpenId& from) {
    Oauth2SignInResponse_OpenId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2SignInResponse_OpenId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.google.v1.Oauth2SignInResponse.OpenId";
  }
  protected:
  explicit Oauth2SignInResponse_OpenId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 1,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPictureFieldNumber = 7,
    kLocaleFieldNumber = 8,
    kProfileFieldNumber = 9,
    kEmailVerifiedFieldNumber = 4,
  };
  // string subject = 1;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string email = 3;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string picture = 7;
  bool has_picture() const;
  private:
  bool _internal_has_picture() const;
  public:
  void clear_picture();
  const std::string& picture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picture();
  PROTOBUF_NODISCARD std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  private:
  const std::string& _internal_picture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // optional string locale = 8;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional string profile = 9;
  bool has_profile() const;
  private:
  bool _internal_has_profile() const;
  public:
  void clear_profile();
  const std::string& profile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile();
  PROTOBUF_NODISCARD std::string* release_profile();
  void set_allocated_profile(std::string* profile);
  private:
  const std::string& _internal_profile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile(const std::string& value);
  std::string* _internal_mutable_profile();
  public:

  // bool email_verified = 4;
  void clear_email_verified();
  bool email_verified() const;
  void set_email_verified(bool value);
  private:
  bool _internal_email_verified() const;
  void _internal_set_email_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:palm.google.v1.Oauth2SignInResponse.OpenId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_;
    bool email_verified_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2eproto;
};
// -------------------------------------------------------------------

class Oauth2SignInResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.google.v1.Oauth2SignInResponse) */ {
 public:
  inline Oauth2SignInResponse() : Oauth2SignInResponse(nullptr) {}
  ~Oauth2SignInResponse() override;
  explicit PROTOBUF_CONSTEXPR Oauth2SignInResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2SignInResponse(const Oauth2SignInResponse& from);
  Oauth2SignInResponse(Oauth2SignInResponse&& from) noexcept
    : Oauth2SignInResponse() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInResponse& operator=(const Oauth2SignInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInResponse& operator=(Oauth2SignInResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInResponse* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInResponse*>(
               &_Oauth2SignInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Oauth2SignInResponse& a, Oauth2SignInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInResponse& from) {
    Oauth2SignInResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2SignInResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.google.v1.Oauth2SignInResponse";
  }
  protected:
  explicit Oauth2SignInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Oauth2SignInResponse_OpenId OpenId;

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kSubjectFieldNumber = 99,
    kOpenIdFieldNumber = 1,
  };
  // bytes token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional string subject = 99;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // .palm.google.v1.Oauth2SignInResponse.OpenId open_id = 1;
  bool has_open_id() const;
  private:
  bool _internal_has_open_id() const;
  public:
  void clear_open_id();
  const ::palm::google::v1::Oauth2SignInResponse_OpenId& open_id() const;
  PROTOBUF_NODISCARD ::palm::google::v1::Oauth2SignInResponse_OpenId* release_open_id();
  ::palm::google::v1::Oauth2SignInResponse_OpenId* mutable_open_id();
  void set_allocated_open_id(::palm::google::v1::Oauth2SignInResponse_OpenId* open_id);
  private:
  const ::palm::google::v1::Oauth2SignInResponse_OpenId& _internal_open_id() const;
  ::palm::google::v1::Oauth2SignInResponse_OpenId* _internal_mutable_open_id();
  public:
  void unsafe_arena_set_allocated_open_id(
      ::palm::google::v1::Oauth2SignInResponse_OpenId* open_id);
  ::palm::google::v1::Oauth2SignInResponse_OpenId* unsafe_arena_release_open_id();

  // @@protoc_insertion_point(class_scope:palm.google.v1.Oauth2SignInResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::palm::google::v1::Oauth2SignInResponse_OpenId* open_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Oauth2AuthCodeURLRequest

// optional string subject = 1;
inline bool Oauth2AuthCodeURLRequest::_internal_has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Oauth2AuthCodeURLRequest::has_subject() const {
  return _internal_has_subject();
}
inline void Oauth2AuthCodeURLRequest::clear_subject() {
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2AuthCodeURLRequest::subject() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2AuthCodeURLRequest.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2AuthCodeURLRequest::set_subject(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2AuthCodeURLRequest.subject)
}
inline std::string* Oauth2AuthCodeURLRequest::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2AuthCodeURLRequest.subject)
  return _s;
}
inline const std::string& Oauth2AuthCodeURLRequest::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void Oauth2AuthCodeURLRequest::_internal_set_subject(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2AuthCodeURLRequest::_internal_mutable_subject() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2AuthCodeURLRequest::release_subject() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2AuthCodeURLRequest.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.subject_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2AuthCodeURLRequest::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2AuthCodeURLRequest.subject)
}

// -------------------------------------------------------------------

// Oauth2AuthCodeURLResponse

// string url = 1;
inline void Oauth2AuthCodeURLResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Oauth2AuthCodeURLResponse::url() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2AuthCodeURLResponse.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2AuthCodeURLResponse::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2AuthCodeURLResponse.url)
}
inline std::string* Oauth2AuthCodeURLResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2AuthCodeURLResponse.url)
  return _s;
}
inline const std::string& Oauth2AuthCodeURLResponse::_internal_url() const {
  return _impl_.url_.Get();
}
inline void Oauth2AuthCodeURLResponse::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2AuthCodeURLResponse::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2AuthCodeURLResponse::release_url() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2AuthCodeURLResponse.url)
  return _impl_.url_.Release();
}
inline void Oauth2AuthCodeURLResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2AuthCodeURLResponse.url)
}

// -------------------------------------------------------------------

// Oauth2SignInRequest

// string code = 1;
inline void Oauth2SignInRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& Oauth2SignInRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInRequest.code)
}
inline std::string* Oauth2SignInRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInRequest.code)
  return _s;
}
inline const std::string& Oauth2SignInRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void Oauth2SignInRequest::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInRequest::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInRequest.code)
  return _impl_.code_.Release();
}
inline void Oauth2SignInRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInRequest.code)
}

// string state = 2;
inline void Oauth2SignInRequest::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& Oauth2SignInRequest::state() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInRequest.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInRequest::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInRequest.state)
}
inline std::string* Oauth2SignInRequest::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInRequest.state)
  return _s;
}
inline const std::string& Oauth2SignInRequest::_internal_state() const {
  return _impl_.state_.Get();
}
inline void Oauth2SignInRequest::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInRequest::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInRequest::release_state() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInRequest.state)
  return _impl_.state_.Release();
}
inline void Oauth2SignInRequest::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInRequest.state)
}

// -------------------------------------------------------------------

// Oauth2SignInResponse_OpenId

// string subject = 1;
inline void Oauth2SignInResponse_OpenId::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_OpenId::subject() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.OpenId.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_OpenId::set_subject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInResponse.OpenId.subject)
}
inline std::string* Oauth2SignInResponse_OpenId::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInResponse.OpenId.subject)
  return _s;
}
inline const std::string& Oauth2SignInResponse_OpenId::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void Oauth2SignInResponse_OpenId::_internal_set_subject(const std::string& value) {
  
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::_internal_mutable_subject() {
  
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::release_subject() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInResponse.OpenId.subject)
  return _impl_.subject_.Release();
}
inline void Oauth2SignInResponse_OpenId::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInResponse.OpenId.subject)
}

// optional string name = 2;
inline bool Oauth2SignInResponse_OpenId::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Oauth2SignInResponse_OpenId::has_name() const {
  return _internal_has_name();
}
inline void Oauth2SignInResponse_OpenId::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2SignInResponse_OpenId::name() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.OpenId.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_OpenId::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInResponse.OpenId.name)
}
inline std::string* Oauth2SignInResponse_OpenId::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInResponse.OpenId.name)
  return _s;
}
inline const std::string& Oauth2SignInResponse_OpenId::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Oauth2SignInResponse_OpenId::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::release_name() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInResponse.OpenId.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2SignInResponse_OpenId::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInResponse.OpenId.name)
}

// optional string email = 3;
inline bool Oauth2SignInResponse_OpenId::_internal_has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Oauth2SignInResponse_OpenId::has_email() const {
  return _internal_has_email();
}
inline void Oauth2SignInResponse_OpenId::clear_email() {
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Oauth2SignInResponse_OpenId::email() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.OpenId.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_OpenId::set_email(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInResponse.OpenId.email)
}
inline std::string* Oauth2SignInResponse_OpenId::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInResponse.OpenId.email)
  return _s;
}
inline const std::string& Oauth2SignInResponse_OpenId::_internal_email() const {
  return _impl_.email_.Get();
}
inline void Oauth2SignInResponse_OpenId::_internal_set_email(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::_internal_mutable_email() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::release_email() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInResponse.OpenId.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2SignInResponse_OpenId::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInResponse.OpenId.email)
}

// bool email_verified = 4;
inline void Oauth2SignInResponse_OpenId::clear_email_verified() {
  _impl_.email_verified_ = false;
}
inline bool Oauth2SignInResponse_OpenId::_internal_email_verified() const {
  return _impl_.email_verified_;
}
inline bool Oauth2SignInResponse_OpenId::email_verified() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.OpenId.email_verified)
  return _internal_email_verified();
}
inline void Oauth2SignInResponse_OpenId::_internal_set_email_verified(bool value) {
  
  _impl_.email_verified_ = value;
}
inline void Oauth2SignInResponse_OpenId::set_email_verified(bool value) {
  _internal_set_email_verified(value);
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInResponse.OpenId.email_verified)
}

// optional string picture = 7;
inline bool Oauth2SignInResponse_OpenId::_internal_has_picture() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Oauth2SignInResponse_OpenId::has_picture() const {
  return _internal_has_picture();
}
inline void Oauth2SignInResponse_OpenId::clear_picture() {
  _impl_.picture_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Oauth2SignInResponse_OpenId::picture() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.OpenId.picture)
  return _internal_picture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_OpenId::set_picture(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.picture_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInResponse.OpenId.picture)
}
inline std::string* Oauth2SignInResponse_OpenId::mutable_picture() {
  std::string* _s = _internal_mutable_picture();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInResponse.OpenId.picture)
  return _s;
}
inline const std::string& Oauth2SignInResponse_OpenId::_internal_picture() const {
  return _impl_.picture_.Get();
}
inline void Oauth2SignInResponse_OpenId::_internal_set_picture(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.picture_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::_internal_mutable_picture() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.picture_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::release_picture() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInResponse.OpenId.picture)
  if (!_internal_has_picture()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.picture_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.picture_.IsDefault()) {
    _impl_.picture_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2SignInResponse_OpenId::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.picture_.SetAllocated(picture, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.picture_.IsDefault()) {
    _impl_.picture_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInResponse.OpenId.picture)
}

// optional string locale = 8;
inline bool Oauth2SignInResponse_OpenId::_internal_has_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Oauth2SignInResponse_OpenId::has_locale() const {
  return _internal_has_locale();
}
inline void Oauth2SignInResponse_OpenId::clear_locale() {
  _impl_.locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Oauth2SignInResponse_OpenId::locale() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.OpenId.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_OpenId::set_locale(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInResponse.OpenId.locale)
}
inline std::string* Oauth2SignInResponse_OpenId::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInResponse.OpenId.locale)
  return _s;
}
inline const std::string& Oauth2SignInResponse_OpenId::_internal_locale() const {
  return _impl_.locale_.Get();
}
inline void Oauth2SignInResponse_OpenId::_internal_set_locale(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.locale_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::_internal_mutable_locale() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.locale_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::release_locale() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInResponse.OpenId.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.locale_.IsDefault()) {
    _impl_.locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2SignInResponse_OpenId::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.locale_.IsDefault()) {
    _impl_.locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInResponse.OpenId.locale)
}

// optional string profile = 9;
inline bool Oauth2SignInResponse_OpenId::_internal_has_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Oauth2SignInResponse_OpenId::has_profile() const {
  return _internal_has_profile();
}
inline void Oauth2SignInResponse_OpenId::clear_profile() {
  _impl_.profile_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Oauth2SignInResponse_OpenId::profile() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.OpenId.profile)
  return _internal_profile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_OpenId::set_profile(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.profile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInResponse.OpenId.profile)
}
inline std::string* Oauth2SignInResponse_OpenId::mutable_profile() {
  std::string* _s = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInResponse.OpenId.profile)
  return _s;
}
inline const std::string& Oauth2SignInResponse_OpenId::_internal_profile() const {
  return _impl_.profile_.Get();
}
inline void Oauth2SignInResponse_OpenId::_internal_set_profile(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.profile_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::_internal_mutable_profile() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.profile_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_OpenId::release_profile() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInResponse.OpenId.profile)
  if (!_internal_has_profile()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.profile_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.profile_.IsDefault()) {
    _impl_.profile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2SignInResponse_OpenId::set_allocated_profile(std::string* profile) {
  if (profile != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.profile_.SetAllocated(profile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.profile_.IsDefault()) {
    _impl_.profile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInResponse.OpenId.profile)
}

// -------------------------------------------------------------------

// Oauth2SignInResponse

// .palm.google.v1.Oauth2SignInResponse.OpenId open_id = 1;
inline bool Oauth2SignInResponse::_internal_has_open_id() const {
  return this != internal_default_instance() && _impl_.open_id_ != nullptr;
}
inline bool Oauth2SignInResponse::has_open_id() const {
  return _internal_has_open_id();
}
inline void Oauth2SignInResponse::clear_open_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.open_id_ != nullptr) {
    delete _impl_.open_id_;
  }
  _impl_.open_id_ = nullptr;
}
inline const ::palm::google::v1::Oauth2SignInResponse_OpenId& Oauth2SignInResponse::_internal_open_id() const {
  const ::palm::google::v1::Oauth2SignInResponse_OpenId* p = _impl_.open_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::google::v1::Oauth2SignInResponse_OpenId&>(
      ::palm::google::v1::_Oauth2SignInResponse_OpenId_default_instance_);
}
inline const ::palm::google::v1::Oauth2SignInResponse_OpenId& Oauth2SignInResponse::open_id() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.open_id)
  return _internal_open_id();
}
inline void Oauth2SignInResponse::unsafe_arena_set_allocated_open_id(
    ::palm::google::v1::Oauth2SignInResponse_OpenId* open_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.open_id_);
  }
  _impl_.open_id_ = open_id;
  if (open_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.google.v1.Oauth2SignInResponse.open_id)
}
inline ::palm::google::v1::Oauth2SignInResponse_OpenId* Oauth2SignInResponse::release_open_id() {
  
  ::palm::google::v1::Oauth2SignInResponse_OpenId* temp = _impl_.open_id_;
  _impl_.open_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::google::v1::Oauth2SignInResponse_OpenId* Oauth2SignInResponse::unsafe_arena_release_open_id() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInResponse.open_id)
  
  ::palm::google::v1::Oauth2SignInResponse_OpenId* temp = _impl_.open_id_;
  _impl_.open_id_ = nullptr;
  return temp;
}
inline ::palm::google::v1::Oauth2SignInResponse_OpenId* Oauth2SignInResponse::_internal_mutable_open_id() {
  
  if (_impl_.open_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::google::v1::Oauth2SignInResponse_OpenId>(GetArenaForAllocation());
    _impl_.open_id_ = p;
  }
  return _impl_.open_id_;
}
inline ::palm::google::v1::Oauth2SignInResponse_OpenId* Oauth2SignInResponse::mutable_open_id() {
  ::palm::google::v1::Oauth2SignInResponse_OpenId* _msg = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInResponse.open_id)
  return _msg;
}
inline void Oauth2SignInResponse::set_allocated_open_id(::palm::google::v1::Oauth2SignInResponse_OpenId* open_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.open_id_;
  }
  if (open_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(open_id);
    if (message_arena != submessage_arena) {
      open_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.open_id_ = open_id;
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInResponse.open_id)
}

// bytes token = 2;
inline void Oauth2SignInResponse::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse::token() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInResponse.token)
}
inline std::string* Oauth2SignInResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInResponse.token)
  return _s;
}
inline const std::string& Oauth2SignInResponse::_internal_token() const {
  return _impl_.token_.Get();
}
inline void Oauth2SignInResponse::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse::release_token() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInResponse.token)
  return _impl_.token_.Release();
}
inline void Oauth2SignInResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInResponse.token)
}

// optional string subject = 99;
inline bool Oauth2SignInResponse::_internal_has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Oauth2SignInResponse::has_subject() const {
  return _internal_has_subject();
}
inline void Oauth2SignInResponse::clear_subject() {
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2SignInResponse::subject() const {
  // @@protoc_insertion_point(field_get:palm.google.v1.Oauth2SignInResponse.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse::set_subject(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.google.v1.Oauth2SignInResponse.subject)
}
inline std::string* Oauth2SignInResponse::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.google.v1.Oauth2SignInResponse.subject)
  return _s;
}
inline const std::string& Oauth2SignInResponse::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void Oauth2SignInResponse::_internal_set_subject(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse::_internal_mutable_subject() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse::release_subject() {
  // @@protoc_insertion_point(field_release:palm.google.v1.Oauth2SignInResponse.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.subject_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2SignInResponse::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.google.v1.Oauth2SignInResponse.subject)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace google
}  // namespace palm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2eproto
