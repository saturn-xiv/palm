// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wechat.proto
#ifndef GRPC_wechat_2eproto__INCLUDED
#define GRPC_wechat_2eproto__INCLUDED

#include "wechat.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace palm {
namespace wechat {
namespace v1 {

// ----------------------------------------------------------------------------
//
class Oauth2 final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.Oauth2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>> AsyncQrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>>(AsyncQrConnectUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>> PrepareAsyncQrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>>(PrepareAsyncQrConnectUrlRaw(context, request, cq));
    }
    virtual ::grpc::Status SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::palm::wechat::v1::Oauth2SignInResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>> AsyncSignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>>(AsyncSignInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>> PrepareAsyncSignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>>(PrepareAsyncSignInRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* AsyncQrConnectUrlRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* PrepareAsyncQrConnectUrlRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>* AsyncSignInRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>* PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>> AsyncQrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>>(AsyncQrConnectUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>> PrepareAsyncQrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>>(PrepareAsyncQrConnectUrlRaw(context, request, cq));
    }
    ::grpc::Status SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::palm::wechat::v1::Oauth2SignInResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>> AsyncSignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>>(AsyncSignInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>> PrepareAsyncSignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>>(PrepareAsyncSignInRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response, std::function<void(::grpc::Status)>) override;
      void QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response, std::function<void(::grpc::Status)>) override;
      void SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* AsyncQrConnectUrlRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* PrepareAsyncQrConnectUrlRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>* AsyncSignInRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>* PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QrConnectUrl_;
    const ::grpc::internal::RpcMethod rpcmethod_SignIn_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status QrConnectUrl(::grpc::ServerContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response);
    virtual ::grpc::Status SignIn(::grpc::ServerContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQrConnectUrl(::grpc::ServerContext* context, ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignIn() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignIn(::grpc::ServerContext* context, ::palm::wechat::v1::Oauth2SignInRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::Oauth2SignInResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QrConnectUrl<WithAsyncMethod_SignIn<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response) { return this->QrConnectUrl(context, request, response); }));}
    void SetMessageAllocatorFor_QrConnectUrl(
        ::grpc::MessageAllocator< ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QrConnectUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignIn() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response) { return this->SignIn(context, request, response); }));}
    void SetMessageAllocatorFor_SignIn(
        ::grpc::MessageAllocator< ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignIn(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_QrConnectUrl<WithCallbackMethod_SignIn<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignIn() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQrConnectUrl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignIn() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignIn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QrConnectUrl(context, request, response); }));
    }
    ~WithRawCallbackMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QrConnectUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignIn() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignIn(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignIn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* streamer) {
                       return this->StreamedQrConnectUrl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQrConnectUrl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::Oauth2QrConnectUrlRequest,::palm::wechat::v1::Oauth2QrConnectUrlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignIn() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>* streamer) {
                       return this->StreamedSignIn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::Oauth2SignInRequest,::palm::wechat::v1::Oauth2SignInResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QrConnectUrl<WithStreamedUnaryMethod_SignIn<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_QrConnectUrl<WithStreamedUnaryMethod_SignIn<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class MiniProgram final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.MiniProgram";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>> AsyncCode2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>>(AsyncCode2SessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>> PrepareAsyncCode2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>>(PrepareAsyncCode2SessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* AsyncCode2SessionRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* PrepareAsyncCode2SessionRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>> AsyncCode2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>>(AsyncCode2SessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>> PrepareAsyncCode2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>>(PrepareAsyncCode2SessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response, std::function<void(::grpc::Status)>) override;
      void Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* AsyncCode2SessionRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* PrepareAsyncCode2SessionRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Code2Session_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Code2Session(::grpc::ServerContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Code2Session() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCode2Session(::grpc::ServerContext* context, ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Code2Session<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Code2Session() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response) { return this->Code2Session(context, request, response); }));}
    void SetMessageAllocatorFor_Code2Session(
        ::grpc::MessageAllocator< ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Code2Session(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Code2Session<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Code2Session() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Code2Session() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCode2Session(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Code2Session() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Code2Session(context, request, response); }));
    }
    ~WithRawCallbackMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Code2Session(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Code2Session() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>* streamer) {
                       return this->StreamedCode2Session(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCode2Session(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::MiniProgramCode2SessionRequest,::palm::wechat::v1::MiniProgramCode2SessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Code2Session<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Code2Session<Service > StreamedService;
};

// ----------------------------------------------------------------------------
class Pay final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.Pay";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    class async_interface {
     public:
      virtual ~async_interface() {}
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    class async final :
      public StubInterface::async_interface {
     public:
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
  };
  typedef Service AsyncService;
  typedef Service CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace v1
}  // namespace wechat
}  // namespace palm


#endif  // GRPC_wechat_2eproto__INCLUDED
