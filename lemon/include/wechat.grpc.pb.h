// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wechat.proto
#ifndef GRPC_wechat_2eproto__INCLUDED
#define GRPC_wechat_2eproto__INCLUDED

#include "wechat.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace palm {
namespace wechat {
namespace v1 {

// ----------------------------------------------------------------------------
//
class Oauth2 final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.Oauth2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>> AsyncQrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>>(AsyncQrConnectUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>> PrepareAsyncQrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>>(PrepareAsyncQrConnectUrlRaw(context, request, cq));
    }
    virtual ::grpc::Status SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::palm::wechat::v1::Oauth2SignInResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>> AsyncSignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>>(AsyncSignInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>> PrepareAsyncSignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>>(PrepareAsyncSignInRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* AsyncQrConnectUrlRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* PrepareAsyncQrConnectUrlRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>* AsyncSignInRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::Oauth2SignInResponse>* PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>> AsyncQrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>>(AsyncQrConnectUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>> PrepareAsyncQrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>>(PrepareAsyncQrConnectUrlRaw(context, request, cq));
    }
    ::grpc::Status SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::palm::wechat::v1::Oauth2SignInResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>> AsyncSignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>>(AsyncSignInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>> PrepareAsyncSignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>>(PrepareAsyncSignInRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response, std::function<void(::grpc::Status)>) override;
      void QrConnectUrl(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response, std::function<void(::grpc::Status)>) override;
      void SignIn(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* AsyncQrConnectUrlRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* PrepareAsyncQrConnectUrlRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>* AsyncSignInRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::Oauth2SignInResponse>* PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::Oauth2SignInRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QrConnectUrl_;
    const ::grpc::internal::RpcMethod rpcmethod_SignIn_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status QrConnectUrl(::grpc::ServerContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response);
    virtual ::grpc::Status SignIn(::grpc::ServerContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQrConnectUrl(::grpc::ServerContext* context, ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignIn() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignIn(::grpc::ServerContext* context, ::palm::wechat::v1::Oauth2SignInRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::Oauth2SignInResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QrConnectUrl<WithAsyncMethod_SignIn<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* request, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* response) { return this->QrConnectUrl(context, request, response); }));}
    void SetMessageAllocatorFor_QrConnectUrl(
        ::grpc::MessageAllocator< ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QrConnectUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignIn() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::Oauth2SignInRequest* request, ::palm::wechat::v1::Oauth2SignInResponse* response) { return this->SignIn(context, request, response); }));}
    void SetMessageAllocatorFor_SignIn(
        ::grpc::MessageAllocator< ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignIn(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_QrConnectUrl<WithCallbackMethod_SignIn<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignIn() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQrConnectUrl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignIn() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignIn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QrConnectUrl(context, request, response); }));
    }
    ~WithRawCallbackMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QrConnectUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignIn() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignIn(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignIn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QrConnectUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QrConnectUrl() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::Oauth2QrConnectUrlRequest, ::palm::wechat::v1::Oauth2QrConnectUrlResponse>* streamer) {
                       return this->StreamedQrConnectUrl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QrConnectUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QrConnectUrl(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2QrConnectUrlRequest* /*request*/, ::palm::wechat::v1::Oauth2QrConnectUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQrConnectUrl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::Oauth2QrConnectUrlRequest,::palm::wechat::v1::Oauth2QrConnectUrlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignIn() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::Oauth2SignInRequest, ::palm::wechat::v1::Oauth2SignInResponse>* streamer) {
                       return this->StreamedSignIn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignIn(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::Oauth2SignInRequest* /*request*/, ::palm::wechat::v1::Oauth2SignInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::Oauth2SignInRequest,::palm::wechat::v1::Oauth2SignInResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QrConnectUrl<WithStreamedUnaryMethod_SignIn<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_QrConnectUrl<WithStreamedUnaryMethod_SignIn<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class MiniProgram final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.MiniProgram";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>> AsyncCode2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>>(AsyncCode2SessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>> PrepareAsyncCode2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>>(PrepareAsyncCode2SessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* AsyncCode2SessionRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* PrepareAsyncCode2SessionRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>> AsyncCode2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>>(AsyncCode2SessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>> PrepareAsyncCode2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>>(PrepareAsyncCode2SessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response, std::function<void(::grpc::Status)>) override;
      void Code2Session(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* AsyncCode2SessionRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* PrepareAsyncCode2SessionRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Code2Session_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Code2Session(::grpc::ServerContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Code2Session() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCode2Session(::grpc::ServerContext* context, ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::MiniProgramCode2SessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Code2Session<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Code2Session() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* request, ::palm::wechat::v1::MiniProgramCode2SessionResponse* response) { return this->Code2Session(context, request, response); }));}
    void SetMessageAllocatorFor_Code2Session(
        ::grpc::MessageAllocator< ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Code2Session(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Code2Session<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Code2Session() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Code2Session() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCode2Session(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Code2Session() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Code2Session(context, request, response); }));
    }
    ~WithRawCallbackMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Code2Session(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Code2Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Code2Session() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::MiniProgramCode2SessionRequest, ::palm::wechat::v1::MiniProgramCode2SessionResponse>* streamer) {
                       return this->StreamedCode2Session(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Code2Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Code2Session(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::MiniProgramCode2SessionRequest* /*request*/, ::palm::wechat::v1::MiniProgramCode2SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCode2Session(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::MiniProgramCode2SessionRequest,::palm::wechat::v1::MiniProgramCode2SessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Code2Session<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Code2Session<Service > StreamedService;
};

class PayNative final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.PayNative";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>> AsyncPrepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>>(AsyncPrepayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>> PrepareAsyncPrepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>>(PrepareAsyncPrepayRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>* AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>* PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>> AsyncPrepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>>(AsyncPrepayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>> PrepareAsyncPrepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>>(PrepareAsyncPrepayRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* response, std::function<void(::grpc::Status)>) override;
      void Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>* AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>* PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Prepay_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Prepay(::grpc::ServerContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Prepay() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepay(::grpc::ServerContext* context, ::palm::wechat::v1::PayPrepayRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayNativeQrCodeUrlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Prepay<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Prepay() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayNativeQrCodeUrlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* response) { return this->Prepay(context, request, response); }));}
    void SetMessageAllocatorFor_Prepay(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayNativeQrCodeUrlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayNativeQrCodeUrlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepay(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Prepay<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Prepay() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Prepay() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Prepay() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Prepay(context, request, response); }));
    }
    ~WithRawCallbackMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepay(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Prepay() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayNativeQrCodeUrlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayNativeQrCodeUrlResponse>* streamer) {
                       return this->StreamedPrepay(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayPrepayRequest,::palm::wechat::v1::PayNativeQrCodeUrlResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Prepay<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Prepay<Service > StreamedService;
};

// ----------------------------------------------------------------------------
//
class PayJsapi final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.PayJsapi";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::palm::wechat::v1::PayJsapiPrepayIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayJsapiPrepayIdResponse>> AsyncPrepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayJsapiPrepayIdResponse>>(AsyncPrepayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayJsapiPrepayIdResponse>> PrepareAsyncPrepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayJsapiPrepayIdResponse>>(PrepareAsyncPrepayRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::palm::wechat::v1::PayTradeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>> AsyncQueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>>(AsyncQueryOrderByOutTradeNoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>> PrepareAsyncQueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>>(PrepareAsyncQueryOrderByOutTradeNoRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::palm::wechat::v1::PayTradeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>> AsyncQueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>>(AsyncQueryOrderByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>> PrepareAsyncQueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>>(PrepareAsyncQueryOrderByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncCloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncCloseOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncCloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncCloseOrderRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayJsapiPrepayIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayJsapiPrepayIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* request, ::palm::wechat::v1::PayTradeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* request, ::palm::wechat::v1::PayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest* request, ::palm::wechat::v1::PayTradeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest* request, ::palm::wechat::v1::PayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayJsapiPrepayIdResponse>* AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayJsapiPrepayIdResponse>* PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>* AsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>* PrepareAsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>* AsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTradeResponse>* PrepareAsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::palm::wechat::v1::PayJsapiPrepayIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayJsapiPrepayIdResponse>> AsyncPrepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayJsapiPrepayIdResponse>>(AsyncPrepayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayJsapiPrepayIdResponse>> PrepareAsyncPrepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayJsapiPrepayIdResponse>>(PrepareAsyncPrepayRaw(context, request, cq));
    }
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::palm::wechat::v1::PayTradeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>> AsyncQueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>>(AsyncQueryOrderByOutTradeNoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>> PrepareAsyncQueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>>(PrepareAsyncQueryOrderByOutTradeNoRaw(context, request, cq));
    }
    ::grpc::Status QueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::palm::wechat::v1::PayTradeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>> AsyncQueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>>(AsyncQueryOrderByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>> PrepareAsyncQueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>>(PrepareAsyncQueryOrderByIdRaw(context, request, cq));
    }
    ::grpc::Status CloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncCloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncCloseOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncCloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncCloseOrderRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayJsapiPrepayIdResponse* response, std::function<void(::grpc::Status)>) override;
      void Prepay(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayJsapiPrepayIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* request, ::palm::wechat::v1::PayTradeResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* request, ::palm::wechat::v1::PayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest* request, ::palm::wechat::v1::PayTradeResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryOrderById(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest* request, ::palm::wechat::v1::PayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void CloseOrder(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayJsapiPrepayIdResponse>* AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayJsapiPrepayIdResponse>* PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayPrepayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>* AsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>* PrepareAsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>* AsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTradeResponse>* PrepareAsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Prepay_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryOrderByOutTradeNo_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryOrderById_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Prepay(::grpc::ServerContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayJsapiPrepayIdResponse* response);
    virtual ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* request, ::palm::wechat::v1::PayTradeResponse* response);
    virtual ::grpc::Status QueryOrderById(::grpc::ServerContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest* request, ::palm::wechat::v1::PayTradeResponse* response);
    virtual ::grpc::Status CloseOrder(::grpc::ServerContext* context, const ::palm::wechat::v1::PayCloseOrderRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Prepay() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepay(::grpc::ServerContext* context, ::palm::wechat::v1::PayPrepayRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayJsapiPrepayIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderByOutTradeNo(::grpc::ServerContext* context, ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayTradeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByIdRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderById(::grpc::ServerContext* context, ::palm::wechat::v1::PayQueryOrderByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayTradeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseOrder() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseOrder(::grpc::ServerContext* context, ::palm::wechat::v1::PayCloseOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Prepay<WithAsyncMethod_QueryOrderByOutTradeNo<WithAsyncMethod_QueryOrderById<WithAsyncMethod_CloseOrder<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Prepay() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayJsapiPrepayIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayPrepayRequest* request, ::palm::wechat::v1::PayJsapiPrepayIdResponse* response) { return this->Prepay(context, request, response); }));}
    void SetMessageAllocatorFor_Prepay(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayJsapiPrepayIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayJsapiPrepayIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepay(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayJsapiPrepayIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest, ::palm::wechat::v1::PayTradeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* request, ::palm::wechat::v1::PayTradeResponse* response) { return this->QueryOrderByOutTradeNo(context, request, response); }));}
    void SetMessageAllocatorFor_QueryOrderByOutTradeNo(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest, ::palm::wechat::v1::PayTradeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest, ::palm::wechat::v1::PayTradeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryOrderByOutTradeNo(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryOrderByIdRequest, ::palm::wechat::v1::PayTradeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayQueryOrderByIdRequest* request, ::palm::wechat::v1::PayTradeResponse* response) { return this->QueryOrderById(context, request, response); }));}
    void SetMessageAllocatorFor_QueryOrderById(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayQueryOrderByIdRequest, ::palm::wechat::v1::PayTradeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryOrderByIdRequest, ::palm::wechat::v1::PayTradeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByIdRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryOrderById(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByIdRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseOrder() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayCloseOrderRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayCloseOrderRequest* request, ::google::protobuf::Empty* response) { return this->CloseOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CloseOrder(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayCloseOrderRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayCloseOrderRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Prepay<WithCallbackMethod_QueryOrderByOutTradeNo<WithCallbackMethod_QueryOrderById<WithCallbackMethod_CloseOrder<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Prepay() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByIdRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseOrder() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Prepay() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderByOutTradeNo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByIdRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseOrder() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Prepay() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Prepay(context, request, response); }));
    }
    ~WithRawCallbackMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepay(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryOrderByOutTradeNo(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryOrderByOutTradeNo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryOrderById(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByIdRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryOrderById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseOrder() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Prepay() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayJsapiPrepayIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayPrepayRequest, ::palm::wechat::v1::PayJsapiPrepayIdResponse>* streamer) {
                       return this->StreamedPrepay(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayPrepayRequest* /*request*/, ::palm::wechat::v1::PayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayPrepayRequest,::palm::wechat::v1::PayJsapiPrepayIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest, ::palm::wechat::v1::PayTradeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest, ::palm::wechat::v1::PayTradeResponse>* streamer) {
                       return this->StreamedQueryOrderByOutTradeNo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryOrderByOutTradeNo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayQueryOrderByOutTradeNoRequest,::palm::wechat::v1::PayTradeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayQueryOrderByIdRequest, ::palm::wechat::v1::PayTradeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayQueryOrderByIdRequest, ::palm::wechat::v1::PayTradeResponse>* streamer) {
                       return this->StreamedQueryOrderById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryOrderByIdRequest* /*request*/, ::palm::wechat::v1::PayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryOrderById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayQueryOrderByIdRequest,::palm::wechat::v1::PayTradeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseOrder() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayCloseOrderRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayCloseOrderRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedCloseOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayCloseOrderRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Prepay<WithStreamedUnaryMethod_QueryOrderByOutTradeNo<WithStreamedUnaryMethod_QueryOrderById<WithStreamedUnaryMethod_CloseOrder<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Prepay<WithStreamedUnaryMethod_QueryOrderByOutTradeNo<WithStreamedUnaryMethod_QueryOrderById<WithStreamedUnaryMethod_CloseOrder<Service > > > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class PayBill final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.PayBill";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Trade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::palm::wechat::v1::PayBillResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>> AsyncTrade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>>(AsyncTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>> PrepareAsyncTrade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>>(PrepareAsyncTradeRaw(context, request, cq));
    }
    virtual ::grpc::Status FundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::palm::wechat::v1::PayBillResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>> AsyncFundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>>(AsyncFundFlowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>> PrepareAsyncFundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>>(PrepareAsyncFundFlowRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Trade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest* request, ::palm::wechat::v1::PayBillResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Trade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest* request, ::palm::wechat::v1::PayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest* request, ::palm::wechat::v1::PayBillResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest* request, ::palm::wechat::v1::PayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>* AsyncTradeRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>* PrepareAsyncTradeRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>* AsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayBillResponse>* PrepareAsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Trade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::palm::wechat::v1::PayBillResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>> AsyncTrade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>>(AsyncTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>> PrepareAsyncTrade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>>(PrepareAsyncTradeRaw(context, request, cq));
    }
    ::grpc::Status FundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::palm::wechat::v1::PayBillResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>> AsyncFundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>>(AsyncFundFlowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>> PrepareAsyncFundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>>(PrepareAsyncFundFlowRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Trade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest* request, ::palm::wechat::v1::PayBillResponse* response, std::function<void(::grpc::Status)>) override;
      void Trade(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest* request, ::palm::wechat::v1::PayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest* request, ::palm::wechat::v1::PayBillResponse* response, std::function<void(::grpc::Status)>) override;
      void FundFlow(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest* request, ::palm::wechat::v1::PayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>* AsyncTradeRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>* PrepareAsyncTradeRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTradeBillRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>* AsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayBillResponse>* PrepareAsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Trade_;
    const ::grpc::internal::RpcMethod rpcmethod_FundFlow_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Trade(::grpc::ServerContext* context, const ::palm::wechat::v1::PayTradeBillRequest* request, ::palm::wechat::v1::PayBillResponse* response);
    virtual ::grpc::Status FundFlow(::grpc::ServerContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest* request, ::palm::wechat::v1::PayBillResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Trade() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTradeBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrade(::grpc::ServerContext* context, ::palm::wechat::v1::PayTradeBillRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayBillResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FundFlow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayFundFlowBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFundFlow(::grpc::ServerContext* context, ::palm::wechat::v1::PayFundFlowBillRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayBillResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Trade<WithAsyncMethod_FundFlow<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Trade() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayTradeBillRequest, ::palm::wechat::v1::PayBillResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayTradeBillRequest* request, ::palm::wechat::v1::PayBillResponse* response) { return this->Trade(context, request, response); }));}
    void SetMessageAllocatorFor_Trade(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayTradeBillRequest, ::palm::wechat::v1::PayBillResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayTradeBillRequest, ::palm::wechat::v1::PayBillResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTradeBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Trade(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayTradeBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FundFlow() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayFundFlowBillRequest, ::palm::wechat::v1::PayBillResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayFundFlowBillRequest* request, ::palm::wechat::v1::PayBillResponse* response) { return this->FundFlow(context, request, response); }));}
    void SetMessageAllocatorFor_FundFlow(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayFundFlowBillRequest, ::palm::wechat::v1::PayBillResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayFundFlowBillRequest, ::palm::wechat::v1::PayBillResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayFundFlowBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FundFlow(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayFundFlowBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Trade<WithCallbackMethod_FundFlow<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Trade() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTradeBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FundFlow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayFundFlowBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Trade() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTradeBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrade(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FundFlow() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayFundFlowBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFundFlow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Trade() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Trade(context, request, response); }));
    }
    ~WithRawCallbackMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTradeBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Trade(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FundFlow() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FundFlow(context, request, response); }));
    }
    ~WithRawCallbackMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayFundFlowBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FundFlow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Trade() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayTradeBillRequest, ::palm::wechat::v1::PayBillResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayTradeBillRequest, ::palm::wechat::v1::PayBillResponse>* streamer) {
                       return this->StreamedTrade(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTradeBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTrade(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayTradeBillRequest,::palm::wechat::v1::PayBillResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FundFlow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayFundFlowBillRequest, ::palm::wechat::v1::PayBillResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayFundFlowBillRequest, ::palm::wechat::v1::PayBillResponse>* streamer) {
                       return this->StreamedFundFlow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayFundFlowBillRequest* /*request*/, ::palm::wechat::v1::PayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFundFlow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayFundFlowBillRequest,::palm::wechat::v1::PayBillResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Trade<WithStreamedUnaryMethod_FundFlow<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Trade<WithStreamedUnaryMethod_FundFlow<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class PayRefund final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.PayRefund";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::palm::wechat::v1::PayRefundResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>> AsyncCreate(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::palm::wechat::v1::PayRefundResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>> AsyncQuery(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Create(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>* AsyncQueryRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayRefundResponse>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Create(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::palm::wechat::v1::PayRefundResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>> AsyncCreate(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Query(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::palm::wechat::v1::PayRefundResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>> AsyncQuery(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Query(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response, std::function<void(::grpc::Status)>) override;
      void Query(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>* AsyncQueryRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayRefundResponse>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::palm::wechat::v1::PayCreateRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response);
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::palm::wechat::v1::PayQueryRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCreateRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::palm::wechat::v1::PayCreateRefundRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayRefundResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::palm::wechat::v1::PayQueryRefundRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayRefundResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Query<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayCreateRefundRequest, ::palm::wechat::v1::PayRefundResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayCreateRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayCreateRefundRequest, ::palm::wechat::v1::PayRefundResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayCreateRefundRequest, ::palm::wechat::v1::PayRefundResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCreateRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayCreateRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Query() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryRefundRequest, ::palm::wechat::v1::PayRefundResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayQueryRefundRequest* request, ::palm::wechat::v1::PayRefundResponse* response) { return this->Query(context, request, response); }));}
    void SetMessageAllocatorFor_Query(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayQueryRefundRequest, ::palm::wechat::v1::PayRefundResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryRefundRequest, ::palm::wechat::v1::PayRefundResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayQueryRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Create<WithCallbackMethod_Query<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCreateRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCreateRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCreateRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Query() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Query(context, request, response); }));
    }
    ~WithRawCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayCreateRefundRequest, ::palm::wechat::v1::PayRefundResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayCreateRefundRequest, ::palm::wechat::v1::PayRefundResponse>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayCreateRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayCreateRefundRequest,::palm::wechat::v1::PayRefundResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayQueryRefundRequest, ::palm::wechat::v1::PayRefundResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayQueryRefundRequest, ::palm::wechat::v1::PayRefundResponse>* streamer) {
                       return this->StreamedQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryRefundRequest* /*request*/, ::palm::wechat::v1::PayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayQueryRefundRequest,::palm::wechat::v1::PayRefundResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Query<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Query<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class PayTransfer final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.wechat.v1.PayTransfer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::palm::wechat::v1::PayExecuteBatchTransferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayExecuteBatchTransferResponse>> AsyncExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayExecuteBatchTransferResponse>>(AsyncExecuteBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayExecuteBatchTransferResponse>> PrepareAsyncExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayExecuteBatchTransferResponse>>(PrepareAsyncExecuteBatchRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::palm::wechat::v1::PayQueryBatchTransferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryBatchTransferResponse>> AsyncQueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryBatchTransferResponse>>(AsyncQueryBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryBatchTransferResponse>> PrepareAsyncQueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryBatchTransferResponse>>(PrepareAsyncQueryBatchRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::palm::wechat::v1::PayQueryTransferDetailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryTransferDetailResponse>> AsyncQueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryTransferDetailResponse>>(AsyncQueryDetailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryTransferDetailResponse>> PrepareAsyncQueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryTransferDetailResponse>>(PrepareAsyncQueryDetailRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>> AsyncGetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>>(AsyncGetBillReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>> PrepareAsyncGetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>>(PrepareAsyncGetBillReceiptRaw(context, request, cq));
    }
    virtual ::grpc::Status GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>> AsyncGetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>>(AsyncGetElectronicReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>> PrepareAsyncGetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>>(PrepareAsyncGetElectronicReceiptRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* request, ::palm::wechat::v1::PayExecuteBatchTransferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* request, ::palm::wechat::v1::PayExecuteBatchTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest* request, ::palm::wechat::v1::PayQueryBatchTransferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest* request, ::palm::wechat::v1::PayQueryBatchTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest* request, ::palm::wechat::v1::PayQueryTransferDetailResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest* request, ::palm::wechat::v1::PayQueryTransferDetailResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayExecuteBatchTransferResponse>* AsyncExecuteBatchRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayExecuteBatchTransferResponse>* PrepareAsyncExecuteBatchRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryBatchTransferResponse>* AsyncQueryBatchRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryBatchTransferResponse>* PrepareAsyncQueryBatchRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryTransferDetailResponse>* AsyncQueryDetailRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayQueryTransferDetailResponse>* PrepareAsyncQueryDetailRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>* AsyncGetBillReceiptRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>* PrepareAsyncGetBillReceiptRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>* AsyncGetElectronicReceiptRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::wechat::v1::PayTransferGetReceiptResponse>* PrepareAsyncGetElectronicReceiptRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::palm::wechat::v1::PayExecuteBatchTransferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayExecuteBatchTransferResponse>> AsyncExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayExecuteBatchTransferResponse>>(AsyncExecuteBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayExecuteBatchTransferResponse>> PrepareAsyncExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayExecuteBatchTransferResponse>>(PrepareAsyncExecuteBatchRaw(context, request, cq));
    }
    ::grpc::Status QueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::palm::wechat::v1::PayQueryBatchTransferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryBatchTransferResponse>> AsyncQueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryBatchTransferResponse>>(AsyncQueryBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryBatchTransferResponse>> PrepareAsyncQueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryBatchTransferResponse>>(PrepareAsyncQueryBatchRaw(context, request, cq));
    }
    ::grpc::Status QueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::palm::wechat::v1::PayQueryTransferDetailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryTransferDetailResponse>> AsyncQueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryTransferDetailResponse>>(AsyncQueryDetailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryTransferDetailResponse>> PrepareAsyncQueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryTransferDetailResponse>>(PrepareAsyncQueryDetailRaw(context, request, cq));
    }
    ::grpc::Status GetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>> AsyncGetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>>(AsyncGetBillReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>> PrepareAsyncGetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>>(PrepareAsyncGetBillReceiptRaw(context, request, cq));
    }
    ::grpc::Status GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>> AsyncGetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>>(AsyncGetElectronicReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>> PrepareAsyncGetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>>(PrepareAsyncGetElectronicReceiptRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* request, ::palm::wechat::v1::PayExecuteBatchTransferResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* request, ::palm::wechat::v1::PayExecuteBatchTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest* request, ::palm::wechat::v1::PayQueryBatchTransferResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryBatch(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest* request, ::palm::wechat::v1::PayQueryBatchTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest* request, ::palm::wechat::v1::PayQueryTransferDetailResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryDetail(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest* request, ::palm::wechat::v1::PayQueryTransferDetailResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBillReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response, std::function<void(::grpc::Status)>) override;
      void GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayExecuteBatchTransferResponse>* AsyncExecuteBatchRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayExecuteBatchTransferResponse>* PrepareAsyncExecuteBatchRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryBatchTransferResponse>* AsyncQueryBatchRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryBatchTransferResponse>* PrepareAsyncQueryBatchRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryTransferDetailResponse>* AsyncQueryDetailRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayQueryTransferDetailResponse>* PrepareAsyncQueryDetailRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>* AsyncGetBillReceiptRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>* PrepareAsyncGetBillReceiptRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>* AsyncGetElectronicReceiptRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::wechat::v1::PayTransferGetReceiptResponse>* PrepareAsyncGetElectronicReceiptRaw(::grpc::ClientContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteBatch_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryBatch_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryDetail_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBillReceipt_;
    const ::grpc::internal::RpcMethod rpcmethod_GetElectronicReceipt_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ExecuteBatch(::grpc::ServerContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* request, ::palm::wechat::v1::PayExecuteBatchTransferResponse* response);
    virtual ::grpc::Status QueryBatch(::grpc::ServerContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest* request, ::palm::wechat::v1::PayQueryBatchTransferResponse* response);
    virtual ::grpc::Status QueryDetail(::grpc::ServerContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest* request, ::palm::wechat::v1::PayQueryTransferDetailResponse* response);
    virtual ::grpc::Status GetBillReceipt(::grpc::ServerContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response);
    virtual ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteBatch(::grpc::ServerContext* context, ::palm::wechat::v1::PayExecuteBatchTransferRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayExecuteBatchTransferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryBatch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryBatch(::grpc::ServerContext* context, ::palm::wechat::v1::PayQueryBatchTransferRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayQueryBatchTransferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryDetail() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryTransferDetailRequest* /*request*/, ::palm::wechat::v1::PayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryDetail(::grpc::ServerContext* context, ::palm::wechat::v1::PayQueryTransferDetailRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayQueryTransferDetailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBillReceipt(::grpc::ServerContext* context, ::palm::wechat::v1::PayTransferGetBillReceiptRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayTransferGetReceiptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElectronicReceipt(::grpc::ServerContext* context, ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::wechat::v1::PayTransferGetReceiptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExecuteBatch<WithAsyncMethod_QueryBatch<WithAsyncMethod_QueryDetail<WithAsyncMethod_GetBillReceipt<WithAsyncMethod_GetElectronicReceipt<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayExecuteBatchTransferRequest, ::palm::wechat::v1::PayExecuteBatchTransferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* request, ::palm::wechat::v1::PayExecuteBatchTransferResponse* response) { return this->ExecuteBatch(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteBatch(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayExecuteBatchTransferRequest, ::palm::wechat::v1::PayExecuteBatchTransferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayExecuteBatchTransferRequest, ::palm::wechat::v1::PayExecuteBatchTransferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayExecuteBatchTransferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryBatch() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryBatchTransferRequest, ::palm::wechat::v1::PayQueryBatchTransferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayQueryBatchTransferRequest* request, ::palm::wechat::v1::PayQueryBatchTransferResponse* response) { return this->QueryBatch(context, request, response); }));}
    void SetMessageAllocatorFor_QueryBatch(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayQueryBatchTransferRequest, ::palm::wechat::v1::PayQueryBatchTransferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryBatchTransferRequest, ::palm::wechat::v1::PayQueryBatchTransferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayQueryBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayQueryBatchTransferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryDetail() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryTransferDetailRequest, ::palm::wechat::v1::PayQueryTransferDetailResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayQueryTransferDetailRequest* request, ::palm::wechat::v1::PayQueryTransferDetailResponse* response) { return this->QueryDetail(context, request, response); }));}
    void SetMessageAllocatorFor_QueryDetail(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayQueryTransferDetailRequest, ::palm::wechat::v1::PayQueryTransferDetailResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayQueryTransferDetailRequest, ::palm::wechat::v1::PayQueryTransferDetailResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryTransferDetailRequest* /*request*/, ::palm::wechat::v1::PayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryDetail(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayQueryTransferDetailRequest* /*request*/, ::palm::wechat::v1::PayQueryTransferDetailResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayTransferGetBillReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response) { return this->GetBillReceipt(context, request, response); }));}
    void SetMessageAllocatorFor_GetBillReceipt(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayTransferGetBillReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayTransferGetBillReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBillReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* request, ::palm::wechat::v1::PayTransferGetReceiptResponse* response) { return this->GetElectronicReceipt(context, request, response); }));}
    void SetMessageAllocatorFor_GetElectronicReceipt(
        ::grpc::MessageAllocator< ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetElectronicReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ExecuteBatch<WithCallbackMethod_QueryBatch<WithCallbackMethod_QueryDetail<WithCallbackMethod_GetBillReceipt<WithCallbackMethod_GetElectronicReceipt<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryBatch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryDetail() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryTransferDetailRequest* /*request*/, ::palm::wechat::v1::PayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteBatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryBatch() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryBatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryDetail() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryTransferDetailRequest* /*request*/, ::palm::wechat::v1::PayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryDetail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBillReceipt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElectronicReceipt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteBatch(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryBatch() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryBatch(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryDetail() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryDetail(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryTransferDetailRequest* /*request*/, ::palm::wechat::v1::PayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryDetail(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBillReceipt(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBillReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetElectronicReceipt(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetElectronicReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayExecuteBatchTransferRequest, ::palm::wechat::v1::PayExecuteBatchTransferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayExecuteBatchTransferRequest, ::palm::wechat::v1::PayExecuteBatchTransferResponse>* streamer) {
                       return this->StreamedExecuteBatch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayExecuteBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteBatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayExecuteBatchTransferRequest,::palm::wechat::v1::PayExecuteBatchTransferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryBatch() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayQueryBatchTransferRequest, ::palm::wechat::v1::PayQueryBatchTransferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayQueryBatchTransferRequest, ::palm::wechat::v1::PayQueryBatchTransferResponse>* streamer) {
                       return this->StreamedQueryBatch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryBatchTransferRequest* /*request*/, ::palm::wechat::v1::PayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryBatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayQueryBatchTransferRequest,::palm::wechat::v1::PayQueryBatchTransferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryDetail() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayQueryTransferDetailRequest, ::palm::wechat::v1::PayQueryTransferDetailResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayQueryTransferDetailRequest, ::palm::wechat::v1::PayQueryTransferDetailResponse>* streamer) {
                       return this->StreamedQueryDetail(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayQueryTransferDetailRequest* /*request*/, ::palm::wechat::v1::PayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryDetail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayQueryTransferDetailRequest,::palm::wechat::v1::PayQueryTransferDetailResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayTransferGetBillReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayTransferGetBillReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>* streamer) {
                       return this->StreamedGetBillReceipt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetBillReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBillReceipt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayTransferGetBillReceiptRequest,::palm::wechat::v1::PayTransferGetReceiptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest, ::palm::wechat::v1::PayTransferGetReceiptResponse>* streamer) {
                       return this->StreamedGetElectronicReceipt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest* /*request*/, ::palm::wechat::v1::PayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetElectronicReceipt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest,::palm::wechat::v1::PayTransferGetReceiptResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExecuteBatch<WithStreamedUnaryMethod_QueryBatch<WithStreamedUnaryMethod_QueryDetail<WithStreamedUnaryMethod_GetBillReceipt<WithStreamedUnaryMethod_GetElectronicReceipt<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExecuteBatch<WithStreamedUnaryMethod_QueryBatch<WithStreamedUnaryMethod_QueryDetail<WithStreamedUnaryMethod_GetBillReceipt<WithStreamedUnaryMethod_GetElectronicReceipt<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace wechat
}  // namespace palm


#endif  // GRPC_wechat_2eproto__INCLUDED
