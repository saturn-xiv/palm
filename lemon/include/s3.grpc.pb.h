// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: s3.proto
#ifndef GRPC_s3_2eproto__INCLUDED
#define GRPC_s3_2eproto__INCLUDED

#include "s3.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace palm {
namespace s3 {
namespace v1 {

class S3 final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.s3.v1.S3";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::palm::s3::v1::S3CreateBucketResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3CreateBucketResponse>> AsyncCreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3CreateBucketResponse>>(AsyncCreateBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3CreateBucketResponse>> PrepareAsyncCreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3CreateBucketResponse>>(PrepareAsyncCreateBucketRaw(context, request, cq));
    }
    virtual ::grpc::Status Upload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::palm::s3::v1::S3UploadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UploadResponse>> AsyncUpload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UploadResponse>>(AsyncUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UploadResponse>> PrepareAsyncUpload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UploadResponse>>(PrepareAsyncUploadRaw(context, request, cq));
    }
    virtual ::grpc::Status PermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::palm::s3::v1::S3UrlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>> AsyncPermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>>(AsyncPermanentUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>> PrepareAsyncPermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>>(PrepareAsyncPermanentUrlRaw(context, request, cq));
    }
    virtual ::grpc::Status PresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::palm::s3::v1::S3UrlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>> AsyncPresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>>(AsyncPresignedUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>> PrepareAsyncPresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>>(PrepareAsyncPresignedUrlRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest* request, ::palm::s3::v1::S3CreateBucketResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest* request, ::palm::s3::v1::S3CreateBucketResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Upload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest* request, ::palm::s3::v1::S3UploadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Upload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest* request, ::palm::s3::v1::S3UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3CreateBucketResponse>* AsyncCreateBucketRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3CreateBucketResponse>* PrepareAsyncCreateBucketRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UploadResponse>* AsyncUploadRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UploadResponse>* PrepareAsyncUploadRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>* AsyncPermanentUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>* PrepareAsyncPermanentUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>* AsyncPresignedUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::s3::v1::S3UrlResponse>* PrepareAsyncPresignedUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::palm::s3::v1::S3CreateBucketResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3CreateBucketResponse>> AsyncCreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3CreateBucketResponse>>(AsyncCreateBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3CreateBucketResponse>> PrepareAsyncCreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3CreateBucketResponse>>(PrepareAsyncCreateBucketRaw(context, request, cq));
    }
    ::grpc::Status Upload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::palm::s3::v1::S3UploadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UploadResponse>> AsyncUpload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UploadResponse>>(AsyncUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UploadResponse>> PrepareAsyncUpload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UploadResponse>>(PrepareAsyncUploadRaw(context, request, cq));
    }
    ::grpc::Status PermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::palm::s3::v1::S3UrlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>> AsyncPermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>>(AsyncPermanentUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>> PrepareAsyncPermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>>(PrepareAsyncPermanentUrlRaw(context, request, cq));
    }
    ::grpc::Status PresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::palm::s3::v1::S3UrlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>> AsyncPresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>>(AsyncPresignedUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>> PrepareAsyncPresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>>(PrepareAsyncPresignedUrlRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest* request, ::palm::s3::v1::S3CreateBucketResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateBucket(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest* request, ::palm::s3::v1::S3CreateBucketResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Upload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest* request, ::palm::s3::v1::S3UploadResponse* response, std::function<void(::grpc::Status)>) override;
      void Upload(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest* request, ::palm::s3::v1::S3UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, std::function<void(::grpc::Status)>) override;
      void PermanentUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, std::function<void(::grpc::Status)>) override;
      void PresignedUrl(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3CreateBucketResponse>* AsyncCreateBucketRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3CreateBucketResponse>* PrepareAsyncCreateBucketRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3CreateBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UploadResponse>* AsyncUploadRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UploadResponse>* PrepareAsyncUploadRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3UploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>* AsyncPermanentUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>* PrepareAsyncPermanentUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PermanentUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>* AsyncPresignedUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::s3::v1::S3UrlResponse>* PrepareAsyncPresignedUrlRaw(::grpc::ClientContext* context, const ::palm::s3::v1::S3PresignedUrlRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateBucket_;
    const ::grpc::internal::RpcMethod rpcmethod_Upload_;
    const ::grpc::internal::RpcMethod rpcmethod_PermanentUrl_;
    const ::grpc::internal::RpcMethod rpcmethod_PresignedUrl_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateBucket(::grpc::ServerContext* context, const ::palm::s3::v1::S3CreateBucketRequest* request, ::palm::s3::v1::S3CreateBucketResponse* response);
    virtual ::grpc::Status Upload(::grpc::ServerContext* context, const ::palm::s3::v1::S3UploadRequest* request, ::palm::s3::v1::S3UploadResponse* response);
    virtual ::grpc::Status PermanentUrl(::grpc::ServerContext* context, const ::palm::s3::v1::S3PermanentUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response);
    virtual ::grpc::Status PresignedUrl(::grpc::ServerContext* context, const ::palm::s3::v1::S3PresignedUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateBucket() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3CreateBucketRequest* /*request*/, ::palm::s3::v1::S3CreateBucketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBucket(::grpc::ServerContext* context, ::palm::s3::v1::S3CreateBucketRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::s3::v1::S3CreateBucketResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Upload() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3UploadRequest* /*request*/, ::palm::s3::v1::S3UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpload(::grpc::ServerContext* context, ::palm::s3::v1::S3UploadRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::s3::v1::S3UploadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PermanentUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PermanentUrl() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PermanentUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PermanentUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPermanentUrl(::grpc::ServerContext* context, ::palm::s3::v1::S3PermanentUrlRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::s3::v1::S3UrlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PresignedUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PresignedUrl() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PresignedUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresignedUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PresignedUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPresignedUrl(::grpc::ServerContext* context, ::palm::s3::v1::S3PresignedUrlRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::s3::v1::S3UrlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateBucket<WithAsyncMethod_Upload<WithAsyncMethod_PermanentUrl<WithAsyncMethod_PresignedUrl<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateBucket() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::s3::v1::S3CreateBucketRequest, ::palm::s3::v1::S3CreateBucketResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::s3::v1::S3CreateBucketRequest* request, ::palm::s3::v1::S3CreateBucketResponse* response) { return this->CreateBucket(context, request, response); }));}
    void SetMessageAllocatorFor_CreateBucket(
        ::grpc::MessageAllocator< ::palm::s3::v1::S3CreateBucketRequest, ::palm::s3::v1::S3CreateBucketResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::s3::v1::S3CreateBucketRequest, ::palm::s3::v1::S3CreateBucketResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3CreateBucketRequest* /*request*/, ::palm::s3::v1::S3CreateBucketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::s3::v1::S3CreateBucketRequest* /*request*/, ::palm::s3::v1::S3CreateBucketResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Upload() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::s3::v1::S3UploadRequest, ::palm::s3::v1::S3UploadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::s3::v1::S3UploadRequest* request, ::palm::s3::v1::S3UploadResponse* response) { return this->Upload(context, request, response); }));}
    void SetMessageAllocatorFor_Upload(
        ::grpc::MessageAllocator< ::palm::s3::v1::S3UploadRequest, ::palm::s3::v1::S3UploadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::s3::v1::S3UploadRequest, ::palm::s3::v1::S3UploadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3UploadRequest* /*request*/, ::palm::s3::v1::S3UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Upload(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::s3::v1::S3UploadRequest* /*request*/, ::palm::s3::v1::S3UploadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PermanentUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PermanentUrl() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::s3::v1::S3PermanentUrlRequest, ::palm::s3::v1::S3UrlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::s3::v1::S3PermanentUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response) { return this->PermanentUrl(context, request, response); }));}
    void SetMessageAllocatorFor_PermanentUrl(
        ::grpc::MessageAllocator< ::palm::s3::v1::S3PermanentUrlRequest, ::palm::s3::v1::S3UrlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::s3::v1::S3PermanentUrlRequest, ::palm::s3::v1::S3UrlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PermanentUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PermanentUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PermanentUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::s3::v1::S3PermanentUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PresignedUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PresignedUrl() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::s3::v1::S3PresignedUrlRequest, ::palm::s3::v1::S3UrlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::s3::v1::S3PresignedUrlRequest* request, ::palm::s3::v1::S3UrlResponse* response) { return this->PresignedUrl(context, request, response); }));}
    void SetMessageAllocatorFor_PresignedUrl(
        ::grpc::MessageAllocator< ::palm::s3::v1::S3PresignedUrlRequest, ::palm::s3::v1::S3UrlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::s3::v1::S3PresignedUrlRequest, ::palm::s3::v1::S3UrlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PresignedUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresignedUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PresignedUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PresignedUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::s3::v1::S3PresignedUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateBucket<WithCallbackMethod_Upload<WithCallbackMethod_PermanentUrl<WithCallbackMethod_PresignedUrl<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateBucket() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3CreateBucketRequest* /*request*/, ::palm::s3::v1::S3CreateBucketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Upload() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3UploadRequest* /*request*/, ::palm::s3::v1::S3UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PermanentUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PermanentUrl() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PermanentUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PermanentUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PresignedUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PresignedUrl() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PresignedUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresignedUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PresignedUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateBucket() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3CreateBucketRequest* /*request*/, ::palm::s3::v1::S3CreateBucketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBucket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Upload() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3UploadRequest* /*request*/, ::palm::s3::v1::S3UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PermanentUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PermanentUrl() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PermanentUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PermanentUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPermanentUrl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PresignedUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PresignedUrl() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PresignedUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresignedUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PresignedUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPresignedUrl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateBucket() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateBucket(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3CreateBucketRequest* /*request*/, ::palm::s3::v1::S3CreateBucketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Upload() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Upload(context, request, response); }));
    }
    ~WithRawCallbackMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3UploadRequest* /*request*/, ::palm::s3::v1::S3UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Upload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PermanentUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PermanentUrl() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PermanentUrl(context, request, response); }));
    }
    ~WithRawCallbackMethod_PermanentUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PermanentUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PermanentUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PermanentUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PresignedUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PresignedUrl() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PresignedUrl(context, request, response); }));
    }
    ~WithRawCallbackMethod_PresignedUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresignedUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PresignedUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PresignedUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateBucket() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::s3::v1::S3CreateBucketRequest, ::palm::s3::v1::S3CreateBucketResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::s3::v1::S3CreateBucketRequest, ::palm::s3::v1::S3CreateBucketResponse>* streamer) {
                       return this->StreamedCreateBucket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3CreateBucketRequest* /*request*/, ::palm::s3::v1::S3CreateBucketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateBucket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::s3::v1::S3CreateBucketRequest,::palm::s3::v1::S3CreateBucketResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Upload() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::s3::v1::S3UploadRequest, ::palm::s3::v1::S3UploadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::s3::v1::S3UploadRequest, ::palm::s3::v1::S3UploadResponse>* streamer) {
                       return this->StreamedUpload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3UploadRequest* /*request*/, ::palm::s3::v1::S3UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::s3::v1::S3UploadRequest,::palm::s3::v1::S3UploadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PermanentUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PermanentUrl() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::s3::v1::S3PermanentUrlRequest, ::palm::s3::v1::S3UrlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::s3::v1::S3PermanentUrlRequest, ::palm::s3::v1::S3UrlResponse>* streamer) {
                       return this->StreamedPermanentUrl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PermanentUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PermanentUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PermanentUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPermanentUrl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::s3::v1::S3PermanentUrlRequest,::palm::s3::v1::S3UrlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PresignedUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PresignedUrl() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::s3::v1::S3PresignedUrlRequest, ::palm::s3::v1::S3UrlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::s3::v1::S3PresignedUrlRequest, ::palm::s3::v1::S3UrlResponse>* streamer) {
                       return this->StreamedPresignedUrl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PresignedUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PresignedUrl(::grpc::ServerContext* /*context*/, const ::palm::s3::v1::S3PresignedUrlRequest* /*request*/, ::palm::s3::v1::S3UrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPresignedUrl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::s3::v1::S3PresignedUrlRequest,::palm::s3::v1::S3UrlResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateBucket<WithStreamedUnaryMethod_Upload<WithStreamedUnaryMethod_PermanentUrl<WithStreamedUnaryMethod_PresignedUrl<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateBucket<WithStreamedUnaryMethod_Upload<WithStreamedUnaryMethod_PermanentUrl<WithStreamedUnaryMethod_PresignedUrl<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace s3
}  // namespace palm


#endif  // GRPC_s3_2eproto__INCLUDED
