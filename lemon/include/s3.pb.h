// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: s3.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_s3_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_s3_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_s3_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_s3_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_s3_2eproto;
namespace palm {
namespace s3 {
namespace v1 {
class Bucket;
struct BucketDefaultTypeInternal;
extern BucketDefaultTypeInternal _Bucket_default_instance_;
class CreateBucketRequest;
struct CreateBucketRequestDefaultTypeInternal;
extern CreateBucketRequestDefaultTypeInternal _CreateBucketRequest_default_instance_;
class CreateBucketResponse;
struct CreateBucketResponseDefaultTypeInternal;
extern CreateBucketResponseDefaultTypeInternal _CreateBucketResponse_default_instance_;
class ObjectPermanentUrlRequest;
struct ObjectPermanentUrlRequestDefaultTypeInternal;
extern ObjectPermanentUrlRequestDefaultTypeInternal _ObjectPermanentUrlRequest_default_instance_;
class ObjectPresignedUrlRequest;
struct ObjectPresignedUrlRequestDefaultTypeInternal;
extern ObjectPresignedUrlRequestDefaultTypeInternal _ObjectPresignedUrlRequest_default_instance_;
class RemoveObjectRequest;
struct RemoveObjectRequestDefaultTypeInternal;
extern RemoveObjectRequestDefaultTypeInternal _RemoveObjectRequest_default_instance_;
class UploadObjectRequest;
struct UploadObjectRequestDefaultTypeInternal;
extern UploadObjectRequestDefaultTypeInternal _UploadObjectRequest_default_instance_;
class UploadObjectResponse;
struct UploadObjectResponseDefaultTypeInternal;
extern UploadObjectResponseDefaultTypeInternal _UploadObjectResponse_default_instance_;
class UrlResponse;
struct UrlResponseDefaultTypeInternal;
extern UrlResponseDefaultTypeInternal _UrlResponse_default_instance_;
}  // namespace v1
}  // namespace s3
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace s3 {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class UrlResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.s3.v1.UrlResponse) */ {
 public:
  inline UrlResponse() : UrlResponse(nullptr) {}
  ~UrlResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UrlResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UrlResponse(const UrlResponse& from) : UrlResponse(nullptr, from) {}
  inline UrlResponse(UrlResponse&& from) noexcept
      : UrlResponse(nullptr, std::move(from)) {}
  inline UrlResponse& operator=(const UrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrlResponse& operator=(UrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UrlResponse* internal_default_instance() {
    return reinterpret_cast<const UrlResponse*>(
        &_UrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(UrlResponse& a, UrlResponse& b) { a.Swap(&b); }
  inline void Swap(UrlResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UrlResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UrlResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UrlResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UrlResponse& from) { UrlResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UrlResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.s3.v1.UrlResponse"; }

 protected:
  explicit UrlResponse(::google::protobuf::Arena* arena);
  UrlResponse(::google::protobuf::Arena* arena, const UrlResponse& from);
  UrlResponse(::google::protobuf::Arena* arena, UrlResponse&& from) noexcept
      : UrlResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // @@protoc_insertion_point(class_scope:palm.s3.v1.UrlResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      34, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_UrlResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UrlResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr url_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s3_2eproto;
};
// -------------------------------------------------------------------

class UploadObjectResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.s3.v1.UploadObjectResponse) */ {
 public:
  inline UploadObjectResponse() : UploadObjectResponse(nullptr) {}
  ~UploadObjectResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadObjectResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UploadObjectResponse(const UploadObjectResponse& from) : UploadObjectResponse(nullptr, from) {}
  inline UploadObjectResponse(UploadObjectResponse&& from) noexcept
      : UploadObjectResponse(nullptr, std::move(from)) {}
  inline UploadObjectResponse& operator=(const UploadObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadObjectResponse& operator=(UploadObjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadObjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadObjectResponse* internal_default_instance() {
    return reinterpret_cast<const UploadObjectResponse*>(
        &_UploadObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(UploadObjectResponse& a, UploadObjectResponse& b) { a.Swap(&b); }
  inline void Swap(UploadObjectResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadObjectResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadObjectResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UploadObjectResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadObjectResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UploadObjectResponse& from) { UploadObjectResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UploadObjectResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.s3.v1.UploadObjectResponse"; }

 protected:
  explicit UploadObjectResponse(::google::protobuf::Arena* arena);
  UploadObjectResponse(::google::protobuf::Arena* arena, const UploadObjectResponse& from);
  UploadObjectResponse(::google::protobuf::Arena* arena, UploadObjectResponse&& from) noexcept
      : UploadObjectResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kObjectFieldNumber = 1,
    kUrlFieldNumber = 9,
  };
  // string object = 1;
  void clear_object() ;
  const std::string& object() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_object(Arg_&& arg, Args_... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* value);

  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(
      const std::string& value);
  std::string* _internal_mutable_object();

  public:
  // string url = 9;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // @@protoc_insertion_point(class_scope:palm.s3.v1.UploadObjectResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_UploadObjectResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UploadObjectResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr object_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s3_2eproto;
};
// -------------------------------------------------------------------

class RemoveObjectRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.s3.v1.RemoveObjectRequest) */ {
 public:
  inline RemoveObjectRequest() : RemoveObjectRequest(nullptr) {}
  ~RemoveObjectRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveObjectRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RemoveObjectRequest(const RemoveObjectRequest& from) : RemoveObjectRequest(nullptr, from) {}
  inline RemoveObjectRequest(RemoveObjectRequest&& from) noexcept
      : RemoveObjectRequest(nullptr, std::move(from)) {}
  inline RemoveObjectRequest& operator=(const RemoveObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveObjectRequest& operator=(RemoveObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveObjectRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveObjectRequest*>(
        &_RemoveObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(RemoveObjectRequest& a, RemoveObjectRequest& b) { a.Swap(&b); }
  inline void Swap(RemoveObjectRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveObjectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveObjectRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RemoveObjectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveObjectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RemoveObjectRequest& from) { RemoveObjectRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RemoveObjectRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.s3.v1.RemoveObjectRequest"; }

 protected:
  explicit RemoveObjectRequest(::google::protobuf::Arena* arena);
  RemoveObjectRequest(::google::protobuf::Arena* arena, const RemoveObjectRequest& from);
  RemoveObjectRequest(::google::protobuf::Arena* arena, RemoveObjectRequest&& from) noexcept
      : RemoveObjectRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
  };
  // string bucket = 1;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* value);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string object = 2;
  void clear_object() ;
  const std::string& object() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_object(Arg_&& arg, Args_... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* value);

  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(
      const std::string& value);
  std::string* _internal_mutable_object();

  public:
  // @@protoc_insertion_point(class_scope:palm.s3.v1.RemoveObjectRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RemoveObjectRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RemoveObjectRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr object_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s3_2eproto;
};
// -------------------------------------------------------------------

class ObjectPermanentUrlRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.s3.v1.ObjectPermanentUrlRequest) */ {
 public:
  inline ObjectPermanentUrlRequest() : ObjectPermanentUrlRequest(nullptr) {}
  ~ObjectPermanentUrlRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ObjectPermanentUrlRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ObjectPermanentUrlRequest(const ObjectPermanentUrlRequest& from) : ObjectPermanentUrlRequest(nullptr, from) {}
  inline ObjectPermanentUrlRequest(ObjectPermanentUrlRequest&& from) noexcept
      : ObjectPermanentUrlRequest(nullptr, std::move(from)) {}
  inline ObjectPermanentUrlRequest& operator=(const ObjectPermanentUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPermanentUrlRequest& operator=(ObjectPermanentUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPermanentUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPermanentUrlRequest* internal_default_instance() {
    return reinterpret_cast<const ObjectPermanentUrlRequest*>(
        &_ObjectPermanentUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ObjectPermanentUrlRequest& a, ObjectPermanentUrlRequest& b) { a.Swap(&b); }
  inline void Swap(ObjectPermanentUrlRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPermanentUrlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectPermanentUrlRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ObjectPermanentUrlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ObjectPermanentUrlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ObjectPermanentUrlRequest& from) { ObjectPermanentUrlRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ObjectPermanentUrlRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.s3.v1.ObjectPermanentUrlRequest"; }

 protected:
  explicit ObjectPermanentUrlRequest(::google::protobuf::Arena* arena);
  ObjectPermanentUrlRequest(::google::protobuf::Arena* arena, const ObjectPermanentUrlRequest& from);
  ObjectPermanentUrlRequest(::google::protobuf::Arena* arena, ObjectPermanentUrlRequest&& from) noexcept
      : ObjectPermanentUrlRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
    kTitleFieldNumber = 3,
    kContentTypeFieldNumber = 4,
  };
  // string bucket = 1;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* value);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string object = 2;
  void clear_object() ;
  const std::string& object() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_object(Arg_&& arg, Args_... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* value);

  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(
      const std::string& value);
  std::string* _internal_mutable_object();

  public:
  // string title = 3;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // optional string content_type = 4;
  bool has_content_type() const;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* value);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // @@protoc_insertion_point(class_scope:palm.s3.v1.ObjectPermanentUrlRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      74, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ObjectPermanentUrlRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ObjectPermanentUrlRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr object_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s3_2eproto;
};
// -------------------------------------------------------------------

class CreateBucketResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.s3.v1.CreateBucketResponse) */ {
 public:
  inline CreateBucketResponse() : CreateBucketResponse(nullptr) {}
  ~CreateBucketResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateBucketResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateBucketResponse(const CreateBucketResponse& from) : CreateBucketResponse(nullptr, from) {}
  inline CreateBucketResponse(CreateBucketResponse&& from) noexcept
      : CreateBucketResponse(nullptr, std::move(from)) {}
  inline CreateBucketResponse& operator=(const CreateBucketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBucketResponse& operator=(CreateBucketResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBucketResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBucketResponse* internal_default_instance() {
    return reinterpret_cast<const CreateBucketResponse*>(
        &_CreateBucketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CreateBucketResponse& a, CreateBucketResponse& b) { a.Swap(&b); }
  inline void Swap(CreateBucketResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBucketResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBucketResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CreateBucketResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateBucketResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateBucketResponse& from) { CreateBucketResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateBucketResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.s3.v1.CreateBucketResponse"; }

 protected:
  explicit CreateBucketResponse(::google::protobuf::Arena* arena);
  CreateBucketResponse(::google::protobuf::Arena* arena, const CreateBucketResponse& from);
  CreateBucketResponse(::google::protobuf::Arena* arena, CreateBucketResponse&& from) noexcept
      : CreateBucketResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:palm.s3.v1.CreateBucketResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CreateBucketResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateBucketResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s3_2eproto;
};
// -------------------------------------------------------------------

class CreateBucketRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.s3.v1.CreateBucketRequest) */ {
 public:
  inline CreateBucketRequest() : CreateBucketRequest(nullptr) {}
  ~CreateBucketRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateBucketRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateBucketRequest(const CreateBucketRequest& from) : CreateBucketRequest(nullptr, from) {}
  inline CreateBucketRequest(CreateBucketRequest&& from) noexcept
      : CreateBucketRequest(nullptr, std::move(from)) {}
  inline CreateBucketRequest& operator=(const CreateBucketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBucketRequest& operator=(CreateBucketRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBucketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBucketRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBucketRequest*>(
        &_CreateBucketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CreateBucketRequest& a, CreateBucketRequest& b) { a.Swap(&b); }
  inline void Swap(CreateBucketRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBucketRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBucketRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CreateBucketRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateBucketRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateBucketRequest& from) { CreateBucketRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateBucketRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.s3.v1.CreateBucketRequest"; }

 protected:
  explicit CreateBucketRequest(::google::protobuf::Arena* arena);
  CreateBucketRequest(::google::protobuf::Arena* arena, const CreateBucketRequest& from);
  CreateBucketRequest(::google::protobuf::Arena* arena, CreateBucketRequest&& from) noexcept
      : CreateBucketRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPublicFieldNumber = 2,
    kExpirationDaysFieldNumber = 9,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bool public = 2;
  void clear_public_() ;
  bool public_() const;
  void set_public_(bool value);

  private:
  bool _internal_public_() const;
  void _internal_set_public_(bool value);

  public:
  // uint32 expiration_days = 9;
  void clear_expiration_days() ;
  ::uint32_t expiration_days() const;
  void set_expiration_days(::uint32_t value);

  private:
  ::uint32_t _internal_expiration_days() const;
  void _internal_set_expiration_days(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.s3.v1.CreateBucketRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CreateBucketRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateBucketRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    bool public__;
    ::uint32_t expiration_days_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s3_2eproto;
};
// -------------------------------------------------------------------

class Bucket final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.s3.v1.Bucket) */ {
 public:
  inline Bucket() : Bucket(nullptr) {}
  ~Bucket() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Bucket(
      ::google::protobuf::internal::ConstantInitialized);

  inline Bucket(const Bucket& from) : Bucket(nullptr, from) {}
  inline Bucket(Bucket&& from) noexcept
      : Bucket(nullptr, std::move(from)) {}
  inline Bucket& operator=(const Bucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket& operator=(Bucket&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket* internal_default_instance() {
    return reinterpret_cast<const Bucket*>(
        &_Bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Bucket& a, Bucket& b) { a.Swap(&b); }
  inline void Swap(Bucket* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Bucket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Bucket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Bucket& from) { Bucket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Bucket* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.s3.v1.Bucket"; }

 protected:
  explicit Bucket(::google::protobuf::Arena* arena);
  Bucket(::google::protobuf::Arena* arena, const Bucket& from);
  Bucket(::google::protobuf::Arena* arena, Bucket&& from) noexcept
      : Bucket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPublicFieldNumber = 2,
    kExpirationDaysFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bool public = 2;
  void clear_public_() ;
  bool public_() const;
  void set_public_(bool value);

  private:
  bool _internal_public_() const;
  void _internal_set_public_(bool value);

  public:
  // int32 expiration_days = 3;
  void clear_expiration_days() ;
  ::int32_t expiration_days() const;
  void set_expiration_days(::int32_t value);

  private:
  ::int32_t _internal_expiration_days() const;
  void _internal_set_expiration_days(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.s3.v1.Bucket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      30, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Bucket_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Bucket& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    bool public__;
    ::int32_t expiration_days_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s3_2eproto;
};
// -------------------------------------------------------------------

class UploadObjectRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.s3.v1.UploadObjectRequest) */ {
 public:
  inline UploadObjectRequest() : UploadObjectRequest(nullptr) {}
  ~UploadObjectRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadObjectRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UploadObjectRequest(const UploadObjectRequest& from) : UploadObjectRequest(nullptr, from) {}
  inline UploadObjectRequest(UploadObjectRequest&& from) noexcept
      : UploadObjectRequest(nullptr, std::move(from)) {}
  inline UploadObjectRequest& operator=(const UploadObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadObjectRequest& operator=(UploadObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadObjectRequest* internal_default_instance() {
    return reinterpret_cast<const UploadObjectRequest*>(
        &_UploadObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(UploadObjectRequest& a, UploadObjectRequest& b) { a.Swap(&b); }
  inline void Swap(UploadObjectRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadObjectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadObjectRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UploadObjectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadObjectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UploadObjectRequest& from) { UploadObjectRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UploadObjectRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.s3.v1.UploadObjectRequest"; }

 protected:
  explicit UploadObjectRequest(::google::protobuf::Arena* arena);
  UploadObjectRequest(::google::protobuf::Arena* arena, const UploadObjectRequest& from);
  UploadObjectRequest(::google::protobuf::Arena* arena, UploadObjectRequest&& from) noexcept
      : UploadObjectRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBucketFieldNumber = 1,
    kTitleFieldNumber = 2,
    kTtlFieldNumber = 9,
  };
  // string bucket = 1;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* value);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // .google.protobuf.Duration ttl = 9;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::google::protobuf::Duration& ttl() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_ttl();
  ::google::protobuf::Duration* mutable_ttl();
  void set_allocated_ttl(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_ttl();

  private:
  const ::google::protobuf::Duration& _internal_ttl() const;
  ::google::protobuf::Duration* _internal_mutable_ttl();

  public:
  // @@protoc_insertion_point(class_scope:palm.s3.v1.UploadObjectRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      50, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_UploadObjectRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UploadObjectRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::Duration* ttl_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s3_2eproto;
};
// -------------------------------------------------------------------

class ObjectPresignedUrlRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.s3.v1.ObjectPresignedUrlRequest) */ {
 public:
  inline ObjectPresignedUrlRequest() : ObjectPresignedUrlRequest(nullptr) {}
  ~ObjectPresignedUrlRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ObjectPresignedUrlRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ObjectPresignedUrlRequest(const ObjectPresignedUrlRequest& from) : ObjectPresignedUrlRequest(nullptr, from) {}
  inline ObjectPresignedUrlRequest(ObjectPresignedUrlRequest&& from) noexcept
      : ObjectPresignedUrlRequest(nullptr, std::move(from)) {}
  inline ObjectPresignedUrlRequest& operator=(const ObjectPresignedUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPresignedUrlRequest& operator=(ObjectPresignedUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPresignedUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPresignedUrlRequest* internal_default_instance() {
    return reinterpret_cast<const ObjectPresignedUrlRequest*>(
        &_ObjectPresignedUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ObjectPresignedUrlRequest& a, ObjectPresignedUrlRequest& b) { a.Swap(&b); }
  inline void Swap(ObjectPresignedUrlRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPresignedUrlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectPresignedUrlRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ObjectPresignedUrlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ObjectPresignedUrlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ObjectPresignedUrlRequest& from) { ObjectPresignedUrlRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ObjectPresignedUrlRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.s3.v1.ObjectPresignedUrlRequest"; }

 protected:
  explicit ObjectPresignedUrlRequest(::google::protobuf::Arena* arena);
  ObjectPresignedUrlRequest(::google::protobuf::Arena* arena, const ObjectPresignedUrlRequest& from);
  ObjectPresignedUrlRequest(::google::protobuf::Arena* arena, ObjectPresignedUrlRequest&& from) noexcept
      : ObjectPresignedUrlRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
    kTitleFieldNumber = 3,
    kContentTypeFieldNumber = 4,
    kTtlFieldNumber = 9,
  };
  // string bucket = 1;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* value);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string object = 2;
  void clear_object() ;
  const std::string& object() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_object(Arg_&& arg, Args_... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* value);

  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(
      const std::string& value);
  std::string* _internal_mutable_object();

  public:
  // string title = 3;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // optional string content_type = 4;
  bool has_content_type() const;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* value);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // .google.protobuf.Duration ttl = 9;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::google::protobuf::Duration& ttl() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_ttl();
  ::google::protobuf::Duration* mutable_ttl();
  void set_allocated_ttl(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_ttl();

  private:
  const ::google::protobuf::Duration& _internal_ttl() const;
  ::google::protobuf::Duration* _internal_mutable_ttl();

  public:
  // @@protoc_insertion_point(class_scope:palm.s3.v1.ObjectPresignedUrlRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      74, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ObjectPresignedUrlRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ObjectPresignedUrlRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr object_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    ::google::protobuf::Duration* ttl_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s3_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Bucket

// string name = 1;
inline void Bucket::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bucket::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.Bucket.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bucket::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.Bucket.name)
}
inline std::string* Bucket::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.Bucket.name)
  return _s;
}
inline const std::string& Bucket::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Bucket::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Bucket::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Bucket::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.Bucket.name)
  return _impl_.name_.Release();
}
inline void Bucket::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.Bucket.name)
}

// bool public = 2;
inline void Bucket::clear_public_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public__ = false;
}
inline bool Bucket::public_() const {
  // @@protoc_insertion_point(field_get:palm.s3.v1.Bucket.public)
  return _internal_public_();
}
inline void Bucket::set_public_(bool value) {
  _internal_set_public_(value);
  // @@protoc_insertion_point(field_set:palm.s3.v1.Bucket.public)
}
inline bool Bucket::_internal_public_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public__;
}
inline void Bucket::_internal_set_public_(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public__ = value;
}

// int32 expiration_days = 3;
inline void Bucket::clear_expiration_days() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_days_ = 0;
}
inline ::int32_t Bucket::expiration_days() const {
  // @@protoc_insertion_point(field_get:palm.s3.v1.Bucket.expiration_days)
  return _internal_expiration_days();
}
inline void Bucket::set_expiration_days(::int32_t value) {
  _internal_set_expiration_days(value);
  // @@protoc_insertion_point(field_set:palm.s3.v1.Bucket.expiration_days)
}
inline ::int32_t Bucket::_internal_expiration_days() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiration_days_;
}
inline void Bucket::_internal_set_expiration_days(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_days_ = value;
}

// -------------------------------------------------------------------

// CreateBucketRequest

// string name = 1;
inline void CreateBucketRequest::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateBucketRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.CreateBucketRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateBucketRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.CreateBucketRequest.name)
}
inline std::string* CreateBucketRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.CreateBucketRequest.name)
  return _s;
}
inline const std::string& CreateBucketRequest::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void CreateBucketRequest::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CreateBucketRequest::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CreateBucketRequest::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.CreateBucketRequest.name)
  return _impl_.name_.Release();
}
inline void CreateBucketRequest::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.CreateBucketRequest.name)
}

// bool public = 2;
inline void CreateBucketRequest::clear_public_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public__ = false;
}
inline bool CreateBucketRequest::public_() const {
  // @@protoc_insertion_point(field_get:palm.s3.v1.CreateBucketRequest.public)
  return _internal_public_();
}
inline void CreateBucketRequest::set_public_(bool value) {
  _internal_set_public_(value);
  // @@protoc_insertion_point(field_set:palm.s3.v1.CreateBucketRequest.public)
}
inline bool CreateBucketRequest::_internal_public_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public__;
}
inline void CreateBucketRequest::_internal_set_public_(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public__ = value;
}

// uint32 expiration_days = 9;
inline void CreateBucketRequest::clear_expiration_days() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_days_ = 0u;
}
inline ::uint32_t CreateBucketRequest::expiration_days() const {
  // @@protoc_insertion_point(field_get:palm.s3.v1.CreateBucketRequest.expiration_days)
  return _internal_expiration_days();
}
inline void CreateBucketRequest::set_expiration_days(::uint32_t value) {
  _internal_set_expiration_days(value);
  // @@protoc_insertion_point(field_set:palm.s3.v1.CreateBucketRequest.expiration_days)
}
inline ::uint32_t CreateBucketRequest::_internal_expiration_days() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiration_days_;
}
inline void CreateBucketRequest::_internal_set_expiration_days(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_days_ = value;
}

// -------------------------------------------------------------------

// CreateBucketResponse

// string name = 1;
inline void CreateBucketResponse::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateBucketResponse::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.CreateBucketResponse.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateBucketResponse::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.CreateBucketResponse.name)
}
inline std::string* CreateBucketResponse::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.CreateBucketResponse.name)
  return _s;
}
inline const std::string& CreateBucketResponse::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void CreateBucketResponse::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CreateBucketResponse::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CreateBucketResponse::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.CreateBucketResponse.name)
  return _impl_.name_.Release();
}
inline void CreateBucketResponse::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.CreateBucketResponse.name)
}

// -------------------------------------------------------------------

// UploadObjectRequest

// string bucket = 1;
inline void UploadObjectRequest::clear_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& UploadObjectRequest::bucket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.UploadObjectRequest.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadObjectRequest::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.UploadObjectRequest.bucket)
}
inline std::string* UploadObjectRequest::mutable_bucket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.UploadObjectRequest.bucket)
  return _s;
}
inline const std::string& UploadObjectRequest::_internal_bucket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bucket_.Get();
}
inline void UploadObjectRequest::_internal_set_bucket(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(value, GetArena());
}
inline std::string* UploadObjectRequest::_internal_mutable_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bucket_.Mutable( GetArena());
}
inline std::string* UploadObjectRequest::release_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.UploadObjectRequest.bucket)
  return _impl_.bucket_.Release();
}
inline void UploadObjectRequest::set_allocated_bucket(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.UploadObjectRequest.bucket)
}

// string title = 2;
inline void UploadObjectRequest::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& UploadObjectRequest::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.UploadObjectRequest.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadObjectRequest::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.UploadObjectRequest.title)
}
inline std::string* UploadObjectRequest::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.UploadObjectRequest.title)
  return _s;
}
inline const std::string& UploadObjectRequest::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void UploadObjectRequest::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* UploadObjectRequest::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* UploadObjectRequest::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.UploadObjectRequest.title)
  return _impl_.title_.Release();
}
inline void UploadObjectRequest::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.UploadObjectRequest.title)
}

// .google.protobuf.Duration ttl = 9;
inline bool UploadObjectRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& UploadObjectRequest::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& UploadObjectRequest::ttl() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.UploadObjectRequest.ttl)
  return _internal_ttl();
}
inline void UploadObjectRequest::unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.s3.v1.UploadObjectRequest.ttl)
}
inline ::google::protobuf::Duration* UploadObjectRequest::release_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* UploadObjectRequest::unsafe_arena_release_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.UploadObjectRequest.ttl)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* UploadObjectRequest::_internal_mutable_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ttl_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.ttl_;
}
inline ::google::protobuf::Duration* UploadObjectRequest::mutable_ttl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.UploadObjectRequest.ttl)
  return _msg;
}
inline void UploadObjectRequest::set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.UploadObjectRequest.ttl)
}

// -------------------------------------------------------------------

// UploadObjectResponse

// string object = 1;
inline void UploadObjectResponse::clear_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.ClearToEmpty();
}
inline const std::string& UploadObjectResponse::object() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.UploadObjectResponse.object)
  return _internal_object();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadObjectResponse::set_object(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.UploadObjectResponse.object)
}
inline std::string* UploadObjectResponse::mutable_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.UploadObjectResponse.object)
  return _s;
}
inline const std::string& UploadObjectResponse::_internal_object() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.object_.Get();
}
inline void UploadObjectResponse::_internal_set_object(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(value, GetArena());
}
inline std::string* UploadObjectResponse::_internal_mutable_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.object_.Mutable( GetArena());
}
inline std::string* UploadObjectResponse::release_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.UploadObjectResponse.object)
  return _impl_.object_.Release();
}
inline void UploadObjectResponse::set_allocated_object(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.object_.IsDefault()) {
          _impl_.object_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.UploadObjectResponse.object)
}

// string url = 9;
inline void UploadObjectResponse::clear_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& UploadObjectResponse::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.UploadObjectResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadObjectResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.UploadObjectResponse.url)
}
inline std::string* UploadObjectResponse::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.UploadObjectResponse.url)
  return _s;
}
inline const std::string& UploadObjectResponse::_internal_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.url_.Get();
}
inline void UploadObjectResponse::_internal_set_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(value, GetArena());
}
inline std::string* UploadObjectResponse::_internal_mutable_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* UploadObjectResponse::release_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.UploadObjectResponse.url)
  return _impl_.url_.Release();
}
inline void UploadObjectResponse::set_allocated_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.UploadObjectResponse.url)
}

// -------------------------------------------------------------------

// UrlResponse

// string url = 1;
inline void UrlResponse::clear_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& UrlResponse::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.UrlResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UrlResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.UrlResponse.url)
}
inline std::string* UrlResponse::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.UrlResponse.url)
  return _s;
}
inline const std::string& UrlResponse::_internal_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.url_.Get();
}
inline void UrlResponse::_internal_set_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(value, GetArena());
}
inline std::string* UrlResponse::_internal_mutable_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* UrlResponse::release_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.UrlResponse.url)
  return _impl_.url_.Release();
}
inline void UrlResponse::set_allocated_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.UrlResponse.url)
}

// -------------------------------------------------------------------

// ObjectPresignedUrlRequest

// string bucket = 1;
inline void ObjectPresignedUrlRequest::clear_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& ObjectPresignedUrlRequest::bucket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.ObjectPresignedUrlRequest.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectPresignedUrlRequest::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.ObjectPresignedUrlRequest.bucket)
}
inline std::string* ObjectPresignedUrlRequest::mutable_bucket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.ObjectPresignedUrlRequest.bucket)
  return _s;
}
inline const std::string& ObjectPresignedUrlRequest::_internal_bucket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bucket_.Get();
}
inline void ObjectPresignedUrlRequest::_internal_set_bucket(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(value, GetArena());
}
inline std::string* ObjectPresignedUrlRequest::_internal_mutable_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bucket_.Mutable( GetArena());
}
inline std::string* ObjectPresignedUrlRequest::release_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.ObjectPresignedUrlRequest.bucket)
  return _impl_.bucket_.Release();
}
inline void ObjectPresignedUrlRequest::set_allocated_bucket(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.ObjectPresignedUrlRequest.bucket)
}

// string object = 2;
inline void ObjectPresignedUrlRequest::clear_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.ClearToEmpty();
}
inline const std::string& ObjectPresignedUrlRequest::object() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.ObjectPresignedUrlRequest.object)
  return _internal_object();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectPresignedUrlRequest::set_object(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.ObjectPresignedUrlRequest.object)
}
inline std::string* ObjectPresignedUrlRequest::mutable_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.ObjectPresignedUrlRequest.object)
  return _s;
}
inline const std::string& ObjectPresignedUrlRequest::_internal_object() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.object_.Get();
}
inline void ObjectPresignedUrlRequest::_internal_set_object(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(value, GetArena());
}
inline std::string* ObjectPresignedUrlRequest::_internal_mutable_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.object_.Mutable( GetArena());
}
inline std::string* ObjectPresignedUrlRequest::release_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.ObjectPresignedUrlRequest.object)
  return _impl_.object_.Release();
}
inline void ObjectPresignedUrlRequest::set_allocated_object(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.object_.IsDefault()) {
          _impl_.object_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.ObjectPresignedUrlRequest.object)
}

// string title = 3;
inline void ObjectPresignedUrlRequest::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ObjectPresignedUrlRequest::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.ObjectPresignedUrlRequest.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectPresignedUrlRequest::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.ObjectPresignedUrlRequest.title)
}
inline std::string* ObjectPresignedUrlRequest::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.ObjectPresignedUrlRequest.title)
  return _s;
}
inline const std::string& ObjectPresignedUrlRequest::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void ObjectPresignedUrlRequest::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* ObjectPresignedUrlRequest::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* ObjectPresignedUrlRequest::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.ObjectPresignedUrlRequest.title)
  return _impl_.title_.Release();
}
inline void ObjectPresignedUrlRequest::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.ObjectPresignedUrlRequest.title)
}

// optional string content_type = 4;
inline bool ObjectPresignedUrlRequest::has_content_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ObjectPresignedUrlRequest::clear_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjectPresignedUrlRequest::content_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.ObjectPresignedUrlRequest.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectPresignedUrlRequest::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.ObjectPresignedUrlRequest.content_type)
}
inline std::string* ObjectPresignedUrlRequest::mutable_content_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.ObjectPresignedUrlRequest.content_type)
  return _s;
}
inline const std::string& ObjectPresignedUrlRequest::_internal_content_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_type_.Get();
}
inline void ObjectPresignedUrlRequest::_internal_set_content_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_type_.Set(value, GetArena());
}
inline std::string* ObjectPresignedUrlRequest::_internal_mutable_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_type_.Mutable( GetArena());
}
inline std::string* ObjectPresignedUrlRequest::release_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.ObjectPresignedUrlRequest.content_type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.content_type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ObjectPresignedUrlRequest::set_allocated_content_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.ObjectPresignedUrlRequest.content_type)
}

// .google.protobuf.Duration ttl = 9;
inline bool ObjectPresignedUrlRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& ObjectPresignedUrlRequest::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& ObjectPresignedUrlRequest::ttl() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.ObjectPresignedUrlRequest.ttl)
  return _internal_ttl();
}
inline void ObjectPresignedUrlRequest::unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.s3.v1.ObjectPresignedUrlRequest.ttl)
}
inline ::google::protobuf::Duration* ObjectPresignedUrlRequest::release_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* ObjectPresignedUrlRequest::unsafe_arena_release_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.ObjectPresignedUrlRequest.ttl)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* ObjectPresignedUrlRequest::_internal_mutable_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ttl_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.ttl_;
}
inline ::google::protobuf::Duration* ObjectPresignedUrlRequest::mutable_ttl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.ObjectPresignedUrlRequest.ttl)
  return _msg;
}
inline void ObjectPresignedUrlRequest::set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.ObjectPresignedUrlRequest.ttl)
}

// -------------------------------------------------------------------

// ObjectPermanentUrlRequest

// string bucket = 1;
inline void ObjectPermanentUrlRequest::clear_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& ObjectPermanentUrlRequest::bucket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.ObjectPermanentUrlRequest.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectPermanentUrlRequest::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.ObjectPermanentUrlRequest.bucket)
}
inline std::string* ObjectPermanentUrlRequest::mutable_bucket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.ObjectPermanentUrlRequest.bucket)
  return _s;
}
inline const std::string& ObjectPermanentUrlRequest::_internal_bucket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bucket_.Get();
}
inline void ObjectPermanentUrlRequest::_internal_set_bucket(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(value, GetArena());
}
inline std::string* ObjectPermanentUrlRequest::_internal_mutable_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bucket_.Mutable( GetArena());
}
inline std::string* ObjectPermanentUrlRequest::release_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.ObjectPermanentUrlRequest.bucket)
  return _impl_.bucket_.Release();
}
inline void ObjectPermanentUrlRequest::set_allocated_bucket(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.ObjectPermanentUrlRequest.bucket)
}

// string object = 2;
inline void ObjectPermanentUrlRequest::clear_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.ClearToEmpty();
}
inline const std::string& ObjectPermanentUrlRequest::object() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.ObjectPermanentUrlRequest.object)
  return _internal_object();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectPermanentUrlRequest::set_object(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.ObjectPermanentUrlRequest.object)
}
inline std::string* ObjectPermanentUrlRequest::mutable_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.ObjectPermanentUrlRequest.object)
  return _s;
}
inline const std::string& ObjectPermanentUrlRequest::_internal_object() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.object_.Get();
}
inline void ObjectPermanentUrlRequest::_internal_set_object(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(value, GetArena());
}
inline std::string* ObjectPermanentUrlRequest::_internal_mutable_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.object_.Mutable( GetArena());
}
inline std::string* ObjectPermanentUrlRequest::release_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.ObjectPermanentUrlRequest.object)
  return _impl_.object_.Release();
}
inline void ObjectPermanentUrlRequest::set_allocated_object(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.object_.IsDefault()) {
          _impl_.object_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.ObjectPermanentUrlRequest.object)
}

// string title = 3;
inline void ObjectPermanentUrlRequest::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ObjectPermanentUrlRequest::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.ObjectPermanentUrlRequest.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectPermanentUrlRequest::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.ObjectPermanentUrlRequest.title)
}
inline std::string* ObjectPermanentUrlRequest::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.ObjectPermanentUrlRequest.title)
  return _s;
}
inline const std::string& ObjectPermanentUrlRequest::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void ObjectPermanentUrlRequest::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* ObjectPermanentUrlRequest::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* ObjectPermanentUrlRequest::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.ObjectPermanentUrlRequest.title)
  return _impl_.title_.Release();
}
inline void ObjectPermanentUrlRequest::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.ObjectPermanentUrlRequest.title)
}

// optional string content_type = 4;
inline bool ObjectPermanentUrlRequest::has_content_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ObjectPermanentUrlRequest::clear_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjectPermanentUrlRequest::content_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.ObjectPermanentUrlRequest.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectPermanentUrlRequest::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.ObjectPermanentUrlRequest.content_type)
}
inline std::string* ObjectPermanentUrlRequest::mutable_content_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.ObjectPermanentUrlRequest.content_type)
  return _s;
}
inline const std::string& ObjectPermanentUrlRequest::_internal_content_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_type_.Get();
}
inline void ObjectPermanentUrlRequest::_internal_set_content_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_type_.Set(value, GetArena());
}
inline std::string* ObjectPermanentUrlRequest::_internal_mutable_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_type_.Mutable( GetArena());
}
inline std::string* ObjectPermanentUrlRequest::release_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.ObjectPermanentUrlRequest.content_type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.content_type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ObjectPermanentUrlRequest::set_allocated_content_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.ObjectPermanentUrlRequest.content_type)
}

// -------------------------------------------------------------------

// RemoveObjectRequest

// string bucket = 1;
inline void RemoveObjectRequest::clear_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& RemoveObjectRequest::bucket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.RemoveObjectRequest.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveObjectRequest::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.RemoveObjectRequest.bucket)
}
inline std::string* RemoveObjectRequest::mutable_bucket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.RemoveObjectRequest.bucket)
  return _s;
}
inline const std::string& RemoveObjectRequest::_internal_bucket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bucket_.Get();
}
inline void RemoveObjectRequest::_internal_set_bucket(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(value, GetArena());
}
inline std::string* RemoveObjectRequest::_internal_mutable_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bucket_.Mutable( GetArena());
}
inline std::string* RemoveObjectRequest::release_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.RemoveObjectRequest.bucket)
  return _impl_.bucket_.Release();
}
inline void RemoveObjectRequest::set_allocated_bucket(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.RemoveObjectRequest.bucket)
}

// string object = 2;
inline void RemoveObjectRequest::clear_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.ClearToEmpty();
}
inline const std::string& RemoveObjectRequest::object() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.s3.v1.RemoveObjectRequest.object)
  return _internal_object();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveObjectRequest::set_object(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.s3.v1.RemoveObjectRequest.object)
}
inline std::string* RemoveObjectRequest::mutable_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:palm.s3.v1.RemoveObjectRequest.object)
  return _s;
}
inline const std::string& RemoveObjectRequest::_internal_object() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.object_.Get();
}
inline void RemoveObjectRequest::_internal_set_object(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(value, GetArena());
}
inline std::string* RemoveObjectRequest::_internal_mutable_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.object_.Mutable( GetArena());
}
inline std::string* RemoveObjectRequest::release_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.s3.v1.RemoveObjectRequest.object)
  return _impl_.object_.Release();
}
inline void RemoveObjectRequest::set_allocated_object(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.object_.IsDefault()) {
          _impl_.object_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.s3.v1.RemoveObjectRequest.object)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace s3
}  // namespace palm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_s3_2eproto_2epb_2eh
