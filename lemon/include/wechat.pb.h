// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wechat.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_wechat_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_wechat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_wechat_2eproto;
namespace palm {
namespace wechat {
namespace v1 {
class MiniProgramCode2SessionRequest;
struct MiniProgramCode2SessionRequestDefaultTypeInternal;
extern MiniProgramCode2SessionRequestDefaultTypeInternal _MiniProgramCode2SessionRequest_default_instance_;
class MiniProgramCode2SessionResponse;
struct MiniProgramCode2SessionResponseDefaultTypeInternal;
extern MiniProgramCode2SessionResponseDefaultTypeInternal _MiniProgramCode2SessionResponse_default_instance_;
class Oauth2QrConnectUrlRequest;
struct Oauth2QrConnectUrlRequestDefaultTypeInternal;
extern Oauth2QrConnectUrlRequestDefaultTypeInternal _Oauth2QrConnectUrlRequest_default_instance_;
class Oauth2QrConnectUrlResponse;
struct Oauth2QrConnectUrlResponseDefaultTypeInternal;
extern Oauth2QrConnectUrlResponseDefaultTypeInternal _Oauth2QrConnectUrlResponse_default_instance_;
class Oauth2SignInRequest;
struct Oauth2SignInRequestDefaultTypeInternal;
extern Oauth2SignInRequestDefaultTypeInternal _Oauth2SignInRequest_default_instance_;
class Oauth2SignInResponse;
struct Oauth2SignInResponseDefaultTypeInternal;
extern Oauth2SignInResponseDefaultTypeInternal _Oauth2SignInResponse_default_instance_;
class Oauth2SignInResponse_UserInfo;
struct Oauth2SignInResponse_UserInfoDefaultTypeInternal;
extern Oauth2SignInResponse_UserInfoDefaultTypeInternal _Oauth2SignInResponse_UserInfo_default_instance_;
}  // namespace v1
}  // namespace wechat
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace wechat {
namespace v1 {
enum Oauth2QrConnectUrlRequest_Lang : int {
  Oauth2QrConnectUrlRequest_Lang_Cn = 0,
  Oauth2QrConnectUrlRequest_Lang_En = 1,
  Oauth2QrConnectUrlRequest_Lang_Oauth2QrConnectUrlRequest_Lang_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Oauth2QrConnectUrlRequest_Lang_Oauth2QrConnectUrlRequest_Lang_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Oauth2QrConnectUrlRequest_Lang_IsValid(int value);
extern const uint32_t Oauth2QrConnectUrlRequest_Lang_internal_data_[];
constexpr Oauth2QrConnectUrlRequest_Lang Oauth2QrConnectUrlRequest_Lang_Lang_MIN = static_cast<Oauth2QrConnectUrlRequest_Lang>(0);
constexpr Oauth2QrConnectUrlRequest_Lang Oauth2QrConnectUrlRequest_Lang_Lang_MAX = static_cast<Oauth2QrConnectUrlRequest_Lang>(1);
constexpr int Oauth2QrConnectUrlRequest_Lang_Lang_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Oauth2QrConnectUrlRequest_Lang_descriptor();
template <typename T>
const std::string& Oauth2QrConnectUrlRequest_Lang_Name(T value) {
  static_assert(std::is_same<T, Oauth2QrConnectUrlRequest_Lang>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Lang_Name().");
  return Oauth2QrConnectUrlRequest_Lang_Name(static_cast<Oauth2QrConnectUrlRequest_Lang>(value));
}
template <>
inline const std::string& Oauth2QrConnectUrlRequest_Lang_Name(Oauth2QrConnectUrlRequest_Lang value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Oauth2QrConnectUrlRequest_Lang_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Oauth2QrConnectUrlRequest_Lang_Parse(absl::string_view name, Oauth2QrConnectUrlRequest_Lang* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Oauth2QrConnectUrlRequest_Lang>(
      Oauth2QrConnectUrlRequest_Lang_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Oauth2SignInResponse_UserInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2SignInResponse.UserInfo) */ {
 public:
  inline Oauth2SignInResponse_UserInfo() : Oauth2SignInResponse_UserInfo(nullptr) {}
  ~Oauth2SignInResponse_UserInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2SignInResponse_UserInfo(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2SignInResponse_UserInfo(const Oauth2SignInResponse_UserInfo& from)
      : Oauth2SignInResponse_UserInfo(nullptr, from) {}
  Oauth2SignInResponse_UserInfo(Oauth2SignInResponse_UserInfo&& from) noexcept
    : Oauth2SignInResponse_UserInfo() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInResponse_UserInfo& operator=(const Oauth2SignInResponse_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInResponse_UserInfo& operator=(Oauth2SignInResponse_UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInResponse_UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInResponse_UserInfo* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInResponse_UserInfo*>(
               &_Oauth2SignInResponse_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Oauth2SignInResponse_UserInfo& a, Oauth2SignInResponse_UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInResponse_UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInResponse_UserInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInResponse_UserInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInResponse_UserInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInResponse_UserInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInResponse_UserInfo& from) {
    Oauth2SignInResponse_UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2SignInResponse_UserInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2SignInResponse.UserInfo";
  }
  protected:
  explicit Oauth2SignInResponse_UserInfo(::google::protobuf::Arena* arena);
  Oauth2SignInResponse_UserInfo(::google::protobuf::Arena* arena, const Oauth2SignInResponse_UserInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivilegeFieldNumber = 8,
    kOpenIdFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kProvinceFieldNumber = 4,
    kCityFieldNumber = 5,
    kCountryFieldNumber = 6,
    kHeadImgUrlFieldNumber = 7,
    kUnionIdFieldNumber = 9,
    kSexFieldNumber = 3,
  };
  // repeated string privilege = 8;
  int privilege_size() const;
  private:
  int _internal_privilege_size() const;

  public:
  void clear_privilege() ;
  const std::string& privilege(int index) const;
  std::string* mutable_privilege(int index);
  void set_privilege(int index, const std::string& value);
  void set_privilege(int index, std::string&& value);
  void set_privilege(int index, const char* value);
  void set_privilege(int index, const char* value, std::size_t size);
  void set_privilege(int index, absl::string_view value);
  std::string* add_privilege();
  void add_privilege(const std::string& value);
  void add_privilege(std::string&& value);
  void add_privilege(const char* value);
  void add_privilege(const char* value, std::size_t size);
  void add_privilege(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& privilege() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_privilege();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_privilege() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_privilege();

  public:
  // string open_id = 1;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* value);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string nickname = 2;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* value);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string province = 4;
  void clear_province() ;
  const std::string& province() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_province(Arg_&& arg, Args_... args);
  std::string* mutable_province();
  PROTOBUF_NODISCARD std::string* release_province();
  void set_allocated_province(std::string* value);

  private:
  const std::string& _internal_province() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_province(
      const std::string& value);
  std::string* _internal_mutable_province();

  public:
  // string city = 5;
  void clear_city() ;
  const std::string& city() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_city(Arg_&& arg, Args_... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* value);

  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(
      const std::string& value);
  std::string* _internal_mutable_city();

  public:
  // string country = 6;
  void clear_country() ;
  const std::string& country() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country(Arg_&& arg, Args_... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* value);

  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(
      const std::string& value);
  std::string* _internal_mutable_country();

  public:
  // optional string head_img_url = 7;
  bool has_head_img_url() const;
  void clear_head_img_url() ;
  const std::string& head_img_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_head_img_url(Arg_&& arg, Args_... args);
  std::string* mutable_head_img_url();
  PROTOBUF_NODISCARD std::string* release_head_img_url();
  void set_allocated_head_img_url(std::string* value);

  private:
  const std::string& _internal_head_img_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_head_img_url(
      const std::string& value);
  std::string* _internal_mutable_head_img_url();

  public:
  // string union_id = 9;
  void clear_union_id() ;
  const std::string& union_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* value);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // uint32 sex = 3;
  void clear_sex() ;
  ::uint32_t sex() const;
  void set_sex(::uint32_t value);

  private:
  ::uint32_t _internal_sex() const;
  void _internal_set_sex(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2SignInResponse.UserInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      124, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> privilege_;
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr province_;
    ::google::protobuf::internal::ArenaStringPtr city_;
    ::google::protobuf::internal::ArenaStringPtr country_;
    ::google::protobuf::internal::ArenaStringPtr head_img_url_;
    ::google::protobuf::internal::ArenaStringPtr union_id_;
    ::uint32_t sex_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class Oauth2SignInRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2SignInRequest) */ {
 public:
  inline Oauth2SignInRequest() : Oauth2SignInRequest(nullptr) {}
  ~Oauth2SignInRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2SignInRequest(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2SignInRequest(const Oauth2SignInRequest& from)
      : Oauth2SignInRequest(nullptr, from) {}
  Oauth2SignInRequest(Oauth2SignInRequest&& from) noexcept
    : Oauth2SignInRequest() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInRequest& operator=(const Oauth2SignInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInRequest& operator=(Oauth2SignInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInRequest* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInRequest*>(
               &_Oauth2SignInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Oauth2SignInRequest& a, Oauth2SignInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInRequest& from) {
    Oauth2SignInRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2SignInRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2SignInRequest";
  }
  protected:
  explicit Oauth2SignInRequest(::google::protobuf::Arena* arena);
  Oauth2SignInRequest(::google::protobuf::Arena* arena, const Oauth2SignInRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kStateFieldNumber = 2,
    kLangFieldNumber = 9,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string state = 2;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // .palm.wechat.v1.Oauth2QrConnectUrlRequest.Lang lang = 9;
  void clear_lang() ;
  ::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang lang() const;
  void set_lang(::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang value);

  private:
  ::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang _internal_lang() const;
  void _internal_set_lang(::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2SignInRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    int lang_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class Oauth2QrConnectUrlResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2QrConnectUrlResponse) */ {
 public:
  inline Oauth2QrConnectUrlResponse() : Oauth2QrConnectUrlResponse(nullptr) {}
  ~Oauth2QrConnectUrlResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2QrConnectUrlResponse(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2QrConnectUrlResponse(const Oauth2QrConnectUrlResponse& from)
      : Oauth2QrConnectUrlResponse(nullptr, from) {}
  Oauth2QrConnectUrlResponse(Oauth2QrConnectUrlResponse&& from) noexcept
    : Oauth2QrConnectUrlResponse() {
    *this = ::std::move(from);
  }

  inline Oauth2QrConnectUrlResponse& operator=(const Oauth2QrConnectUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2QrConnectUrlResponse& operator=(Oauth2QrConnectUrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2QrConnectUrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2QrConnectUrlResponse* internal_default_instance() {
    return reinterpret_cast<const Oauth2QrConnectUrlResponse*>(
               &_Oauth2QrConnectUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Oauth2QrConnectUrlResponse& a, Oauth2QrConnectUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2QrConnectUrlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2QrConnectUrlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2QrConnectUrlResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2QrConnectUrlResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2QrConnectUrlResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2QrConnectUrlResponse& from) {
    Oauth2QrConnectUrlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2QrConnectUrlResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2QrConnectUrlResponse";
  }
  protected:
  explicit Oauth2QrConnectUrlResponse(::google::protobuf::Arena* arena);
  Oauth2QrConnectUrlResponse(::google::protobuf::Arena* arena, const Oauth2QrConnectUrlResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2QrConnectUrlResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr url_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class Oauth2QrConnectUrlRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2QrConnectUrlRequest) */ {
 public:
  inline Oauth2QrConnectUrlRequest() : Oauth2QrConnectUrlRequest(nullptr) {}
  ~Oauth2QrConnectUrlRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2QrConnectUrlRequest(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2QrConnectUrlRequest(const Oauth2QrConnectUrlRequest& from)
      : Oauth2QrConnectUrlRequest(nullptr, from) {}
  Oauth2QrConnectUrlRequest(Oauth2QrConnectUrlRequest&& from) noexcept
    : Oauth2QrConnectUrlRequest() {
    *this = ::std::move(from);
  }

  inline Oauth2QrConnectUrlRequest& operator=(const Oauth2QrConnectUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2QrConnectUrlRequest& operator=(Oauth2QrConnectUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2QrConnectUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2QrConnectUrlRequest* internal_default_instance() {
    return reinterpret_cast<const Oauth2QrConnectUrlRequest*>(
               &_Oauth2QrConnectUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Oauth2QrConnectUrlRequest& a, Oauth2QrConnectUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2QrConnectUrlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2QrConnectUrlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2QrConnectUrlRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2QrConnectUrlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2QrConnectUrlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2QrConnectUrlRequest& from) {
    Oauth2QrConnectUrlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2QrConnectUrlRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2QrConnectUrlRequest";
  }
  protected:
  explicit Oauth2QrConnectUrlRequest(::google::protobuf::Arena* arena);
  Oauth2QrConnectUrlRequest(::google::protobuf::Arena* arena, const Oauth2QrConnectUrlRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Lang = Oauth2QrConnectUrlRequest_Lang;
  static constexpr Lang Cn = Oauth2QrConnectUrlRequest_Lang_Cn;
  static constexpr Lang En = Oauth2QrConnectUrlRequest_Lang_En;
  static inline bool Lang_IsValid(int value) {
    return Oauth2QrConnectUrlRequest_Lang_IsValid(value);
  }
  static constexpr Lang Lang_MIN = Oauth2QrConnectUrlRequest_Lang_Lang_MIN;
  static constexpr Lang Lang_MAX = Oauth2QrConnectUrlRequest_Lang_Lang_MAX;
  static constexpr int Lang_ARRAYSIZE = Oauth2QrConnectUrlRequest_Lang_Lang_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Lang_descriptor() {
    return Oauth2QrConnectUrlRequest_Lang_descriptor();
  }
  template <typename T>
  static inline const std::string& Lang_Name(T value) {
    return Oauth2QrConnectUrlRequest_Lang_Name(value);
  }
  static inline bool Lang_Parse(absl::string_view name, Lang* value) {
    return Oauth2QrConnectUrlRequest_Lang_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 1,
    kLangFieldNumber = 9,
  };
  // optional string subject = 1;
  bool has_subject() const;
  void clear_subject() ;
  const std::string& subject() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* value);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // .palm.wechat.v1.Oauth2QrConnectUrlRequest.Lang lang = 9;
  void clear_lang() ;
  ::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang lang() const;
  void set_lang(::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang value);

  private:
  ::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang _internal_lang() const;
  void _internal_set_lang(::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2QrConnectUrlRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr subject_;
    int lang_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class MiniProgramCode2SessionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.MiniProgramCode2SessionResponse) */ {
 public:
  inline MiniProgramCode2SessionResponse() : MiniProgramCode2SessionResponse(nullptr) {}
  ~MiniProgramCode2SessionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MiniProgramCode2SessionResponse(::google::protobuf::internal::ConstantInitialized);

  inline MiniProgramCode2SessionResponse(const MiniProgramCode2SessionResponse& from)
      : MiniProgramCode2SessionResponse(nullptr, from) {}
  MiniProgramCode2SessionResponse(MiniProgramCode2SessionResponse&& from) noexcept
    : MiniProgramCode2SessionResponse() {
    *this = ::std::move(from);
  }

  inline MiniProgramCode2SessionResponse& operator=(const MiniProgramCode2SessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniProgramCode2SessionResponse& operator=(MiniProgramCode2SessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiniProgramCode2SessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiniProgramCode2SessionResponse* internal_default_instance() {
    return reinterpret_cast<const MiniProgramCode2SessionResponse*>(
               &_MiniProgramCode2SessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MiniProgramCode2SessionResponse& a, MiniProgramCode2SessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniProgramCode2SessionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniProgramCode2SessionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiniProgramCode2SessionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiniProgramCode2SessionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MiniProgramCode2SessionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MiniProgramCode2SessionResponse& from) {
    MiniProgramCode2SessionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MiniProgramCode2SessionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.MiniProgramCode2SessionResponse";
  }
  protected:
  explicit MiniProgramCode2SessionResponse(::google::protobuf::Arena* arena);
  MiniProgramCode2SessionResponse(::google::protobuf::Arena* arena, const MiniProgramCode2SessionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnionIdFieldNumber = 1,
    kOpenIdFieldNumber = 2,
  };
  // optional string union_id = 1;
  bool has_union_id() const;
  void clear_union_id() ;
  const std::string& union_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* value);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // string open_id = 2;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* value);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.MiniProgramCode2SessionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr union_id_;
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class MiniProgramCode2SessionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.MiniProgramCode2SessionRequest) */ {
 public:
  inline MiniProgramCode2SessionRequest() : MiniProgramCode2SessionRequest(nullptr) {}
  ~MiniProgramCode2SessionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MiniProgramCode2SessionRequest(::google::protobuf::internal::ConstantInitialized);

  inline MiniProgramCode2SessionRequest(const MiniProgramCode2SessionRequest& from)
      : MiniProgramCode2SessionRequest(nullptr, from) {}
  MiniProgramCode2SessionRequest(MiniProgramCode2SessionRequest&& from) noexcept
    : MiniProgramCode2SessionRequest() {
    *this = ::std::move(from);
  }

  inline MiniProgramCode2SessionRequest& operator=(const MiniProgramCode2SessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniProgramCode2SessionRequest& operator=(MiniProgramCode2SessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiniProgramCode2SessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiniProgramCode2SessionRequest* internal_default_instance() {
    return reinterpret_cast<const MiniProgramCode2SessionRequest*>(
               &_MiniProgramCode2SessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MiniProgramCode2SessionRequest& a, MiniProgramCode2SessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniProgramCode2SessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniProgramCode2SessionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiniProgramCode2SessionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiniProgramCode2SessionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MiniProgramCode2SessionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MiniProgramCode2SessionRequest& from) {
    MiniProgramCode2SessionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MiniProgramCode2SessionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.MiniProgramCode2SessionRequest";
  }
  protected:
  explicit MiniProgramCode2SessionRequest(::google::protobuf::Arena* arena);
  MiniProgramCode2SessionRequest(::google::protobuf::Arena* arena, const MiniProgramCode2SessionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.MiniProgramCode2SessionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class Oauth2SignInResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2SignInResponse) */ {
 public:
  inline Oauth2SignInResponse() : Oauth2SignInResponse(nullptr) {}
  ~Oauth2SignInResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2SignInResponse(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2SignInResponse(const Oauth2SignInResponse& from)
      : Oauth2SignInResponse(nullptr, from) {}
  Oauth2SignInResponse(Oauth2SignInResponse&& from) noexcept
    : Oauth2SignInResponse() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInResponse& operator=(const Oauth2SignInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInResponse& operator=(Oauth2SignInResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInResponse* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInResponse*>(
               &_Oauth2SignInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Oauth2SignInResponse& a, Oauth2SignInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInResponse& from) {
    Oauth2SignInResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2SignInResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2SignInResponse";
  }
  protected:
  explicit Oauth2SignInResponse(::google::protobuf::Arena* arena);
  Oauth2SignInResponse(::google::protobuf::Arena* arena, const Oauth2SignInResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using UserInfo = Oauth2SignInResponse_UserInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kSubjectFieldNumber = 9,
    kUserInfoFieldNumber = 1,
  };
  // bytes token = 2;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // optional string subject = 9;
  bool has_subject() const;
  void clear_subject() ;
  const std::string& subject() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* value);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // .palm.wechat.v1.Oauth2SignInResponse.UserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* release_user_info();
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* mutable_user_info();
  void set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* value);
  void unsafe_arena_set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* value);
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* unsafe_arena_release_user_info();

  private:
  const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& _internal_user_info() const;
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* _internal_mutable_user_info();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2SignInResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr subject_;
    ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* user_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Oauth2QrConnectUrlRequest

// optional string subject = 1;
inline bool Oauth2QrConnectUrlRequest::has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Oauth2QrConnectUrlRequest::clear_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2QrConnectUrlRequest::subject() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2QrConnectUrlRequest::set_subject(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
}
inline std::string* Oauth2QrConnectUrlRequest::mutable_subject() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
  return _s;
}
inline const std::string& Oauth2QrConnectUrlRequest::_internal_subject() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subject_.Get();
}
inline void Oauth2QrConnectUrlRequest::_internal_set_subject(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(value, GetArena());
}
inline std::string* Oauth2QrConnectUrlRequest::_internal_mutable_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.subject_.Mutable( GetArena());
}
inline std::string* Oauth2QrConnectUrlRequest::release_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.subject_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Oauth2QrConnectUrlRequest::set_allocated_subject(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subject_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
}

// .palm.wechat.v1.Oauth2QrConnectUrlRequest.Lang lang = 9;
inline void Oauth2QrConnectUrlRequest::clear_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_ = 0;
}
inline ::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang Oauth2QrConnectUrlRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2QrConnectUrlRequest.lang)
  return _internal_lang();
}
inline void Oauth2QrConnectUrlRequest::set_lang(::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2QrConnectUrlRequest.lang)
}
inline ::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang Oauth2QrConnectUrlRequest::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang>(_impl_.lang_);
}
inline void Oauth2QrConnectUrlRequest::_internal_set_lang(::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_ = value;
}

// -------------------------------------------------------------------

// Oauth2QrConnectUrlResponse

// string url = 1;
inline void Oauth2QrConnectUrlResponse::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Oauth2QrConnectUrlResponse::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2QrConnectUrlResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
}
inline std::string* Oauth2QrConnectUrlResponse::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
  return _s;
}
inline const std::string& Oauth2QrConnectUrlResponse::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void Oauth2QrConnectUrlResponse::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArena());
}
inline std::string* Oauth2QrConnectUrlResponse::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* Oauth2QrConnectUrlResponse::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
  return _impl_.url_.Release();
}
inline void Oauth2QrConnectUrlResponse::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
}

// -------------------------------------------------------------------

// Oauth2SignInRequest

// string code = 1;
inline void Oauth2SignInRequest::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.ClearToEmpty();
}
inline const std::string& Oauth2SignInRequest::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInRequest.code)
}
inline std::string* Oauth2SignInRequest::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInRequest.code)
  return _s;
}
inline const std::string& Oauth2SignInRequest::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void Oauth2SignInRequest::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArena());
}
inline std::string* Oauth2SignInRequest::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArena());
}
inline std::string* Oauth2SignInRequest::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInRequest.code)
  return _impl_.code_.Release();
}
inline void Oauth2SignInRequest::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInRequest.code)
}

// string state = 2;
inline void Oauth2SignInRequest::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& Oauth2SignInRequest::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInRequest.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInRequest::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInRequest.state)
}
inline std::string* Oauth2SignInRequest::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInRequest.state)
  return _s;
}
inline const std::string& Oauth2SignInRequest::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void Oauth2SignInRequest::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(value, GetArena());
}
inline std::string* Oauth2SignInRequest::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* Oauth2SignInRequest::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInRequest.state)
  return _impl_.state_.Release();
}
inline void Oauth2SignInRequest::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInRequest.state)
}

// .palm.wechat.v1.Oauth2QrConnectUrlRequest.Lang lang = 9;
inline void Oauth2SignInRequest::clear_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_ = 0;
}
inline ::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang Oauth2SignInRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInRequest.lang)
  return _internal_lang();
}
inline void Oauth2SignInRequest::set_lang(::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInRequest.lang)
}
inline ::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang Oauth2SignInRequest::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang>(_impl_.lang_);
}
inline void Oauth2SignInRequest::_internal_set_lang(::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_ = value;
}

// -------------------------------------------------------------------

// Oauth2SignInResponse_UserInfo

// string open_id = 1;
inline void Oauth2SignInResponse_UserInfo::clear_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::open_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_open_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
  return _impl_.open_id_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
}

// string nickname = 2;
inline void Oauth2SignInResponse_UserInfo::clear_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::nickname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_nickname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nickname_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
  return _impl_.nickname_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
}

// uint32 sex = 3;
inline void Oauth2SignInResponse_UserInfo::clear_sex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sex_ = 0u;
}
inline ::uint32_t Oauth2SignInResponse_UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.sex)
  return _internal_sex();
}
inline void Oauth2SignInResponse_UserInfo::set_sex(::uint32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.sex)
}
inline ::uint32_t Oauth2SignInResponse_UserInfo::_internal_sex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sex_;
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_sex(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sex_ = value;
}

// string province = 4;
inline void Oauth2SignInResponse_UserInfo::clear_province() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.province_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::province() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
  return _internal_province();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_province(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.province_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_province() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_province();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_province() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.province_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_province(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.province_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_province() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.province_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_province() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
  return _impl_.province_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_province(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.province_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.province_.IsDefault()) {
          _impl_.province_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
}

// string city = 5;
inline void Oauth2SignInResponse_UserInfo::clear_city() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.city_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::city() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
  return _internal_city();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_city(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.city_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_city() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_city() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.city_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_city(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.city_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_city() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.city_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_city() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
  return _impl_.city_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_city(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.city_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.city_.IsDefault()) {
          _impl_.city_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
}

// string country = 6;
inline void Oauth2SignInResponse_UserInfo::clear_country() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::country() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
  return _internal_country();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_country(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_country() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_country() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_country(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_country() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_country() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
  return _impl_.country_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_country(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_.IsDefault()) {
          _impl_.country_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
}

// optional string head_img_url = 7;
inline bool Oauth2SignInResponse_UserInfo::has_head_img_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Oauth2SignInResponse_UserInfo::clear_head_img_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.head_img_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2SignInResponse_UserInfo::head_img_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
  return _internal_head_img_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_head_img_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_img_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_head_img_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_head_img_url();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_head_img_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.head_img_url_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_head_img_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_img_url_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_head_img_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.head_img_url_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_head_img_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.head_img_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_img_url_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_head_img_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.head_img_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.head_img_url_.IsDefault()) {
          _impl_.head_img_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
}

// repeated string privilege = 8;
inline int Oauth2SignInResponse_UserInfo::_internal_privilege_size() const {
  return _internal_privilege().size();
}
inline int Oauth2SignInResponse_UserInfo::privilege_size() const {
  return _internal_privilege_size();
}
inline void Oauth2SignInResponse_UserInfo::clear_privilege() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.privilege_.Clear();
}
inline std::string* Oauth2SignInResponse_UserInfo::add_privilege()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_privilege()->Add();
  // @@protoc_insertion_point(field_add_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::privilege(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _internal_privilege().Get(index);
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_privilege(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _internal_mutable_privilege()->Mutable(index);
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, const std::string& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, std::string&& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_privilege()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, absl::string_view value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Oauth2SignInResponse_UserInfo::privilege() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _internal_privilege();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Oauth2SignInResponse_UserInfo::mutable_privilege() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_privilege();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Oauth2SignInResponse_UserInfo::_internal_privilege() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.privilege_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Oauth2SignInResponse_UserInfo::_internal_mutable_privilege() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.privilege_;
}

// string union_id = 9;
inline void Oauth2SignInResponse_UserInfo::clear_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::union_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_union_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_union_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.union_id_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_union_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.union_id_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
  return _impl_.union_id_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_union_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
}

// -------------------------------------------------------------------

// Oauth2SignInResponse

// .palm.wechat.v1.Oauth2SignInResponse.UserInfo user_info = 1;
inline bool Oauth2SignInResponse::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline void Oauth2SignInResponse::clear_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& Oauth2SignInResponse::_internal_user_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo&>(::palm::wechat::v1::_Oauth2SignInResponse_UserInfo_default_instance_);
}
inline const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& Oauth2SignInResponse::user_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.user_info)
  return _internal_user_info();
}
inline void Oauth2SignInResponse::unsafe_arena_set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.Oauth2SignInResponse.user_info)
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::unsafe_arena_release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.user_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::_internal_mutable_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::wechat::v1::Oauth2SignInResponse_UserInfo>(GetArena());
    _impl_.user_info_ = reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::mutable_user_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.user_info)
  return _msg;
}
inline void Oauth2SignInResponse::set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.user_info_ = reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.user_info)
}

// bytes token = 2;
inline void Oauth2SignInResponse::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.token)
}
inline std::string* Oauth2SignInResponse::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.token)
  return _s;
}
inline const std::string& Oauth2SignInResponse::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void Oauth2SignInResponse::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.token)
  return _impl_.token_.Release();
}
inline void Oauth2SignInResponse::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.token)
}

// optional string subject = 9;
inline bool Oauth2SignInResponse::has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Oauth2SignInResponse::clear_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2SignInResponse::subject() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse::set_subject(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.subject)
}
inline std::string* Oauth2SignInResponse::mutable_subject() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.subject)
  return _s;
}
inline const std::string& Oauth2SignInResponse::_internal_subject() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subject_.Get();
}
inline void Oauth2SignInResponse::_internal_set_subject(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse::_internal_mutable_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.subject_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse::release_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.subject)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.subject_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Oauth2SignInResponse::set_allocated_subject(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subject_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.subject)
}

// -------------------------------------------------------------------

// MiniProgramCode2SessionRequest

// string code = 1;
inline void MiniProgramCode2SessionRequest::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.ClearToEmpty();
}
inline const std::string& MiniProgramCode2SessionRequest::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiniProgramCode2SessionRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
}
inline std::string* MiniProgramCode2SessionRequest::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
  return _s;
}
inline const std::string& MiniProgramCode2SessionRequest::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void MiniProgramCode2SessionRequest::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArena());
}
inline std::string* MiniProgramCode2SessionRequest::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArena());
}
inline std::string* MiniProgramCode2SessionRequest::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
  return _impl_.code_.Release();
}
inline void MiniProgramCode2SessionRequest::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
}

// -------------------------------------------------------------------

// MiniProgramCode2SessionResponse

// optional string union_id = 1;
inline bool MiniProgramCode2SessionResponse::has_union_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MiniProgramCode2SessionResponse::clear_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MiniProgramCode2SessionResponse::union_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiniProgramCode2SessionResponse::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
}
inline std::string* MiniProgramCode2SessionResponse::mutable_union_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
  return _s;
}
inline const std::string& MiniProgramCode2SessionResponse::_internal_union_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.union_id_.Get();
}
inline void MiniProgramCode2SessionResponse::_internal_set_union_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.union_id_.Set(value, GetArena());
}
inline std::string* MiniProgramCode2SessionResponse::_internal_mutable_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.union_id_.Mutable( GetArena());
}
inline std::string* MiniProgramCode2SessionResponse::release_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.union_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.union_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MiniProgramCode2SessionResponse::set_allocated_union_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.union_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
}

// string open_id = 2;
inline void MiniProgramCode2SessionResponse::clear_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& MiniProgramCode2SessionResponse::open_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiniProgramCode2SessionResponse::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
}
inline std::string* MiniProgramCode2SessionResponse::mutable_open_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
  return _s;
}
inline const std::string& MiniProgramCode2SessionResponse::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void MiniProgramCode2SessionResponse::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArena());
}
inline std::string* MiniProgramCode2SessionResponse::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArena());
}
inline std::string* MiniProgramCode2SessionResponse::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
  return _impl_.open_id_.Release();
}
inline void MiniProgramCode2SessionResponse::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wechat
}  // namespace palm


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang>() {
  return ::palm::wechat::v1::Oauth2QrConnectUrlRequest_Lang_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh
