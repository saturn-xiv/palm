// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wechat.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "balsam.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_wechat_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_wechat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_wechat_2eproto;
namespace palm {
namespace wechat {
namespace v1 {
class MiniProgramCode2SessionRequest;
struct MiniProgramCode2SessionRequestDefaultTypeInternal;
extern MiniProgramCode2SessionRequestDefaultTypeInternal _MiniProgramCode2SessionRequest_default_instance_;
class MiniProgramCode2SessionResponse;
struct MiniProgramCode2SessionResponseDefaultTypeInternal;
extern MiniProgramCode2SessionResponseDefaultTypeInternal _MiniProgramCode2SessionResponse_default_instance_;
class Oauth2QrConnectUrlRequest;
struct Oauth2QrConnectUrlRequestDefaultTypeInternal;
extern Oauth2QrConnectUrlRequestDefaultTypeInternal _Oauth2QrConnectUrlRequest_default_instance_;
class Oauth2QrConnectUrlResponse;
struct Oauth2QrConnectUrlResponseDefaultTypeInternal;
extern Oauth2QrConnectUrlResponseDefaultTypeInternal _Oauth2QrConnectUrlResponse_default_instance_;
class Oauth2SignInRequest;
struct Oauth2SignInRequestDefaultTypeInternal;
extern Oauth2SignInRequestDefaultTypeInternal _Oauth2SignInRequest_default_instance_;
class Oauth2SignInResponse;
struct Oauth2SignInResponseDefaultTypeInternal;
extern Oauth2SignInResponseDefaultTypeInternal _Oauth2SignInResponse_default_instance_;
class Oauth2SignInResponse_UserInfo;
struct Oauth2SignInResponse_UserInfoDefaultTypeInternal;
extern Oauth2SignInResponse_UserInfoDefaultTypeInternal _Oauth2SignInResponse_UserInfo_default_instance_;
class PayBillDate;
struct PayBillDateDefaultTypeInternal;
extern PayBillDateDefaultTypeInternal _PayBillDate_default_instance_;
class PayBillResponse;
struct PayBillResponseDefaultTypeInternal;
extern PayBillResponseDefaultTypeInternal _PayBillResponse_default_instance_;
class PayCloseOrderRequest;
struct PayCloseOrderRequestDefaultTypeInternal;
extern PayCloseOrderRequestDefaultTypeInternal _PayCloseOrderRequest_default_instance_;
class PayCreateRefundRequest;
struct PayCreateRefundRequestDefaultTypeInternal;
extern PayCreateRefundRequestDefaultTypeInternal _PayCreateRefundRequest_default_instance_;
class PayCreateRefundRequest_Amount;
struct PayCreateRefundRequest_AmountDefaultTypeInternal;
extern PayCreateRefundRequest_AmountDefaultTypeInternal _PayCreateRefundRequest_Amount_default_instance_;
class PayError;
struct PayErrorDefaultTypeInternal;
extern PayErrorDefaultTypeInternal _PayError_default_instance_;
class PayExecuteBatchTransferRequest;
struct PayExecuteBatchTransferRequestDefaultTypeInternal;
extern PayExecuteBatchTransferRequestDefaultTypeInternal _PayExecuteBatchTransferRequest_default_instance_;
class PayExecuteBatchTransferRequest_Batch;
struct PayExecuteBatchTransferRequest_BatchDefaultTypeInternal;
extern PayExecuteBatchTransferRequest_BatchDefaultTypeInternal _PayExecuteBatchTransferRequest_Batch_default_instance_;
class PayExecuteBatchTransferRequest_Detail;
struct PayExecuteBatchTransferRequest_DetailDefaultTypeInternal;
extern PayExecuteBatchTransferRequest_DetailDefaultTypeInternal _PayExecuteBatchTransferRequest_Detail_default_instance_;
class PayExecuteBatchTransferResponse;
struct PayExecuteBatchTransferResponseDefaultTypeInternal;
extern PayExecuteBatchTransferResponseDefaultTypeInternal _PayExecuteBatchTransferResponse_default_instance_;
class PayExecuteBatchTransferResponse_Detail;
struct PayExecuteBatchTransferResponse_DetailDefaultTypeInternal;
extern PayExecuteBatchTransferResponse_DetailDefaultTypeInternal _PayExecuteBatchTransferResponse_Detail_default_instance_;
class PayExecuteBatchTransferResponse_Succeeded;
struct PayExecuteBatchTransferResponse_SucceededDefaultTypeInternal;
extern PayExecuteBatchTransferResponse_SucceededDefaultTypeInternal _PayExecuteBatchTransferResponse_Succeeded_default_instance_;
class PayFundFlowBillRequest;
struct PayFundFlowBillRequestDefaultTypeInternal;
extern PayFundFlowBillRequestDefaultTypeInternal _PayFundFlowBillRequest_default_instance_;
class PayJsapiPrepayIdResponse;
struct PayJsapiPrepayIdResponseDefaultTypeInternal;
extern PayJsapiPrepayIdResponseDefaultTypeInternal _PayJsapiPrepayIdResponse_default_instance_;
class PayNativeQrCodeUrlResponse;
struct PayNativeQrCodeUrlResponseDefaultTypeInternal;
extern PayNativeQrCodeUrlResponseDefaultTypeInternal _PayNativeQrCodeUrlResponse_default_instance_;
class PayPrepayRequest;
struct PayPrepayRequestDefaultTypeInternal;
extern PayPrepayRequestDefaultTypeInternal _PayPrepayRequest_default_instance_;
class PayPrepayRequest_Amount;
struct PayPrepayRequest_AmountDefaultTypeInternal;
extern PayPrepayRequest_AmountDefaultTypeInternal _PayPrepayRequest_Amount_default_instance_;
class PayQueryBatchTransferRequest;
struct PayQueryBatchTransferRequestDefaultTypeInternal;
extern PayQueryBatchTransferRequestDefaultTypeInternal _PayQueryBatchTransferRequest_default_instance_;
class PayQueryBatchTransferResponse;
struct PayQueryBatchTransferResponseDefaultTypeInternal;
extern PayQueryBatchTransferResponseDefaultTypeInternal _PayQueryBatchTransferResponse_default_instance_;
class PayQueryBatchTransferResponse_Batch;
struct PayQueryBatchTransferResponse_BatchDefaultTypeInternal;
extern PayQueryBatchTransferResponse_BatchDefaultTypeInternal _PayQueryBatchTransferResponse_Batch_default_instance_;
class PayQueryBatchTransferResponse_Detail;
struct PayQueryBatchTransferResponse_DetailDefaultTypeInternal;
extern PayQueryBatchTransferResponse_DetailDefaultTypeInternal _PayQueryBatchTransferResponse_Detail_default_instance_;
class PayQueryOrderByIdRequest;
struct PayQueryOrderByIdRequestDefaultTypeInternal;
extern PayQueryOrderByIdRequestDefaultTypeInternal _PayQueryOrderByIdRequest_default_instance_;
class PayQueryOrderByOutTradeNoRequest;
struct PayQueryOrderByOutTradeNoRequestDefaultTypeInternal;
extern PayQueryOrderByOutTradeNoRequestDefaultTypeInternal _PayQueryOrderByOutTradeNoRequest_default_instance_;
class PayQueryRefundRequest;
struct PayQueryRefundRequestDefaultTypeInternal;
extern PayQueryRefundRequestDefaultTypeInternal _PayQueryRefundRequest_default_instance_;
class PayQueryTransferDetailRequest;
struct PayQueryTransferDetailRequestDefaultTypeInternal;
extern PayQueryTransferDetailRequestDefaultTypeInternal _PayQueryTransferDetailRequest_default_instance_;
class PayQueryTransferDetailResponse;
struct PayQueryTransferDetailResponseDefaultTypeInternal;
extern PayQueryTransferDetailResponseDefaultTypeInternal _PayQueryTransferDetailResponse_default_instance_;
class PayRefundResponse;
struct PayRefundResponseDefaultTypeInternal;
extern PayRefundResponseDefaultTypeInternal _PayRefundResponse_default_instance_;
class PayTradeBillRequest;
struct PayTradeBillRequestDefaultTypeInternal;
extern PayTradeBillRequestDefaultTypeInternal _PayTradeBillRequest_default_instance_;
class PayTradeResponse;
struct PayTradeResponseDefaultTypeInternal;
extern PayTradeResponseDefaultTypeInternal _PayTradeResponse_default_instance_;
class PayTransferGetBillReceiptRequest;
struct PayTransferGetBillReceiptRequestDefaultTypeInternal;
extern PayTransferGetBillReceiptRequestDefaultTypeInternal _PayTransferGetBillReceiptRequest_default_instance_;
class PayTransferGetElectronicReceiptRequest;
struct PayTransferGetElectronicReceiptRequestDefaultTypeInternal;
extern PayTransferGetElectronicReceiptRequestDefaultTypeInternal _PayTransferGetElectronicReceiptRequest_default_instance_;
class PayTransferGetReceiptResponse;
struct PayTransferGetReceiptResponseDefaultTypeInternal;
extern PayTransferGetReceiptResponseDefaultTypeInternal _PayTransferGetReceiptResponse_default_instance_;
}  // namespace v1
}  // namespace wechat
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace wechat {
namespace v1 {
enum PayTradeBillRequest_BillType : int {
  PayTradeBillRequest_BillType_ALL = 0,
  PayTradeBillRequest_BillType_SUCCESS = 1,
  PayTradeBillRequest_BillType_REFUND = 2,
  PayTradeBillRequest_BillType_PayTradeBillRequest_BillType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PayTradeBillRequest_BillType_PayTradeBillRequest_BillType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PayTradeBillRequest_BillType_IsValid(int value);
extern const uint32_t PayTradeBillRequest_BillType_internal_data_[];
constexpr PayTradeBillRequest_BillType PayTradeBillRequest_BillType_BillType_MIN = static_cast<PayTradeBillRequest_BillType>(0);
constexpr PayTradeBillRequest_BillType PayTradeBillRequest_BillType_BillType_MAX = static_cast<PayTradeBillRequest_BillType>(2);
constexpr int PayTradeBillRequest_BillType_BillType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PayTradeBillRequest_BillType_descriptor();
template <typename T>
const std::string& PayTradeBillRequest_BillType_Name(T value) {
  static_assert(std::is_same<T, PayTradeBillRequest_BillType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BillType_Name().");
  return PayTradeBillRequest_BillType_Name(static_cast<PayTradeBillRequest_BillType>(value));
}
template <>
inline const std::string& PayTradeBillRequest_BillType_Name(PayTradeBillRequest_BillType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PayTradeBillRequest_BillType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PayTradeBillRequest_BillType_Parse(absl::string_view name, PayTradeBillRequest_BillType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayTradeBillRequest_BillType>(
      PayTradeBillRequest_BillType_descriptor(), name, value);
}
enum PayFundFlowBillRequest_AccountType : int {
  PayFundFlowBillRequest_AccountType_BASIC = 0,
  PayFundFlowBillRequest_AccountType_OPERATION = 1,
  PayFundFlowBillRequest_AccountType_FEES = 2,
  PayFundFlowBillRequest_AccountType_PayFundFlowBillRequest_AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PayFundFlowBillRequest_AccountType_PayFundFlowBillRequest_AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PayFundFlowBillRequest_AccountType_IsValid(int value);
extern const uint32_t PayFundFlowBillRequest_AccountType_internal_data_[];
constexpr PayFundFlowBillRequest_AccountType PayFundFlowBillRequest_AccountType_AccountType_MIN = static_cast<PayFundFlowBillRequest_AccountType>(0);
constexpr PayFundFlowBillRequest_AccountType PayFundFlowBillRequest_AccountType_AccountType_MAX = static_cast<PayFundFlowBillRequest_AccountType>(2);
constexpr int PayFundFlowBillRequest_AccountType_AccountType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PayFundFlowBillRequest_AccountType_descriptor();
template <typename T>
const std::string& PayFundFlowBillRequest_AccountType_Name(T value) {
  static_assert(std::is_same<T, PayFundFlowBillRequest_AccountType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AccountType_Name().");
  return PayFundFlowBillRequest_AccountType_Name(static_cast<PayFundFlowBillRequest_AccountType>(value));
}
template <>
inline const std::string& PayFundFlowBillRequest_AccountType_Name(PayFundFlowBillRequest_AccountType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PayFundFlowBillRequest_AccountType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PayFundFlowBillRequest_AccountType_Parse(absl::string_view name, PayFundFlowBillRequest_AccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayFundFlowBillRequest_AccountType>(
      PayFundFlowBillRequest_AccountType_descriptor(), name, value);
}
enum PayTransferGetElectronicReceiptRequest_AcceptType : int {
  PayTransferGetElectronicReceiptRequest_AcceptType_BATCH_TRANSFER = 0,
  PayTransferGetElectronicReceiptRequest_AcceptType_TRANSFER_TO_POCKET = 1,
  PayTransferGetElectronicReceiptRequest_AcceptType_TRANSFER_TO_BANK = 2,
  PayTransferGetElectronicReceiptRequest_AcceptType_PayTransferGetElectronicReceiptRequest_AcceptType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PayTransferGetElectronicReceiptRequest_AcceptType_PayTransferGetElectronicReceiptRequest_AcceptType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PayTransferGetElectronicReceiptRequest_AcceptType_IsValid(int value);
extern const uint32_t PayTransferGetElectronicReceiptRequest_AcceptType_internal_data_[];
constexpr PayTransferGetElectronicReceiptRequest_AcceptType PayTransferGetElectronicReceiptRequest_AcceptType_AcceptType_MIN = static_cast<PayTransferGetElectronicReceiptRequest_AcceptType>(0);
constexpr PayTransferGetElectronicReceiptRequest_AcceptType PayTransferGetElectronicReceiptRequest_AcceptType_AcceptType_MAX = static_cast<PayTransferGetElectronicReceiptRequest_AcceptType>(2);
constexpr int PayTransferGetElectronicReceiptRequest_AcceptType_AcceptType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PayTransferGetElectronicReceiptRequest_AcceptType_descriptor();
template <typename T>
const std::string& PayTransferGetElectronicReceiptRequest_AcceptType_Name(T value) {
  static_assert(std::is_same<T, PayTransferGetElectronicReceiptRequest_AcceptType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AcceptType_Name().");
  return PayTransferGetElectronicReceiptRequest_AcceptType_Name(static_cast<PayTransferGetElectronicReceiptRequest_AcceptType>(value));
}
template <>
inline const std::string& PayTransferGetElectronicReceiptRequest_AcceptType_Name(PayTransferGetElectronicReceiptRequest_AcceptType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PayTransferGetElectronicReceiptRequest_AcceptType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PayTransferGetElectronicReceiptRequest_AcceptType_Parse(absl::string_view name, PayTransferGetElectronicReceiptRequest_AcceptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayTransferGetElectronicReceiptRequest_AcceptType>(
      PayTransferGetElectronicReceiptRequest_AcceptType_descriptor(), name, value);
}
enum PayQueryBatchTransferRequest_DetailStatus : int {
  PayQueryBatchTransferRequest_DetailStatus_ALL = 0,
  PayQueryBatchTransferRequest_DetailStatus_SUCCESS = 1,
  PayQueryBatchTransferRequest_DetailStatus_WAIT_PAY = 2,
  PayQueryBatchTransferRequest_DetailStatus_FAIL = 9,
  PayQueryBatchTransferRequest_DetailStatus_PayQueryBatchTransferRequest_DetailStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PayQueryBatchTransferRequest_DetailStatus_PayQueryBatchTransferRequest_DetailStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PayQueryBatchTransferRequest_DetailStatus_IsValid(int value);
extern const uint32_t PayQueryBatchTransferRequest_DetailStatus_internal_data_[];
constexpr PayQueryBatchTransferRequest_DetailStatus PayQueryBatchTransferRequest_DetailStatus_DetailStatus_MIN = static_cast<PayQueryBatchTransferRequest_DetailStatus>(0);
constexpr PayQueryBatchTransferRequest_DetailStatus PayQueryBatchTransferRequest_DetailStatus_DetailStatus_MAX = static_cast<PayQueryBatchTransferRequest_DetailStatus>(9);
constexpr int PayQueryBatchTransferRequest_DetailStatus_DetailStatus_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
PayQueryBatchTransferRequest_DetailStatus_descriptor();
template <typename T>
const std::string& PayQueryBatchTransferRequest_DetailStatus_Name(T value) {
  static_assert(std::is_same<T, PayQueryBatchTransferRequest_DetailStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DetailStatus_Name().");
  return PayQueryBatchTransferRequest_DetailStatus_Name(static_cast<PayQueryBatchTransferRequest_DetailStatus>(value));
}
template <>
inline const std::string& PayQueryBatchTransferRequest_DetailStatus_Name(PayQueryBatchTransferRequest_DetailStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PayQueryBatchTransferRequest_DetailStatus_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool PayQueryBatchTransferRequest_DetailStatus_Parse(absl::string_view name, PayQueryBatchTransferRequest_DetailStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayQueryBatchTransferRequest_DetailStatus>(
      PayQueryBatchTransferRequest_DetailStatus_descriptor(), name, value);
}
enum PayCurrency : int {
  CNY = 0,
  PayCurrency_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PayCurrency_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PayCurrency_IsValid(int value);
extern const uint32_t PayCurrency_internal_data_[];
constexpr PayCurrency PayCurrency_MIN = static_cast<PayCurrency>(0);
constexpr PayCurrency PayCurrency_MAX = static_cast<PayCurrency>(0);
constexpr int PayCurrency_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
PayCurrency_descriptor();
template <typename T>
const std::string& PayCurrency_Name(T value) {
  static_assert(std::is_same<T, PayCurrency>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PayCurrency_Name().");
  return PayCurrency_Name(static_cast<PayCurrency>(value));
}
template <>
inline const std::string& PayCurrency_Name(PayCurrency value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PayCurrency_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool PayCurrency_Parse(absl::string_view name, PayCurrency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayCurrency>(
      PayCurrency_descriptor(), name, value);
}
enum PayNotifyAction : int {
  TRANSCATION = 0,
  REFUND = 1,
  PayNotifyAction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PayNotifyAction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PayNotifyAction_IsValid(int value);
extern const uint32_t PayNotifyAction_internal_data_[];
constexpr PayNotifyAction PayNotifyAction_MIN = static_cast<PayNotifyAction>(0);
constexpr PayNotifyAction PayNotifyAction_MAX = static_cast<PayNotifyAction>(1);
constexpr int PayNotifyAction_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
PayNotifyAction_descriptor();
template <typename T>
const std::string& PayNotifyAction_Name(T value) {
  static_assert(std::is_same<T, PayNotifyAction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PayNotifyAction_Name().");
  return PayNotifyAction_Name(static_cast<PayNotifyAction>(value));
}
template <>
inline const std::string& PayNotifyAction_Name(PayNotifyAction value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PayNotifyAction_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool PayNotifyAction_Parse(absl::string_view name, PayNotifyAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayNotifyAction>(
      PayNotifyAction_descriptor(), name, value);
}
enum PayTarType : int {
  GZIP = 0,
  PayTarType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PayTarType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PayTarType_IsValid(int value);
extern const uint32_t PayTarType_internal_data_[];
constexpr PayTarType PayTarType_MIN = static_cast<PayTarType>(0);
constexpr PayTarType PayTarType_MAX = static_cast<PayTarType>(0);
constexpr int PayTarType_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
PayTarType_descriptor();
template <typename T>
const std::string& PayTarType_Name(T value) {
  static_assert(std::is_same<T, PayTarType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PayTarType_Name().");
  return PayTarType_Name(static_cast<PayTarType>(value));
}
template <>
inline const std::string& PayTarType_Name(PayTarType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PayTarType_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool PayTarType_Parse(absl::string_view name, PayTarType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayTarType>(
      PayTarType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PayTransferGetReceiptResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayTransferGetReceiptResponse) */ {
 public:
  inline PayTransferGetReceiptResponse() : PayTransferGetReceiptResponse(nullptr) {}
  ~PayTransferGetReceiptResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayTransferGetReceiptResponse(::google::protobuf::internal::ConstantInitialized);

  inline PayTransferGetReceiptResponse(const PayTransferGetReceiptResponse& from)
      : PayTransferGetReceiptResponse(nullptr, from) {}
  PayTransferGetReceiptResponse(PayTransferGetReceiptResponse&& from) noexcept
    : PayTransferGetReceiptResponse() {
    *this = ::std::move(from);
  }

  inline PayTransferGetReceiptResponse& operator=(const PayTransferGetReceiptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayTransferGetReceiptResponse& operator=(PayTransferGetReceiptResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayTransferGetReceiptResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayTransferGetReceiptResponse* internal_default_instance() {
    return reinterpret_cast<const PayTransferGetReceiptResponse*>(
               &_PayTransferGetReceiptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PayTransferGetReceiptResponse& a, PayTransferGetReceiptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayTransferGetReceiptResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayTransferGetReceiptResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayTransferGetReceiptResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayTransferGetReceiptResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayTransferGetReceiptResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayTransferGetReceiptResponse& from) {
    PayTransferGetReceiptResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayTransferGetReceiptResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayTransferGetReceiptResponse";
  }
  protected:
  explicit PayTransferGetReceiptResponse(::google::protobuf::Arena* arena);
  PayTransferGetReceiptResponse(::google::protobuf::Arena* arena, const PayTransferGetReceiptResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // bytes payload = 1;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayTransferGetReceiptResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayTransferGetElectronicReceiptRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayTransferGetElectronicReceiptRequest) */ {
 public:
  inline PayTransferGetElectronicReceiptRequest() : PayTransferGetElectronicReceiptRequest(nullptr) {}
  ~PayTransferGetElectronicReceiptRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayTransferGetElectronicReceiptRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayTransferGetElectronicReceiptRequest(const PayTransferGetElectronicReceiptRequest& from)
      : PayTransferGetElectronicReceiptRequest(nullptr, from) {}
  PayTransferGetElectronicReceiptRequest(PayTransferGetElectronicReceiptRequest&& from) noexcept
    : PayTransferGetElectronicReceiptRequest() {
    *this = ::std::move(from);
  }

  inline PayTransferGetElectronicReceiptRequest& operator=(const PayTransferGetElectronicReceiptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayTransferGetElectronicReceiptRequest& operator=(PayTransferGetElectronicReceiptRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayTransferGetElectronicReceiptRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayTransferGetElectronicReceiptRequest* internal_default_instance() {
    return reinterpret_cast<const PayTransferGetElectronicReceiptRequest*>(
               &_PayTransferGetElectronicReceiptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PayTransferGetElectronicReceiptRequest& a, PayTransferGetElectronicReceiptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayTransferGetElectronicReceiptRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayTransferGetElectronicReceiptRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayTransferGetElectronicReceiptRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayTransferGetElectronicReceiptRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayTransferGetElectronicReceiptRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayTransferGetElectronicReceiptRequest& from) {
    PayTransferGetElectronicReceiptRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayTransferGetElectronicReceiptRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayTransferGetElectronicReceiptRequest";
  }
  protected:
  explicit PayTransferGetElectronicReceiptRequest(::google::protobuf::Arena* arena);
  PayTransferGetElectronicReceiptRequest(::google::protobuf::Arena* arena, const PayTransferGetElectronicReceiptRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using AcceptType = PayTransferGetElectronicReceiptRequest_AcceptType;
  static constexpr AcceptType BATCH_TRANSFER = PayTransferGetElectronicReceiptRequest_AcceptType_BATCH_TRANSFER;
  static constexpr AcceptType TRANSFER_TO_POCKET = PayTransferGetElectronicReceiptRequest_AcceptType_TRANSFER_TO_POCKET;
  static constexpr AcceptType TRANSFER_TO_BANK = PayTransferGetElectronicReceiptRequest_AcceptType_TRANSFER_TO_BANK;
  static inline bool AcceptType_IsValid(int value) {
    return PayTransferGetElectronicReceiptRequest_AcceptType_IsValid(value);
  }
  static constexpr AcceptType AcceptType_MIN = PayTransferGetElectronicReceiptRequest_AcceptType_AcceptType_MIN;
  static constexpr AcceptType AcceptType_MAX = PayTransferGetElectronicReceiptRequest_AcceptType_AcceptType_MAX;
  static constexpr int AcceptType_ARRAYSIZE = PayTransferGetElectronicReceiptRequest_AcceptType_AcceptType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* AcceptType_descriptor() {
    return PayTransferGetElectronicReceiptRequest_AcceptType_descriptor();
  }
  template <typename T>
  static inline const std::string& AcceptType_Name(T value) {
    return PayTransferGetElectronicReceiptRequest_AcceptType_Name(value);
  }
  static inline bool AcceptType_Parse(absl::string_view name, AcceptType* value) {
    return PayTransferGetElectronicReceiptRequest_AcceptType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutBatchNoFieldNumber = 2,
    kOutDetailNoFieldNumber = 3,
    kAcceptTypeFieldNumber = 1,
  };
  // optional string out_batch_no = 2;
  bool has_out_batch_no() const;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* value);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // string out_detail_no = 3;
  void clear_out_detail_no() ;
  const std::string& out_detail_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_detail_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_detail_no();
  PROTOBUF_NODISCARD std::string* release_out_detail_no();
  void set_allocated_out_detail_no(std::string* value);

  private:
  const std::string& _internal_out_detail_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_detail_no(
      const std::string& value);
  std::string* _internal_mutable_out_detail_no();

  public:
  // .palm.wechat.v1.PayTransferGetElectronicReceiptRequest.AcceptType accept_type = 1;
  void clear_accept_type() ;
  ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType accept_type() const;
  void set_accept_type(::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType value);

  private:
  ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType _internal_accept_type() const;
  void _internal_set_accept_type(::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayTransferGetElectronicReceiptRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      87, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr out_batch_no_;
    ::google::protobuf::internal::ArenaStringPtr out_detail_no_;
    int accept_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayTransferGetBillReceiptRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayTransferGetBillReceiptRequest) */ {
 public:
  inline PayTransferGetBillReceiptRequest() : PayTransferGetBillReceiptRequest(nullptr) {}
  ~PayTransferGetBillReceiptRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayTransferGetBillReceiptRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayTransferGetBillReceiptRequest(const PayTransferGetBillReceiptRequest& from)
      : PayTransferGetBillReceiptRequest(nullptr, from) {}
  PayTransferGetBillReceiptRequest(PayTransferGetBillReceiptRequest&& from) noexcept
    : PayTransferGetBillReceiptRequest() {
    *this = ::std::move(from);
  }

  inline PayTransferGetBillReceiptRequest& operator=(const PayTransferGetBillReceiptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayTransferGetBillReceiptRequest& operator=(PayTransferGetBillReceiptRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayTransferGetBillReceiptRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayTransferGetBillReceiptRequest* internal_default_instance() {
    return reinterpret_cast<const PayTransferGetBillReceiptRequest*>(
               &_PayTransferGetBillReceiptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PayTransferGetBillReceiptRequest& a, PayTransferGetBillReceiptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayTransferGetBillReceiptRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayTransferGetBillReceiptRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayTransferGetBillReceiptRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayTransferGetBillReceiptRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayTransferGetBillReceiptRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayTransferGetBillReceiptRequest& from) {
    PayTransferGetBillReceiptRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayTransferGetBillReceiptRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayTransferGetBillReceiptRequest";
  }
  protected:
  explicit PayTransferGetBillReceiptRequest(::google::protobuf::Arena* arena);
  PayTransferGetBillReceiptRequest(::google::protobuf::Arena* arena, const PayTransferGetBillReceiptRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutBatchNoFieldNumber = 1,
  };
  // string out_batch_no = 1;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* value);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayTransferGetBillReceiptRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr out_batch_no_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayTradeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayTradeResponse) */ {
 public:
  inline PayTradeResponse() : PayTradeResponse(nullptr) {}
  ~PayTradeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayTradeResponse(::google::protobuf::internal::ConstantInitialized);

  inline PayTradeResponse(const PayTradeResponse& from)
      : PayTradeResponse(nullptr, from) {}
  PayTradeResponse(PayTradeResponse&& from) noexcept
    : PayTradeResponse() {
    *this = ::std::move(from);
  }

  inline PayTradeResponse& operator=(const PayTradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayTradeResponse& operator=(PayTradeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayTradeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayTradeResponse* internal_default_instance() {
    return reinterpret_cast<const PayTradeResponse*>(
               &_PayTradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PayTradeResponse& a, PayTradeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayTradeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayTradeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayTradeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayTradeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayTradeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayTradeResponse& from) {
    PayTradeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayTradeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayTradeResponse";
  }
  protected:
  explicit PayTradeResponse(::google::protobuf::Arena* arena);
  PayTradeResponse(::google::protobuf::Arena* arena, const PayTradeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeStateFieldNumber = 1,
    kTradeStateDescFieldNumber = 2,
  };
  // string trade_state = 1;
  void clear_trade_state() ;
  const std::string& trade_state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trade_state(Arg_&& arg, Args_... args);
  std::string* mutable_trade_state();
  PROTOBUF_NODISCARD std::string* release_trade_state();
  void set_allocated_trade_state(std::string* value);

  private:
  const std::string& _internal_trade_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_state(
      const std::string& value);
  std::string* _internal_mutable_trade_state();

  public:
  // string trade_state_desc = 2;
  void clear_trade_state_desc() ;
  const std::string& trade_state_desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trade_state_desc(Arg_&& arg, Args_... args);
  std::string* mutable_trade_state_desc();
  PROTOBUF_NODISCARD std::string* release_trade_state_desc();
  void set_allocated_trade_state_desc(std::string* value);

  private:
  const std::string& _internal_trade_state_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_state_desc(
      const std::string& value);
  std::string* _internal_mutable_trade_state_desc();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayTradeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr trade_state_;
    ::google::protobuf::internal::ArenaStringPtr trade_state_desc_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayRefundResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayRefundResponse) */ {
 public:
  inline PayRefundResponse() : PayRefundResponse(nullptr) {}
  ~PayRefundResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayRefundResponse(::google::protobuf::internal::ConstantInitialized);

  inline PayRefundResponse(const PayRefundResponse& from)
      : PayRefundResponse(nullptr, from) {}
  PayRefundResponse(PayRefundResponse&& from) noexcept
    : PayRefundResponse() {
    *this = ::std::move(from);
  }

  inline PayRefundResponse& operator=(const PayRefundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayRefundResponse& operator=(PayRefundResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayRefundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayRefundResponse* internal_default_instance() {
    return reinterpret_cast<const PayRefundResponse*>(
               &_PayRefundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PayRefundResponse& a, PayRefundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayRefundResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayRefundResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayRefundResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayRefundResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayRefundResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayRefundResponse& from) {
    PayRefundResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayRefundResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayRefundResponse";
  }
  protected:
  explicit PayRefundResponse(::google::protobuf::Arena* arena);
  PayRefundResponse(::google::protobuf::Arena* arena, const PayRefundResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutRefundNoFieldNumber = 1,
    kChannelFieldNumber = 2,
    kStatusFieldNumber = 3,
    kUserReceivedAccountFieldNumber = 4,
    kCreateTimeFieldNumber = 99,
  };
  // string out_refund_no = 1;
  void clear_out_refund_no() ;
  const std::string& out_refund_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_refund_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_refund_no();
  PROTOBUF_NODISCARD std::string* release_out_refund_no();
  void set_allocated_out_refund_no(std::string* value);

  private:
  const std::string& _internal_out_refund_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_refund_no(
      const std::string& value);
  std::string* _internal_mutable_out_refund_no();

  public:
  // string channel = 2;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // string status = 3;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string user_received_account = 4;
  void clear_user_received_account() ;
  const std::string& user_received_account() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_received_account(Arg_&& arg, Args_... args);
  std::string* mutable_user_received_account();
  PROTOBUF_NODISCARD std::string* release_user_received_account();
  void set_allocated_user_received_account(std::string* value);

  private:
  const std::string& _internal_user_received_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_received_account(
      const std::string& value);
  std::string* _internal_mutable_user_received_account();

  public:
  // string create_time = 99;
  void clear_create_time() ;
  const std::string& create_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_create_time(Arg_&& arg, Args_... args);
  std::string* mutable_create_time();
  PROTOBUF_NODISCARD std::string* release_create_time();
  void set_allocated_create_time(std::string* value);

  private:
  const std::string& _internal_create_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_time(
      const std::string& value);
  std::string* _internal_mutable_create_time();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayRefundResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 0,
      99, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr out_refund_no_;
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr user_received_account_;
    ::google::protobuf::internal::ArenaStringPtr create_time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayQueryTransferDetailResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayQueryTransferDetailResponse) */ {
 public:
  inline PayQueryTransferDetailResponse() : PayQueryTransferDetailResponse(nullptr) {}
  ~PayQueryTransferDetailResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayQueryTransferDetailResponse(::google::protobuf::internal::ConstantInitialized);

  inline PayQueryTransferDetailResponse(const PayQueryTransferDetailResponse& from)
      : PayQueryTransferDetailResponse(nullptr, from) {}
  PayQueryTransferDetailResponse(PayQueryTransferDetailResponse&& from) noexcept
    : PayQueryTransferDetailResponse() {
    *this = ::std::move(from);
  }

  inline PayQueryTransferDetailResponse& operator=(const PayQueryTransferDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayQueryTransferDetailResponse& operator=(PayQueryTransferDetailResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayQueryTransferDetailResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayQueryTransferDetailResponse* internal_default_instance() {
    return reinterpret_cast<const PayQueryTransferDetailResponse*>(
               &_PayQueryTransferDetailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PayQueryTransferDetailResponse& a, PayQueryTransferDetailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayQueryTransferDetailResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayQueryTransferDetailResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayQueryTransferDetailResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayQueryTransferDetailResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayQueryTransferDetailResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayQueryTransferDetailResponse& from) {
    PayQueryTransferDetailResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayQueryTransferDetailResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayQueryTransferDetailResponse";
  }
  protected:
  explicit PayQueryTransferDetailResponse(::google::protobuf::Arena* arena);
  PayQueryTransferDetailResponse(::google::protobuf::Arena* arena, const PayQueryTransferDetailResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kMchIdFieldNumber = 2,
    kOpenIdFieldNumber = 3,
    kUserNameFieldNumber = 4,
    kBatchIdFieldNumber = 11,
    kOutBatchNoFieldNumber = 12,
    kOutDetailNoFieldNumber = 13,
    kDetailIdFieldNumber = 14,
    kDetailStatusFieldNumber = 15,
    kTransferRemarkFieldNumber = 17,
    kFailReasonFieldNumber = 18,
    kInitiateTimeFieldNumber = 19,
    kUpdateTimeFieldNumber = 20,
    kTransferAmountFieldNumber = 16,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* value);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string mch_id = 2;
  void clear_mch_id() ;
  const std::string& mch_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mch_id(Arg_&& arg, Args_... args);
  std::string* mutable_mch_id();
  PROTOBUF_NODISCARD std::string* release_mch_id();
  void set_allocated_mch_id(std::string* value);

  private:
  const std::string& _internal_mch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mch_id(
      const std::string& value);
  std::string* _internal_mutable_mch_id();

  public:
  // string open_id = 3;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* value);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // optional string user_name = 4;
  bool has_user_name() const;
  void clear_user_name() ;
  const std::string& user_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* value);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // string batch_id = 11;
  void clear_batch_id() ;
  const std::string& batch_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_id(Arg_&& arg, Args_... args);
  std::string* mutable_batch_id();
  PROTOBUF_NODISCARD std::string* release_batch_id();
  void set_allocated_batch_id(std::string* value);

  private:
  const std::string& _internal_batch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_id(
      const std::string& value);
  std::string* _internal_mutable_batch_id();

  public:
  // string out_batch_no = 12;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* value);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // string out_detail_no = 13;
  void clear_out_detail_no() ;
  const std::string& out_detail_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_detail_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_detail_no();
  PROTOBUF_NODISCARD std::string* release_out_detail_no();
  void set_allocated_out_detail_no(std::string* value);

  private:
  const std::string& _internal_out_detail_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_detail_no(
      const std::string& value);
  std::string* _internal_mutable_out_detail_no();

  public:
  // string detail_id = 14;
  void clear_detail_id() ;
  const std::string& detail_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_detail_id(Arg_&& arg, Args_... args);
  std::string* mutable_detail_id();
  PROTOBUF_NODISCARD std::string* release_detail_id();
  void set_allocated_detail_id(std::string* value);

  private:
  const std::string& _internal_detail_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail_id(
      const std::string& value);
  std::string* _internal_mutable_detail_id();

  public:
  // string detail_status = 15;
  void clear_detail_status() ;
  const std::string& detail_status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_detail_status(Arg_&& arg, Args_... args);
  std::string* mutable_detail_status();
  PROTOBUF_NODISCARD std::string* release_detail_status();
  void set_allocated_detail_status(std::string* value);

  private:
  const std::string& _internal_detail_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail_status(
      const std::string& value);
  std::string* _internal_mutable_detail_status();

  public:
  // string transfer_remark = 17;
  void clear_transfer_remark() ;
  const std::string& transfer_remark() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transfer_remark(Arg_&& arg, Args_... args);
  std::string* mutable_transfer_remark();
  PROTOBUF_NODISCARD std::string* release_transfer_remark();
  void set_allocated_transfer_remark(std::string* value);

  private:
  const std::string& _internal_transfer_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transfer_remark(
      const std::string& value);
  std::string* _internal_mutable_transfer_remark();

  public:
  // optional string fail_reason = 18;
  bool has_fail_reason() const;
  void clear_fail_reason() ;
  const std::string& fail_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fail_reason(Arg_&& arg, Args_... args);
  std::string* mutable_fail_reason();
  PROTOBUF_NODISCARD std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* value);

  private:
  const std::string& _internal_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_reason(
      const std::string& value);
  std::string* _internal_mutable_fail_reason();

  public:
  // string initiate_time = 19;
  void clear_initiate_time() ;
  const std::string& initiate_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_initiate_time(Arg_&& arg, Args_... args);
  std::string* mutable_initiate_time();
  PROTOBUF_NODISCARD std::string* release_initiate_time();
  void set_allocated_initiate_time(std::string* value);

  private:
  const std::string& _internal_initiate_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initiate_time(
      const std::string& value);
  std::string* _internal_mutable_initiate_time();

  public:
  // string update_time = 20;
  void clear_update_time() ;
  const std::string& update_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_update_time(Arg_&& arg, Args_... args);
  std::string* mutable_update_time();
  PROTOBUF_NODISCARD std::string* release_update_time();
  void set_allocated_update_time(std::string* value);

  private:
  const std::string& _internal_update_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_time(
      const std::string& value);
  std::string* _internal_mutable_update_time();

  public:
  // int64 transfer_amount = 16;
  void clear_transfer_amount() ;
  ::int64_t transfer_amount() const;
  void set_transfer_amount(::int64_t value);

  private:
  ::int64_t _internal_transfer_amount() const;
  void _internal_set_transfer_amount(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayQueryTransferDetailResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 0,
      195, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr mch_id_;
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    ::google::protobuf::internal::ArenaStringPtr user_name_;
    ::google::protobuf::internal::ArenaStringPtr batch_id_;
    ::google::protobuf::internal::ArenaStringPtr out_batch_no_;
    ::google::protobuf::internal::ArenaStringPtr out_detail_no_;
    ::google::protobuf::internal::ArenaStringPtr detail_id_;
    ::google::protobuf::internal::ArenaStringPtr detail_status_;
    ::google::protobuf::internal::ArenaStringPtr transfer_remark_;
    ::google::protobuf::internal::ArenaStringPtr fail_reason_;
    ::google::protobuf::internal::ArenaStringPtr initiate_time_;
    ::google::protobuf::internal::ArenaStringPtr update_time_;
    ::int64_t transfer_amount_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayQueryTransferDetailRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayQueryTransferDetailRequest) */ {
 public:
  inline PayQueryTransferDetailRequest() : PayQueryTransferDetailRequest(nullptr) {}
  ~PayQueryTransferDetailRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayQueryTransferDetailRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayQueryTransferDetailRequest(const PayQueryTransferDetailRequest& from)
      : PayQueryTransferDetailRequest(nullptr, from) {}
  PayQueryTransferDetailRequest(PayQueryTransferDetailRequest&& from) noexcept
    : PayQueryTransferDetailRequest() {
    *this = ::std::move(from);
  }

  inline PayQueryTransferDetailRequest& operator=(const PayQueryTransferDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayQueryTransferDetailRequest& operator=(PayQueryTransferDetailRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayQueryTransferDetailRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayQueryTransferDetailRequest* internal_default_instance() {
    return reinterpret_cast<const PayQueryTransferDetailRequest*>(
               &_PayQueryTransferDetailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PayQueryTransferDetailRequest& a, PayQueryTransferDetailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayQueryTransferDetailRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayQueryTransferDetailRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayQueryTransferDetailRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayQueryTransferDetailRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayQueryTransferDetailRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayQueryTransferDetailRequest& from) {
    PayQueryTransferDetailRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayQueryTransferDetailRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayQueryTransferDetailRequest";
  }
  protected:
  explicit PayQueryTransferDetailRequest(::google::protobuf::Arena* arena);
  PayQueryTransferDetailRequest(::google::protobuf::Arena* arena, const PayQueryTransferDetailRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutBatchNoFieldNumber = 1,
    kOutDetailNoFieldNumber = 2,
  };
  // string out_batch_no = 1;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* value);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // string out_detail_no = 2;
  void clear_out_detail_no() ;
  const std::string& out_detail_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_detail_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_detail_no();
  PROTOBUF_NODISCARD std::string* release_out_detail_no();
  void set_allocated_out_detail_no(std::string* value);

  private:
  const std::string& _internal_out_detail_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_detail_no(
      const std::string& value);
  std::string* _internal_mutable_out_detail_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayQueryTransferDetailRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      78, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr out_batch_no_;
    ::google::protobuf::internal::ArenaStringPtr out_detail_no_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayQueryRefundRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayQueryRefundRequest) */ {
 public:
  inline PayQueryRefundRequest() : PayQueryRefundRequest(nullptr) {}
  ~PayQueryRefundRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayQueryRefundRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayQueryRefundRequest(const PayQueryRefundRequest& from)
      : PayQueryRefundRequest(nullptr, from) {}
  PayQueryRefundRequest(PayQueryRefundRequest&& from) noexcept
    : PayQueryRefundRequest() {
    *this = ::std::move(from);
  }

  inline PayQueryRefundRequest& operator=(const PayQueryRefundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayQueryRefundRequest& operator=(PayQueryRefundRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayQueryRefundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayQueryRefundRequest* internal_default_instance() {
    return reinterpret_cast<const PayQueryRefundRequest*>(
               &_PayQueryRefundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PayQueryRefundRequest& a, PayQueryRefundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayQueryRefundRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayQueryRefundRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayQueryRefundRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayQueryRefundRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayQueryRefundRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayQueryRefundRequest& from) {
    PayQueryRefundRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayQueryRefundRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayQueryRefundRequest";
  }
  protected:
  explicit PayQueryRefundRequest(::google::protobuf::Arena* arena);
  PayQueryRefundRequest(::google::protobuf::Arena* arena, const PayQueryRefundRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutRefundNoFieldNumber = 1,
  };
  // string out_refund_no = 1;
  void clear_out_refund_no() ;
  const std::string& out_refund_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_refund_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_refund_no();
  PROTOBUF_NODISCARD std::string* release_out_refund_no();
  void set_allocated_out_refund_no(std::string* value);

  private:
  const std::string& _internal_out_refund_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_refund_no(
      const std::string& value);
  std::string* _internal_mutable_out_refund_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayQueryRefundRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr out_refund_no_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayQueryOrderByOutTradeNoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayQueryOrderByOutTradeNoRequest) */ {
 public:
  inline PayQueryOrderByOutTradeNoRequest() : PayQueryOrderByOutTradeNoRequest(nullptr) {}
  ~PayQueryOrderByOutTradeNoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayQueryOrderByOutTradeNoRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayQueryOrderByOutTradeNoRequest(const PayQueryOrderByOutTradeNoRequest& from)
      : PayQueryOrderByOutTradeNoRequest(nullptr, from) {}
  PayQueryOrderByOutTradeNoRequest(PayQueryOrderByOutTradeNoRequest&& from) noexcept
    : PayQueryOrderByOutTradeNoRequest() {
    *this = ::std::move(from);
  }

  inline PayQueryOrderByOutTradeNoRequest& operator=(const PayQueryOrderByOutTradeNoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayQueryOrderByOutTradeNoRequest& operator=(PayQueryOrderByOutTradeNoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayQueryOrderByOutTradeNoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayQueryOrderByOutTradeNoRequest* internal_default_instance() {
    return reinterpret_cast<const PayQueryOrderByOutTradeNoRequest*>(
               &_PayQueryOrderByOutTradeNoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PayQueryOrderByOutTradeNoRequest& a, PayQueryOrderByOutTradeNoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayQueryOrderByOutTradeNoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayQueryOrderByOutTradeNoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayQueryOrderByOutTradeNoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayQueryOrderByOutTradeNoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayQueryOrderByOutTradeNoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayQueryOrderByOutTradeNoRequest& from) {
    PayQueryOrderByOutTradeNoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayQueryOrderByOutTradeNoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayQueryOrderByOutTradeNoRequest";
  }
  protected:
  explicit PayQueryOrderByOutTradeNoRequest(::google::protobuf::Arena* arena);
  PayQueryOrderByOutTradeNoRequest(::google::protobuf::Arena* arena, const PayQueryOrderByOutTradeNoRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutTradeNoFieldNumber = 1,
  };
  // string out_trade_no = 1;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* value);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayQueryOrderByOutTradeNoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr out_trade_no_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayQueryOrderByIdRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayQueryOrderByIdRequest) */ {
 public:
  inline PayQueryOrderByIdRequest() : PayQueryOrderByIdRequest(nullptr) {}
  ~PayQueryOrderByIdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayQueryOrderByIdRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayQueryOrderByIdRequest(const PayQueryOrderByIdRequest& from)
      : PayQueryOrderByIdRequest(nullptr, from) {}
  PayQueryOrderByIdRequest(PayQueryOrderByIdRequest&& from) noexcept
    : PayQueryOrderByIdRequest() {
    *this = ::std::move(from);
  }

  inline PayQueryOrderByIdRequest& operator=(const PayQueryOrderByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayQueryOrderByIdRequest& operator=(PayQueryOrderByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayQueryOrderByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayQueryOrderByIdRequest* internal_default_instance() {
    return reinterpret_cast<const PayQueryOrderByIdRequest*>(
               &_PayQueryOrderByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PayQueryOrderByIdRequest& a, PayQueryOrderByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayQueryOrderByIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayQueryOrderByIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayQueryOrderByIdRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayQueryOrderByIdRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayQueryOrderByIdRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayQueryOrderByIdRequest& from) {
    PayQueryOrderByIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayQueryOrderByIdRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayQueryOrderByIdRequest";
  }
  protected:
  explicit PayQueryOrderByIdRequest(::google::protobuf::Arena* arena);
  PayQueryOrderByIdRequest(::google::protobuf::Arena* arena, const PayQueryOrderByIdRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
  };
  // string transaction_id = 1;
  void clear_transaction_id() ;
  const std::string& transaction_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_id(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* value);

  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(
      const std::string& value);
  std::string* _internal_mutable_transaction_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayQueryOrderByIdRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayQueryBatchTransferResponse_Detail final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayQueryBatchTransferResponse.Detail) */ {
 public:
  inline PayQueryBatchTransferResponse_Detail() : PayQueryBatchTransferResponse_Detail(nullptr) {}
  ~PayQueryBatchTransferResponse_Detail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayQueryBatchTransferResponse_Detail(::google::protobuf::internal::ConstantInitialized);

  inline PayQueryBatchTransferResponse_Detail(const PayQueryBatchTransferResponse_Detail& from)
      : PayQueryBatchTransferResponse_Detail(nullptr, from) {}
  PayQueryBatchTransferResponse_Detail(PayQueryBatchTransferResponse_Detail&& from) noexcept
    : PayQueryBatchTransferResponse_Detail() {
    *this = ::std::move(from);
  }

  inline PayQueryBatchTransferResponse_Detail& operator=(const PayQueryBatchTransferResponse_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayQueryBatchTransferResponse_Detail& operator=(PayQueryBatchTransferResponse_Detail&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayQueryBatchTransferResponse_Detail& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayQueryBatchTransferResponse_Detail* internal_default_instance() {
    return reinterpret_cast<const PayQueryBatchTransferResponse_Detail*>(
               &_PayQueryBatchTransferResponse_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PayQueryBatchTransferResponse_Detail& a, PayQueryBatchTransferResponse_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(PayQueryBatchTransferResponse_Detail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayQueryBatchTransferResponse_Detail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayQueryBatchTransferResponse_Detail* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayQueryBatchTransferResponse_Detail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayQueryBatchTransferResponse_Detail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayQueryBatchTransferResponse_Detail& from) {
    PayQueryBatchTransferResponse_Detail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayQueryBatchTransferResponse_Detail* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayQueryBatchTransferResponse.Detail";
  }
  protected:
  explicit PayQueryBatchTransferResponse_Detail(::google::protobuf::Arena* arena);
  PayQueryBatchTransferResponse_Detail(::google::protobuf::Arena* arena, const PayQueryBatchTransferResponse_Detail& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailIdFieldNumber = 1,
    kOutDetailNoFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string detail_id = 1;
  void clear_detail_id() ;
  const std::string& detail_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_detail_id(Arg_&& arg, Args_... args);
  std::string* mutable_detail_id();
  PROTOBUF_NODISCARD std::string* release_detail_id();
  void set_allocated_detail_id(std::string* value);

  private:
  const std::string& _internal_detail_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail_id(
      const std::string& value);
  std::string* _internal_mutable_detail_id();

  public:
  // string out_detail_no = 2;
  void clear_out_detail_no() ;
  const std::string& out_detail_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_detail_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_detail_no();
  PROTOBUF_NODISCARD std::string* release_out_detail_no();
  void set_allocated_out_detail_no(std::string* value);

  private:
  const std::string& _internal_out_detail_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_detail_no(
      const std::string& value);
  std::string* _internal_mutable_out_detail_no();

  public:
  // string status = 3;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayQueryBatchTransferResponse.Detail)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      88, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr detail_id_;
    ::google::protobuf::internal::ArenaStringPtr out_detail_no_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayQueryBatchTransferResponse_Batch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayQueryBatchTransferResponse.Batch) */ {
 public:
  inline PayQueryBatchTransferResponse_Batch() : PayQueryBatchTransferResponse_Batch(nullptr) {}
  ~PayQueryBatchTransferResponse_Batch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayQueryBatchTransferResponse_Batch(::google::protobuf::internal::ConstantInitialized);

  inline PayQueryBatchTransferResponse_Batch(const PayQueryBatchTransferResponse_Batch& from)
      : PayQueryBatchTransferResponse_Batch(nullptr, from) {}
  PayQueryBatchTransferResponse_Batch(PayQueryBatchTransferResponse_Batch&& from) noexcept
    : PayQueryBatchTransferResponse_Batch() {
    *this = ::std::move(from);
  }

  inline PayQueryBatchTransferResponse_Batch& operator=(const PayQueryBatchTransferResponse_Batch& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayQueryBatchTransferResponse_Batch& operator=(PayQueryBatchTransferResponse_Batch&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayQueryBatchTransferResponse_Batch& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayQueryBatchTransferResponse_Batch* internal_default_instance() {
    return reinterpret_cast<const PayQueryBatchTransferResponse_Batch*>(
               &_PayQueryBatchTransferResponse_Batch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PayQueryBatchTransferResponse_Batch& a, PayQueryBatchTransferResponse_Batch& b) {
    a.Swap(&b);
  }
  inline void Swap(PayQueryBatchTransferResponse_Batch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayQueryBatchTransferResponse_Batch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayQueryBatchTransferResponse_Batch* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayQueryBatchTransferResponse_Batch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayQueryBatchTransferResponse_Batch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayQueryBatchTransferResponse_Batch& from) {
    PayQueryBatchTransferResponse_Batch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayQueryBatchTransferResponse_Batch* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayQueryBatchTransferResponse.Batch";
  }
  protected:
  explicit PayQueryBatchTransferResponse_Batch(::google::protobuf::Arena* arena);
  PayQueryBatchTransferResponse_Batch(::google::protobuf::Arena* arena, const PayQueryBatchTransferResponse_Batch& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kMchIdFieldNumber = 2,
    kTransferSceneIdFieldNumber = 9,
    kBatchIdFieldNumber = 11,
    kOutBatchNoFieldNumber = 12,
    kBatchStatusFieldNumber = 13,
    kBatchTypeFieldNumber = 14,
    kBatchNameFieldNumber = 15,
    kBatchRemarkFieldNumber = 16,
    kCloseReasonFieldNumber = 21,
    kCreateTimeFieldNumber = 24,
    kUpdateTimeFieldNumber = 25,
    kTotalAmountFieldNumber = 22,
    kTotalNumFieldNumber = 23,
    kSuccessNumFieldNumber = 27,
    kSuccessAmountFieldNumber = 26,
    kFailAmountFieldNumber = 28,
    kFailNumFieldNumber = 29,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* value);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string mch_id = 2;
  void clear_mch_id() ;
  const std::string& mch_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mch_id(Arg_&& arg, Args_... args);
  std::string* mutable_mch_id();
  PROTOBUF_NODISCARD std::string* release_mch_id();
  void set_allocated_mch_id(std::string* value);

  private:
  const std::string& _internal_mch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mch_id(
      const std::string& value);
  std::string* _internal_mutable_mch_id();

  public:
  // string transfer_scene_id = 9;
  void clear_transfer_scene_id() ;
  const std::string& transfer_scene_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transfer_scene_id(Arg_&& arg, Args_... args);
  std::string* mutable_transfer_scene_id();
  PROTOBUF_NODISCARD std::string* release_transfer_scene_id();
  void set_allocated_transfer_scene_id(std::string* value);

  private:
  const std::string& _internal_transfer_scene_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transfer_scene_id(
      const std::string& value);
  std::string* _internal_mutable_transfer_scene_id();

  public:
  // string batch_id = 11;
  void clear_batch_id() ;
  const std::string& batch_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_id(Arg_&& arg, Args_... args);
  std::string* mutable_batch_id();
  PROTOBUF_NODISCARD std::string* release_batch_id();
  void set_allocated_batch_id(std::string* value);

  private:
  const std::string& _internal_batch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_id(
      const std::string& value);
  std::string* _internal_mutable_batch_id();

  public:
  // string out_batch_no = 12;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* value);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // string batch_status = 13;
  void clear_batch_status() ;
  const std::string& batch_status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_status(Arg_&& arg, Args_... args);
  std::string* mutable_batch_status();
  PROTOBUF_NODISCARD std::string* release_batch_status();
  void set_allocated_batch_status(std::string* value);

  private:
  const std::string& _internal_batch_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_status(
      const std::string& value);
  std::string* _internal_mutable_batch_status();

  public:
  // string batch_type = 14;
  void clear_batch_type() ;
  const std::string& batch_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_type(Arg_&& arg, Args_... args);
  std::string* mutable_batch_type();
  PROTOBUF_NODISCARD std::string* release_batch_type();
  void set_allocated_batch_type(std::string* value);

  private:
  const std::string& _internal_batch_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_type(
      const std::string& value);
  std::string* _internal_mutable_batch_type();

  public:
  // string batch_name = 15;
  void clear_batch_name() ;
  const std::string& batch_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_name(Arg_&& arg, Args_... args);
  std::string* mutable_batch_name();
  PROTOBUF_NODISCARD std::string* release_batch_name();
  void set_allocated_batch_name(std::string* value);

  private:
  const std::string& _internal_batch_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_name(
      const std::string& value);
  std::string* _internal_mutable_batch_name();

  public:
  // string batch_remark = 16;
  void clear_batch_remark() ;
  const std::string& batch_remark() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_remark(Arg_&& arg, Args_... args);
  std::string* mutable_batch_remark();
  PROTOBUF_NODISCARD std::string* release_batch_remark();
  void set_allocated_batch_remark(std::string* value);

  private:
  const std::string& _internal_batch_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_remark(
      const std::string& value);
  std::string* _internal_mutable_batch_remark();

  public:
  // optional string close_reason = 21;
  bool has_close_reason() const;
  void clear_close_reason() ;
  const std::string& close_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_close_reason(Arg_&& arg, Args_... args);
  std::string* mutable_close_reason();
  PROTOBUF_NODISCARD std::string* release_close_reason();
  void set_allocated_close_reason(std::string* value);

  private:
  const std::string& _internal_close_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_close_reason(
      const std::string& value);
  std::string* _internal_mutable_close_reason();

  public:
  // optional string create_time = 24;
  bool has_create_time() const;
  void clear_create_time() ;
  const std::string& create_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_create_time(Arg_&& arg, Args_... args);
  std::string* mutable_create_time();
  PROTOBUF_NODISCARD std::string* release_create_time();
  void set_allocated_create_time(std::string* value);

  private:
  const std::string& _internal_create_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_time(
      const std::string& value);
  std::string* _internal_mutable_create_time();

  public:
  // optional string update_time = 25;
  bool has_update_time() const;
  void clear_update_time() ;
  const std::string& update_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_update_time(Arg_&& arg, Args_... args);
  std::string* mutable_update_time();
  PROTOBUF_NODISCARD std::string* release_update_time();
  void set_allocated_update_time(std::string* value);

  private:
  const std::string& _internal_update_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_time(
      const std::string& value);
  std::string* _internal_mutable_update_time();

  public:
  // int64 total_amount = 22;
  void clear_total_amount() ;
  ::int64_t total_amount() const;
  void set_total_amount(::int64_t value);

  private:
  ::int64_t _internal_total_amount() const;
  void _internal_set_total_amount(::int64_t value);

  public:
  // int32 total_num = 23;
  void clear_total_num() ;
  ::int32_t total_num() const;
  void set_total_num(::int32_t value);

  private:
  ::int32_t _internal_total_num() const;
  void _internal_set_total_num(::int32_t value);

  public:
  // optional int32 success_num = 27;
  bool has_success_num() const;
  void clear_success_num() ;
  ::int32_t success_num() const;
  void set_success_num(::int32_t value);

  private:
  ::int32_t _internal_success_num() const;
  void _internal_set_success_num(::int32_t value);

  public:
  // optional int64 success_amount = 26;
  bool has_success_amount() const;
  void clear_success_amount() ;
  ::int64_t success_amount() const;
  void set_success_amount(::int64_t value);

  private:
  ::int64_t _internal_success_amount() const;
  void _internal_set_success_amount(::int64_t value);

  public:
  // optional int64 fail_amount = 28;
  bool has_fail_amount() const;
  void clear_fail_amount() ;
  ::int64_t fail_amount() const;
  void set_fail_amount(::int64_t value);

  private:
  ::int64_t _internal_fail_amount() const;
  void _internal_set_fail_amount(::int64_t value);

  public:
  // optional int32 fail_num = 29;
  bool has_fail_num() const;
  void clear_fail_num() ;
  ::int32_t fail_num() const;
  void set_fail_num(::int32_t value);

  private:
  ::int32_t _internal_fail_num() const;
  void _internal_set_fail_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayQueryBatchTransferResponse.Batch)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 0,
      202, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr mch_id_;
    ::google::protobuf::internal::ArenaStringPtr transfer_scene_id_;
    ::google::protobuf::internal::ArenaStringPtr batch_id_;
    ::google::protobuf::internal::ArenaStringPtr out_batch_no_;
    ::google::protobuf::internal::ArenaStringPtr batch_status_;
    ::google::protobuf::internal::ArenaStringPtr batch_type_;
    ::google::protobuf::internal::ArenaStringPtr batch_name_;
    ::google::protobuf::internal::ArenaStringPtr batch_remark_;
    ::google::protobuf::internal::ArenaStringPtr close_reason_;
    ::google::protobuf::internal::ArenaStringPtr create_time_;
    ::google::protobuf::internal::ArenaStringPtr update_time_;
    ::int64_t total_amount_;
    ::int32_t total_num_;
    ::int32_t success_num_;
    ::int64_t success_amount_;
    ::int64_t fail_amount_;
    ::int32_t fail_num_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayQueryBatchTransferRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayQueryBatchTransferRequest) */ {
 public:
  inline PayQueryBatchTransferRequest() : PayQueryBatchTransferRequest(nullptr) {}
  ~PayQueryBatchTransferRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayQueryBatchTransferRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayQueryBatchTransferRequest(const PayQueryBatchTransferRequest& from)
      : PayQueryBatchTransferRequest(nullptr, from) {}
  PayQueryBatchTransferRequest(PayQueryBatchTransferRequest&& from) noexcept
    : PayQueryBatchTransferRequest() {
    *this = ::std::move(from);
  }

  inline PayQueryBatchTransferRequest& operator=(const PayQueryBatchTransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayQueryBatchTransferRequest& operator=(PayQueryBatchTransferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayQueryBatchTransferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayQueryBatchTransferRequest* internal_default_instance() {
    return reinterpret_cast<const PayQueryBatchTransferRequest*>(
               &_PayQueryBatchTransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PayQueryBatchTransferRequest& a, PayQueryBatchTransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayQueryBatchTransferRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayQueryBatchTransferRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayQueryBatchTransferRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayQueryBatchTransferRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayQueryBatchTransferRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayQueryBatchTransferRequest& from) {
    PayQueryBatchTransferRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayQueryBatchTransferRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayQueryBatchTransferRequest";
  }
  protected:
  explicit PayQueryBatchTransferRequest(::google::protobuf::Arena* arena);
  PayQueryBatchTransferRequest(::google::protobuf::Arena* arena, const PayQueryBatchTransferRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DetailStatus = PayQueryBatchTransferRequest_DetailStatus;
  static constexpr DetailStatus ALL = PayQueryBatchTransferRequest_DetailStatus_ALL;
  static constexpr DetailStatus SUCCESS = PayQueryBatchTransferRequest_DetailStatus_SUCCESS;
  static constexpr DetailStatus WAIT_PAY = PayQueryBatchTransferRequest_DetailStatus_WAIT_PAY;
  static constexpr DetailStatus FAIL = PayQueryBatchTransferRequest_DetailStatus_FAIL;
  static inline bool DetailStatus_IsValid(int value) {
    return PayQueryBatchTransferRequest_DetailStatus_IsValid(value);
  }
  static constexpr DetailStatus DetailStatus_MIN = PayQueryBatchTransferRequest_DetailStatus_DetailStatus_MIN;
  static constexpr DetailStatus DetailStatus_MAX = PayQueryBatchTransferRequest_DetailStatus_DetailStatus_MAX;
  static constexpr int DetailStatus_ARRAYSIZE = PayQueryBatchTransferRequest_DetailStatus_DetailStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DetailStatus_descriptor() {
    return PayQueryBatchTransferRequest_DetailStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& DetailStatus_Name(T value) {
    return PayQueryBatchTransferRequest_DetailStatus_Name(value);
  }
  static inline bool DetailStatus_Parse(absl::string_view name, DetailStatus* value) {
    return PayQueryBatchTransferRequest_DetailStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutBatchNoFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLimitFieldNumber = 3,
    kDetailStatusFieldNumber = 9,
  };
  // string out_batch_no = 1;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* value);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // int32 offset = 2;
  void clear_offset() ;
  ::int32_t offset() const;
  void set_offset(::int32_t value);

  private:
  ::int32_t _internal_offset() const;
  void _internal_set_offset(::int32_t value);

  public:
  // int32 limit = 3;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // .palm.wechat.v1.PayQueryBatchTransferRequest.DetailStatus detail_status = 9;
  void clear_detail_status() ;
  ::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus detail_status() const;
  void set_detail_status(::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus value);

  private:
  ::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus _internal_detail_status() const;
  void _internal_set_detail_status(::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayQueryBatchTransferRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      64, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr out_batch_no_;
    ::int32_t offset_;
    ::int32_t limit_;
    int detail_status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayPrepayRequest_Amount final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayPrepayRequest.Amount) */ {
 public:
  inline PayPrepayRequest_Amount() : PayPrepayRequest_Amount(nullptr) {}
  ~PayPrepayRequest_Amount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayPrepayRequest_Amount(::google::protobuf::internal::ConstantInitialized);

  inline PayPrepayRequest_Amount(const PayPrepayRequest_Amount& from)
      : PayPrepayRequest_Amount(nullptr, from) {}
  PayPrepayRequest_Amount(PayPrepayRequest_Amount&& from) noexcept
    : PayPrepayRequest_Amount() {
    *this = ::std::move(from);
  }

  inline PayPrepayRequest_Amount& operator=(const PayPrepayRequest_Amount& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayPrepayRequest_Amount& operator=(PayPrepayRequest_Amount&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayPrepayRequest_Amount& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayPrepayRequest_Amount* internal_default_instance() {
    return reinterpret_cast<const PayPrepayRequest_Amount*>(
               &_PayPrepayRequest_Amount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PayPrepayRequest_Amount& a, PayPrepayRequest_Amount& b) {
    a.Swap(&b);
  }
  inline void Swap(PayPrepayRequest_Amount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayPrepayRequest_Amount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayPrepayRequest_Amount* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayPrepayRequest_Amount>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayPrepayRequest_Amount& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayPrepayRequest_Amount& from) {
    PayPrepayRequest_Amount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayPrepayRequest_Amount* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayPrepayRequest.Amount";
  }
  protected:
  explicit PayPrepayRequest_Amount(::google::protobuf::Arena* arena);
  PayPrepayRequest_Amount(::google::protobuf::Arena* arena, const PayPrepayRequest_Amount& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kCurrencyFieldNumber = 2,
  };
  // int32 total = 1;
  void clear_total() ;
  ::int32_t total() const;
  void set_total(::int32_t value);

  private:
  ::int32_t _internal_total() const;
  void _internal_set_total(::int32_t value);

  public:
  // .palm.wechat.v1.PayCurrency currency = 2;
  void clear_currency() ;
  ::palm::wechat::v1::PayCurrency currency() const;
  void set_currency(::palm::wechat::v1::PayCurrency value);

  private:
  ::palm::wechat::v1::PayCurrency _internal_currency() const;
  void _internal_set_currency(::palm::wechat::v1::PayCurrency value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayPrepayRequest.Amount)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t total_;
    int currency_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayNativeQrCodeUrlResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayNativeQrCodeUrlResponse) */ {
 public:
  inline PayNativeQrCodeUrlResponse() : PayNativeQrCodeUrlResponse(nullptr) {}
  ~PayNativeQrCodeUrlResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayNativeQrCodeUrlResponse(::google::protobuf::internal::ConstantInitialized);

  inline PayNativeQrCodeUrlResponse(const PayNativeQrCodeUrlResponse& from)
      : PayNativeQrCodeUrlResponse(nullptr, from) {}
  PayNativeQrCodeUrlResponse(PayNativeQrCodeUrlResponse&& from) noexcept
    : PayNativeQrCodeUrlResponse() {
    *this = ::std::move(from);
  }

  inline PayNativeQrCodeUrlResponse& operator=(const PayNativeQrCodeUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayNativeQrCodeUrlResponse& operator=(PayNativeQrCodeUrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayNativeQrCodeUrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayNativeQrCodeUrlResponse* internal_default_instance() {
    return reinterpret_cast<const PayNativeQrCodeUrlResponse*>(
               &_PayNativeQrCodeUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PayNativeQrCodeUrlResponse& a, PayNativeQrCodeUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayNativeQrCodeUrlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayNativeQrCodeUrlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayNativeQrCodeUrlResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayNativeQrCodeUrlResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayNativeQrCodeUrlResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayNativeQrCodeUrlResponse& from) {
    PayNativeQrCodeUrlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayNativeQrCodeUrlResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayNativeQrCodeUrlResponse";
  }
  protected:
  explicit PayNativeQrCodeUrlResponse(::google::protobuf::Arena* arena);
  PayNativeQrCodeUrlResponse(::google::protobuf::Arena* arena, const PayNativeQrCodeUrlResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kOutTradeNoFieldNumber = 2,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string out_trade_no = 2;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* value);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayNativeQrCodeUrlResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr out_trade_no_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayJsapiPrepayIdResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayJsapiPrepayIdResponse) */ {
 public:
  inline PayJsapiPrepayIdResponse() : PayJsapiPrepayIdResponse(nullptr) {}
  ~PayJsapiPrepayIdResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayJsapiPrepayIdResponse(::google::protobuf::internal::ConstantInitialized);

  inline PayJsapiPrepayIdResponse(const PayJsapiPrepayIdResponse& from)
      : PayJsapiPrepayIdResponse(nullptr, from) {}
  PayJsapiPrepayIdResponse(PayJsapiPrepayIdResponse&& from) noexcept
    : PayJsapiPrepayIdResponse() {
    *this = ::std::move(from);
  }

  inline PayJsapiPrepayIdResponse& operator=(const PayJsapiPrepayIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayJsapiPrepayIdResponse& operator=(PayJsapiPrepayIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayJsapiPrepayIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayJsapiPrepayIdResponse* internal_default_instance() {
    return reinterpret_cast<const PayJsapiPrepayIdResponse*>(
               &_PayJsapiPrepayIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PayJsapiPrepayIdResponse& a, PayJsapiPrepayIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayJsapiPrepayIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayJsapiPrepayIdResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayJsapiPrepayIdResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayJsapiPrepayIdResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayJsapiPrepayIdResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayJsapiPrepayIdResponse& from) {
    PayJsapiPrepayIdResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayJsapiPrepayIdResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayJsapiPrepayIdResponse";
  }
  protected:
  explicit PayJsapiPrepayIdResponse(::google::protobuf::Arena* arena);
  PayJsapiPrepayIdResponse(::google::protobuf::Arena* arena, const PayJsapiPrepayIdResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kTimeStampFieldNumber = 2,
    kNonceStrFieldNumber = 3,
    kPackageFieldNumber = 4,
    kSignTypeFieldNumber = 5,
    kPaySignFieldNumber = 6,
    kOutTradeNoFieldNumber = 11,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* value);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string time_stamp = 2;
  void clear_time_stamp() ;
  const std::string& time_stamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time_stamp(Arg_&& arg, Args_... args);
  std::string* mutable_time_stamp();
  PROTOBUF_NODISCARD std::string* release_time_stamp();
  void set_allocated_time_stamp(std::string* value);

  private:
  const std::string& _internal_time_stamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_stamp(
      const std::string& value);
  std::string* _internal_mutable_time_stamp();

  public:
  // string nonce_str = 3;
  void clear_nonce_str() ;
  const std::string& nonce_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce_str(Arg_&& arg, Args_... args);
  std::string* mutable_nonce_str();
  PROTOBUF_NODISCARD std::string* release_nonce_str();
  void set_allocated_nonce_str(std::string* value);

  private:
  const std::string& _internal_nonce_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce_str(
      const std::string& value);
  std::string* _internal_mutable_nonce_str();

  public:
  // string package = 4;
  void clear_package() ;
  const std::string& package() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_package(Arg_&& arg, Args_... args);
  std::string* mutable_package();
  PROTOBUF_NODISCARD std::string* release_package();
  void set_allocated_package(std::string* value);

  private:
  const std::string& _internal_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package(
      const std::string& value);
  std::string* _internal_mutable_package();

  public:
  // string sign_type = 5;
  void clear_sign_type() ;
  const std::string& sign_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sign_type(Arg_&& arg, Args_... args);
  std::string* mutable_sign_type();
  PROTOBUF_NODISCARD std::string* release_sign_type();
  void set_allocated_sign_type(std::string* value);

  private:
  const std::string& _internal_sign_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign_type(
      const std::string& value);
  std::string* _internal_mutable_sign_type();

  public:
  // string pay_sign = 6;
  void clear_pay_sign() ;
  const std::string& pay_sign() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pay_sign(Arg_&& arg, Args_... args);
  std::string* mutable_pay_sign();
  PROTOBUF_NODISCARD std::string* release_pay_sign();
  void set_allocated_pay_sign(std::string* value);

  private:
  const std::string& _internal_pay_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pay_sign(
      const std::string& value);
  std::string* _internal_mutable_pay_sign();

  public:
  // string out_trade_no = 11;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* value);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayJsapiPrepayIdResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      109, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr time_stamp_;
    ::google::protobuf::internal::ArenaStringPtr nonce_str_;
    ::google::protobuf::internal::ArenaStringPtr package_;
    ::google::protobuf::internal::ArenaStringPtr sign_type_;
    ::google::protobuf::internal::ArenaStringPtr pay_sign_;
    ::google::protobuf::internal::ArenaStringPtr out_trade_no_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayExecuteBatchTransferResponse_Succeeded final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded) */ {
 public:
  inline PayExecuteBatchTransferResponse_Succeeded() : PayExecuteBatchTransferResponse_Succeeded(nullptr) {}
  ~PayExecuteBatchTransferResponse_Succeeded() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayExecuteBatchTransferResponse_Succeeded(::google::protobuf::internal::ConstantInitialized);

  inline PayExecuteBatchTransferResponse_Succeeded(const PayExecuteBatchTransferResponse_Succeeded& from)
      : PayExecuteBatchTransferResponse_Succeeded(nullptr, from) {}
  PayExecuteBatchTransferResponse_Succeeded(PayExecuteBatchTransferResponse_Succeeded&& from) noexcept
    : PayExecuteBatchTransferResponse_Succeeded() {
    *this = ::std::move(from);
  }

  inline PayExecuteBatchTransferResponse_Succeeded& operator=(const PayExecuteBatchTransferResponse_Succeeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayExecuteBatchTransferResponse_Succeeded& operator=(PayExecuteBatchTransferResponse_Succeeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayExecuteBatchTransferResponse_Succeeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayExecuteBatchTransferResponse_Succeeded* internal_default_instance() {
    return reinterpret_cast<const PayExecuteBatchTransferResponse_Succeeded*>(
               &_PayExecuteBatchTransferResponse_Succeeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PayExecuteBatchTransferResponse_Succeeded& a, PayExecuteBatchTransferResponse_Succeeded& b) {
    a.Swap(&b);
  }
  inline void Swap(PayExecuteBatchTransferResponse_Succeeded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayExecuteBatchTransferResponse_Succeeded* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayExecuteBatchTransferResponse_Succeeded* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayExecuteBatchTransferResponse_Succeeded>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayExecuteBatchTransferResponse_Succeeded& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayExecuteBatchTransferResponse_Succeeded& from) {
    PayExecuteBatchTransferResponse_Succeeded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayExecuteBatchTransferResponse_Succeeded* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded";
  }
  protected:
  explicit PayExecuteBatchTransferResponse_Succeeded(::google::protobuf::Arena* arena);
  PayExecuteBatchTransferResponse_Succeeded(::google::protobuf::Arena* arena, const PayExecuteBatchTransferResponse_Succeeded& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchIdFieldNumber = 1,
    kCreateTimeFieldNumber = 2,
  };
  // string batch_id = 1;
  void clear_batch_id() ;
  const std::string& batch_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_id(Arg_&& arg, Args_... args);
  std::string* mutable_batch_id();
  PROTOBUF_NODISCARD std::string* release_batch_id();
  void set_allocated_batch_id(std::string* value);

  private:
  const std::string& _internal_batch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_id(
      const std::string& value);
  std::string* _internal_mutable_batch_id();

  public:
  // string create_time = 2;
  void clear_create_time() ;
  const std::string& create_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_create_time(Arg_&& arg, Args_... args);
  std::string* mutable_create_time();
  PROTOBUF_NODISCARD std::string* release_create_time();
  void set_allocated_create_time(std::string* value);

  private:
  const std::string& _internal_create_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_time(
      const std::string& value);
  std::string* _internal_mutable_create_time();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      84, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr batch_id_;
    ::google::protobuf::internal::ArenaStringPtr create_time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayExecuteBatchTransferResponse_Detail final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail) */ {
 public:
  inline PayExecuteBatchTransferResponse_Detail() : PayExecuteBatchTransferResponse_Detail(nullptr) {}
  ~PayExecuteBatchTransferResponse_Detail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayExecuteBatchTransferResponse_Detail(::google::protobuf::internal::ConstantInitialized);

  inline PayExecuteBatchTransferResponse_Detail(const PayExecuteBatchTransferResponse_Detail& from)
      : PayExecuteBatchTransferResponse_Detail(nullptr, from) {}
  PayExecuteBatchTransferResponse_Detail(PayExecuteBatchTransferResponse_Detail&& from) noexcept
    : PayExecuteBatchTransferResponse_Detail() {
    *this = ::std::move(from);
  }

  inline PayExecuteBatchTransferResponse_Detail& operator=(const PayExecuteBatchTransferResponse_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayExecuteBatchTransferResponse_Detail& operator=(PayExecuteBatchTransferResponse_Detail&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayExecuteBatchTransferResponse_Detail& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayExecuteBatchTransferResponse_Detail* internal_default_instance() {
    return reinterpret_cast<const PayExecuteBatchTransferResponse_Detail*>(
               &_PayExecuteBatchTransferResponse_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PayExecuteBatchTransferResponse_Detail& a, PayExecuteBatchTransferResponse_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(PayExecuteBatchTransferResponse_Detail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayExecuteBatchTransferResponse_Detail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayExecuteBatchTransferResponse_Detail* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayExecuteBatchTransferResponse_Detail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayExecuteBatchTransferResponse_Detail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayExecuteBatchTransferResponse_Detail& from) {
    PayExecuteBatchTransferResponse_Detail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayExecuteBatchTransferResponse_Detail* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayExecuteBatchTransferResponse.Detail";
  }
  protected:
  explicit PayExecuteBatchTransferResponse_Detail(::google::protobuf::Arena* arena);
  PayExecuteBatchTransferResponse_Detail(::google::protobuf::Arena* arena, const PayExecuteBatchTransferResponse_Detail& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenIdFieldNumber = 1,
    kOutDetailNoFieldNumber = 2,
  };
  // string open_id = 1;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* value);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string out_detail_no = 2;
  void clear_out_detail_no() ;
  const std::string& out_detail_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_detail_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_detail_no();
  PROTOBUF_NODISCARD std::string* release_out_detail_no();
  void set_allocated_out_detail_no(std::string* value);

  private:
  const std::string& _internal_out_detail_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_detail_no(
      const std::string& value);
  std::string* _internal_mutable_out_detail_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      82, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    ::google::protobuf::internal::ArenaStringPtr out_detail_no_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayExecuteBatchTransferRequest_Detail final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail) */ {
 public:
  inline PayExecuteBatchTransferRequest_Detail() : PayExecuteBatchTransferRequest_Detail(nullptr) {}
  ~PayExecuteBatchTransferRequest_Detail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayExecuteBatchTransferRequest_Detail(::google::protobuf::internal::ConstantInitialized);

  inline PayExecuteBatchTransferRequest_Detail(const PayExecuteBatchTransferRequest_Detail& from)
      : PayExecuteBatchTransferRequest_Detail(nullptr, from) {}
  PayExecuteBatchTransferRequest_Detail(PayExecuteBatchTransferRequest_Detail&& from) noexcept
    : PayExecuteBatchTransferRequest_Detail() {
    *this = ::std::move(from);
  }

  inline PayExecuteBatchTransferRequest_Detail& operator=(const PayExecuteBatchTransferRequest_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayExecuteBatchTransferRequest_Detail& operator=(PayExecuteBatchTransferRequest_Detail&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayExecuteBatchTransferRequest_Detail& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayExecuteBatchTransferRequest_Detail* internal_default_instance() {
    return reinterpret_cast<const PayExecuteBatchTransferRequest_Detail*>(
               &_PayExecuteBatchTransferRequest_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PayExecuteBatchTransferRequest_Detail& a, PayExecuteBatchTransferRequest_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(PayExecuteBatchTransferRequest_Detail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayExecuteBatchTransferRequest_Detail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayExecuteBatchTransferRequest_Detail* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayExecuteBatchTransferRequest_Detail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayExecuteBatchTransferRequest_Detail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayExecuteBatchTransferRequest_Detail& from) {
    PayExecuteBatchTransferRequest_Detail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayExecuteBatchTransferRequest_Detail* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayExecuteBatchTransferRequest.Detail";
  }
  protected:
  explicit PayExecuteBatchTransferRequest_Detail(::google::protobuf::Arena* arena);
  PayExecuteBatchTransferRequest_Detail(::google::protobuf::Arena* arena, const PayExecuteBatchTransferRequest_Detail& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kRemarkFieldNumber = 4,
    kAmountFieldNumber = 3,
  };
  // string open_id = 1;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* value);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string remark = 4;
  void clear_remark() ;
  const std::string& remark() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remark(Arg_&& arg, Args_... args);
  std::string* mutable_remark();
  PROTOBUF_NODISCARD std::string* release_remark();
  void set_allocated_remark(std::string* value);

  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(
      const std::string& value);
  std::string* _internal_mutable_remark();

  public:
  // int64 amount = 3;
  void clear_amount() ;
  ::int64_t amount() const;
  void set_amount(::int64_t value);

  private:
  ::int64_t _internal_amount() const;
  void _internal_set_amount(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      82, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr remark_;
    ::int64_t amount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayExecuteBatchTransferRequest_Batch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch) */ {
 public:
  inline PayExecuteBatchTransferRequest_Batch() : PayExecuteBatchTransferRequest_Batch(nullptr) {}
  ~PayExecuteBatchTransferRequest_Batch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayExecuteBatchTransferRequest_Batch(::google::protobuf::internal::ConstantInitialized);

  inline PayExecuteBatchTransferRequest_Batch(const PayExecuteBatchTransferRequest_Batch& from)
      : PayExecuteBatchTransferRequest_Batch(nullptr, from) {}
  PayExecuteBatchTransferRequest_Batch(PayExecuteBatchTransferRequest_Batch&& from) noexcept
    : PayExecuteBatchTransferRequest_Batch() {
    *this = ::std::move(from);
  }

  inline PayExecuteBatchTransferRequest_Batch& operator=(const PayExecuteBatchTransferRequest_Batch& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayExecuteBatchTransferRequest_Batch& operator=(PayExecuteBatchTransferRequest_Batch&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayExecuteBatchTransferRequest_Batch& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayExecuteBatchTransferRequest_Batch* internal_default_instance() {
    return reinterpret_cast<const PayExecuteBatchTransferRequest_Batch*>(
               &_PayExecuteBatchTransferRequest_Batch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PayExecuteBatchTransferRequest_Batch& a, PayExecuteBatchTransferRequest_Batch& b) {
    a.Swap(&b);
  }
  inline void Swap(PayExecuteBatchTransferRequest_Batch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayExecuteBatchTransferRequest_Batch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayExecuteBatchTransferRequest_Batch* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayExecuteBatchTransferRequest_Batch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayExecuteBatchTransferRequest_Batch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayExecuteBatchTransferRequest_Batch& from) {
    PayExecuteBatchTransferRequest_Batch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayExecuteBatchTransferRequest_Batch* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayExecuteBatchTransferRequest.Batch";
  }
  protected:
  explicit PayExecuteBatchTransferRequest_Batch(::google::protobuf::Arena* arena);
  PayExecuteBatchTransferRequest_Batch(::google::protobuf::Arena* arena, const PayExecuteBatchTransferRequest_Batch& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRemarkFieldNumber = 2,
    kOutNoFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string remark = 2;
  void clear_remark() ;
  const std::string& remark() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remark(Arg_&& arg, Args_... args);
  std::string* mutable_remark();
  PROTOBUF_NODISCARD std::string* release_remark();
  void set_allocated_remark(std::string* value);

  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(
      const std::string& value);
  std::string* _internal_mutable_remark();

  public:
  // optional string out_no = 3;
  bool has_out_no() const;
  void clear_out_no() ;
  const std::string& out_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_no();
  PROTOBUF_NODISCARD std::string* release_out_no();
  void set_allocated_out_no(std::string* value);

  private:
  const std::string& _internal_out_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_no(
      const std::string& value);
  std::string* _internal_mutable_out_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      76, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr remark_;
    ::google::protobuf::internal::ArenaStringPtr out_no_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayError final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayError) */ {
 public:
  inline PayError() : PayError(nullptr) {}
  ~PayError() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayError(::google::protobuf::internal::ConstantInitialized);

  inline PayError(const PayError& from)
      : PayError(nullptr, from) {}
  PayError(PayError&& from) noexcept
    : PayError() {
    *this = ::std::move(from);
  }

  inline PayError& operator=(const PayError& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayError& operator=(PayError&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayError& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayError* internal_default_instance() {
    return reinterpret_cast<const PayError*>(
               &_PayError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PayError& a, PayError& b) {
    a.Swap(&b);
  }
  inline void Swap(PayError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayError* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayError& from) {
    PayError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayError* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayError";
  }
  protected:
  explicit PayError(::google::protobuf::Arena* arena);
  PayError(::google::protobuf::Arena* arena, const PayError& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayError)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayCreateRefundRequest_Amount final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayCreateRefundRequest.Amount) */ {
 public:
  inline PayCreateRefundRequest_Amount() : PayCreateRefundRequest_Amount(nullptr) {}
  ~PayCreateRefundRequest_Amount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayCreateRefundRequest_Amount(::google::protobuf::internal::ConstantInitialized);

  inline PayCreateRefundRequest_Amount(const PayCreateRefundRequest_Amount& from)
      : PayCreateRefundRequest_Amount(nullptr, from) {}
  PayCreateRefundRequest_Amount(PayCreateRefundRequest_Amount&& from) noexcept
    : PayCreateRefundRequest_Amount() {
    *this = ::std::move(from);
  }

  inline PayCreateRefundRequest_Amount& operator=(const PayCreateRefundRequest_Amount& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayCreateRefundRequest_Amount& operator=(PayCreateRefundRequest_Amount&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayCreateRefundRequest_Amount& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayCreateRefundRequest_Amount* internal_default_instance() {
    return reinterpret_cast<const PayCreateRefundRequest_Amount*>(
               &_PayCreateRefundRequest_Amount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PayCreateRefundRequest_Amount& a, PayCreateRefundRequest_Amount& b) {
    a.Swap(&b);
  }
  inline void Swap(PayCreateRefundRequest_Amount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayCreateRefundRequest_Amount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayCreateRefundRequest_Amount* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayCreateRefundRequest_Amount>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayCreateRefundRequest_Amount& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayCreateRefundRequest_Amount& from) {
    PayCreateRefundRequest_Amount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayCreateRefundRequest_Amount* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayCreateRefundRequest.Amount";
  }
  protected:
  explicit PayCreateRefundRequest_Amount(::google::protobuf::Arena* arena);
  PayCreateRefundRequest_Amount(::google::protobuf::Arena* arena, const PayCreateRefundRequest_Amount& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kRefundFieldNumber = 2,
    kCurrencyFieldNumber = 3,
  };
  // int32 total = 1;
  void clear_total() ;
  ::int32_t total() const;
  void set_total(::int32_t value);

  private:
  ::int32_t _internal_total() const;
  void _internal_set_total(::int32_t value);

  public:
  // int32 refund = 2;
  void clear_refund() ;
  ::int32_t refund() const;
  void set_refund(::int32_t value);

  private:
  ::int32_t _internal_refund() const;
  void _internal_set_refund(::int32_t value);

  public:
  // .palm.wechat.v1.PayCurrency currency = 3;
  void clear_currency() ;
  ::palm::wechat::v1::PayCurrency currency() const;
  void set_currency(::palm::wechat::v1::PayCurrency value);

  private:
  ::palm::wechat::v1::PayCurrency _internal_currency() const;
  void _internal_set_currency(::palm::wechat::v1::PayCurrency value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayCreateRefundRequest.Amount)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t total_;
    ::int32_t refund_;
    int currency_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayCloseOrderRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayCloseOrderRequest) */ {
 public:
  inline PayCloseOrderRequest() : PayCloseOrderRequest(nullptr) {}
  ~PayCloseOrderRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayCloseOrderRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayCloseOrderRequest(const PayCloseOrderRequest& from)
      : PayCloseOrderRequest(nullptr, from) {}
  PayCloseOrderRequest(PayCloseOrderRequest&& from) noexcept
    : PayCloseOrderRequest() {
    *this = ::std::move(from);
  }

  inline PayCloseOrderRequest& operator=(const PayCloseOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayCloseOrderRequest& operator=(PayCloseOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayCloseOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayCloseOrderRequest* internal_default_instance() {
    return reinterpret_cast<const PayCloseOrderRequest*>(
               &_PayCloseOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PayCloseOrderRequest& a, PayCloseOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayCloseOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayCloseOrderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayCloseOrderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayCloseOrderRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayCloseOrderRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayCloseOrderRequest& from) {
    PayCloseOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayCloseOrderRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayCloseOrderRequest";
  }
  protected:
  explicit PayCloseOrderRequest(::google::protobuf::Arena* arena);
  PayCloseOrderRequest(::google::protobuf::Arena* arena, const PayCloseOrderRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutTradeNoFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // string out_trade_no = 1;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* value);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayCloseOrderRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr out_trade_no_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayBillResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayBillResponse) */ {
 public:
  inline PayBillResponse() : PayBillResponse(nullptr) {}
  ~PayBillResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayBillResponse(::google::protobuf::internal::ConstantInitialized);

  inline PayBillResponse(const PayBillResponse& from)
      : PayBillResponse(nullptr, from) {}
  PayBillResponse(PayBillResponse&& from) noexcept
    : PayBillResponse() {
    *this = ::std::move(from);
  }

  inline PayBillResponse& operator=(const PayBillResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayBillResponse& operator=(PayBillResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayBillResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayBillResponse* internal_default_instance() {
    return reinterpret_cast<const PayBillResponse*>(
               &_PayBillResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PayBillResponse& a, PayBillResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayBillResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayBillResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayBillResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayBillResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayBillResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayBillResponse& from) {
    PayBillResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayBillResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayBillResponse";
  }
  protected:
  explicit PayBillResponse(::google::protobuf::Arena* arena);
  PayBillResponse(::google::protobuf::Arena* arena, const PayBillResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayBillResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayBillDate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayBillDate) */ {
 public:
  inline PayBillDate() : PayBillDate(nullptr) {}
  ~PayBillDate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayBillDate(::google::protobuf::internal::ConstantInitialized);

  inline PayBillDate(const PayBillDate& from)
      : PayBillDate(nullptr, from) {}
  PayBillDate(PayBillDate&& from) noexcept
    : PayBillDate() {
    *this = ::std::move(from);
  }

  inline PayBillDate& operator=(const PayBillDate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayBillDate& operator=(PayBillDate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayBillDate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayBillDate* internal_default_instance() {
    return reinterpret_cast<const PayBillDate*>(
               &_PayBillDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PayBillDate& a, PayBillDate& b) {
    a.Swap(&b);
  }
  inline void Swap(PayBillDate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayBillDate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayBillDate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayBillDate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayBillDate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayBillDate& from) {
    PayBillDate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayBillDate* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayBillDate";
  }
  protected:
  explicit PayBillDate(::google::protobuf::Arena* arena);
  PayBillDate(::google::protobuf::Arena* arena, const PayBillDate& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
  };
  // int32 year = 1;
  void clear_year() ;
  ::int32_t year() const;
  void set_year(::int32_t value);

  private:
  ::int32_t _internal_year() const;
  void _internal_set_year(::int32_t value);

  public:
  // int32 month = 2;
  void clear_month() ;
  ::int32_t month() const;
  void set_month(::int32_t value);

  private:
  ::int32_t _internal_month() const;
  void _internal_set_month(::int32_t value);

  public:
  // int32 day = 3;
  void clear_day() ;
  ::int32_t day() const;
  void set_day(::int32_t value);

  private:
  ::int32_t _internal_day() const;
  void _internal_set_day(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayBillDate)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t year_;
    ::int32_t month_;
    ::int32_t day_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class Oauth2SignInResponse_UserInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2SignInResponse.UserInfo) */ {
 public:
  inline Oauth2SignInResponse_UserInfo() : Oauth2SignInResponse_UserInfo(nullptr) {}
  ~Oauth2SignInResponse_UserInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2SignInResponse_UserInfo(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2SignInResponse_UserInfo(const Oauth2SignInResponse_UserInfo& from)
      : Oauth2SignInResponse_UserInfo(nullptr, from) {}
  Oauth2SignInResponse_UserInfo(Oauth2SignInResponse_UserInfo&& from) noexcept
    : Oauth2SignInResponse_UserInfo() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInResponse_UserInfo& operator=(const Oauth2SignInResponse_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInResponse_UserInfo& operator=(Oauth2SignInResponse_UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInResponse_UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInResponse_UserInfo* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInResponse_UserInfo*>(
               &_Oauth2SignInResponse_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Oauth2SignInResponse_UserInfo& a, Oauth2SignInResponse_UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInResponse_UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInResponse_UserInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInResponse_UserInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInResponse_UserInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInResponse_UserInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInResponse_UserInfo& from) {
    Oauth2SignInResponse_UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2SignInResponse_UserInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2SignInResponse.UserInfo";
  }
  protected:
  explicit Oauth2SignInResponse_UserInfo(::google::protobuf::Arena* arena);
  Oauth2SignInResponse_UserInfo(::google::protobuf::Arena* arena, const Oauth2SignInResponse_UserInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivilegeFieldNumber = 8,
    kOpenIdFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kProvinceFieldNumber = 4,
    kCityFieldNumber = 5,
    kCountryFieldNumber = 6,
    kHeadImgUrlFieldNumber = 7,
    kUnionIdFieldNumber = 9,
    kSexFieldNumber = 3,
  };
  // repeated string privilege = 8;
  int privilege_size() const;
  private:
  int _internal_privilege_size() const;

  public:
  void clear_privilege() ;
  const std::string& privilege(int index) const;
  std::string* mutable_privilege(int index);
  void set_privilege(int index, const std::string& value);
  void set_privilege(int index, std::string&& value);
  void set_privilege(int index, const char* value);
  void set_privilege(int index, const char* value, std::size_t size);
  void set_privilege(int index, absl::string_view value);
  std::string* add_privilege();
  void add_privilege(const std::string& value);
  void add_privilege(std::string&& value);
  void add_privilege(const char* value);
  void add_privilege(const char* value, std::size_t size);
  void add_privilege(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& privilege() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_privilege();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_privilege() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_privilege();

  public:
  // string open_id = 1;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* value);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string nickname = 2;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* value);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string province = 4;
  void clear_province() ;
  const std::string& province() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_province(Arg_&& arg, Args_... args);
  std::string* mutable_province();
  PROTOBUF_NODISCARD std::string* release_province();
  void set_allocated_province(std::string* value);

  private:
  const std::string& _internal_province() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_province(
      const std::string& value);
  std::string* _internal_mutable_province();

  public:
  // string city = 5;
  void clear_city() ;
  const std::string& city() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_city(Arg_&& arg, Args_... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* value);

  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(
      const std::string& value);
  std::string* _internal_mutable_city();

  public:
  // string country = 6;
  void clear_country() ;
  const std::string& country() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country(Arg_&& arg, Args_... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* value);

  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(
      const std::string& value);
  std::string* _internal_mutable_country();

  public:
  // optional string head_img_url = 7;
  bool has_head_img_url() const;
  void clear_head_img_url() ;
  const std::string& head_img_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_head_img_url(Arg_&& arg, Args_... args);
  std::string* mutable_head_img_url();
  PROTOBUF_NODISCARD std::string* release_head_img_url();
  void set_allocated_head_img_url(std::string* value);

  private:
  const std::string& _internal_head_img_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_head_img_url(
      const std::string& value);
  std::string* _internal_mutable_head_img_url();

  public:
  // string union_id = 9;
  void clear_union_id() ;
  const std::string& union_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* value);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // uint32 sex = 3;
  void clear_sex() ;
  ::uint32_t sex() const;
  void set_sex(::uint32_t value);

  private:
  ::uint32_t _internal_sex() const;
  void _internal_set_sex(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2SignInResponse.UserInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      124, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> privilege_;
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr province_;
    ::google::protobuf::internal::ArenaStringPtr city_;
    ::google::protobuf::internal::ArenaStringPtr country_;
    ::google::protobuf::internal::ArenaStringPtr head_img_url_;
    ::google::protobuf::internal::ArenaStringPtr union_id_;
    ::uint32_t sex_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class Oauth2SignInRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2SignInRequest) */ {
 public:
  inline Oauth2SignInRequest() : Oauth2SignInRequest(nullptr) {}
  ~Oauth2SignInRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2SignInRequest(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2SignInRequest(const Oauth2SignInRequest& from)
      : Oauth2SignInRequest(nullptr, from) {}
  Oauth2SignInRequest(Oauth2SignInRequest&& from) noexcept
    : Oauth2SignInRequest() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInRequest& operator=(const Oauth2SignInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInRequest& operator=(Oauth2SignInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInRequest* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInRequest*>(
               &_Oauth2SignInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Oauth2SignInRequest& a, Oauth2SignInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInRequest& from) {
    Oauth2SignInRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2SignInRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2SignInRequest";
  }
  protected:
  explicit Oauth2SignInRequest(::google::protobuf::Arena* arena);
  Oauth2SignInRequest(::google::protobuf::Arena* arena, const Oauth2SignInRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kStateFieldNumber = 2,
    kLangFieldNumber = 9,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string state = 2;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 9;
  void clear_lang() ;
  ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang lang() const;
  void set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value);

  private:
  ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang _internal_lang() const;
  void _internal_set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2SignInRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    int lang_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class Oauth2QrConnectUrlResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2QrConnectUrlResponse) */ {
 public:
  inline Oauth2QrConnectUrlResponse() : Oauth2QrConnectUrlResponse(nullptr) {}
  ~Oauth2QrConnectUrlResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2QrConnectUrlResponse(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2QrConnectUrlResponse(const Oauth2QrConnectUrlResponse& from)
      : Oauth2QrConnectUrlResponse(nullptr, from) {}
  Oauth2QrConnectUrlResponse(Oauth2QrConnectUrlResponse&& from) noexcept
    : Oauth2QrConnectUrlResponse() {
    *this = ::std::move(from);
  }

  inline Oauth2QrConnectUrlResponse& operator=(const Oauth2QrConnectUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2QrConnectUrlResponse& operator=(Oauth2QrConnectUrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2QrConnectUrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2QrConnectUrlResponse* internal_default_instance() {
    return reinterpret_cast<const Oauth2QrConnectUrlResponse*>(
               &_Oauth2QrConnectUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Oauth2QrConnectUrlResponse& a, Oauth2QrConnectUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2QrConnectUrlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2QrConnectUrlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2QrConnectUrlResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2QrConnectUrlResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2QrConnectUrlResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2QrConnectUrlResponse& from) {
    Oauth2QrConnectUrlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2QrConnectUrlResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2QrConnectUrlResponse";
  }
  protected:
  explicit Oauth2QrConnectUrlResponse(::google::protobuf::Arena* arena);
  Oauth2QrConnectUrlResponse(::google::protobuf::Arena* arena, const Oauth2QrConnectUrlResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2QrConnectUrlResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr url_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class Oauth2QrConnectUrlRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2QrConnectUrlRequest) */ {
 public:
  inline Oauth2QrConnectUrlRequest() : Oauth2QrConnectUrlRequest(nullptr) {}
  ~Oauth2QrConnectUrlRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2QrConnectUrlRequest(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2QrConnectUrlRequest(const Oauth2QrConnectUrlRequest& from)
      : Oauth2QrConnectUrlRequest(nullptr, from) {}
  Oauth2QrConnectUrlRequest(Oauth2QrConnectUrlRequest&& from) noexcept
    : Oauth2QrConnectUrlRequest() {
    *this = ::std::move(from);
  }

  inline Oauth2QrConnectUrlRequest& operator=(const Oauth2QrConnectUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2QrConnectUrlRequest& operator=(Oauth2QrConnectUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2QrConnectUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2QrConnectUrlRequest* internal_default_instance() {
    return reinterpret_cast<const Oauth2QrConnectUrlRequest*>(
               &_Oauth2QrConnectUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Oauth2QrConnectUrlRequest& a, Oauth2QrConnectUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2QrConnectUrlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2QrConnectUrlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2QrConnectUrlRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2QrConnectUrlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2QrConnectUrlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2QrConnectUrlRequest& from) {
    Oauth2QrConnectUrlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2QrConnectUrlRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2QrConnectUrlRequest";
  }
  protected:
  explicit Oauth2QrConnectUrlRequest(::google::protobuf::Arena* arena);
  Oauth2QrConnectUrlRequest(::google::protobuf::Arena* arena, const Oauth2QrConnectUrlRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 1,
    kLangFieldNumber = 9,
  };
  // optional string subject = 1;
  bool has_subject() const;
  void clear_subject() ;
  const std::string& subject() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* value);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 9;
  void clear_lang() ;
  ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang lang() const;
  void set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value);

  private:
  ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang _internal_lang() const;
  void _internal_set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2QrConnectUrlRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr subject_;
    int lang_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class MiniProgramCode2SessionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.MiniProgramCode2SessionResponse) */ {
 public:
  inline MiniProgramCode2SessionResponse() : MiniProgramCode2SessionResponse(nullptr) {}
  ~MiniProgramCode2SessionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MiniProgramCode2SessionResponse(::google::protobuf::internal::ConstantInitialized);

  inline MiniProgramCode2SessionResponse(const MiniProgramCode2SessionResponse& from)
      : MiniProgramCode2SessionResponse(nullptr, from) {}
  MiniProgramCode2SessionResponse(MiniProgramCode2SessionResponse&& from) noexcept
    : MiniProgramCode2SessionResponse() {
    *this = ::std::move(from);
  }

  inline MiniProgramCode2SessionResponse& operator=(const MiniProgramCode2SessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniProgramCode2SessionResponse& operator=(MiniProgramCode2SessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiniProgramCode2SessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiniProgramCode2SessionResponse* internal_default_instance() {
    return reinterpret_cast<const MiniProgramCode2SessionResponse*>(
               &_MiniProgramCode2SessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MiniProgramCode2SessionResponse& a, MiniProgramCode2SessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniProgramCode2SessionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniProgramCode2SessionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiniProgramCode2SessionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiniProgramCode2SessionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MiniProgramCode2SessionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MiniProgramCode2SessionResponse& from) {
    MiniProgramCode2SessionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MiniProgramCode2SessionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.MiniProgramCode2SessionResponse";
  }
  protected:
  explicit MiniProgramCode2SessionResponse(::google::protobuf::Arena* arena);
  MiniProgramCode2SessionResponse(::google::protobuf::Arena* arena, const MiniProgramCode2SessionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnionIdFieldNumber = 1,
    kOpenIdFieldNumber = 2,
  };
  // optional string union_id = 1;
  bool has_union_id() const;
  void clear_union_id() ;
  const std::string& union_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* value);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // string open_id = 2;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* value);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.MiniProgramCode2SessionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr union_id_;
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class MiniProgramCode2SessionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.MiniProgramCode2SessionRequest) */ {
 public:
  inline MiniProgramCode2SessionRequest() : MiniProgramCode2SessionRequest(nullptr) {}
  ~MiniProgramCode2SessionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MiniProgramCode2SessionRequest(::google::protobuf::internal::ConstantInitialized);

  inline MiniProgramCode2SessionRequest(const MiniProgramCode2SessionRequest& from)
      : MiniProgramCode2SessionRequest(nullptr, from) {}
  MiniProgramCode2SessionRequest(MiniProgramCode2SessionRequest&& from) noexcept
    : MiniProgramCode2SessionRequest() {
    *this = ::std::move(from);
  }

  inline MiniProgramCode2SessionRequest& operator=(const MiniProgramCode2SessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniProgramCode2SessionRequest& operator=(MiniProgramCode2SessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiniProgramCode2SessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiniProgramCode2SessionRequest* internal_default_instance() {
    return reinterpret_cast<const MiniProgramCode2SessionRequest*>(
               &_MiniProgramCode2SessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MiniProgramCode2SessionRequest& a, MiniProgramCode2SessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniProgramCode2SessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniProgramCode2SessionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiniProgramCode2SessionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiniProgramCode2SessionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MiniProgramCode2SessionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MiniProgramCode2SessionRequest& from) {
    MiniProgramCode2SessionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MiniProgramCode2SessionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.MiniProgramCode2SessionRequest";
  }
  protected:
  explicit MiniProgramCode2SessionRequest(::google::protobuf::Arena* arena);
  MiniProgramCode2SessionRequest(::google::protobuf::Arena* arena, const MiniProgramCode2SessionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.MiniProgramCode2SessionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayTradeBillRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayTradeBillRequest) */ {
 public:
  inline PayTradeBillRequest() : PayTradeBillRequest(nullptr) {}
  ~PayTradeBillRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayTradeBillRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayTradeBillRequest(const PayTradeBillRequest& from)
      : PayTradeBillRequest(nullptr, from) {}
  PayTradeBillRequest(PayTradeBillRequest&& from) noexcept
    : PayTradeBillRequest() {
    *this = ::std::move(from);
  }

  inline PayTradeBillRequest& operator=(const PayTradeBillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayTradeBillRequest& operator=(PayTradeBillRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayTradeBillRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayTradeBillRequest* internal_default_instance() {
    return reinterpret_cast<const PayTradeBillRequest*>(
               &_PayTradeBillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PayTradeBillRequest& a, PayTradeBillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayTradeBillRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayTradeBillRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayTradeBillRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayTradeBillRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayTradeBillRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayTradeBillRequest& from) {
    PayTradeBillRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayTradeBillRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayTradeBillRequest";
  }
  protected:
  explicit PayTradeBillRequest(::google::protobuf::Arena* arena);
  PayTradeBillRequest(::google::protobuf::Arena* arena, const PayTradeBillRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using BillType = PayTradeBillRequest_BillType;
  static constexpr BillType ALL = PayTradeBillRequest_BillType_ALL;
  static constexpr BillType SUCCESS = PayTradeBillRequest_BillType_SUCCESS;
  static constexpr BillType REFUND = PayTradeBillRequest_BillType_REFUND;
  static inline bool BillType_IsValid(int value) {
    return PayTradeBillRequest_BillType_IsValid(value);
  }
  static constexpr BillType BillType_MIN = PayTradeBillRequest_BillType_BillType_MIN;
  static constexpr BillType BillType_MAX = PayTradeBillRequest_BillType_BillType_MAX;
  static constexpr int BillType_ARRAYSIZE = PayTradeBillRequest_BillType_BillType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* BillType_descriptor() {
    return PayTradeBillRequest_BillType_descriptor();
  }
  template <typename T>
  static inline const std::string& BillType_Name(T value) {
    return PayTradeBillRequest_BillType_Name(value);
  }
  static inline bool BillType_Parse(absl::string_view name, BillType* value) {
    return PayTradeBillRequest_BillType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBillDateFieldNumber = 1,
    kBillTypeFieldNumber = 2,
  };
  // .palm.wechat.v1.PayBillDate bill_date = 1;
  bool has_bill_date() const;
  void clear_bill_date() ;
  const ::palm::wechat::v1::PayBillDate& bill_date() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::PayBillDate* release_bill_date();
  ::palm::wechat::v1::PayBillDate* mutable_bill_date();
  void set_allocated_bill_date(::palm::wechat::v1::PayBillDate* value);
  void unsafe_arena_set_allocated_bill_date(::palm::wechat::v1::PayBillDate* value);
  ::palm::wechat::v1::PayBillDate* unsafe_arena_release_bill_date();

  private:
  const ::palm::wechat::v1::PayBillDate& _internal_bill_date() const;
  ::palm::wechat::v1::PayBillDate* _internal_mutable_bill_date();

  public:
  // .palm.wechat.v1.PayTradeBillRequest.BillType bill_type = 2;
  void clear_bill_type() ;
  ::palm::wechat::v1::PayTradeBillRequest_BillType bill_type() const;
  void set_bill_type(::palm::wechat::v1::PayTradeBillRequest_BillType value);

  private:
  ::palm::wechat::v1::PayTradeBillRequest_BillType _internal_bill_type() const;
  void _internal_set_bill_type(::palm::wechat::v1::PayTradeBillRequest_BillType value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayTradeBillRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::palm::wechat::v1::PayBillDate* bill_date_;
    int bill_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayQueryBatchTransferResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayQueryBatchTransferResponse) */ {
 public:
  inline PayQueryBatchTransferResponse() : PayQueryBatchTransferResponse(nullptr) {}
  ~PayQueryBatchTransferResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayQueryBatchTransferResponse(::google::protobuf::internal::ConstantInitialized);

  inline PayQueryBatchTransferResponse(const PayQueryBatchTransferResponse& from)
      : PayQueryBatchTransferResponse(nullptr, from) {}
  PayQueryBatchTransferResponse(PayQueryBatchTransferResponse&& from) noexcept
    : PayQueryBatchTransferResponse() {
    *this = ::std::move(from);
  }

  inline PayQueryBatchTransferResponse& operator=(const PayQueryBatchTransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayQueryBatchTransferResponse& operator=(PayQueryBatchTransferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayQueryBatchTransferResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayQueryBatchTransferResponse* internal_default_instance() {
    return reinterpret_cast<const PayQueryBatchTransferResponse*>(
               &_PayQueryBatchTransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PayQueryBatchTransferResponse& a, PayQueryBatchTransferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayQueryBatchTransferResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayQueryBatchTransferResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayQueryBatchTransferResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayQueryBatchTransferResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayQueryBatchTransferResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayQueryBatchTransferResponse& from) {
    PayQueryBatchTransferResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayQueryBatchTransferResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayQueryBatchTransferResponse";
  }
  protected:
  explicit PayQueryBatchTransferResponse(::google::protobuf::Arena* arena);
  PayQueryBatchTransferResponse(::google::protobuf::Arena* arena, const PayQueryBatchTransferResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Detail = PayQueryBatchTransferResponse_Detail;
  using Batch = PayQueryBatchTransferResponse_Batch;

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 9,
    kBatchFieldNumber = 1,
  };
  // repeated .palm.wechat.v1.PayQueryBatchTransferResponse.Detail details = 9;
  int details_size() const;
  private:
  int _internal_details_size() const;

  public:
  void clear_details() ;
  ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail* mutable_details(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail >*
      mutable_details();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayQueryBatchTransferResponse_Detail>& _internal_details() const;
  ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayQueryBatchTransferResponse_Detail>* _internal_mutable_details();
  public:
  const ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail& details(int index) const;
  ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail* add_details();
  const ::google::protobuf::RepeatedPtrField< ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail >&
      details() const;
  // .palm.wechat.v1.PayQueryBatchTransferResponse.Batch batch = 1;
  bool has_batch() const;
  void clear_batch() ;
  const ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch& batch() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* release_batch();
  ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* mutable_batch();
  void set_allocated_batch(::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* value);
  void unsafe_arena_set_allocated_batch(::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* value);
  ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* unsafe_arena_release_batch();

  private:
  const ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch& _internal_batch() const;
  ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* _internal_mutable_batch();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayQueryBatchTransferResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail > details_;
    ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* batch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayPrepayRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayPrepayRequest) */ {
 public:
  inline PayPrepayRequest() : PayPrepayRequest(nullptr) {}
  ~PayPrepayRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayPrepayRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayPrepayRequest(const PayPrepayRequest& from)
      : PayPrepayRequest(nullptr, from) {}
  PayPrepayRequest(PayPrepayRequest&& from) noexcept
    : PayPrepayRequest() {
    *this = ::std::move(from);
  }

  inline PayPrepayRequest& operator=(const PayPrepayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayPrepayRequest& operator=(PayPrepayRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayPrepayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayPrepayRequest* internal_default_instance() {
    return reinterpret_cast<const PayPrepayRequest*>(
               &_PayPrepayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PayPrepayRequest& a, PayPrepayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayPrepayRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayPrepayRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayPrepayRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayPrepayRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayPrepayRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayPrepayRequest& from) {
    PayPrepayRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayPrepayRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayPrepayRequest";
  }
  protected:
  explicit PayPrepayRequest(::google::protobuf::Arena* arena);
  PayPrepayRequest(::google::protobuf::Arena* arena, const PayPrepayRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Amount = PayPrepayRequest_Amount;

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kOutTradeNoFieldNumber = 2,
    kPayerOpenIdFieldNumber = 11,
    kDescriptionFieldNumber = 98,
    kNotifyHostFieldNumber = 99,
    kAmountFieldNumber = 12,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* value);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // optional string out_trade_no = 2;
  bool has_out_trade_no() const;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* value);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // optional string payer_open_id = 11;
  bool has_payer_open_id() const;
  void clear_payer_open_id() ;
  const std::string& payer_open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payer_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_payer_open_id();
  PROTOBUF_NODISCARD std::string* release_payer_open_id();
  void set_allocated_payer_open_id(std::string* value);

  private:
  const std::string& _internal_payer_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payer_open_id(
      const std::string& value);
  std::string* _internal_mutable_payer_open_id();

  public:
  // string description = 98;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string notify_host = 99;
  void clear_notify_host() ;
  const std::string& notify_host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notify_host(Arg_&& arg, Args_... args);
  std::string* mutable_notify_host();
  PROTOBUF_NODISCARD std::string* release_notify_host();
  void set_allocated_notify_host(std::string* value);

  private:
  const std::string& _internal_notify_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notify_host(
      const std::string& value);
  std::string* _internal_mutable_notify_host();

  public:
  // .palm.wechat.v1.PayPrepayRequest.Amount amount = 12;
  bool has_amount() const;
  void clear_amount() ;
  const ::palm::wechat::v1::PayPrepayRequest_Amount& amount() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::PayPrepayRequest_Amount* release_amount();
  ::palm::wechat::v1::PayPrepayRequest_Amount* mutable_amount();
  void set_allocated_amount(::palm::wechat::v1::PayPrepayRequest_Amount* value);
  void unsafe_arena_set_allocated_amount(::palm::wechat::v1::PayPrepayRequest_Amount* value);
  ::palm::wechat::v1::PayPrepayRequest_Amount* unsafe_arena_release_amount();

  private:
  const ::palm::wechat::v1::PayPrepayRequest_Amount& _internal_amount() const;
  ::palm::wechat::v1::PayPrepayRequest_Amount* _internal_mutable_amount();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayPrepayRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 6, 1,
      93, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr out_trade_no_;
    ::google::protobuf::internal::ArenaStringPtr payer_open_id_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr notify_host_;
    ::palm::wechat::v1::PayPrepayRequest_Amount* amount_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayFundFlowBillRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayFundFlowBillRequest) */ {
 public:
  inline PayFundFlowBillRequest() : PayFundFlowBillRequest(nullptr) {}
  ~PayFundFlowBillRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayFundFlowBillRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayFundFlowBillRequest(const PayFundFlowBillRequest& from)
      : PayFundFlowBillRequest(nullptr, from) {}
  PayFundFlowBillRequest(PayFundFlowBillRequest&& from) noexcept
    : PayFundFlowBillRequest() {
    *this = ::std::move(from);
  }

  inline PayFundFlowBillRequest& operator=(const PayFundFlowBillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayFundFlowBillRequest& operator=(PayFundFlowBillRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayFundFlowBillRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayFundFlowBillRequest* internal_default_instance() {
    return reinterpret_cast<const PayFundFlowBillRequest*>(
               &_PayFundFlowBillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PayFundFlowBillRequest& a, PayFundFlowBillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayFundFlowBillRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayFundFlowBillRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayFundFlowBillRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayFundFlowBillRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayFundFlowBillRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayFundFlowBillRequest& from) {
    PayFundFlowBillRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayFundFlowBillRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayFundFlowBillRequest";
  }
  protected:
  explicit PayFundFlowBillRequest(::google::protobuf::Arena* arena);
  PayFundFlowBillRequest(::google::protobuf::Arena* arena, const PayFundFlowBillRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using AccountType = PayFundFlowBillRequest_AccountType;
  static constexpr AccountType BASIC = PayFundFlowBillRequest_AccountType_BASIC;
  static constexpr AccountType OPERATION = PayFundFlowBillRequest_AccountType_OPERATION;
  static constexpr AccountType FEES = PayFundFlowBillRequest_AccountType_FEES;
  static inline bool AccountType_IsValid(int value) {
    return PayFundFlowBillRequest_AccountType_IsValid(value);
  }
  static constexpr AccountType AccountType_MIN = PayFundFlowBillRequest_AccountType_AccountType_MIN;
  static constexpr AccountType AccountType_MAX = PayFundFlowBillRequest_AccountType_AccountType_MAX;
  static constexpr int AccountType_ARRAYSIZE = PayFundFlowBillRequest_AccountType_AccountType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* AccountType_descriptor() {
    return PayFundFlowBillRequest_AccountType_descriptor();
  }
  template <typename T>
  static inline const std::string& AccountType_Name(T value) {
    return PayFundFlowBillRequest_AccountType_Name(value);
  }
  static inline bool AccountType_Parse(absl::string_view name, AccountType* value) {
    return PayFundFlowBillRequest_AccountType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBillDateFieldNumber = 1,
    kAccountTypeFieldNumber = 2,
  };
  // .palm.wechat.v1.PayBillDate bill_date = 1;
  bool has_bill_date() const;
  void clear_bill_date() ;
  const ::palm::wechat::v1::PayBillDate& bill_date() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::PayBillDate* release_bill_date();
  ::palm::wechat::v1::PayBillDate* mutable_bill_date();
  void set_allocated_bill_date(::palm::wechat::v1::PayBillDate* value);
  void unsafe_arena_set_allocated_bill_date(::palm::wechat::v1::PayBillDate* value);
  ::palm::wechat::v1::PayBillDate* unsafe_arena_release_bill_date();

  private:
  const ::palm::wechat::v1::PayBillDate& _internal_bill_date() const;
  ::palm::wechat::v1::PayBillDate* _internal_mutable_bill_date();

  public:
  // .palm.wechat.v1.PayFundFlowBillRequest.AccountType account_type = 2;
  void clear_account_type() ;
  ::palm::wechat::v1::PayFundFlowBillRequest_AccountType account_type() const;
  void set_account_type(::palm::wechat::v1::PayFundFlowBillRequest_AccountType value);

  private:
  ::palm::wechat::v1::PayFundFlowBillRequest_AccountType _internal_account_type() const;
  void _internal_set_account_type(::palm::wechat::v1::PayFundFlowBillRequest_AccountType value);

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayFundFlowBillRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::palm::wechat::v1::PayBillDate* bill_date_;
    int account_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayExecuteBatchTransferResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayExecuteBatchTransferResponse) */ {
 public:
  inline PayExecuteBatchTransferResponse() : PayExecuteBatchTransferResponse(nullptr) {}
  ~PayExecuteBatchTransferResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayExecuteBatchTransferResponse(::google::protobuf::internal::ConstantInitialized);

  inline PayExecuteBatchTransferResponse(const PayExecuteBatchTransferResponse& from)
      : PayExecuteBatchTransferResponse(nullptr, from) {}
  PayExecuteBatchTransferResponse(PayExecuteBatchTransferResponse&& from) noexcept
    : PayExecuteBatchTransferResponse() {
    *this = ::std::move(from);
  }

  inline PayExecuteBatchTransferResponse& operator=(const PayExecuteBatchTransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayExecuteBatchTransferResponse& operator=(PayExecuteBatchTransferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayExecuteBatchTransferResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kSucceeded = 11,
    kError = 12,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const PayExecuteBatchTransferResponse* internal_default_instance() {
    return reinterpret_cast<const PayExecuteBatchTransferResponse*>(
               &_PayExecuteBatchTransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PayExecuteBatchTransferResponse& a, PayExecuteBatchTransferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PayExecuteBatchTransferResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayExecuteBatchTransferResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayExecuteBatchTransferResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayExecuteBatchTransferResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayExecuteBatchTransferResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayExecuteBatchTransferResponse& from) {
    PayExecuteBatchTransferResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayExecuteBatchTransferResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayExecuteBatchTransferResponse";
  }
  protected:
  explicit PayExecuteBatchTransferResponse(::google::protobuf::Arena* arena);
  PayExecuteBatchTransferResponse(::google::protobuf::Arena* arena, const PayExecuteBatchTransferResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Detail = PayExecuteBatchTransferResponse_Detail;
  using Succeeded = PayExecuteBatchTransferResponse_Succeeded;

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kOutBatchNoFieldNumber = 1,
    kSucceededFieldNumber = 11,
    kErrorFieldNumber = 12,
  };
  // repeated .palm.wechat.v1.PayExecuteBatchTransferResponse.Detail details = 2;
  int details_size() const;
  private:
  int _internal_details_size() const;

  public:
  void clear_details() ;
  ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail* mutable_details(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail >*
      mutable_details();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail>& _internal_details() const;
  ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail>* _internal_mutable_details();
  public:
  const ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail& details(int index) const;
  ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail* add_details();
  const ::google::protobuf::RepeatedPtrField< ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail >&
      details() const;
  // string out_batch_no = 1;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* value);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // .palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded succeeded = 11;
  bool has_succeeded() const;
  private:
  bool _internal_has_succeeded() const;

  public:
  void clear_succeeded() ;
  const ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded& succeeded() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* release_succeeded();
  ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* mutable_succeeded();
  void set_allocated_succeeded(::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* value);
  void unsafe_arena_set_allocated_succeeded(::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* value);
  ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* unsafe_arena_release_succeeded();

  private:
  const ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded& _internal_succeeded() const;
  ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* _internal_mutable_succeeded();

  public:
  // .palm.wechat.v1.PayError error = 12;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::palm::wechat::v1::PayError& error() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::PayError* release_error();
  ::palm::wechat::v1::PayError* mutable_error();
  void set_allocated_error(::palm::wechat::v1::PayError* value);
  void unsafe_arena_set_allocated_error(::palm::wechat::v1::PayError* value);
  ::palm::wechat::v1::PayError* unsafe_arena_release_error();

  private:
  const ::palm::wechat::v1::PayError& _internal_error() const;
  ::palm::wechat::v1::PayError* _internal_mutable_error();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayExecuteBatchTransferResponse)
 private:
  class _Internal;
  void set_has_succeeded();
  void set_has_error();

  inline bool has_payload() const;
  inline void clear_has_payload();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 3,
      67, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail > details_;
    ::google::protobuf::internal::ArenaStringPtr out_batch_no_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* succeeded_;
      ::palm::wechat::v1::PayError* error_;
    } payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayExecuteBatchTransferRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayExecuteBatchTransferRequest) */ {
 public:
  inline PayExecuteBatchTransferRequest() : PayExecuteBatchTransferRequest(nullptr) {}
  ~PayExecuteBatchTransferRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayExecuteBatchTransferRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayExecuteBatchTransferRequest(const PayExecuteBatchTransferRequest& from)
      : PayExecuteBatchTransferRequest(nullptr, from) {}
  PayExecuteBatchTransferRequest(PayExecuteBatchTransferRequest&& from) noexcept
    : PayExecuteBatchTransferRequest() {
    *this = ::std::move(from);
  }

  inline PayExecuteBatchTransferRequest& operator=(const PayExecuteBatchTransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayExecuteBatchTransferRequest& operator=(PayExecuteBatchTransferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayExecuteBatchTransferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayExecuteBatchTransferRequest* internal_default_instance() {
    return reinterpret_cast<const PayExecuteBatchTransferRequest*>(
               &_PayExecuteBatchTransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PayExecuteBatchTransferRequest& a, PayExecuteBatchTransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayExecuteBatchTransferRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayExecuteBatchTransferRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayExecuteBatchTransferRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayExecuteBatchTransferRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayExecuteBatchTransferRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayExecuteBatchTransferRequest& from) {
    PayExecuteBatchTransferRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayExecuteBatchTransferRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayExecuteBatchTransferRequest";
  }
  protected:
  explicit PayExecuteBatchTransferRequest(::google::protobuf::Arena* arena);
  PayExecuteBatchTransferRequest(::google::protobuf::Arena* arena, const PayExecuteBatchTransferRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Batch = PayExecuteBatchTransferRequest_Batch;
  using Detail = PayExecuteBatchTransferRequest_Detail;

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kSceneIdFieldNumber = 9,
    kBatchFieldNumber = 2,
  };
  // repeated .palm.wechat.v1.PayExecuteBatchTransferRequest.Detail details = 3;
  int details_size() const;
  private:
  int _internal_details_size() const;

  public:
  void clear_details() ;
  ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail* mutable_details(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail >*
      mutable_details();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail>& _internal_details() const;
  ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail>* _internal_mutable_details();
  public:
  const ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail& details(int index) const;
  ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail* add_details();
  const ::google::protobuf::RepeatedPtrField< ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail >&
      details() const;
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* value);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string scene_id = 9;
  void clear_scene_id() ;
  const std::string& scene_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scene_id(Arg_&& arg, Args_... args);
  std::string* mutable_scene_id();
  PROTOBUF_NODISCARD std::string* release_scene_id();
  void set_allocated_scene_id(std::string* value);

  private:
  const std::string& _internal_scene_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene_id(
      const std::string& value);
  std::string* _internal_mutable_scene_id();

  public:
  // .palm.wechat.v1.PayExecuteBatchTransferRequest.Batch batch = 2;
  bool has_batch() const;
  void clear_batch() ;
  const ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch& batch() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* release_batch();
  ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* mutable_batch();
  void set_allocated_batch(::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* value);
  void unsafe_arena_set_allocated_batch(::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* value);
  ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* unsafe_arena_release_batch();

  private:
  const ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch& _internal_batch() const;
  ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* _internal_mutable_batch();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayExecuteBatchTransferRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail > details_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr scene_id_;
    ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* batch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class PayCreateRefundRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.PayCreateRefundRequest) */ {
 public:
  inline PayCreateRefundRequest() : PayCreateRefundRequest(nullptr) {}
  ~PayCreateRefundRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayCreateRefundRequest(::google::protobuf::internal::ConstantInitialized);

  inline PayCreateRefundRequest(const PayCreateRefundRequest& from)
      : PayCreateRefundRequest(nullptr, from) {}
  PayCreateRefundRequest(PayCreateRefundRequest&& from) noexcept
    : PayCreateRefundRequest() {
    *this = ::std::move(from);
  }

  inline PayCreateRefundRequest& operator=(const PayCreateRefundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayCreateRefundRequest& operator=(PayCreateRefundRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayCreateRefundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayCreateRefundRequest* internal_default_instance() {
    return reinterpret_cast<const PayCreateRefundRequest*>(
               &_PayCreateRefundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PayCreateRefundRequest& a, PayCreateRefundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PayCreateRefundRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayCreateRefundRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayCreateRefundRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayCreateRefundRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayCreateRefundRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayCreateRefundRequest& from) {
    PayCreateRefundRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PayCreateRefundRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.PayCreateRefundRequest";
  }
  protected:
  explicit PayCreateRefundRequest(::google::protobuf::Arena* arena);
  PayCreateRefundRequest(::google::protobuf::Arena* arena, const PayCreateRefundRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Amount = PayCreateRefundRequest_Amount;

  // accessors -------------------------------------------------------

  enum : int {
    kOutTradeNoFieldNumber = 1,
    kReasonFieldNumber = 2,
    kNotifyHostFieldNumber = 11,
    kAmountFieldNumber = 3,
  };
  // string out_trade_no = 1;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* value);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // string notify_host = 11;
  void clear_notify_host() ;
  const std::string& notify_host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notify_host(Arg_&& arg, Args_... args);
  std::string* mutable_notify_host();
  PROTOBUF_NODISCARD std::string* release_notify_host();
  void set_allocated_notify_host(std::string* value);

  private:
  const std::string& _internal_notify_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notify_host(
      const std::string& value);
  std::string* _internal_mutable_notify_host();

  public:
  // .palm.wechat.v1.PayCreateRefundRequest.Amount amount = 3;
  bool has_amount() const;
  void clear_amount() ;
  const ::palm::wechat::v1::PayCreateRefundRequest_Amount& amount() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::PayCreateRefundRequest_Amount* release_amount();
  ::palm::wechat::v1::PayCreateRefundRequest_Amount* mutable_amount();
  void set_allocated_amount(::palm::wechat::v1::PayCreateRefundRequest_Amount* value);
  void unsafe_arena_set_allocated_amount(::palm::wechat::v1::PayCreateRefundRequest_Amount* value);
  ::palm::wechat::v1::PayCreateRefundRequest_Amount* unsafe_arena_release_amount();

  private:
  const ::palm::wechat::v1::PayCreateRefundRequest_Amount& _internal_amount() const;
  ::palm::wechat::v1::PayCreateRefundRequest_Amount* _internal_mutable_amount();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.PayCreateRefundRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr out_trade_no_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::internal::ArenaStringPtr notify_host_;
    ::palm::wechat::v1::PayCreateRefundRequest_Amount* amount_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class Oauth2SignInResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2SignInResponse) */ {
 public:
  inline Oauth2SignInResponse() : Oauth2SignInResponse(nullptr) {}
  ~Oauth2SignInResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2SignInResponse(::google::protobuf::internal::ConstantInitialized);

  inline Oauth2SignInResponse(const Oauth2SignInResponse& from)
      : Oauth2SignInResponse(nullptr, from) {}
  Oauth2SignInResponse(Oauth2SignInResponse&& from) noexcept
    : Oauth2SignInResponse() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInResponse& operator=(const Oauth2SignInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInResponse& operator=(Oauth2SignInResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInResponse* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInResponse*>(
               &_Oauth2SignInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Oauth2SignInResponse& a, Oauth2SignInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInResponse& from) {
    Oauth2SignInResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Oauth2SignInResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.wechat.v1.Oauth2SignInResponse";
  }
  protected:
  explicit Oauth2SignInResponse(::google::protobuf::Arena* arena);
  Oauth2SignInResponse(::google::protobuf::Arena* arena, const Oauth2SignInResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using UserInfo = Oauth2SignInResponse_UserInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kSubjectFieldNumber = 9,
    kUserInfoFieldNumber = 1,
  };
  // bytes token = 2;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // optional string subject = 9;
  bool has_subject() const;
  void clear_subject() ;
  const std::string& subject() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* value);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // .palm.wechat.v1.Oauth2SignInResponse.UserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* release_user_info();
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* mutable_user_info();
  void set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* value);
  void unsafe_arena_set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* value);
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* unsafe_arena_release_user_info();

  private:
  const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& _internal_user_info() const;
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* _internal_mutable_user_info();

  public:
  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2SignInResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr subject_;
    ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* user_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Oauth2QrConnectUrlRequest

// optional string subject = 1;
inline bool Oauth2QrConnectUrlRequest::has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Oauth2QrConnectUrlRequest::clear_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2QrConnectUrlRequest::subject() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2QrConnectUrlRequest::set_subject(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
}
inline std::string* Oauth2QrConnectUrlRequest::mutable_subject() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
  return _s;
}
inline const std::string& Oauth2QrConnectUrlRequest::_internal_subject() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subject_.Get();
}
inline void Oauth2QrConnectUrlRequest::_internal_set_subject(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(value, GetArena());
}
inline std::string* Oauth2QrConnectUrlRequest::_internal_mutable_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.subject_.Mutable( GetArena());
}
inline std::string* Oauth2QrConnectUrlRequest::release_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.subject_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Oauth2QrConnectUrlRequest::set_allocated_subject(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subject_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
}

// .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 9;
inline void Oauth2QrConnectUrlRequest::clear_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_ = 0;
}
inline ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang Oauth2QrConnectUrlRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2QrConnectUrlRequest.lang)
  return _internal_lang();
}
inline void Oauth2QrConnectUrlRequest::set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2QrConnectUrlRequest.lang)
}
inline ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang Oauth2QrConnectUrlRequest::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang>(_impl_.lang_);
}
inline void Oauth2QrConnectUrlRequest::_internal_set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_ = value;
}

// -------------------------------------------------------------------

// Oauth2QrConnectUrlResponse

// string url = 1;
inline void Oauth2QrConnectUrlResponse::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Oauth2QrConnectUrlResponse::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2QrConnectUrlResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
}
inline std::string* Oauth2QrConnectUrlResponse::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
  return _s;
}
inline const std::string& Oauth2QrConnectUrlResponse::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void Oauth2QrConnectUrlResponse::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArena());
}
inline std::string* Oauth2QrConnectUrlResponse::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* Oauth2QrConnectUrlResponse::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
  return _impl_.url_.Release();
}
inline void Oauth2QrConnectUrlResponse::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
}

// -------------------------------------------------------------------

// Oauth2SignInRequest

// string code = 1;
inline void Oauth2SignInRequest::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.ClearToEmpty();
}
inline const std::string& Oauth2SignInRequest::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInRequest.code)
}
inline std::string* Oauth2SignInRequest::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInRequest.code)
  return _s;
}
inline const std::string& Oauth2SignInRequest::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void Oauth2SignInRequest::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArena());
}
inline std::string* Oauth2SignInRequest::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArena());
}
inline std::string* Oauth2SignInRequest::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInRequest.code)
  return _impl_.code_.Release();
}
inline void Oauth2SignInRequest::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInRequest.code)
}

// string state = 2;
inline void Oauth2SignInRequest::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& Oauth2SignInRequest::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInRequest.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInRequest::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInRequest.state)
}
inline std::string* Oauth2SignInRequest::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInRequest.state)
  return _s;
}
inline const std::string& Oauth2SignInRequest::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void Oauth2SignInRequest::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(value, GetArena());
}
inline std::string* Oauth2SignInRequest::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* Oauth2SignInRequest::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInRequest.state)
  return _impl_.state_.Release();
}
inline void Oauth2SignInRequest::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInRequest.state)
}

// .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 9;
inline void Oauth2SignInRequest::clear_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_ = 0;
}
inline ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang Oauth2SignInRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInRequest.lang)
  return _internal_lang();
}
inline void Oauth2SignInRequest::set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInRequest.lang)
}
inline ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang Oauth2SignInRequest::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang>(_impl_.lang_);
}
inline void Oauth2SignInRequest::_internal_set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_ = value;
}

// -------------------------------------------------------------------

// Oauth2SignInResponse_UserInfo

// string open_id = 1;
inline void Oauth2SignInResponse_UserInfo::clear_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::open_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_open_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
  return _impl_.open_id_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
}

// string nickname = 2;
inline void Oauth2SignInResponse_UserInfo::clear_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::nickname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_nickname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nickname_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
  return _impl_.nickname_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
}

// uint32 sex = 3;
inline void Oauth2SignInResponse_UserInfo::clear_sex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sex_ = 0u;
}
inline ::uint32_t Oauth2SignInResponse_UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.sex)
  return _internal_sex();
}
inline void Oauth2SignInResponse_UserInfo::set_sex(::uint32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.sex)
}
inline ::uint32_t Oauth2SignInResponse_UserInfo::_internal_sex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sex_;
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_sex(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sex_ = value;
}

// string province = 4;
inline void Oauth2SignInResponse_UserInfo::clear_province() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.province_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::province() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
  return _internal_province();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_province(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.province_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_province() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_province();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_province() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.province_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_province(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.province_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_province() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.province_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_province() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
  return _impl_.province_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_province(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.province_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.province_.IsDefault()) {
          _impl_.province_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
}

// string city = 5;
inline void Oauth2SignInResponse_UserInfo::clear_city() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.city_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::city() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
  return _internal_city();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_city(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.city_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_city() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_city() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.city_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_city(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.city_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_city() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.city_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_city() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
  return _impl_.city_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_city(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.city_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.city_.IsDefault()) {
          _impl_.city_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
}

// string country = 6;
inline void Oauth2SignInResponse_UserInfo::clear_country() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::country() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
  return _internal_country();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_country(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_country() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_country() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_country(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_country() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_country() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
  return _impl_.country_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_country(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_.IsDefault()) {
          _impl_.country_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
}

// optional string head_img_url = 7;
inline bool Oauth2SignInResponse_UserInfo::has_head_img_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Oauth2SignInResponse_UserInfo::clear_head_img_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.head_img_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2SignInResponse_UserInfo::head_img_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
  return _internal_head_img_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_head_img_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_img_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_head_img_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_head_img_url();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_head_img_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.head_img_url_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_head_img_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_img_url_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_head_img_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.head_img_url_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_head_img_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.head_img_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_img_url_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_head_img_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.head_img_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.head_img_url_.IsDefault()) {
          _impl_.head_img_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
}

// repeated string privilege = 8;
inline int Oauth2SignInResponse_UserInfo::_internal_privilege_size() const {
  return _internal_privilege().size();
}
inline int Oauth2SignInResponse_UserInfo::privilege_size() const {
  return _internal_privilege_size();
}
inline void Oauth2SignInResponse_UserInfo::clear_privilege() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.privilege_.Clear();
}
inline std::string* Oauth2SignInResponse_UserInfo::add_privilege()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_privilege()->Add();
  // @@protoc_insertion_point(field_add_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::privilege(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _internal_privilege().Get(index);
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_privilege(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _internal_mutable_privilege()->Mutable(index);
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, const std::string& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, std::string&& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_privilege()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, absl::string_view value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Oauth2SignInResponse_UserInfo::privilege() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _internal_privilege();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Oauth2SignInResponse_UserInfo::mutable_privilege() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_privilege();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Oauth2SignInResponse_UserInfo::_internal_privilege() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.privilege_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Oauth2SignInResponse_UserInfo::_internal_mutable_privilege() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.privilege_;
}

// string union_id = 9;
inline void Oauth2SignInResponse_UserInfo::clear_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::union_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse_UserInfo::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_union_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_union_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.union_id_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_union_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.union_id_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
  return _impl_.union_id_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_union_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
}

// -------------------------------------------------------------------

// Oauth2SignInResponse

// .palm.wechat.v1.Oauth2SignInResponse.UserInfo user_info = 1;
inline bool Oauth2SignInResponse::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline void Oauth2SignInResponse::clear_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& Oauth2SignInResponse::_internal_user_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo&>(::palm::wechat::v1::_Oauth2SignInResponse_UserInfo_default_instance_);
}
inline const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& Oauth2SignInResponse::user_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.user_info)
  return _internal_user_info();
}
inline void Oauth2SignInResponse::unsafe_arena_set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.Oauth2SignInResponse.user_info)
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::unsafe_arena_release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.user_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::_internal_mutable_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::wechat::v1::Oauth2SignInResponse_UserInfo>(GetArena());
    _impl_.user_info_ = reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::mutable_user_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.user_info)
  return _msg;
}
inline void Oauth2SignInResponse::set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.user_info_ = reinterpret_cast<::palm::wechat::v1::Oauth2SignInResponse_UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.user_info)
}

// bytes token = 2;
inline void Oauth2SignInResponse::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.token)
}
inline std::string* Oauth2SignInResponse::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.token)
  return _s;
}
inline const std::string& Oauth2SignInResponse::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void Oauth2SignInResponse::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.token)
  return _impl_.token_.Release();
}
inline void Oauth2SignInResponse::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.token)
}

// optional string subject = 9;
inline bool Oauth2SignInResponse::has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Oauth2SignInResponse::clear_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2SignInResponse::subject() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2SignInResponse::set_subject(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.subject)
}
inline std::string* Oauth2SignInResponse::mutable_subject() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.subject)
  return _s;
}
inline const std::string& Oauth2SignInResponse::_internal_subject() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subject_.Get();
}
inline void Oauth2SignInResponse::_internal_set_subject(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(value, GetArena());
}
inline std::string* Oauth2SignInResponse::_internal_mutable_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.subject_.Mutable( GetArena());
}
inline std::string* Oauth2SignInResponse::release_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.subject)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.subject_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Oauth2SignInResponse::set_allocated_subject(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subject_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.subject)
}

// -------------------------------------------------------------------

// MiniProgramCode2SessionRequest

// string code = 1;
inline void MiniProgramCode2SessionRequest::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.ClearToEmpty();
}
inline const std::string& MiniProgramCode2SessionRequest::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiniProgramCode2SessionRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
}
inline std::string* MiniProgramCode2SessionRequest::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
  return _s;
}
inline const std::string& MiniProgramCode2SessionRequest::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void MiniProgramCode2SessionRequest::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArena());
}
inline std::string* MiniProgramCode2SessionRequest::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArena());
}
inline std::string* MiniProgramCode2SessionRequest::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
  return _impl_.code_.Release();
}
inline void MiniProgramCode2SessionRequest::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
}

// -------------------------------------------------------------------

// MiniProgramCode2SessionResponse

// optional string union_id = 1;
inline bool MiniProgramCode2SessionResponse::has_union_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MiniProgramCode2SessionResponse::clear_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MiniProgramCode2SessionResponse::union_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiniProgramCode2SessionResponse::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
}
inline std::string* MiniProgramCode2SessionResponse::mutable_union_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
  return _s;
}
inline const std::string& MiniProgramCode2SessionResponse::_internal_union_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.union_id_.Get();
}
inline void MiniProgramCode2SessionResponse::_internal_set_union_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.union_id_.Set(value, GetArena());
}
inline std::string* MiniProgramCode2SessionResponse::_internal_mutable_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.union_id_.Mutable( GetArena());
}
inline std::string* MiniProgramCode2SessionResponse::release_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.union_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.union_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MiniProgramCode2SessionResponse::set_allocated_union_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.union_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
}

// string open_id = 2;
inline void MiniProgramCode2SessionResponse::clear_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& MiniProgramCode2SessionResponse::open_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiniProgramCode2SessionResponse::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
}
inline std::string* MiniProgramCode2SessionResponse::mutable_open_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
  return _s;
}
inline const std::string& MiniProgramCode2SessionResponse::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void MiniProgramCode2SessionResponse::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArena());
}
inline std::string* MiniProgramCode2SessionResponse::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArena());
}
inline std::string* MiniProgramCode2SessionResponse::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
  return _impl_.open_id_.Release();
}
inline void MiniProgramCode2SessionResponse::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
}

// -------------------------------------------------------------------

// PayPrepayRequest_Amount

// int32 total = 1;
inline void PayPrepayRequest_Amount::clear_total() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_ = 0;
}
inline ::int32_t PayPrepayRequest_Amount::total() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayPrepayRequest.Amount.total)
  return _internal_total();
}
inline void PayPrepayRequest_Amount::set_total(::int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayPrepayRequest.Amount.total)
}
inline ::int32_t PayPrepayRequest_Amount::_internal_total() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_;
}
inline void PayPrepayRequest_Amount::_internal_set_total(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_ = value;
}

// .palm.wechat.v1.PayCurrency currency = 2;
inline void PayPrepayRequest_Amount::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_ = 0;
}
inline ::palm::wechat::v1::PayCurrency PayPrepayRequest_Amount::currency() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayPrepayRequest.Amount.currency)
  return _internal_currency();
}
inline void PayPrepayRequest_Amount::set_currency(::palm::wechat::v1::PayCurrency value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayPrepayRequest.Amount.currency)
}
inline ::palm::wechat::v1::PayCurrency PayPrepayRequest_Amount::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::wechat::v1::PayCurrency>(_impl_.currency_);
}
inline void PayPrepayRequest_Amount::_internal_set_currency(::palm::wechat::v1::PayCurrency value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_ = value;
}

// -------------------------------------------------------------------

// PayPrepayRequest

// string app_id = 1;
inline void PayPrepayRequest::clear_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& PayPrepayRequest::app_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayPrepayRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayPrepayRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayPrepayRequest.app_id)
}
inline std::string* PayPrepayRequest::mutable_app_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayPrepayRequest.app_id)
  return _s;
}
inline const std::string& PayPrepayRequest::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void PayPrepayRequest::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArena());
}
inline std::string* PayPrepayRequest::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArena());
}
inline std::string* PayPrepayRequest::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayPrepayRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void PayPrepayRequest::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayPrepayRequest.app_id)
}

// optional string out_trade_no = 2;
inline bool PayPrepayRequest::has_out_trade_no() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PayPrepayRequest::clear_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PayPrepayRequest::out_trade_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayPrepayRequest.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayPrepayRequest::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayPrepayRequest.out_trade_no)
}
inline std::string* PayPrepayRequest::mutable_out_trade_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayPrepayRequest.out_trade_no)
  return _s;
}
inline const std::string& PayPrepayRequest::_internal_out_trade_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_trade_no_.Get();
}
inline void PayPrepayRequest::_internal_set_out_trade_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.out_trade_no_.Set(value, GetArena());
}
inline std::string* PayPrepayRequest::_internal_mutable_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.out_trade_no_.Mutable( GetArena());
}
inline std::string* PayPrepayRequest::release_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayPrepayRequest.out_trade_no)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.out_trade_no_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.out_trade_no_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PayPrepayRequest::set_allocated_out_trade_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.out_trade_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayPrepayRequest.out_trade_no)
}

// optional string payer_open_id = 11;
inline bool PayPrepayRequest::has_payer_open_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PayPrepayRequest::clear_payer_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payer_open_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PayPrepayRequest::payer_open_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayPrepayRequest.payer_open_id)
  return _internal_payer_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayPrepayRequest::set_payer_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.payer_open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayPrepayRequest.payer_open_id)
}
inline std::string* PayPrepayRequest::mutable_payer_open_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payer_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayPrepayRequest.payer_open_id)
  return _s;
}
inline const std::string& PayPrepayRequest::_internal_payer_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payer_open_id_.Get();
}
inline void PayPrepayRequest::_internal_set_payer_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.payer_open_id_.Set(value, GetArena());
}
inline std::string* PayPrepayRequest::_internal_mutable_payer_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.payer_open_id_.Mutable( GetArena());
}
inline std::string* PayPrepayRequest::release_payer_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayPrepayRequest.payer_open_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.payer_open_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payer_open_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PayPrepayRequest::set_allocated_payer_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.payer_open_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payer_open_id_.IsDefault()) {
          _impl_.payer_open_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayPrepayRequest.payer_open_id)
}

// .palm.wechat.v1.PayPrepayRequest.Amount amount = 12;
inline bool PayPrepayRequest::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline void PayPrepayRequest::clear_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::palm::wechat::v1::PayPrepayRequest_Amount& PayPrepayRequest::_internal_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::wechat::v1::PayPrepayRequest_Amount* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::wechat::v1::PayPrepayRequest_Amount&>(::palm::wechat::v1::_PayPrepayRequest_Amount_default_instance_);
}
inline const ::palm::wechat::v1::PayPrepayRequest_Amount& PayPrepayRequest::amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayPrepayRequest.amount)
  return _internal_amount();
}
inline void PayPrepayRequest::unsafe_arena_set_allocated_amount(::palm::wechat::v1::PayPrepayRequest_Amount* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = reinterpret_cast<::palm::wechat::v1::PayPrepayRequest_Amount*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.PayPrepayRequest.amount)
}
inline ::palm::wechat::v1::PayPrepayRequest_Amount* PayPrepayRequest::release_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::palm::wechat::v1::PayPrepayRequest_Amount* released = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::wechat::v1::PayPrepayRequest_Amount* PayPrepayRequest::unsafe_arena_release_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayPrepayRequest.amount)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::palm::wechat::v1::PayPrepayRequest_Amount* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::palm::wechat::v1::PayPrepayRequest_Amount* PayPrepayRequest::_internal_mutable_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::wechat::v1::PayPrepayRequest_Amount>(GetArena());
    _impl_.amount_ = reinterpret_cast<::palm::wechat::v1::PayPrepayRequest_Amount*>(p);
  }
  return _impl_.amount_;
}
inline ::palm::wechat::v1::PayPrepayRequest_Amount* PayPrepayRequest::mutable_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::PayPrepayRequest_Amount* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayPrepayRequest.amount)
  return _msg;
}
inline void PayPrepayRequest::set_allocated_amount(::palm::wechat::v1::PayPrepayRequest_Amount* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::wechat::v1::PayPrepayRequest_Amount*>(_impl_.amount_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::wechat::v1::PayPrepayRequest_Amount*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.amount_ = reinterpret_cast<::palm::wechat::v1::PayPrepayRequest_Amount*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayPrepayRequest.amount)
}

// string description = 98;
inline void PayPrepayRequest::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& PayPrepayRequest::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayPrepayRequest.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayPrepayRequest::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayPrepayRequest.description)
}
inline std::string* PayPrepayRequest::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayPrepayRequest.description)
  return _s;
}
inline const std::string& PayPrepayRequest::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void PayPrepayRequest::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* PayPrepayRequest::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* PayPrepayRequest::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayPrepayRequest.description)
  return _impl_.description_.Release();
}
inline void PayPrepayRequest::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayPrepayRequest.description)
}

// string notify_host = 99;
inline void PayPrepayRequest::clear_notify_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.notify_host_.ClearToEmpty();
}
inline const std::string& PayPrepayRequest::notify_host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayPrepayRequest.notify_host)
  return _internal_notify_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayPrepayRequest::set_notify_host(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.notify_host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayPrepayRequest.notify_host)
}
inline std::string* PayPrepayRequest::mutable_notify_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_notify_host();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayPrepayRequest.notify_host)
  return _s;
}
inline const std::string& PayPrepayRequest::_internal_notify_host() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.notify_host_.Get();
}
inline void PayPrepayRequest::_internal_set_notify_host(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.notify_host_.Set(value, GetArena());
}
inline std::string* PayPrepayRequest::_internal_mutable_notify_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.notify_host_.Mutable( GetArena());
}
inline std::string* PayPrepayRequest::release_notify_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayPrepayRequest.notify_host)
  return _impl_.notify_host_.Release();
}
inline void PayPrepayRequest::set_allocated_notify_host(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.notify_host_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.notify_host_.IsDefault()) {
          _impl_.notify_host_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayPrepayRequest.notify_host)
}

// -------------------------------------------------------------------

// PayCloseOrderRequest

// string out_trade_no = 1;
inline void PayCloseOrderRequest::clear_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& PayCloseOrderRequest::out_trade_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayCloseOrderRequest.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayCloseOrderRequest::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayCloseOrderRequest.out_trade_no)
}
inline std::string* PayCloseOrderRequest::mutable_out_trade_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayCloseOrderRequest.out_trade_no)
  return _s;
}
inline const std::string& PayCloseOrderRequest::_internal_out_trade_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_trade_no_.Get();
}
inline void PayCloseOrderRequest::_internal_set_out_trade_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(value, GetArena());
}
inline std::string* PayCloseOrderRequest::_internal_mutable_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_trade_no_.Mutable( GetArena());
}
inline std::string* PayCloseOrderRequest::release_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayCloseOrderRequest.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void PayCloseOrderRequest::set_allocated_out_trade_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayCloseOrderRequest.out_trade_no)
}

// string reason = 2;
inline void PayCloseOrderRequest::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& PayCloseOrderRequest::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayCloseOrderRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayCloseOrderRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayCloseOrderRequest.reason)
}
inline std::string* PayCloseOrderRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayCloseOrderRequest.reason)
  return _s;
}
inline const std::string& PayCloseOrderRequest::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void PayCloseOrderRequest::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* PayCloseOrderRequest::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* PayCloseOrderRequest::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayCloseOrderRequest.reason)
  return _impl_.reason_.Release();
}
inline void PayCloseOrderRequest::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayCloseOrderRequest.reason)
}

// -------------------------------------------------------------------

// PayError

// string code = 1;
inline void PayError::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.ClearToEmpty();
}
inline const std::string& PayError::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayError.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayError::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayError.code)
}
inline std::string* PayError::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayError.code)
  return _s;
}
inline const std::string& PayError::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void PayError::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArena());
}
inline std::string* PayError::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArena());
}
inline std::string* PayError::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayError.code)
  return _impl_.code_.Release();
}
inline void PayError::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayError.code)
}

// string message = 2;
inline void PayError::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PayError::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayError.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayError::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayError.message)
}
inline std::string* PayError::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayError.message)
  return _s;
}
inline const std::string& PayError::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void PayError::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PayError::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PayError::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayError.message)
  return _impl_.message_.Release();
}
inline void PayError::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayError.message)
}

// -------------------------------------------------------------------

// PayNativeQrCodeUrlResponse

// string url = 1;
inline void PayNativeQrCodeUrlResponse::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& PayNativeQrCodeUrlResponse::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayNativeQrCodeUrlResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayNativeQrCodeUrlResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayNativeQrCodeUrlResponse.url)
}
inline std::string* PayNativeQrCodeUrlResponse::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayNativeQrCodeUrlResponse.url)
  return _s;
}
inline const std::string& PayNativeQrCodeUrlResponse::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void PayNativeQrCodeUrlResponse::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArena());
}
inline std::string* PayNativeQrCodeUrlResponse::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* PayNativeQrCodeUrlResponse::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayNativeQrCodeUrlResponse.url)
  return _impl_.url_.Release();
}
inline void PayNativeQrCodeUrlResponse::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayNativeQrCodeUrlResponse.url)
}

// string out_trade_no = 2;
inline void PayNativeQrCodeUrlResponse::clear_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& PayNativeQrCodeUrlResponse::out_trade_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayNativeQrCodeUrlResponse.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayNativeQrCodeUrlResponse::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayNativeQrCodeUrlResponse.out_trade_no)
}
inline std::string* PayNativeQrCodeUrlResponse::mutable_out_trade_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayNativeQrCodeUrlResponse.out_trade_no)
  return _s;
}
inline const std::string& PayNativeQrCodeUrlResponse::_internal_out_trade_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_trade_no_.Get();
}
inline void PayNativeQrCodeUrlResponse::_internal_set_out_trade_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(value, GetArena());
}
inline std::string* PayNativeQrCodeUrlResponse::_internal_mutable_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_trade_no_.Mutable( GetArena());
}
inline std::string* PayNativeQrCodeUrlResponse::release_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayNativeQrCodeUrlResponse.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void PayNativeQrCodeUrlResponse::set_allocated_out_trade_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayNativeQrCodeUrlResponse.out_trade_no)
}

// -------------------------------------------------------------------

// PayTradeResponse

// string trade_state = 1;
inline void PayTradeResponse::clear_trade_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_state_.ClearToEmpty();
}
inline const std::string& PayTradeResponse::trade_state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayTradeResponse.trade_state)
  return _internal_trade_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayTradeResponse::set_trade_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayTradeResponse.trade_state)
}
inline std::string* PayTradeResponse::mutable_trade_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trade_state();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayTradeResponse.trade_state)
  return _s;
}
inline const std::string& PayTradeResponse::_internal_trade_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trade_state_.Get();
}
inline void PayTradeResponse::_internal_set_trade_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_state_.Set(value, GetArena());
}
inline std::string* PayTradeResponse::_internal_mutable_trade_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.trade_state_.Mutable( GetArena());
}
inline std::string* PayTradeResponse::release_trade_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayTradeResponse.trade_state)
  return _impl_.trade_state_.Release();
}
inline void PayTradeResponse::set_allocated_trade_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_state_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trade_state_.IsDefault()) {
          _impl_.trade_state_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayTradeResponse.trade_state)
}

// string trade_state_desc = 2;
inline void PayTradeResponse::clear_trade_state_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_state_desc_.ClearToEmpty();
}
inline const std::string& PayTradeResponse::trade_state_desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayTradeResponse.trade_state_desc)
  return _internal_trade_state_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayTradeResponse::set_trade_state_desc(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_state_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayTradeResponse.trade_state_desc)
}
inline std::string* PayTradeResponse::mutable_trade_state_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trade_state_desc();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayTradeResponse.trade_state_desc)
  return _s;
}
inline const std::string& PayTradeResponse::_internal_trade_state_desc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trade_state_desc_.Get();
}
inline void PayTradeResponse::_internal_set_trade_state_desc(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_state_desc_.Set(value, GetArena());
}
inline std::string* PayTradeResponse::_internal_mutable_trade_state_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.trade_state_desc_.Mutable( GetArena());
}
inline std::string* PayTradeResponse::release_trade_state_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayTradeResponse.trade_state_desc)
  return _impl_.trade_state_desc_.Release();
}
inline void PayTradeResponse::set_allocated_trade_state_desc(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_state_desc_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trade_state_desc_.IsDefault()) {
          _impl_.trade_state_desc_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayTradeResponse.trade_state_desc)
}

// -------------------------------------------------------------------

// PayQueryOrderByIdRequest

// string transaction_id = 1;
inline void PayQueryOrderByIdRequest::clear_transaction_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transaction_id_.ClearToEmpty();
}
inline const std::string& PayQueryOrderByIdRequest::transaction_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryOrderByIdRequest.transaction_id)
  return _internal_transaction_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryOrderByIdRequest::set_transaction_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transaction_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryOrderByIdRequest.transaction_id)
}
inline std::string* PayQueryOrderByIdRequest::mutable_transaction_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryOrderByIdRequest.transaction_id)
  return _s;
}
inline const std::string& PayQueryOrderByIdRequest::_internal_transaction_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transaction_id_.Get();
}
inline void PayQueryOrderByIdRequest::_internal_set_transaction_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transaction_id_.Set(value, GetArena());
}
inline std::string* PayQueryOrderByIdRequest::_internal_mutable_transaction_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.transaction_id_.Mutable( GetArena());
}
inline std::string* PayQueryOrderByIdRequest::release_transaction_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryOrderByIdRequest.transaction_id)
  return _impl_.transaction_id_.Release();
}
inline void PayQueryOrderByIdRequest::set_allocated_transaction_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transaction_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transaction_id_.IsDefault()) {
          _impl_.transaction_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryOrderByIdRequest.transaction_id)
}

// -------------------------------------------------------------------

// PayQueryOrderByOutTradeNoRequest

// string out_trade_no = 1;
inline void PayQueryOrderByOutTradeNoRequest::clear_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& PayQueryOrderByOutTradeNoRequest::out_trade_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryOrderByOutTradeNoRequest.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryOrderByOutTradeNoRequest::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryOrderByOutTradeNoRequest.out_trade_no)
}
inline std::string* PayQueryOrderByOutTradeNoRequest::mutable_out_trade_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryOrderByOutTradeNoRequest.out_trade_no)
  return _s;
}
inline const std::string& PayQueryOrderByOutTradeNoRequest::_internal_out_trade_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_trade_no_.Get();
}
inline void PayQueryOrderByOutTradeNoRequest::_internal_set_out_trade_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(value, GetArena());
}
inline std::string* PayQueryOrderByOutTradeNoRequest::_internal_mutable_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_trade_no_.Mutable( GetArena());
}
inline std::string* PayQueryOrderByOutTradeNoRequest::release_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryOrderByOutTradeNoRequest.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void PayQueryOrderByOutTradeNoRequest::set_allocated_out_trade_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryOrderByOutTradeNoRequest.out_trade_no)
}

// -------------------------------------------------------------------

// PayJsapiPrepayIdResponse

// string app_id = 1;
inline void PayJsapiPrepayIdResponse::clear_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& PayJsapiPrepayIdResponse::app_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayJsapiPrepayIdResponse.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayJsapiPrepayIdResponse::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayJsapiPrepayIdResponse.app_id)
}
inline std::string* PayJsapiPrepayIdResponse::mutable_app_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayJsapiPrepayIdResponse.app_id)
  return _s;
}
inline const std::string& PayJsapiPrepayIdResponse::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void PayJsapiPrepayIdResponse::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayJsapiPrepayIdResponse.app_id)
  return _impl_.app_id_.Release();
}
inline void PayJsapiPrepayIdResponse::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayJsapiPrepayIdResponse.app_id)
}

// string time_stamp = 2;
inline void PayJsapiPrepayIdResponse::clear_time_stamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_stamp_.ClearToEmpty();
}
inline const std::string& PayJsapiPrepayIdResponse::time_stamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayJsapiPrepayIdResponse.time_stamp)
  return _internal_time_stamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayJsapiPrepayIdResponse::set_time_stamp(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_stamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayJsapiPrepayIdResponse.time_stamp)
}
inline std::string* PayJsapiPrepayIdResponse::mutable_time_stamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time_stamp();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayJsapiPrepayIdResponse.time_stamp)
  return _s;
}
inline const std::string& PayJsapiPrepayIdResponse::_internal_time_stamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_stamp_.Get();
}
inline void PayJsapiPrepayIdResponse::_internal_set_time_stamp(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_stamp_.Set(value, GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::_internal_mutable_time_stamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.time_stamp_.Mutable( GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::release_time_stamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayJsapiPrepayIdResponse.time_stamp)
  return _impl_.time_stamp_.Release();
}
inline void PayJsapiPrepayIdResponse::set_allocated_time_stamp(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_stamp_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.time_stamp_.IsDefault()) {
          _impl_.time_stamp_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayJsapiPrepayIdResponse.time_stamp)
}

// string nonce_str = 3;
inline void PayJsapiPrepayIdResponse::clear_nonce_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nonce_str_.ClearToEmpty();
}
inline const std::string& PayJsapiPrepayIdResponse::nonce_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayJsapiPrepayIdResponse.nonce_str)
  return _internal_nonce_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayJsapiPrepayIdResponse::set_nonce_str(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nonce_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayJsapiPrepayIdResponse.nonce_str)
}
inline std::string* PayJsapiPrepayIdResponse::mutable_nonce_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nonce_str();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayJsapiPrepayIdResponse.nonce_str)
  return _s;
}
inline const std::string& PayJsapiPrepayIdResponse::_internal_nonce_str() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nonce_str_.Get();
}
inline void PayJsapiPrepayIdResponse::_internal_set_nonce_str(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nonce_str_.Set(value, GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::_internal_mutable_nonce_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nonce_str_.Mutable( GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::release_nonce_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayJsapiPrepayIdResponse.nonce_str)
  return _impl_.nonce_str_.Release();
}
inline void PayJsapiPrepayIdResponse::set_allocated_nonce_str(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nonce_str_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_str_.IsDefault()) {
          _impl_.nonce_str_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayJsapiPrepayIdResponse.nonce_str)
}

// string package = 4;
inline void PayJsapiPrepayIdResponse::clear_package() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.package_.ClearToEmpty();
}
inline const std::string& PayJsapiPrepayIdResponse::package() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayJsapiPrepayIdResponse.package)
  return _internal_package();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayJsapiPrepayIdResponse::set_package(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.package_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayJsapiPrepayIdResponse.package)
}
inline std::string* PayJsapiPrepayIdResponse::mutable_package() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayJsapiPrepayIdResponse.package)
  return _s;
}
inline const std::string& PayJsapiPrepayIdResponse::_internal_package() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.package_.Get();
}
inline void PayJsapiPrepayIdResponse::_internal_set_package(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.package_.Set(value, GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::_internal_mutable_package() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.package_.Mutable( GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::release_package() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayJsapiPrepayIdResponse.package)
  return _impl_.package_.Release();
}
inline void PayJsapiPrepayIdResponse::set_allocated_package(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.package_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.package_.IsDefault()) {
          _impl_.package_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayJsapiPrepayIdResponse.package)
}

// string sign_type = 5;
inline void PayJsapiPrepayIdResponse::clear_sign_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sign_type_.ClearToEmpty();
}
inline const std::string& PayJsapiPrepayIdResponse::sign_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayJsapiPrepayIdResponse.sign_type)
  return _internal_sign_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayJsapiPrepayIdResponse::set_sign_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sign_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayJsapiPrepayIdResponse.sign_type)
}
inline std::string* PayJsapiPrepayIdResponse::mutable_sign_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sign_type();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayJsapiPrepayIdResponse.sign_type)
  return _s;
}
inline const std::string& PayJsapiPrepayIdResponse::_internal_sign_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sign_type_.Get();
}
inline void PayJsapiPrepayIdResponse::_internal_set_sign_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sign_type_.Set(value, GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::_internal_mutable_sign_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sign_type_.Mutable( GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::release_sign_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayJsapiPrepayIdResponse.sign_type)
  return _impl_.sign_type_.Release();
}
inline void PayJsapiPrepayIdResponse::set_allocated_sign_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sign_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sign_type_.IsDefault()) {
          _impl_.sign_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayJsapiPrepayIdResponse.sign_type)
}

// string pay_sign = 6;
inline void PayJsapiPrepayIdResponse::clear_pay_sign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pay_sign_.ClearToEmpty();
}
inline const std::string& PayJsapiPrepayIdResponse::pay_sign() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayJsapiPrepayIdResponse.pay_sign)
  return _internal_pay_sign();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayJsapiPrepayIdResponse::set_pay_sign(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pay_sign_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayJsapiPrepayIdResponse.pay_sign)
}
inline std::string* PayJsapiPrepayIdResponse::mutable_pay_sign() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pay_sign();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayJsapiPrepayIdResponse.pay_sign)
  return _s;
}
inline const std::string& PayJsapiPrepayIdResponse::_internal_pay_sign() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pay_sign_.Get();
}
inline void PayJsapiPrepayIdResponse::_internal_set_pay_sign(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pay_sign_.Set(value, GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::_internal_mutable_pay_sign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pay_sign_.Mutable( GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::release_pay_sign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayJsapiPrepayIdResponse.pay_sign)
  return _impl_.pay_sign_.Release();
}
inline void PayJsapiPrepayIdResponse::set_allocated_pay_sign(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pay_sign_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pay_sign_.IsDefault()) {
          _impl_.pay_sign_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayJsapiPrepayIdResponse.pay_sign)
}

// string out_trade_no = 11;
inline void PayJsapiPrepayIdResponse::clear_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& PayJsapiPrepayIdResponse::out_trade_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayJsapiPrepayIdResponse.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayJsapiPrepayIdResponse::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayJsapiPrepayIdResponse.out_trade_no)
}
inline std::string* PayJsapiPrepayIdResponse::mutable_out_trade_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayJsapiPrepayIdResponse.out_trade_no)
  return _s;
}
inline const std::string& PayJsapiPrepayIdResponse::_internal_out_trade_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_trade_no_.Get();
}
inline void PayJsapiPrepayIdResponse::_internal_set_out_trade_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(value, GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::_internal_mutable_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_trade_no_.Mutable( GetArena());
}
inline std::string* PayJsapiPrepayIdResponse::release_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayJsapiPrepayIdResponse.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void PayJsapiPrepayIdResponse::set_allocated_out_trade_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayJsapiPrepayIdResponse.out_trade_no)
}

// -------------------------------------------------------------------

// PayBillDate

// int32 year = 1;
inline void PayBillDate::clear_year() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.year_ = 0;
}
inline ::int32_t PayBillDate::year() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayBillDate.year)
  return _internal_year();
}
inline void PayBillDate::set_year(::int32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayBillDate.year)
}
inline ::int32_t PayBillDate::_internal_year() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.year_;
}
inline void PayBillDate::_internal_set_year(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.year_ = value;
}

// int32 month = 2;
inline void PayBillDate::clear_month() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.month_ = 0;
}
inline ::int32_t PayBillDate::month() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayBillDate.month)
  return _internal_month();
}
inline void PayBillDate::set_month(::int32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayBillDate.month)
}
inline ::int32_t PayBillDate::_internal_month() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.month_;
}
inline void PayBillDate::_internal_set_month(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.month_ = value;
}

// int32 day = 3;
inline void PayBillDate::clear_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.day_ = 0;
}
inline ::int32_t PayBillDate::day() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayBillDate.day)
  return _internal_day();
}
inline void PayBillDate::set_day(::int32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayBillDate.day)
}
inline ::int32_t PayBillDate::_internal_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.day_;
}
inline void PayBillDate::_internal_set_day(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.day_ = value;
}

// -------------------------------------------------------------------

// PayBillResponse

// bytes content = 1;
inline void PayBillResponse::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& PayBillResponse::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayBillResponse.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayBillResponse::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayBillResponse.content)
}
inline std::string* PayBillResponse::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayBillResponse.content)
  return _s;
}
inline const std::string& PayBillResponse::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void PayBillResponse::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(value, GetArena());
}
inline std::string* PayBillResponse::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* PayBillResponse::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayBillResponse.content)
  return _impl_.content_.Release();
}
inline void PayBillResponse::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayBillResponse.content)
}

// -------------------------------------------------------------------

// PayTradeBillRequest

// .palm.wechat.v1.PayBillDate bill_date = 1;
inline bool PayTradeBillRequest::has_bill_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bill_date_ != nullptr);
  return value;
}
inline void PayTradeBillRequest::clear_bill_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bill_date_ != nullptr) _impl_.bill_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::wechat::v1::PayBillDate& PayTradeBillRequest::_internal_bill_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::wechat::v1::PayBillDate* p = _impl_.bill_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::wechat::v1::PayBillDate&>(::palm::wechat::v1::_PayBillDate_default_instance_);
}
inline const ::palm::wechat::v1::PayBillDate& PayTradeBillRequest::bill_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayTradeBillRequest.bill_date)
  return _internal_bill_date();
}
inline void PayTradeBillRequest::unsafe_arena_set_allocated_bill_date(::palm::wechat::v1::PayBillDate* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bill_date_);
  }
  _impl_.bill_date_ = reinterpret_cast<::palm::wechat::v1::PayBillDate*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.PayTradeBillRequest.bill_date)
}
inline ::palm::wechat::v1::PayBillDate* PayTradeBillRequest::release_bill_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayBillDate* released = _impl_.bill_date_;
  _impl_.bill_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::wechat::v1::PayBillDate* PayTradeBillRequest::unsafe_arena_release_bill_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayTradeBillRequest.bill_date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayBillDate* temp = _impl_.bill_date_;
  _impl_.bill_date_ = nullptr;
  return temp;
}
inline ::palm::wechat::v1::PayBillDate* PayTradeBillRequest::_internal_mutable_bill_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bill_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::wechat::v1::PayBillDate>(GetArena());
    _impl_.bill_date_ = reinterpret_cast<::palm::wechat::v1::PayBillDate*>(p);
  }
  return _impl_.bill_date_;
}
inline ::palm::wechat::v1::PayBillDate* PayTradeBillRequest::mutable_bill_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::PayBillDate* _msg = _internal_mutable_bill_date();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayTradeBillRequest.bill_date)
  return _msg;
}
inline void PayTradeBillRequest::set_allocated_bill_date(::palm::wechat::v1::PayBillDate* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::wechat::v1::PayBillDate*>(_impl_.bill_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::wechat::v1::PayBillDate*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bill_date_ = reinterpret_cast<::palm::wechat::v1::PayBillDate*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayTradeBillRequest.bill_date)
}

// .palm.wechat.v1.PayTradeBillRequest.BillType bill_type = 2;
inline void PayTradeBillRequest::clear_bill_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bill_type_ = 0;
}
inline ::palm::wechat::v1::PayTradeBillRequest_BillType PayTradeBillRequest::bill_type() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayTradeBillRequest.bill_type)
  return _internal_bill_type();
}
inline void PayTradeBillRequest::set_bill_type(::palm::wechat::v1::PayTradeBillRequest_BillType value) {
  _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayTradeBillRequest.bill_type)
}
inline ::palm::wechat::v1::PayTradeBillRequest_BillType PayTradeBillRequest::_internal_bill_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::wechat::v1::PayTradeBillRequest_BillType>(_impl_.bill_type_);
}
inline void PayTradeBillRequest::_internal_set_bill_type(::palm::wechat::v1::PayTradeBillRequest_BillType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bill_type_ = value;
}

// -------------------------------------------------------------------

// PayFundFlowBillRequest

// .palm.wechat.v1.PayBillDate bill_date = 1;
inline bool PayFundFlowBillRequest::has_bill_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bill_date_ != nullptr);
  return value;
}
inline void PayFundFlowBillRequest::clear_bill_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bill_date_ != nullptr) _impl_.bill_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::wechat::v1::PayBillDate& PayFundFlowBillRequest::_internal_bill_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::wechat::v1::PayBillDate* p = _impl_.bill_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::wechat::v1::PayBillDate&>(::palm::wechat::v1::_PayBillDate_default_instance_);
}
inline const ::palm::wechat::v1::PayBillDate& PayFundFlowBillRequest::bill_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayFundFlowBillRequest.bill_date)
  return _internal_bill_date();
}
inline void PayFundFlowBillRequest::unsafe_arena_set_allocated_bill_date(::palm::wechat::v1::PayBillDate* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bill_date_);
  }
  _impl_.bill_date_ = reinterpret_cast<::palm::wechat::v1::PayBillDate*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.PayFundFlowBillRequest.bill_date)
}
inline ::palm::wechat::v1::PayBillDate* PayFundFlowBillRequest::release_bill_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayBillDate* released = _impl_.bill_date_;
  _impl_.bill_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::wechat::v1::PayBillDate* PayFundFlowBillRequest::unsafe_arena_release_bill_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayFundFlowBillRequest.bill_date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayBillDate* temp = _impl_.bill_date_;
  _impl_.bill_date_ = nullptr;
  return temp;
}
inline ::palm::wechat::v1::PayBillDate* PayFundFlowBillRequest::_internal_mutable_bill_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bill_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::wechat::v1::PayBillDate>(GetArena());
    _impl_.bill_date_ = reinterpret_cast<::palm::wechat::v1::PayBillDate*>(p);
  }
  return _impl_.bill_date_;
}
inline ::palm::wechat::v1::PayBillDate* PayFundFlowBillRequest::mutable_bill_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::PayBillDate* _msg = _internal_mutable_bill_date();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayFundFlowBillRequest.bill_date)
  return _msg;
}
inline void PayFundFlowBillRequest::set_allocated_bill_date(::palm::wechat::v1::PayBillDate* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::wechat::v1::PayBillDate*>(_impl_.bill_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::wechat::v1::PayBillDate*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bill_date_ = reinterpret_cast<::palm::wechat::v1::PayBillDate*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayFundFlowBillRequest.bill_date)
}

// .palm.wechat.v1.PayFundFlowBillRequest.AccountType account_type = 2;
inline void PayFundFlowBillRequest::clear_account_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_type_ = 0;
}
inline ::palm::wechat::v1::PayFundFlowBillRequest_AccountType PayFundFlowBillRequest::account_type() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayFundFlowBillRequest.account_type)
  return _internal_account_type();
}
inline void PayFundFlowBillRequest::set_account_type(::palm::wechat::v1::PayFundFlowBillRequest_AccountType value) {
  _internal_set_account_type(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayFundFlowBillRequest.account_type)
}
inline ::palm::wechat::v1::PayFundFlowBillRequest_AccountType PayFundFlowBillRequest::_internal_account_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::wechat::v1::PayFundFlowBillRequest_AccountType>(_impl_.account_type_);
}
inline void PayFundFlowBillRequest::_internal_set_account_type(::palm::wechat::v1::PayFundFlowBillRequest_AccountType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_type_ = value;
}

// -------------------------------------------------------------------

// PayCreateRefundRequest_Amount

// int32 total = 1;
inline void PayCreateRefundRequest_Amount::clear_total() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_ = 0;
}
inline ::int32_t PayCreateRefundRequest_Amount::total() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayCreateRefundRequest.Amount.total)
  return _internal_total();
}
inline void PayCreateRefundRequest_Amount::set_total(::int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayCreateRefundRequest.Amount.total)
}
inline ::int32_t PayCreateRefundRequest_Amount::_internal_total() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_;
}
inline void PayCreateRefundRequest_Amount::_internal_set_total(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_ = value;
}

// int32 refund = 2;
inline void PayCreateRefundRequest_Amount::clear_refund() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.refund_ = 0;
}
inline ::int32_t PayCreateRefundRequest_Amount::refund() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayCreateRefundRequest.Amount.refund)
  return _internal_refund();
}
inline void PayCreateRefundRequest_Amount::set_refund(::int32_t value) {
  _internal_set_refund(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayCreateRefundRequest.Amount.refund)
}
inline ::int32_t PayCreateRefundRequest_Amount::_internal_refund() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.refund_;
}
inline void PayCreateRefundRequest_Amount::_internal_set_refund(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.refund_ = value;
}

// .palm.wechat.v1.PayCurrency currency = 3;
inline void PayCreateRefundRequest_Amount::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_ = 0;
}
inline ::palm::wechat::v1::PayCurrency PayCreateRefundRequest_Amount::currency() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayCreateRefundRequest.Amount.currency)
  return _internal_currency();
}
inline void PayCreateRefundRequest_Amount::set_currency(::palm::wechat::v1::PayCurrency value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayCreateRefundRequest.Amount.currency)
}
inline ::palm::wechat::v1::PayCurrency PayCreateRefundRequest_Amount::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::wechat::v1::PayCurrency>(_impl_.currency_);
}
inline void PayCreateRefundRequest_Amount::_internal_set_currency(::palm::wechat::v1::PayCurrency value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_ = value;
}

// -------------------------------------------------------------------

// PayCreateRefundRequest

// string out_trade_no = 1;
inline void PayCreateRefundRequest::clear_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& PayCreateRefundRequest::out_trade_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayCreateRefundRequest.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayCreateRefundRequest::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayCreateRefundRequest.out_trade_no)
}
inline std::string* PayCreateRefundRequest::mutable_out_trade_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayCreateRefundRequest.out_trade_no)
  return _s;
}
inline const std::string& PayCreateRefundRequest::_internal_out_trade_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_trade_no_.Get();
}
inline void PayCreateRefundRequest::_internal_set_out_trade_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_trade_no_.Set(value, GetArena());
}
inline std::string* PayCreateRefundRequest::_internal_mutable_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_trade_no_.Mutable( GetArena());
}
inline std::string* PayCreateRefundRequest::release_out_trade_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayCreateRefundRequest.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void PayCreateRefundRequest::set_allocated_out_trade_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_trade_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayCreateRefundRequest.out_trade_no)
}

// string reason = 2;
inline void PayCreateRefundRequest::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& PayCreateRefundRequest::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayCreateRefundRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayCreateRefundRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayCreateRefundRequest.reason)
}
inline std::string* PayCreateRefundRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayCreateRefundRequest.reason)
  return _s;
}
inline const std::string& PayCreateRefundRequest::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void PayCreateRefundRequest::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* PayCreateRefundRequest::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* PayCreateRefundRequest::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayCreateRefundRequest.reason)
  return _impl_.reason_.Release();
}
inline void PayCreateRefundRequest::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayCreateRefundRequest.reason)
}

// .palm.wechat.v1.PayCreateRefundRequest.Amount amount = 3;
inline bool PayCreateRefundRequest::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline void PayCreateRefundRequest::clear_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::wechat::v1::PayCreateRefundRequest_Amount& PayCreateRefundRequest::_internal_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::wechat::v1::PayCreateRefundRequest_Amount* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::wechat::v1::PayCreateRefundRequest_Amount&>(::palm::wechat::v1::_PayCreateRefundRequest_Amount_default_instance_);
}
inline const ::palm::wechat::v1::PayCreateRefundRequest_Amount& PayCreateRefundRequest::amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayCreateRefundRequest.amount)
  return _internal_amount();
}
inline void PayCreateRefundRequest::unsafe_arena_set_allocated_amount(::palm::wechat::v1::PayCreateRefundRequest_Amount* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = reinterpret_cast<::palm::wechat::v1::PayCreateRefundRequest_Amount*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.PayCreateRefundRequest.amount)
}
inline ::palm::wechat::v1::PayCreateRefundRequest_Amount* PayCreateRefundRequest::release_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayCreateRefundRequest_Amount* released = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::wechat::v1::PayCreateRefundRequest_Amount* PayCreateRefundRequest::unsafe_arena_release_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayCreateRefundRequest.amount)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayCreateRefundRequest_Amount* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::palm::wechat::v1::PayCreateRefundRequest_Amount* PayCreateRefundRequest::_internal_mutable_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::wechat::v1::PayCreateRefundRequest_Amount>(GetArena());
    _impl_.amount_ = reinterpret_cast<::palm::wechat::v1::PayCreateRefundRequest_Amount*>(p);
  }
  return _impl_.amount_;
}
inline ::palm::wechat::v1::PayCreateRefundRequest_Amount* PayCreateRefundRequest::mutable_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::PayCreateRefundRequest_Amount* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayCreateRefundRequest.amount)
  return _msg;
}
inline void PayCreateRefundRequest::set_allocated_amount(::palm::wechat::v1::PayCreateRefundRequest_Amount* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::wechat::v1::PayCreateRefundRequest_Amount*>(_impl_.amount_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::wechat::v1::PayCreateRefundRequest_Amount*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.amount_ = reinterpret_cast<::palm::wechat::v1::PayCreateRefundRequest_Amount*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayCreateRefundRequest.amount)
}

// string notify_host = 11;
inline void PayCreateRefundRequest::clear_notify_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.notify_host_.ClearToEmpty();
}
inline const std::string& PayCreateRefundRequest::notify_host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayCreateRefundRequest.notify_host)
  return _internal_notify_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayCreateRefundRequest::set_notify_host(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.notify_host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayCreateRefundRequest.notify_host)
}
inline std::string* PayCreateRefundRequest::mutable_notify_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_notify_host();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayCreateRefundRequest.notify_host)
  return _s;
}
inline const std::string& PayCreateRefundRequest::_internal_notify_host() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.notify_host_.Get();
}
inline void PayCreateRefundRequest::_internal_set_notify_host(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.notify_host_.Set(value, GetArena());
}
inline std::string* PayCreateRefundRequest::_internal_mutable_notify_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.notify_host_.Mutable( GetArena());
}
inline std::string* PayCreateRefundRequest::release_notify_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayCreateRefundRequest.notify_host)
  return _impl_.notify_host_.Release();
}
inline void PayCreateRefundRequest::set_allocated_notify_host(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.notify_host_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.notify_host_.IsDefault()) {
          _impl_.notify_host_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayCreateRefundRequest.notify_host)
}

// -------------------------------------------------------------------

// PayQueryRefundRequest

// string out_refund_no = 1;
inline void PayQueryRefundRequest::clear_out_refund_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_refund_no_.ClearToEmpty();
}
inline const std::string& PayQueryRefundRequest::out_refund_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryRefundRequest.out_refund_no)
  return _internal_out_refund_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryRefundRequest::set_out_refund_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_refund_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryRefundRequest.out_refund_no)
}
inline std::string* PayQueryRefundRequest::mutable_out_refund_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_refund_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryRefundRequest.out_refund_no)
  return _s;
}
inline const std::string& PayQueryRefundRequest::_internal_out_refund_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_refund_no_.Get();
}
inline void PayQueryRefundRequest::_internal_set_out_refund_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_refund_no_.Set(value, GetArena());
}
inline std::string* PayQueryRefundRequest::_internal_mutable_out_refund_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_refund_no_.Mutable( GetArena());
}
inline std::string* PayQueryRefundRequest::release_out_refund_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryRefundRequest.out_refund_no)
  return _impl_.out_refund_no_.Release();
}
inline void PayQueryRefundRequest::set_allocated_out_refund_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_refund_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_refund_no_.IsDefault()) {
          _impl_.out_refund_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryRefundRequest.out_refund_no)
}

// -------------------------------------------------------------------

// PayRefundResponse

// string out_refund_no = 1;
inline void PayRefundResponse::clear_out_refund_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_refund_no_.ClearToEmpty();
}
inline const std::string& PayRefundResponse::out_refund_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayRefundResponse.out_refund_no)
  return _internal_out_refund_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayRefundResponse::set_out_refund_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_refund_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayRefundResponse.out_refund_no)
}
inline std::string* PayRefundResponse::mutable_out_refund_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_refund_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayRefundResponse.out_refund_no)
  return _s;
}
inline const std::string& PayRefundResponse::_internal_out_refund_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_refund_no_.Get();
}
inline void PayRefundResponse::_internal_set_out_refund_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_refund_no_.Set(value, GetArena());
}
inline std::string* PayRefundResponse::_internal_mutable_out_refund_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_refund_no_.Mutable( GetArena());
}
inline std::string* PayRefundResponse::release_out_refund_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayRefundResponse.out_refund_no)
  return _impl_.out_refund_no_.Release();
}
inline void PayRefundResponse::set_allocated_out_refund_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_refund_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_refund_no_.IsDefault()) {
          _impl_.out_refund_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayRefundResponse.out_refund_no)
}

// string channel = 2;
inline void PayRefundResponse::clear_channel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& PayRefundResponse::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayRefundResponse.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayRefundResponse::set_channel(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayRefundResponse.channel)
}
inline std::string* PayRefundResponse::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayRefundResponse.channel)
  return _s;
}
inline const std::string& PayRefundResponse::_internal_channel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_.Get();
}
inline void PayRefundResponse::_internal_set_channel(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* PayRefundResponse::_internal_mutable_channel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* PayRefundResponse::release_channel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayRefundResponse.channel)
  return _impl_.channel_.Release();
}
inline void PayRefundResponse::set_allocated_channel(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_.IsDefault()) {
          _impl_.channel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayRefundResponse.channel)
}

// string status = 3;
inline void PayRefundResponse::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& PayRefundResponse::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayRefundResponse.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayRefundResponse::set_status(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayRefundResponse.status)
}
inline std::string* PayRefundResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayRefundResponse.status)
  return _s;
}
inline const std::string& PayRefundResponse::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_.Get();
}
inline void PayRefundResponse::_internal_set_status(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(value, GetArena());
}
inline std::string* PayRefundResponse::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* PayRefundResponse::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayRefundResponse.status)
  return _impl_.status_.Release();
}
inline void PayRefundResponse::set_allocated_status(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayRefundResponse.status)
}

// string user_received_account = 4;
inline void PayRefundResponse::clear_user_received_account() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_received_account_.ClearToEmpty();
}
inline const std::string& PayRefundResponse::user_received_account() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayRefundResponse.user_received_account)
  return _internal_user_received_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayRefundResponse::set_user_received_account(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_received_account_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayRefundResponse.user_received_account)
}
inline std::string* PayRefundResponse::mutable_user_received_account() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_received_account();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayRefundResponse.user_received_account)
  return _s;
}
inline const std::string& PayRefundResponse::_internal_user_received_account() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_received_account_.Get();
}
inline void PayRefundResponse::_internal_set_user_received_account(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_received_account_.Set(value, GetArena());
}
inline std::string* PayRefundResponse::_internal_mutable_user_received_account() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_received_account_.Mutable( GetArena());
}
inline std::string* PayRefundResponse::release_user_received_account() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayRefundResponse.user_received_account)
  return _impl_.user_received_account_.Release();
}
inline void PayRefundResponse::set_allocated_user_received_account(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_received_account_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_received_account_.IsDefault()) {
          _impl_.user_received_account_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayRefundResponse.user_received_account)
}

// string create_time = 99;
inline void PayRefundResponse::clear_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.create_time_.ClearToEmpty();
}
inline const std::string& PayRefundResponse::create_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayRefundResponse.create_time)
  return _internal_create_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayRefundResponse::set_create_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.create_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayRefundResponse.create_time)
}
inline std::string* PayRefundResponse::mutable_create_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayRefundResponse.create_time)
  return _s;
}
inline const std::string& PayRefundResponse::_internal_create_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.create_time_.Get();
}
inline void PayRefundResponse::_internal_set_create_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.create_time_.Set(value, GetArena());
}
inline std::string* PayRefundResponse::_internal_mutable_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.create_time_.Mutable( GetArena());
}
inline std::string* PayRefundResponse::release_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayRefundResponse.create_time)
  return _impl_.create_time_.Release();
}
inline void PayRefundResponse::set_allocated_create_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.create_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.create_time_.IsDefault()) {
          _impl_.create_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayRefundResponse.create_time)
}

// -------------------------------------------------------------------

// PayTransferGetElectronicReceiptRequest

// .palm.wechat.v1.PayTransferGetElectronicReceiptRequest.AcceptType accept_type = 1;
inline void PayTransferGetElectronicReceiptRequest::clear_accept_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.accept_type_ = 0;
}
inline ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType PayTransferGetElectronicReceiptRequest::accept_type() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.accept_type)
  return _internal_accept_type();
}
inline void PayTransferGetElectronicReceiptRequest::set_accept_type(::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType value) {
  _internal_set_accept_type(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.accept_type)
}
inline ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType PayTransferGetElectronicReceiptRequest::_internal_accept_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType>(_impl_.accept_type_);
}
inline void PayTransferGetElectronicReceiptRequest::_internal_set_accept_type(::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.accept_type_ = value;
}

// optional string out_batch_no = 2;
inline bool PayTransferGetElectronicReceiptRequest::has_out_batch_no() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PayTransferGetElectronicReceiptRequest::clear_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PayTransferGetElectronicReceiptRequest::out_batch_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayTransferGetElectronicReceiptRequest::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_batch_no)
}
inline std::string* PayTransferGetElectronicReceiptRequest::mutable_out_batch_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_batch_no)
  return _s;
}
inline const std::string& PayTransferGetElectronicReceiptRequest::_internal_out_batch_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_batch_no_.Get();
}
inline void PayTransferGetElectronicReceiptRequest::_internal_set_out_batch_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.out_batch_no_.Set(value, GetArena());
}
inline std::string* PayTransferGetElectronicReceiptRequest::_internal_mutable_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.out_batch_no_.Mutable( GetArena());
}
inline std::string* PayTransferGetElectronicReceiptRequest::release_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_batch_no)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.out_batch_no_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.out_batch_no_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PayTransferGetElectronicReceiptRequest::set_allocated_out_batch_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.out_batch_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_batch_no)
}

// string out_detail_no = 3;
inline void PayTransferGetElectronicReceiptRequest::clear_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.ClearToEmpty();
}
inline const std::string& PayTransferGetElectronicReceiptRequest::out_detail_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_detail_no)
  return _internal_out_detail_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayTransferGetElectronicReceiptRequest::set_out_detail_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_detail_no)
}
inline std::string* PayTransferGetElectronicReceiptRequest::mutable_out_detail_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_detail_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_detail_no)
  return _s;
}
inline const std::string& PayTransferGetElectronicReceiptRequest::_internal_out_detail_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_detail_no_.Get();
}
inline void PayTransferGetElectronicReceiptRequest::_internal_set_out_detail_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(value, GetArena());
}
inline std::string* PayTransferGetElectronicReceiptRequest::_internal_mutable_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_detail_no_.Mutable( GetArena());
}
inline std::string* PayTransferGetElectronicReceiptRequest::release_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_detail_no)
  return _impl_.out_detail_no_.Release();
}
inline void PayTransferGetElectronicReceiptRequest::set_allocated_out_detail_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_detail_no_.IsDefault()) {
          _impl_.out_detail_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayTransferGetElectronicReceiptRequest.out_detail_no)
}

// -------------------------------------------------------------------

// PayTransferGetReceiptResponse

// bytes payload = 1;
inline void PayTransferGetReceiptResponse::clear_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& PayTransferGetReceiptResponse::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayTransferGetReceiptResponse.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayTransferGetReceiptResponse::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayTransferGetReceiptResponse.payload)
}
inline std::string* PayTransferGetReceiptResponse::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayTransferGetReceiptResponse.payload)
  return _s;
}
inline const std::string& PayTransferGetReceiptResponse::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void PayTransferGetReceiptResponse::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* PayTransferGetReceiptResponse::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* PayTransferGetReceiptResponse::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayTransferGetReceiptResponse.payload)
  return _impl_.payload_.Release();
}
inline void PayTransferGetReceiptResponse::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayTransferGetReceiptResponse.payload)
}

// -------------------------------------------------------------------

// PayTransferGetBillReceiptRequest

// string out_batch_no = 1;
inline void PayTransferGetBillReceiptRequest::clear_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.ClearToEmpty();
}
inline const std::string& PayTransferGetBillReceiptRequest::out_batch_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayTransferGetBillReceiptRequest.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayTransferGetBillReceiptRequest::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayTransferGetBillReceiptRequest.out_batch_no)
}
inline std::string* PayTransferGetBillReceiptRequest::mutable_out_batch_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayTransferGetBillReceiptRequest.out_batch_no)
  return _s;
}
inline const std::string& PayTransferGetBillReceiptRequest::_internal_out_batch_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_batch_no_.Get();
}
inline void PayTransferGetBillReceiptRequest::_internal_set_out_batch_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(value, GetArena());
}
inline std::string* PayTransferGetBillReceiptRequest::_internal_mutable_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_batch_no_.Mutable( GetArena());
}
inline std::string* PayTransferGetBillReceiptRequest::release_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayTransferGetBillReceiptRequest.out_batch_no)
  return _impl_.out_batch_no_.Release();
}
inline void PayTransferGetBillReceiptRequest::set_allocated_out_batch_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayTransferGetBillReceiptRequest.out_batch_no)
}

// -------------------------------------------------------------------

// PayExecuteBatchTransferRequest_Batch

// string name = 1;
inline void PayExecuteBatchTransferRequest_Batch::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferRequest_Batch::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferRequest_Batch::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.name)
}
inline std::string* PayExecuteBatchTransferRequest_Batch::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.name)
  return _s;
}
inline const std::string& PayExecuteBatchTransferRequest_Batch::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void PayExecuteBatchTransferRequest_Batch::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Batch::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Batch::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.name)
  return _impl_.name_.Release();
}
inline void PayExecuteBatchTransferRequest_Batch::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.name)
}

// string remark = 2;
inline void PayExecuteBatchTransferRequest_Batch::clear_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remark_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferRequest_Batch::remark() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.remark)
  return _internal_remark();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferRequest_Batch::set_remark(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remark_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.remark)
}
inline std::string* PayExecuteBatchTransferRequest_Batch::mutable_remark() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.remark)
  return _s;
}
inline const std::string& PayExecuteBatchTransferRequest_Batch::_internal_remark() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remark_.Get();
}
inline void PayExecuteBatchTransferRequest_Batch::_internal_set_remark(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remark_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Batch::_internal_mutable_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remark_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Batch::release_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.remark)
  return _impl_.remark_.Release();
}
inline void PayExecuteBatchTransferRequest_Batch::set_allocated_remark(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remark_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remark_.IsDefault()) {
          _impl_.remark_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.remark)
}

// optional string out_no = 3;
inline bool PayExecuteBatchTransferRequest_Batch::has_out_no() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PayExecuteBatchTransferRequest_Batch::clear_out_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_no_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PayExecuteBatchTransferRequest_Batch::out_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.out_no)
  return _internal_out_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferRequest_Batch::set_out_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.out_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.out_no)
}
inline std::string* PayExecuteBatchTransferRequest_Batch::mutable_out_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.out_no)
  return _s;
}
inline const std::string& PayExecuteBatchTransferRequest_Batch::_internal_out_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_no_.Get();
}
inline void PayExecuteBatchTransferRequest_Batch::_internal_set_out_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.out_no_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Batch::_internal_mutable_out_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.out_no_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Batch::release_out_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.out_no)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.out_no_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.out_no_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PayExecuteBatchTransferRequest_Batch::set_allocated_out_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.out_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_no_.IsDefault()) {
          _impl_.out_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.Batch.out_no)
}

// -------------------------------------------------------------------

// PayExecuteBatchTransferRequest_Detail

// string open_id = 1;
inline void PayExecuteBatchTransferRequest_Detail::clear_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferRequest_Detail::open_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferRequest_Detail::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.open_id)
}
inline std::string* PayExecuteBatchTransferRequest_Detail::mutable_open_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.open_id)
  return _s;
}
inline const std::string& PayExecuteBatchTransferRequest_Detail::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void PayExecuteBatchTransferRequest_Detail::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Detail::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Detail::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.open_id)
  return _impl_.open_id_.Release();
}
inline void PayExecuteBatchTransferRequest_Detail::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.open_id)
}

// string username = 2;
inline void PayExecuteBatchTransferRequest_Detail::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferRequest_Detail::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferRequest_Detail::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.username)
}
inline std::string* PayExecuteBatchTransferRequest_Detail::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.username)
  return _s;
}
inline const std::string& PayExecuteBatchTransferRequest_Detail::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void PayExecuteBatchTransferRequest_Detail::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Detail::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Detail::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.username)
  return _impl_.username_.Release();
}
inline void PayExecuteBatchTransferRequest_Detail::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.username)
}

// int64 amount = 3;
inline void PayExecuteBatchTransferRequest_Detail::clear_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.amount_ = ::int64_t{0};
}
inline ::int64_t PayExecuteBatchTransferRequest_Detail::amount() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.amount)
  return _internal_amount();
}
inline void PayExecuteBatchTransferRequest_Detail::set_amount(::int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.amount)
}
inline ::int64_t PayExecuteBatchTransferRequest_Detail::_internal_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.amount_;
}
inline void PayExecuteBatchTransferRequest_Detail::_internal_set_amount(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.amount_ = value;
}

// string remark = 4;
inline void PayExecuteBatchTransferRequest_Detail::clear_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remark_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferRequest_Detail::remark() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.remark)
  return _internal_remark();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferRequest_Detail::set_remark(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remark_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.remark)
}
inline std::string* PayExecuteBatchTransferRequest_Detail::mutable_remark() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.remark)
  return _s;
}
inline const std::string& PayExecuteBatchTransferRequest_Detail::_internal_remark() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remark_.Get();
}
inline void PayExecuteBatchTransferRequest_Detail::_internal_set_remark(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remark_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Detail::_internal_mutable_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remark_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferRequest_Detail::release_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.remark)
  return _impl_.remark_.Release();
}
inline void PayExecuteBatchTransferRequest_Detail::set_allocated_remark(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remark_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remark_.IsDefault()) {
          _impl_.remark_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.Detail.remark)
}

// -------------------------------------------------------------------

// PayExecuteBatchTransferRequest

// string app_id = 1;
inline void PayExecuteBatchTransferRequest::clear_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferRequest::app_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferRequest.app_id)
}
inline std::string* PayExecuteBatchTransferRequest::mutable_app_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.app_id)
  return _s;
}
inline const std::string& PayExecuteBatchTransferRequest::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void PayExecuteBatchTransferRequest::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferRequest::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferRequest::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void PayExecuteBatchTransferRequest::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.app_id)
}

// .palm.wechat.v1.PayExecuteBatchTransferRequest.Batch batch = 2;
inline bool PayExecuteBatchTransferRequest::has_batch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.batch_ != nullptr);
  return value;
}
inline void PayExecuteBatchTransferRequest::clear_batch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.batch_ != nullptr) _impl_.batch_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch& PayExecuteBatchTransferRequest::_internal_batch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* p = _impl_.batch_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch&>(::palm::wechat::v1::_PayExecuteBatchTransferRequest_Batch_default_instance_);
}
inline const ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch& PayExecuteBatchTransferRequest::batch() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.batch)
  return _internal_batch();
}
inline void PayExecuteBatchTransferRequest::unsafe_arena_set_allocated_batch(::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.batch_);
  }
  _impl_.batch_ = reinterpret_cast<::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.batch)
}
inline ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* PayExecuteBatchTransferRequest::release_batch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* released = _impl_.batch_;
  _impl_.batch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* PayExecuteBatchTransferRequest::unsafe_arena_release_batch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferRequest.batch)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* temp = _impl_.batch_;
  _impl_.batch_ = nullptr;
  return temp;
}
inline ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* PayExecuteBatchTransferRequest::_internal_mutable_batch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.batch_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch>(GetArena());
    _impl_.batch_ = reinterpret_cast<::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch*>(p);
  }
  return _impl_.batch_;
}
inline ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* PayExecuteBatchTransferRequest::mutable_batch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* _msg = _internal_mutable_batch();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.batch)
  return _msg;
}
inline void PayExecuteBatchTransferRequest::set_allocated_batch(::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch*>(_impl_.batch_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.batch_ = reinterpret_cast<::palm::wechat::v1::PayExecuteBatchTransferRequest_Batch*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.batch)
}

// repeated .palm.wechat.v1.PayExecuteBatchTransferRequest.Detail details = 3;
inline int PayExecuteBatchTransferRequest::_internal_details_size() const {
  return _internal_details().size();
}
inline int PayExecuteBatchTransferRequest::details_size() const {
  return _internal_details_size();
}
inline void PayExecuteBatchTransferRequest::clear_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.details_.Clear();
}
inline ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail* PayExecuteBatchTransferRequest::mutable_details(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.details)
  return _internal_mutable_details()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail>* PayExecuteBatchTransferRequest::mutable_details()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.wechat.v1.PayExecuteBatchTransferRequest.details)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_details();
}
inline const ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail& PayExecuteBatchTransferRequest::details(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.details)
  return _internal_details().Get(index);
}
inline ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail* PayExecuteBatchTransferRequest::add_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail* _add = _internal_mutable_details()->Add();
  // @@protoc_insertion_point(field_add:palm.wechat.v1.PayExecuteBatchTransferRequest.details)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail>& PayExecuteBatchTransferRequest::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.wechat.v1.PayExecuteBatchTransferRequest.details)
  return _internal_details();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail>&
PayExecuteBatchTransferRequest::_internal_details() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.details_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferRequest_Detail>*
PayExecuteBatchTransferRequest::_internal_mutable_details() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.details_;
}

// string scene_id = 9;
inline void PayExecuteBatchTransferRequest::clear_scene_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scene_id_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferRequest::scene_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferRequest.scene_id)
  return _internal_scene_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferRequest::set_scene_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.scene_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferRequest.scene_id)
}
inline std::string* PayExecuteBatchTransferRequest::mutable_scene_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scene_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferRequest.scene_id)
  return _s;
}
inline const std::string& PayExecuteBatchTransferRequest::_internal_scene_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scene_id_.Get();
}
inline void PayExecuteBatchTransferRequest::_internal_set_scene_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.scene_id_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferRequest::_internal_mutable_scene_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.scene_id_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferRequest::release_scene_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferRequest.scene_id)
  return _impl_.scene_id_.Release();
}
inline void PayExecuteBatchTransferRequest::set_allocated_scene_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scene_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.scene_id_.IsDefault()) {
          _impl_.scene_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferRequest.scene_id)
}

// -------------------------------------------------------------------

// PayExecuteBatchTransferResponse_Detail

// string open_id = 1;
inline void PayExecuteBatchTransferResponse_Detail::clear_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferResponse_Detail::open_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferResponse_Detail::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.open_id)
}
inline std::string* PayExecuteBatchTransferResponse_Detail::mutable_open_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.open_id)
  return _s;
}
inline const std::string& PayExecuteBatchTransferResponse_Detail::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void PayExecuteBatchTransferResponse_Detail::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferResponse_Detail::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferResponse_Detail::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.open_id)
  return _impl_.open_id_.Release();
}
inline void PayExecuteBatchTransferResponse_Detail::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.open_id)
}

// string out_detail_no = 2;
inline void PayExecuteBatchTransferResponse_Detail::clear_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferResponse_Detail::out_detail_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.out_detail_no)
  return _internal_out_detail_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferResponse_Detail::set_out_detail_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.out_detail_no)
}
inline std::string* PayExecuteBatchTransferResponse_Detail::mutable_out_detail_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_detail_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.out_detail_no)
  return _s;
}
inline const std::string& PayExecuteBatchTransferResponse_Detail::_internal_out_detail_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_detail_no_.Get();
}
inline void PayExecuteBatchTransferResponse_Detail::_internal_set_out_detail_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferResponse_Detail::_internal_mutable_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_detail_no_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferResponse_Detail::release_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.out_detail_no)
  return _impl_.out_detail_no_.Release();
}
inline void PayExecuteBatchTransferResponse_Detail::set_allocated_out_detail_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_detail_no_.IsDefault()) {
          _impl_.out_detail_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferResponse.Detail.out_detail_no)
}

// -------------------------------------------------------------------

// PayExecuteBatchTransferResponse_Succeeded

// string batch_id = 1;
inline void PayExecuteBatchTransferResponse_Succeeded::clear_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_id_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferResponse_Succeeded::batch_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.batch_id)
  return _internal_batch_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferResponse_Succeeded::set_batch_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.batch_id)
}
inline std::string* PayExecuteBatchTransferResponse_Succeeded::mutable_batch_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_batch_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.batch_id)
  return _s;
}
inline const std::string& PayExecuteBatchTransferResponse_Succeeded::_internal_batch_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_id_.Get();
}
inline void PayExecuteBatchTransferResponse_Succeeded::_internal_set_batch_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferResponse_Succeeded::_internal_mutable_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_id_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferResponse_Succeeded::release_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.batch_id)
  return _impl_.batch_id_.Release();
}
inline void PayExecuteBatchTransferResponse_Succeeded::set_allocated_batch_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_id_.IsDefault()) {
          _impl_.batch_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.batch_id)
}

// string create_time = 2;
inline void PayExecuteBatchTransferResponse_Succeeded::clear_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.create_time_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferResponse_Succeeded::create_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.create_time)
  return _internal_create_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferResponse_Succeeded::set_create_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.create_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.create_time)
}
inline std::string* PayExecuteBatchTransferResponse_Succeeded::mutable_create_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.create_time)
  return _s;
}
inline const std::string& PayExecuteBatchTransferResponse_Succeeded::_internal_create_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.create_time_.Get();
}
inline void PayExecuteBatchTransferResponse_Succeeded::_internal_set_create_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.create_time_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferResponse_Succeeded::_internal_mutable_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.create_time_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferResponse_Succeeded::release_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.create_time)
  return _impl_.create_time_.Release();
}
inline void PayExecuteBatchTransferResponse_Succeeded::set_allocated_create_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.create_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.create_time_.IsDefault()) {
          _impl_.create_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded.create_time)
}

// -------------------------------------------------------------------

// PayExecuteBatchTransferResponse

// string out_batch_no = 1;
inline void PayExecuteBatchTransferResponse::clear_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.ClearToEmpty();
}
inline const std::string& PayExecuteBatchTransferResponse::out_batch_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferResponse.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayExecuteBatchTransferResponse::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayExecuteBatchTransferResponse.out_batch_no)
}
inline std::string* PayExecuteBatchTransferResponse::mutable_out_batch_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferResponse.out_batch_no)
  return _s;
}
inline const std::string& PayExecuteBatchTransferResponse::_internal_out_batch_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_batch_no_.Get();
}
inline void PayExecuteBatchTransferResponse::_internal_set_out_batch_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(value, GetArena());
}
inline std::string* PayExecuteBatchTransferResponse::_internal_mutable_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_batch_no_.Mutable( GetArena());
}
inline std::string* PayExecuteBatchTransferResponse::release_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferResponse.out_batch_no)
  return _impl_.out_batch_no_.Release();
}
inline void PayExecuteBatchTransferResponse::set_allocated_out_batch_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayExecuteBatchTransferResponse.out_batch_no)
}

// repeated .palm.wechat.v1.PayExecuteBatchTransferResponse.Detail details = 2;
inline int PayExecuteBatchTransferResponse::_internal_details_size() const {
  return _internal_details().size();
}
inline int PayExecuteBatchTransferResponse::details_size() const {
  return _internal_details_size();
}
inline void PayExecuteBatchTransferResponse::clear_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.details_.Clear();
}
inline ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail* PayExecuteBatchTransferResponse::mutable_details(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferResponse.details)
  return _internal_mutable_details()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail>* PayExecuteBatchTransferResponse::mutable_details()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.wechat.v1.PayExecuteBatchTransferResponse.details)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_details();
}
inline const ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail& PayExecuteBatchTransferResponse::details(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferResponse.details)
  return _internal_details().Get(index);
}
inline ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail* PayExecuteBatchTransferResponse::add_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail* _add = _internal_mutable_details()->Add();
  // @@protoc_insertion_point(field_add:palm.wechat.v1.PayExecuteBatchTransferResponse.details)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail>& PayExecuteBatchTransferResponse::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.wechat.v1.PayExecuteBatchTransferResponse.details)
  return _internal_details();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail>&
PayExecuteBatchTransferResponse::_internal_details() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.details_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayExecuteBatchTransferResponse_Detail>*
PayExecuteBatchTransferResponse::_internal_mutable_details() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.details_;
}

// .palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded succeeded = 11;
inline bool PayExecuteBatchTransferResponse::has_succeeded() const {
  return payload_case() == kSucceeded;
}
inline bool PayExecuteBatchTransferResponse::_internal_has_succeeded() const {
  return payload_case() == kSucceeded;
}
inline void PayExecuteBatchTransferResponse::set_has_succeeded() {
  _impl_._oneof_case_[0] = kSucceeded;
}
inline void PayExecuteBatchTransferResponse::clear_succeeded() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kSucceeded) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.succeeded_;
    }
    clear_has_payload();
  }
}
inline ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* PayExecuteBatchTransferResponse::release_succeeded() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferResponse.succeeded)
  if (payload_case() == kSucceeded) {
    clear_has_payload();
    auto* temp = _impl_.payload_.succeeded_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.succeeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded& PayExecuteBatchTransferResponse::_internal_succeeded() const {
  return payload_case() == kSucceeded ? *_impl_.payload_.succeeded_ : reinterpret_cast<::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded&>(::palm::wechat::v1::_PayExecuteBatchTransferResponse_Succeeded_default_instance_);
}
inline const ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded& PayExecuteBatchTransferResponse::succeeded() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferResponse.succeeded)
  return _internal_succeeded();
}
inline ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* PayExecuteBatchTransferResponse::unsafe_arena_release_succeeded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.wechat.v1.PayExecuteBatchTransferResponse.succeeded)
  if (payload_case() == kSucceeded) {
    clear_has_payload();
    auto* temp = _impl_.payload_.succeeded_;
    _impl_.payload_.succeeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PayExecuteBatchTransferResponse::unsafe_arena_set_allocated_succeeded(::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_succeeded();
    _impl_.payload_.succeeded_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.PayExecuteBatchTransferResponse.succeeded)
}
inline ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* PayExecuteBatchTransferResponse::_internal_mutable_succeeded() {
  if (payload_case() != kSucceeded) {
    clear_payload();
    set_has_succeeded();
    _impl_.payload_.succeeded_ = CreateMaybeMessage<::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded>(GetArena());
  }
  return _impl_.payload_.succeeded_;
}
inline ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* PayExecuteBatchTransferResponse::mutable_succeeded() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::PayExecuteBatchTransferResponse_Succeeded* _msg = _internal_mutable_succeeded();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferResponse.succeeded)
  return _msg;
}

// .palm.wechat.v1.PayError error = 12;
inline bool PayExecuteBatchTransferResponse::has_error() const {
  return payload_case() == kError;
}
inline bool PayExecuteBatchTransferResponse::_internal_has_error() const {
  return payload_case() == kError;
}
inline void PayExecuteBatchTransferResponse::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void PayExecuteBatchTransferResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kError) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.error_;
    }
    clear_has_payload();
  }
}
inline ::palm::wechat::v1::PayError* PayExecuteBatchTransferResponse::release_error() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayExecuteBatchTransferResponse.error)
  if (payload_case() == kError) {
    clear_has_payload();
    auto* temp = _impl_.payload_.error_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::wechat::v1::PayError& PayExecuteBatchTransferResponse::_internal_error() const {
  return payload_case() == kError ? *_impl_.payload_.error_ : reinterpret_cast<::palm::wechat::v1::PayError&>(::palm::wechat::v1::_PayError_default_instance_);
}
inline const ::palm::wechat::v1::PayError& PayExecuteBatchTransferResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayExecuteBatchTransferResponse.error)
  return _internal_error();
}
inline ::palm::wechat::v1::PayError* PayExecuteBatchTransferResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.wechat.v1.PayExecuteBatchTransferResponse.error)
  if (payload_case() == kError) {
    clear_has_payload();
    auto* temp = _impl_.payload_.error_;
    _impl_.payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PayExecuteBatchTransferResponse::unsafe_arena_set_allocated_error(::palm::wechat::v1::PayError* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_error();
    _impl_.payload_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.PayExecuteBatchTransferResponse.error)
}
inline ::palm::wechat::v1::PayError* PayExecuteBatchTransferResponse::_internal_mutable_error() {
  if (payload_case() != kError) {
    clear_payload();
    set_has_error();
    _impl_.payload_.error_ = CreateMaybeMessage<::palm::wechat::v1::PayError>(GetArena());
  }
  return _impl_.payload_.error_;
}
inline ::palm::wechat::v1::PayError* PayExecuteBatchTransferResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::PayError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayExecuteBatchTransferResponse.error)
  return _msg;
}

inline bool PayExecuteBatchTransferResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void PayExecuteBatchTransferResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline PayExecuteBatchTransferResponse::PayloadCase PayExecuteBatchTransferResponse::payload_case() const {
  return PayExecuteBatchTransferResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PayQueryBatchTransferRequest

// string out_batch_no = 1;
inline void PayQueryBatchTransferRequest::clear_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferRequest::out_batch_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferRequest.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferRequest::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferRequest.out_batch_no)
}
inline std::string* PayQueryBatchTransferRequest::mutable_out_batch_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferRequest.out_batch_no)
  return _s;
}
inline const std::string& PayQueryBatchTransferRequest::_internal_out_batch_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_batch_no_.Get();
}
inline void PayQueryBatchTransferRequest::_internal_set_out_batch_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferRequest::_internal_mutable_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_batch_no_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferRequest::release_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferRequest.out_batch_no)
  return _impl_.out_batch_no_.Release();
}
inline void PayQueryBatchTransferRequest::set_allocated_out_batch_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferRequest.out_batch_no)
}

// int32 offset = 2;
inline void PayQueryBatchTransferRequest::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = 0;
}
inline ::int32_t PayQueryBatchTransferRequest::offset() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferRequest.offset)
  return _internal_offset();
}
inline void PayQueryBatchTransferRequest::set_offset(::int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferRequest.offset)
}
inline ::int32_t PayQueryBatchTransferRequest::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void PayQueryBatchTransferRequest::_internal_set_offset(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// int32 limit = 3;
inline void PayQueryBatchTransferRequest::clear_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.limit_ = 0;
}
inline ::int32_t PayQueryBatchTransferRequest::limit() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferRequest.limit)
  return _internal_limit();
}
inline void PayQueryBatchTransferRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferRequest.limit)
}
inline ::int32_t PayQueryBatchTransferRequest::_internal_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.limit_;
}
inline void PayQueryBatchTransferRequest::_internal_set_limit(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.limit_ = value;
}

// .palm.wechat.v1.PayQueryBatchTransferRequest.DetailStatus detail_status = 9;
inline void PayQueryBatchTransferRequest::clear_detail_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detail_status_ = 0;
}
inline ::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus PayQueryBatchTransferRequest::detail_status() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferRequest.detail_status)
  return _internal_detail_status();
}
inline void PayQueryBatchTransferRequest::set_detail_status(::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus value) {
  _internal_set_detail_status(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferRequest.detail_status)
}
inline ::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus PayQueryBatchTransferRequest::_internal_detail_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus>(_impl_.detail_status_);
}
inline void PayQueryBatchTransferRequest::_internal_set_detail_status(::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detail_status_ = value;
}

// -------------------------------------------------------------------

// PayQueryBatchTransferResponse_Detail

// string detail_id = 1;
inline void PayQueryBatchTransferResponse_Detail::clear_detail_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detail_id_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Detail::detail_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.detail_id)
  return _internal_detail_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Detail::set_detail_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detail_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.detail_id)
}
inline std::string* PayQueryBatchTransferResponse_Detail::mutable_detail_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_detail_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.detail_id)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Detail::_internal_detail_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.detail_id_.Get();
}
inline void PayQueryBatchTransferResponse_Detail::_internal_set_detail_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detail_id_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Detail::_internal_mutable_detail_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.detail_id_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Detail::release_detail_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.detail_id)
  return _impl_.detail_id_.Release();
}
inline void PayQueryBatchTransferResponse_Detail::set_allocated_detail_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detail_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.detail_id_.IsDefault()) {
          _impl_.detail_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.detail_id)
}

// string out_detail_no = 2;
inline void PayQueryBatchTransferResponse_Detail::clear_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Detail::out_detail_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.out_detail_no)
  return _internal_out_detail_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Detail::set_out_detail_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.out_detail_no)
}
inline std::string* PayQueryBatchTransferResponse_Detail::mutable_out_detail_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_detail_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.out_detail_no)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Detail::_internal_out_detail_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_detail_no_.Get();
}
inline void PayQueryBatchTransferResponse_Detail::_internal_set_out_detail_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Detail::_internal_mutable_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_detail_no_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Detail::release_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.out_detail_no)
  return _impl_.out_detail_no_.Release();
}
inline void PayQueryBatchTransferResponse_Detail::set_allocated_out_detail_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_detail_no_.IsDefault()) {
          _impl_.out_detail_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.out_detail_no)
}

// string status = 3;
inline void PayQueryBatchTransferResponse_Detail::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Detail::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Detail::set_status(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.status)
}
inline std::string* PayQueryBatchTransferResponse_Detail::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.status)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Detail::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_.Get();
}
inline void PayQueryBatchTransferResponse_Detail::_internal_set_status(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Detail::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Detail::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.status)
  return _impl_.status_.Release();
}
inline void PayQueryBatchTransferResponse_Detail::set_allocated_status(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Detail.status)
}

// -------------------------------------------------------------------

// PayQueryBatchTransferResponse_Batch

// string app_id = 1;
inline void PayQueryBatchTransferResponse_Batch::clear_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Batch::app_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.app_id)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_app_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.app_id)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.app_id)
  return _impl_.app_id_.Release();
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.app_id)
}

// string mch_id = 2;
inline void PayQueryBatchTransferResponse_Batch::clear_mch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mch_id_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Batch::mch_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.mch_id)
  return _internal_mch_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_mch_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mch_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.mch_id)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_mch_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mch_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.mch_id)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_mch_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mch_id_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_mch_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mch_id_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_mch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.mch_id_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_mch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.mch_id)
  return _impl_.mch_id_.Release();
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_mch_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mch_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mch_id_.IsDefault()) {
          _impl_.mch_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.mch_id)
}

// string transfer_scene_id = 9;
inline void PayQueryBatchTransferResponse_Batch::clear_transfer_scene_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transfer_scene_id_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Batch::transfer_scene_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.transfer_scene_id)
  return _internal_transfer_scene_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_transfer_scene_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transfer_scene_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.transfer_scene_id)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_transfer_scene_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transfer_scene_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.transfer_scene_id)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_transfer_scene_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transfer_scene_id_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_transfer_scene_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transfer_scene_id_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_transfer_scene_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.transfer_scene_id_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_transfer_scene_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.transfer_scene_id)
  return _impl_.transfer_scene_id_.Release();
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_transfer_scene_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transfer_scene_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transfer_scene_id_.IsDefault()) {
          _impl_.transfer_scene_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.transfer_scene_id)
}

// string batch_id = 11;
inline void PayQueryBatchTransferResponse_Batch::clear_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_id_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Batch::batch_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_id)
  return _internal_batch_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_batch_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_id)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_batch_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_batch_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_id)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_batch_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_id_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_batch_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_id_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_id)
  return _impl_.batch_id_.Release();
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_batch_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_id_.IsDefault()) {
          _impl_.batch_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_id)
}

// string out_batch_no = 12;
inline void PayQueryBatchTransferResponse_Batch::clear_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Batch::out_batch_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.out_batch_no)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_out_batch_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.out_batch_no)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_out_batch_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_batch_no_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_out_batch_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_batch_no_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.out_batch_no)
  return _impl_.out_batch_no_.Release();
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_out_batch_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.out_batch_no)
}

// string batch_status = 13;
inline void PayQueryBatchTransferResponse_Batch::clear_batch_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_status_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Batch::batch_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_status)
  return _internal_batch_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_batch_status(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_status)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_batch_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_batch_status();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_status)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_batch_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_status_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_batch_status(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_status_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_batch_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_status_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_batch_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_status)
  return _impl_.batch_status_.Release();
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_batch_status(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_status_.IsDefault()) {
          _impl_.batch_status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_status)
}

// string batch_type = 14;
inline void PayQueryBatchTransferResponse_Batch::clear_batch_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_type_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Batch::batch_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_type)
  return _internal_batch_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_batch_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_type)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_batch_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_batch_type();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_type)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_batch_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_type_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_batch_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_type_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_batch_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_type_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_batch_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_type)
  return _impl_.batch_type_.Release();
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_batch_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_type_.IsDefault()) {
          _impl_.batch_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_type)
}

// string batch_name = 15;
inline void PayQueryBatchTransferResponse_Batch::clear_batch_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_name_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Batch::batch_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_name)
  return _internal_batch_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_batch_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_name)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_batch_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_batch_name();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_name)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_batch_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_name_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_batch_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_name_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_batch_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_name_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_batch_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_name)
  return _impl_.batch_name_.Release();
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_batch_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_name_.IsDefault()) {
          _impl_.batch_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_name)
}

// string batch_remark = 16;
inline void PayQueryBatchTransferResponse_Batch::clear_batch_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_remark_.ClearToEmpty();
}
inline const std::string& PayQueryBatchTransferResponse_Batch::batch_remark() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_remark)
  return _internal_batch_remark();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_batch_remark(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_remark_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_remark)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_batch_remark() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_batch_remark();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_remark)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_batch_remark() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_remark_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_batch_remark(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_remark_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_batch_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_remark_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_batch_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_remark)
  return _impl_.batch_remark_.Release();
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_batch_remark(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_remark_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_remark_.IsDefault()) {
          _impl_.batch_remark_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.batch_remark)
}

// optional string close_reason = 21;
inline bool PayQueryBatchTransferResponse_Batch::has_close_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PayQueryBatchTransferResponse_Batch::clear_close_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.close_reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::close_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.close_reason)
  return _internal_close_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_close_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.close_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.close_reason)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_close_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_close_reason();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.close_reason)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_close_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.close_reason_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_close_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.close_reason_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_close_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.close_reason_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_close_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.close_reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.close_reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.close_reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_close_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.close_reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.close_reason_.IsDefault()) {
          _impl_.close_reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.close_reason)
}

// int64 total_amount = 22;
inline void PayQueryBatchTransferResponse_Batch::clear_total_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_amount_ = ::int64_t{0};
}
inline ::int64_t PayQueryBatchTransferResponse_Batch::total_amount() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.total_amount)
  return _internal_total_amount();
}
inline void PayQueryBatchTransferResponse_Batch::set_total_amount(::int64_t value) {
  _internal_set_total_amount(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.total_amount)
}
inline ::int64_t PayQueryBatchTransferResponse_Batch::_internal_total_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_amount_;
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_total_amount(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_amount_ = value;
}

// int32 total_num = 23;
inline void PayQueryBatchTransferResponse_Batch::clear_total_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_num_ = 0;
}
inline ::int32_t PayQueryBatchTransferResponse_Batch::total_num() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.total_num)
  return _internal_total_num();
}
inline void PayQueryBatchTransferResponse_Batch::set_total_num(::int32_t value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.total_num)
}
inline ::int32_t PayQueryBatchTransferResponse_Batch::_internal_total_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_num_;
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_total_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_num_ = value;
}

// optional string create_time = 24;
inline bool PayQueryBatchTransferResponse_Batch::has_create_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PayQueryBatchTransferResponse_Batch::clear_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.create_time_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::create_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.create_time)
  return _internal_create_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_create_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.create_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.create_time)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_create_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.create_time)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_create_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.create_time_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_create_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.create_time_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.create_time_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.create_time)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.create_time_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.create_time_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_create_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.create_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.create_time_.IsDefault()) {
          _impl_.create_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.create_time)
}

// optional string update_time = 25;
inline bool PayQueryBatchTransferResponse_Batch::has_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PayQueryBatchTransferResponse_Batch::clear_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.update_time_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::update_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.update_time)
  return _internal_update_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryBatchTransferResponse_Batch::set_update_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.update_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.update_time)
}
inline std::string* PayQueryBatchTransferResponse_Batch::mutable_update_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.update_time)
  return _s;
}
inline const std::string& PayQueryBatchTransferResponse_Batch::_internal_update_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.update_time_.Get();
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_update_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.update_time_.Set(value, GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::_internal_mutable_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.update_time_.Mutable( GetArena());
}
inline std::string* PayQueryBatchTransferResponse_Batch::release_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.update_time)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.update_time_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.update_time_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PayQueryBatchTransferResponse_Batch::set_allocated_update_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.update_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.update_time_.IsDefault()) {
          _impl_.update_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.update_time)
}

// optional int64 success_amount = 26;
inline bool PayQueryBatchTransferResponse_Batch::has_success_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PayQueryBatchTransferResponse_Batch::clear_success_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_amount_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t PayQueryBatchTransferResponse_Batch::success_amount() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.success_amount)
  return _internal_success_amount();
}
inline void PayQueryBatchTransferResponse_Batch::set_success_amount(::int64_t value) {
  _internal_set_success_amount(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.success_amount)
}
inline ::int64_t PayQueryBatchTransferResponse_Batch::_internal_success_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_amount_;
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_success_amount(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.success_amount_ = value;
}

// optional int32 success_num = 27;
inline bool PayQueryBatchTransferResponse_Batch::has_success_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PayQueryBatchTransferResponse_Batch::clear_success_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t PayQueryBatchTransferResponse_Batch::success_num() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.success_num)
  return _internal_success_num();
}
inline void PayQueryBatchTransferResponse_Batch::set_success_num(::int32_t value) {
  _internal_set_success_num(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.success_num)
}
inline ::int32_t PayQueryBatchTransferResponse_Batch::_internal_success_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_num_;
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_success_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.success_num_ = value;
}

// optional int64 fail_amount = 28;
inline bool PayQueryBatchTransferResponse_Batch::has_fail_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PayQueryBatchTransferResponse_Batch::clear_fail_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fail_amount_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t PayQueryBatchTransferResponse_Batch::fail_amount() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.fail_amount)
  return _internal_fail_amount();
}
inline void PayQueryBatchTransferResponse_Batch::set_fail_amount(::int64_t value) {
  _internal_set_fail_amount(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.fail_amount)
}
inline ::int64_t PayQueryBatchTransferResponse_Batch::_internal_fail_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fail_amount_;
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_fail_amount(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.fail_amount_ = value;
}

// optional int32 fail_num = 29;
inline bool PayQueryBatchTransferResponse_Batch::has_fail_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PayQueryBatchTransferResponse_Batch::clear_fail_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fail_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t PayQueryBatchTransferResponse_Batch::fail_num() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.fail_num)
  return _internal_fail_num();
}
inline void PayQueryBatchTransferResponse_Batch::set_fail_num(::int32_t value) {
  _internal_set_fail_num(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryBatchTransferResponse.Batch.fail_num)
}
inline ::int32_t PayQueryBatchTransferResponse_Batch::_internal_fail_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fail_num_;
}
inline void PayQueryBatchTransferResponse_Batch::_internal_set_fail_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.fail_num_ = value;
}

// -------------------------------------------------------------------

// PayQueryBatchTransferResponse

// .palm.wechat.v1.PayQueryBatchTransferResponse.Batch batch = 1;
inline bool PayQueryBatchTransferResponse::has_batch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.batch_ != nullptr);
  return value;
}
inline void PayQueryBatchTransferResponse::clear_batch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.batch_ != nullptr) _impl_.batch_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch& PayQueryBatchTransferResponse::_internal_batch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* p = _impl_.batch_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch&>(::palm::wechat::v1::_PayQueryBatchTransferResponse_Batch_default_instance_);
}
inline const ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch& PayQueryBatchTransferResponse::batch() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.batch)
  return _internal_batch();
}
inline void PayQueryBatchTransferResponse::unsafe_arena_set_allocated_batch(::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.batch_);
  }
  _impl_.batch_ = reinterpret_cast<::palm::wechat::v1::PayQueryBatchTransferResponse_Batch*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.batch)
}
inline ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* PayQueryBatchTransferResponse::release_batch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* released = _impl_.batch_;
  _impl_.batch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* PayQueryBatchTransferResponse::unsafe_arena_release_batch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryBatchTransferResponse.batch)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* temp = _impl_.batch_;
  _impl_.batch_ = nullptr;
  return temp;
}
inline ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* PayQueryBatchTransferResponse::_internal_mutable_batch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.batch_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::wechat::v1::PayQueryBatchTransferResponse_Batch>(GetArena());
    _impl_.batch_ = reinterpret_cast<::palm::wechat::v1::PayQueryBatchTransferResponse_Batch*>(p);
  }
  return _impl_.batch_;
}
inline ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* PayQueryBatchTransferResponse::mutable_batch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* _msg = _internal_mutable_batch();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.batch)
  return _msg;
}
inline void PayQueryBatchTransferResponse::set_allocated_batch(::palm::wechat::v1::PayQueryBatchTransferResponse_Batch* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::wechat::v1::PayQueryBatchTransferResponse_Batch*>(_impl_.batch_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::wechat::v1::PayQueryBatchTransferResponse_Batch*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.batch_ = reinterpret_cast<::palm::wechat::v1::PayQueryBatchTransferResponse_Batch*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryBatchTransferResponse.batch)
}

// repeated .palm.wechat.v1.PayQueryBatchTransferResponse.Detail details = 9;
inline int PayQueryBatchTransferResponse::_internal_details_size() const {
  return _internal_details().size();
}
inline int PayQueryBatchTransferResponse::details_size() const {
  return _internal_details_size();
}
inline void PayQueryBatchTransferResponse::clear_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.details_.Clear();
}
inline ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail* PayQueryBatchTransferResponse::mutable_details(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryBatchTransferResponse.details)
  return _internal_mutable_details()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayQueryBatchTransferResponse_Detail>* PayQueryBatchTransferResponse::mutable_details()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.wechat.v1.PayQueryBatchTransferResponse.details)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_details();
}
inline const ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail& PayQueryBatchTransferResponse::details(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryBatchTransferResponse.details)
  return _internal_details().Get(index);
}
inline ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail* PayQueryBatchTransferResponse::add_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::wechat::v1::PayQueryBatchTransferResponse_Detail* _add = _internal_mutable_details()->Add();
  // @@protoc_insertion_point(field_add:palm.wechat.v1.PayQueryBatchTransferResponse.details)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayQueryBatchTransferResponse_Detail>& PayQueryBatchTransferResponse::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.wechat.v1.PayQueryBatchTransferResponse.details)
  return _internal_details();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayQueryBatchTransferResponse_Detail>&
PayQueryBatchTransferResponse::_internal_details() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.details_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::wechat::v1::PayQueryBatchTransferResponse_Detail>*
PayQueryBatchTransferResponse::_internal_mutable_details() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.details_;
}

// -------------------------------------------------------------------

// PayQueryTransferDetailRequest

// string out_batch_no = 1;
inline void PayQueryTransferDetailRequest::clear_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailRequest::out_batch_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailRequest.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailRequest::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailRequest.out_batch_no)
}
inline std::string* PayQueryTransferDetailRequest::mutable_out_batch_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailRequest.out_batch_no)
  return _s;
}
inline const std::string& PayQueryTransferDetailRequest::_internal_out_batch_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_batch_no_.Get();
}
inline void PayQueryTransferDetailRequest::_internal_set_out_batch_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailRequest::_internal_mutable_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_batch_no_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailRequest::release_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailRequest.out_batch_no)
  return _impl_.out_batch_no_.Release();
}
inline void PayQueryTransferDetailRequest::set_allocated_out_batch_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailRequest.out_batch_no)
}

// string out_detail_no = 2;
inline void PayQueryTransferDetailRequest::clear_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailRequest::out_detail_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailRequest.out_detail_no)
  return _internal_out_detail_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailRequest::set_out_detail_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailRequest.out_detail_no)
}
inline std::string* PayQueryTransferDetailRequest::mutable_out_detail_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_detail_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailRequest.out_detail_no)
  return _s;
}
inline const std::string& PayQueryTransferDetailRequest::_internal_out_detail_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_detail_no_.Get();
}
inline void PayQueryTransferDetailRequest::_internal_set_out_detail_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailRequest::_internal_mutable_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_detail_no_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailRequest::release_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailRequest.out_detail_no)
  return _impl_.out_detail_no_.Release();
}
inline void PayQueryTransferDetailRequest::set_allocated_out_detail_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_detail_no_.IsDefault()) {
          _impl_.out_detail_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailRequest.out_detail_no)
}

// -------------------------------------------------------------------

// PayQueryTransferDetailResponse

// string app_id = 1;
inline void PayQueryTransferDetailResponse::clear_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::app_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.app_id)
}
inline std::string* PayQueryTransferDetailResponse::mutable_app_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.app_id)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.app_id)
  return _impl_.app_id_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.app_id)
}

// string mch_id = 2;
inline void PayQueryTransferDetailResponse::clear_mch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mch_id_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::mch_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.mch_id)
  return _internal_mch_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_mch_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mch_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.mch_id)
}
inline std::string* PayQueryTransferDetailResponse::mutable_mch_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mch_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.mch_id)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_mch_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mch_id_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_mch_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mch_id_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_mch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.mch_id_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_mch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.mch_id)
  return _impl_.mch_id_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_mch_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mch_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mch_id_.IsDefault()) {
          _impl_.mch_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.mch_id)
}

// string open_id = 3;
inline void PayQueryTransferDetailResponse::clear_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::open_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.open_id)
}
inline std::string* PayQueryTransferDetailResponse::mutable_open_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.open_id)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.open_id)
  return _impl_.open_id_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.open_id)
}

// optional string user_name = 4;
inline bool PayQueryTransferDetailResponse::has_user_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PayQueryTransferDetailResponse::clear_user_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PayQueryTransferDetailResponse::user_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.user_name)
}
inline std::string* PayQueryTransferDetailResponse::mutable_user_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.user_name)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_user_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_name_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_user_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_name_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_user_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_name_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_user_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.user_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.user_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PayQueryTransferDetailResponse::set_allocated_user_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_name_.IsDefault()) {
          _impl_.user_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.user_name)
}

// string batch_id = 11;
inline void PayQueryTransferDetailResponse::clear_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_id_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::batch_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.batch_id)
  return _internal_batch_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_batch_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.batch_id)
}
inline std::string* PayQueryTransferDetailResponse::mutable_batch_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_batch_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.batch_id)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_batch_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_id_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_batch_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.batch_id_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.batch_id)
  return _impl_.batch_id_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_batch_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_id_.IsDefault()) {
          _impl_.batch_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.batch_id)
}

// string out_batch_no = 12;
inline void PayQueryTransferDetailResponse::clear_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::out_batch_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.out_batch_no)
}
inline std::string* PayQueryTransferDetailResponse::mutable_out_batch_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.out_batch_no)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_out_batch_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_batch_no_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_out_batch_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_batch_no_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_batch_no_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_out_batch_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.out_batch_no)
  return _impl_.out_batch_no_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_out_batch_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_batch_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.out_batch_no)
}

// string out_detail_no = 13;
inline void PayQueryTransferDetailResponse::clear_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::out_detail_no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.out_detail_no)
  return _internal_out_detail_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_out_detail_no(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.out_detail_no)
}
inline std::string* PayQueryTransferDetailResponse::mutable_out_detail_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_out_detail_no();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.out_detail_no)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_out_detail_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_detail_no_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_out_detail_no(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_detail_no_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.out_detail_no_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_out_detail_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.out_detail_no)
  return _impl_.out_detail_no_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_out_detail_no(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_detail_no_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_detail_no_.IsDefault()) {
          _impl_.out_detail_no_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.out_detail_no)
}

// string detail_id = 14;
inline void PayQueryTransferDetailResponse::clear_detail_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detail_id_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::detail_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.detail_id)
  return _internal_detail_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_detail_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detail_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.detail_id)
}
inline std::string* PayQueryTransferDetailResponse::mutable_detail_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_detail_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.detail_id)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_detail_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.detail_id_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_detail_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detail_id_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_detail_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.detail_id_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_detail_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.detail_id)
  return _impl_.detail_id_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_detail_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detail_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.detail_id_.IsDefault()) {
          _impl_.detail_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.detail_id)
}

// string detail_status = 15;
inline void PayQueryTransferDetailResponse::clear_detail_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detail_status_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::detail_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.detail_status)
  return _internal_detail_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_detail_status(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detail_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.detail_status)
}
inline std::string* PayQueryTransferDetailResponse::mutable_detail_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_detail_status();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.detail_status)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_detail_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.detail_status_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_detail_status(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detail_status_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_detail_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.detail_status_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_detail_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.detail_status)
  return _impl_.detail_status_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_detail_status(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detail_status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.detail_status_.IsDefault()) {
          _impl_.detail_status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.detail_status)
}

// int64 transfer_amount = 16;
inline void PayQueryTransferDetailResponse::clear_transfer_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transfer_amount_ = ::int64_t{0};
}
inline ::int64_t PayQueryTransferDetailResponse::transfer_amount() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.transfer_amount)
  return _internal_transfer_amount();
}
inline void PayQueryTransferDetailResponse::set_transfer_amount(::int64_t value) {
  _internal_set_transfer_amount(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.transfer_amount)
}
inline ::int64_t PayQueryTransferDetailResponse::_internal_transfer_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transfer_amount_;
}
inline void PayQueryTransferDetailResponse::_internal_set_transfer_amount(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transfer_amount_ = value;
}

// string transfer_remark = 17;
inline void PayQueryTransferDetailResponse::clear_transfer_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transfer_remark_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::transfer_remark() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.transfer_remark)
  return _internal_transfer_remark();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_transfer_remark(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transfer_remark_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.transfer_remark)
}
inline std::string* PayQueryTransferDetailResponse::mutable_transfer_remark() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transfer_remark();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.transfer_remark)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_transfer_remark() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transfer_remark_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_transfer_remark(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transfer_remark_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_transfer_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.transfer_remark_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_transfer_remark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.transfer_remark)
  return _impl_.transfer_remark_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_transfer_remark(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transfer_remark_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transfer_remark_.IsDefault()) {
          _impl_.transfer_remark_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.transfer_remark)
}

// optional string fail_reason = 18;
inline bool PayQueryTransferDetailResponse::has_fail_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PayQueryTransferDetailResponse::clear_fail_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fail_reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PayQueryTransferDetailResponse::fail_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.fail_reason)
  return _internal_fail_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_fail_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fail_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.fail_reason)
}
inline std::string* PayQueryTransferDetailResponse::mutable_fail_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fail_reason();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.fail_reason)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_fail_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fail_reason_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_fail_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fail_reason_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_fail_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.fail_reason_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_fail_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.fail_reason)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.fail_reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fail_reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PayQueryTransferDetailResponse::set_allocated_fail_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.fail_reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fail_reason_.IsDefault()) {
          _impl_.fail_reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.fail_reason)
}

// string initiate_time = 19;
inline void PayQueryTransferDetailResponse::clear_initiate_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.initiate_time_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::initiate_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.initiate_time)
  return _internal_initiate_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_initiate_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.initiate_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.initiate_time)
}
inline std::string* PayQueryTransferDetailResponse::mutable_initiate_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_initiate_time();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.initiate_time)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_initiate_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.initiate_time_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_initiate_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.initiate_time_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_initiate_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.initiate_time_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_initiate_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.initiate_time)
  return _impl_.initiate_time_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_initiate_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.initiate_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.initiate_time_.IsDefault()) {
          _impl_.initiate_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.initiate_time)
}

// string update_time = 20;
inline void PayQueryTransferDetailResponse::clear_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.update_time_.ClearToEmpty();
}
inline const std::string& PayQueryTransferDetailResponse::update_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.PayQueryTransferDetailResponse.update_time)
  return _internal_update_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayQueryTransferDetailResponse::set_update_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.update_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.PayQueryTransferDetailResponse.update_time)
}
inline std::string* PayQueryTransferDetailResponse::mutable_update_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.PayQueryTransferDetailResponse.update_time)
  return _s;
}
inline const std::string& PayQueryTransferDetailResponse::_internal_update_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.update_time_.Get();
}
inline void PayQueryTransferDetailResponse::_internal_set_update_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.update_time_.Set(value, GetArena());
}
inline std::string* PayQueryTransferDetailResponse::_internal_mutable_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.update_time_.Mutable( GetArena());
}
inline std::string* PayQueryTransferDetailResponse::release_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.wechat.v1.PayQueryTransferDetailResponse.update_time)
  return _impl_.update_time_.Release();
}
inline void PayQueryTransferDetailResponse::set_allocated_update_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.update_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.update_time_.IsDefault()) {
          _impl_.update_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.PayQueryTransferDetailResponse.update_time)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wechat
}  // namespace palm


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::palm::wechat::v1::PayTradeBillRequest_BillType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::wechat::v1::PayTradeBillRequest_BillType>() {
  return ::palm::wechat::v1::PayTradeBillRequest_BillType_descriptor();
}
template <>
struct is_proto_enum<::palm::wechat::v1::PayFundFlowBillRequest_AccountType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::wechat::v1::PayFundFlowBillRequest_AccountType>() {
  return ::palm::wechat::v1::PayFundFlowBillRequest_AccountType_descriptor();
}
template <>
struct is_proto_enum<::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType>() {
  return ::palm::wechat::v1::PayTransferGetElectronicReceiptRequest_AcceptType_descriptor();
}
template <>
struct is_proto_enum<::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus>() {
  return ::palm::wechat::v1::PayQueryBatchTransferRequest_DetailStatus_descriptor();
}
template <>
struct is_proto_enum<::palm::wechat::v1::PayCurrency> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::wechat::v1::PayCurrency>() {
  return ::palm::wechat::v1::PayCurrency_descriptor();
}
template <>
struct is_proto_enum<::palm::wechat::v1::PayNotifyAction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::wechat::v1::PayNotifyAction>() {
  return ::palm::wechat::v1::PayNotifyAction_descriptor();
}
template <>
struct is_proto_enum<::palm::wechat::v1::PayTarType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::wechat::v1::PayTarType>() {
  return ::palm::wechat::v1::PayTarType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh
