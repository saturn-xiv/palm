// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wechat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "balsam.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wechat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wechat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wechat_2eproto;
namespace palm {
namespace wechat {
namespace v1 {
class MiniProgramCode2SessionRequest;
struct MiniProgramCode2SessionRequestDefaultTypeInternal;
extern MiniProgramCode2SessionRequestDefaultTypeInternal _MiniProgramCode2SessionRequest_default_instance_;
class MiniProgramCode2SessionResponse;
struct MiniProgramCode2SessionResponseDefaultTypeInternal;
extern MiniProgramCode2SessionResponseDefaultTypeInternal _MiniProgramCode2SessionResponse_default_instance_;
class Oauth2QrConnectUrlRequest;
struct Oauth2QrConnectUrlRequestDefaultTypeInternal;
extern Oauth2QrConnectUrlRequestDefaultTypeInternal _Oauth2QrConnectUrlRequest_default_instance_;
class Oauth2QrConnectUrlResponse;
struct Oauth2QrConnectUrlResponseDefaultTypeInternal;
extern Oauth2QrConnectUrlResponseDefaultTypeInternal _Oauth2QrConnectUrlResponse_default_instance_;
class Oauth2SignInRequest;
struct Oauth2SignInRequestDefaultTypeInternal;
extern Oauth2SignInRequestDefaultTypeInternal _Oauth2SignInRequest_default_instance_;
class Oauth2SignInResponse;
struct Oauth2SignInResponseDefaultTypeInternal;
extern Oauth2SignInResponseDefaultTypeInternal _Oauth2SignInResponse_default_instance_;
class Oauth2SignInResponse_UserInfo;
struct Oauth2SignInResponse_UserInfoDefaultTypeInternal;
extern Oauth2SignInResponse_UserInfoDefaultTypeInternal _Oauth2SignInResponse_UserInfo_default_instance_;
}  // namespace v1
}  // namespace wechat
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::wechat::v1::MiniProgramCode2SessionRequest* Arena::CreateMaybeMessage<::palm::wechat::v1::MiniProgramCode2SessionRequest>(Arena*);
template<> ::palm::wechat::v1::MiniProgramCode2SessionResponse* Arena::CreateMaybeMessage<::palm::wechat::v1::MiniProgramCode2SessionResponse>(Arena*);
template<> ::palm::wechat::v1::Oauth2QrConnectUrlRequest* Arena::CreateMaybeMessage<::palm::wechat::v1::Oauth2QrConnectUrlRequest>(Arena*);
template<> ::palm::wechat::v1::Oauth2QrConnectUrlResponse* Arena::CreateMaybeMessage<::palm::wechat::v1::Oauth2QrConnectUrlResponse>(Arena*);
template<> ::palm::wechat::v1::Oauth2SignInRequest* Arena::CreateMaybeMessage<::palm::wechat::v1::Oauth2SignInRequest>(Arena*);
template<> ::palm::wechat::v1::Oauth2SignInResponse* Arena::CreateMaybeMessage<::palm::wechat::v1::Oauth2SignInResponse>(Arena*);
template<> ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Arena::CreateMaybeMessage<::palm::wechat::v1::Oauth2SignInResponse_UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace wechat {
namespace v1 {

// ===================================================================

class Oauth2QrConnectUrlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2QrConnectUrlRequest) */ {
 public:
  inline Oauth2QrConnectUrlRequest() : Oauth2QrConnectUrlRequest(nullptr) {}
  ~Oauth2QrConnectUrlRequest() override;
  explicit PROTOBUF_CONSTEXPR Oauth2QrConnectUrlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2QrConnectUrlRequest(const Oauth2QrConnectUrlRequest& from);
  Oauth2QrConnectUrlRequest(Oauth2QrConnectUrlRequest&& from) noexcept
    : Oauth2QrConnectUrlRequest() {
    *this = ::std::move(from);
  }

  inline Oauth2QrConnectUrlRequest& operator=(const Oauth2QrConnectUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2QrConnectUrlRequest& operator=(Oauth2QrConnectUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2QrConnectUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2QrConnectUrlRequest* internal_default_instance() {
    return reinterpret_cast<const Oauth2QrConnectUrlRequest*>(
               &_Oauth2QrConnectUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Oauth2QrConnectUrlRequest& a, Oauth2QrConnectUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2QrConnectUrlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2QrConnectUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2QrConnectUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2QrConnectUrlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2QrConnectUrlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2QrConnectUrlRequest& from) {
    Oauth2QrConnectUrlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2QrConnectUrlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.wechat.v1.Oauth2QrConnectUrlRequest";
  }
  protected:
  explicit Oauth2QrConnectUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 1,
    kLangFieldNumber = 9,
  };
  // optional string subject = 1;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 9;
  void clear_lang();
  ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang lang() const;
  void set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value);
  private:
  ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang _internal_lang() const;
  void _internal_set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value);
  public:

  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2QrConnectUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    int lang_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};
// -------------------------------------------------------------------

class Oauth2QrConnectUrlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2QrConnectUrlResponse) */ {
 public:
  inline Oauth2QrConnectUrlResponse() : Oauth2QrConnectUrlResponse(nullptr) {}
  ~Oauth2QrConnectUrlResponse() override;
  explicit PROTOBUF_CONSTEXPR Oauth2QrConnectUrlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2QrConnectUrlResponse(const Oauth2QrConnectUrlResponse& from);
  Oauth2QrConnectUrlResponse(Oauth2QrConnectUrlResponse&& from) noexcept
    : Oauth2QrConnectUrlResponse() {
    *this = ::std::move(from);
  }

  inline Oauth2QrConnectUrlResponse& operator=(const Oauth2QrConnectUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2QrConnectUrlResponse& operator=(Oauth2QrConnectUrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2QrConnectUrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2QrConnectUrlResponse* internal_default_instance() {
    return reinterpret_cast<const Oauth2QrConnectUrlResponse*>(
               &_Oauth2QrConnectUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Oauth2QrConnectUrlResponse& a, Oauth2QrConnectUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2QrConnectUrlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2QrConnectUrlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2QrConnectUrlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2QrConnectUrlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2QrConnectUrlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2QrConnectUrlResponse& from) {
    Oauth2QrConnectUrlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2QrConnectUrlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.wechat.v1.Oauth2QrConnectUrlResponse";
  }
  protected:
  explicit Oauth2QrConnectUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2QrConnectUrlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};
// -------------------------------------------------------------------

class Oauth2SignInRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2SignInRequest) */ {
 public:
  inline Oauth2SignInRequest() : Oauth2SignInRequest(nullptr) {}
  ~Oauth2SignInRequest() override;
  explicit PROTOBUF_CONSTEXPR Oauth2SignInRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2SignInRequest(const Oauth2SignInRequest& from);
  Oauth2SignInRequest(Oauth2SignInRequest&& from) noexcept
    : Oauth2SignInRequest() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInRequest& operator=(const Oauth2SignInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInRequest& operator=(Oauth2SignInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInRequest* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInRequest*>(
               &_Oauth2SignInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Oauth2SignInRequest& a, Oauth2SignInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInRequest& from) {
    Oauth2SignInRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2SignInRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.wechat.v1.Oauth2SignInRequest";
  }
  protected:
  explicit Oauth2SignInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kStateFieldNumber = 2,
    kLangFieldNumber = 9,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string state = 2;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 9;
  void clear_lang();
  ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang lang() const;
  void set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value);
  private:
  ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang _internal_lang() const;
  void _internal_set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value);
  public:

  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2SignInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    int lang_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};
// -------------------------------------------------------------------

class Oauth2SignInResponse_UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2SignInResponse.UserInfo) */ {
 public:
  inline Oauth2SignInResponse_UserInfo() : Oauth2SignInResponse_UserInfo(nullptr) {}
  ~Oauth2SignInResponse_UserInfo() override;
  explicit PROTOBUF_CONSTEXPR Oauth2SignInResponse_UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2SignInResponse_UserInfo(const Oauth2SignInResponse_UserInfo& from);
  Oauth2SignInResponse_UserInfo(Oauth2SignInResponse_UserInfo&& from) noexcept
    : Oauth2SignInResponse_UserInfo() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInResponse_UserInfo& operator=(const Oauth2SignInResponse_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInResponse_UserInfo& operator=(Oauth2SignInResponse_UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInResponse_UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInResponse_UserInfo* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInResponse_UserInfo*>(
               &_Oauth2SignInResponse_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Oauth2SignInResponse_UserInfo& a, Oauth2SignInResponse_UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInResponse_UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInResponse_UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInResponse_UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInResponse_UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInResponse_UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInResponse_UserInfo& from) {
    Oauth2SignInResponse_UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2SignInResponse_UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.wechat.v1.Oauth2SignInResponse.UserInfo";
  }
  protected:
  explicit Oauth2SignInResponse_UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivilegeFieldNumber = 8,
    kOpenIdFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kProvinceFieldNumber = 4,
    kCityFieldNumber = 5,
    kCountryFieldNumber = 6,
    kHeadImgUrlFieldNumber = 7,
    kUnionIdFieldNumber = 9,
    kSexFieldNumber = 3,
  };
  // repeated string privilege = 8;
  int privilege_size() const;
  private:
  int _internal_privilege_size() const;
  public:
  void clear_privilege();
  const std::string& privilege(int index) const;
  std::string* mutable_privilege(int index);
  void set_privilege(int index, const std::string& value);
  void set_privilege(int index, std::string&& value);
  void set_privilege(int index, const char* value);
  void set_privilege(int index, const char* value, size_t size);
  std::string* add_privilege();
  void add_privilege(const std::string& value);
  void add_privilege(std::string&& value);
  void add_privilege(const char* value);
  void add_privilege(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& privilege() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_privilege();
  private:
  const std::string& _internal_privilege(int index) const;
  std::string* _internal_add_privilege();
  public:

  // string open_id = 1;
  void clear_open_id();
  const std::string& open_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_open_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* open_id);
  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(const std::string& value);
  std::string* _internal_mutable_open_id();
  public:

  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string province = 4;
  void clear_province();
  const std::string& province() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_province(ArgT0&& arg0, ArgT... args);
  std::string* mutable_province();
  PROTOBUF_NODISCARD std::string* release_province();
  void set_allocated_province(std::string* province);
  private:
  const std::string& _internal_province() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_province(const std::string& value);
  std::string* _internal_mutable_province();
  public:

  // string city = 5;
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string country = 6;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // optional string head_img_url = 7;
  bool has_head_img_url() const;
  private:
  bool _internal_has_head_img_url() const;
  public:
  void clear_head_img_url();
  const std::string& head_img_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_head_img_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_head_img_url();
  PROTOBUF_NODISCARD std::string* release_head_img_url();
  void set_allocated_head_img_url(std::string* head_img_url);
  private:
  const std::string& _internal_head_img_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_head_img_url(const std::string& value);
  std::string* _internal_mutable_head_img_url();
  public:

  // string union_id = 9;
  void clear_union_id();
  const std::string& union_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_union_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* union_id);
  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(const std::string& value);
  std::string* _internal_mutable_union_id();
  public:

  // uint32 sex = 3;
  void clear_sex();
  uint32_t sex() const;
  void set_sex(uint32_t value);
  private:
  uint32_t _internal_sex() const;
  void _internal_set_sex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2SignInResponse.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> privilege_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr province_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_img_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr union_id_;
    uint32_t sex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};
// -------------------------------------------------------------------

class Oauth2SignInResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.Oauth2SignInResponse) */ {
 public:
  inline Oauth2SignInResponse() : Oauth2SignInResponse(nullptr) {}
  ~Oauth2SignInResponse() override;
  explicit PROTOBUF_CONSTEXPR Oauth2SignInResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2SignInResponse(const Oauth2SignInResponse& from);
  Oauth2SignInResponse(Oauth2SignInResponse&& from) noexcept
    : Oauth2SignInResponse() {
    *this = ::std::move(from);
  }

  inline Oauth2SignInResponse& operator=(const Oauth2SignInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2SignInResponse& operator=(Oauth2SignInResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2SignInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2SignInResponse* internal_default_instance() {
    return reinterpret_cast<const Oauth2SignInResponse*>(
               &_Oauth2SignInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Oauth2SignInResponse& a, Oauth2SignInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2SignInResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2SignInResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2SignInResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2SignInResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2SignInResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2SignInResponse& from) {
    Oauth2SignInResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2SignInResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.wechat.v1.Oauth2SignInResponse";
  }
  protected:
  explicit Oauth2SignInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Oauth2SignInResponse_UserInfo UserInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kSubjectFieldNumber = 9,
    kUserInfoFieldNumber = 1,
  };
  // bytes token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional string subject = 9;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // .palm.wechat.v1.Oauth2SignInResponse.UserInfo user_info = 1;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* release_user_info();
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* mutable_user_info();
  void set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* user_info);
  private:
  const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& _internal_user_info() const;
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* user_info);
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* unsafe_arena_release_user_info();

  // @@protoc_insertion_point(class_scope:palm.wechat.v1.Oauth2SignInResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* user_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};
// -------------------------------------------------------------------

class MiniProgramCode2SessionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.MiniProgramCode2SessionRequest) */ {
 public:
  inline MiniProgramCode2SessionRequest() : MiniProgramCode2SessionRequest(nullptr) {}
  ~MiniProgramCode2SessionRequest() override;
  explicit PROTOBUF_CONSTEXPR MiniProgramCode2SessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MiniProgramCode2SessionRequest(const MiniProgramCode2SessionRequest& from);
  MiniProgramCode2SessionRequest(MiniProgramCode2SessionRequest&& from) noexcept
    : MiniProgramCode2SessionRequest() {
    *this = ::std::move(from);
  }

  inline MiniProgramCode2SessionRequest& operator=(const MiniProgramCode2SessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniProgramCode2SessionRequest& operator=(MiniProgramCode2SessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiniProgramCode2SessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiniProgramCode2SessionRequest* internal_default_instance() {
    return reinterpret_cast<const MiniProgramCode2SessionRequest*>(
               &_MiniProgramCode2SessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MiniProgramCode2SessionRequest& a, MiniProgramCode2SessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniProgramCode2SessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniProgramCode2SessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiniProgramCode2SessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiniProgramCode2SessionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MiniProgramCode2SessionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MiniProgramCode2SessionRequest& from) {
    MiniProgramCode2SessionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiniProgramCode2SessionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.wechat.v1.MiniProgramCode2SessionRequest";
  }
  protected:
  explicit MiniProgramCode2SessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:palm.wechat.v1.MiniProgramCode2SessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};
// -------------------------------------------------------------------

class MiniProgramCode2SessionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.wechat.v1.MiniProgramCode2SessionResponse) */ {
 public:
  inline MiniProgramCode2SessionResponse() : MiniProgramCode2SessionResponse(nullptr) {}
  ~MiniProgramCode2SessionResponse() override;
  explicit PROTOBUF_CONSTEXPR MiniProgramCode2SessionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MiniProgramCode2SessionResponse(const MiniProgramCode2SessionResponse& from);
  MiniProgramCode2SessionResponse(MiniProgramCode2SessionResponse&& from) noexcept
    : MiniProgramCode2SessionResponse() {
    *this = ::std::move(from);
  }

  inline MiniProgramCode2SessionResponse& operator=(const MiniProgramCode2SessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniProgramCode2SessionResponse& operator=(MiniProgramCode2SessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiniProgramCode2SessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiniProgramCode2SessionResponse* internal_default_instance() {
    return reinterpret_cast<const MiniProgramCode2SessionResponse*>(
               &_MiniProgramCode2SessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MiniProgramCode2SessionResponse& a, MiniProgramCode2SessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniProgramCode2SessionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniProgramCode2SessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiniProgramCode2SessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiniProgramCode2SessionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MiniProgramCode2SessionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MiniProgramCode2SessionResponse& from) {
    MiniProgramCode2SessionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiniProgramCode2SessionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.wechat.v1.MiniProgramCode2SessionResponse";
  }
  protected:
  explicit MiniProgramCode2SessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnionIdFieldNumber = 1,
    kOpenIdFieldNumber = 2,
  };
  // optional string union_id = 1;
  bool has_union_id() const;
  private:
  bool _internal_has_union_id() const;
  public:
  void clear_union_id();
  const std::string& union_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_union_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* union_id);
  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(const std::string& value);
  std::string* _internal_mutable_union_id();
  public:

  // string open_id = 2;
  void clear_open_id();
  const std::string& open_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_open_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* open_id);
  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(const std::string& value);
  std::string* _internal_mutable_open_id();
  public:

  // @@protoc_insertion_point(class_scope:palm.wechat.v1.MiniProgramCode2SessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr union_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Oauth2QrConnectUrlRequest

// optional string subject = 1;
inline bool Oauth2QrConnectUrlRequest::_internal_has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Oauth2QrConnectUrlRequest::has_subject() const {
  return _internal_has_subject();
}
inline void Oauth2QrConnectUrlRequest::clear_subject() {
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2QrConnectUrlRequest::subject() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2QrConnectUrlRequest::set_subject(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
}
inline std::string* Oauth2QrConnectUrlRequest::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
  return _s;
}
inline const std::string& Oauth2QrConnectUrlRequest::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void Oauth2QrConnectUrlRequest::_internal_set_subject(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2QrConnectUrlRequest::_internal_mutable_subject() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2QrConnectUrlRequest::release_subject() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.subject_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2QrConnectUrlRequest::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2QrConnectUrlRequest.subject)
}

// .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 9;
inline void Oauth2QrConnectUrlRequest::clear_lang() {
  _impl_.lang_ = 0;
}
inline ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang Oauth2QrConnectUrlRequest::_internal_lang() const {
  return static_cast< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang >(_impl_.lang_);
}
inline ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang Oauth2QrConnectUrlRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2QrConnectUrlRequest.lang)
  return _internal_lang();
}
inline void Oauth2QrConnectUrlRequest::_internal_set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value) {
  
  _impl_.lang_ = value;
}
inline void Oauth2QrConnectUrlRequest::set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2QrConnectUrlRequest.lang)
}

// -------------------------------------------------------------------

// Oauth2QrConnectUrlResponse

// string url = 1;
inline void Oauth2QrConnectUrlResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Oauth2QrConnectUrlResponse::url() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2QrConnectUrlResponse::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
}
inline std::string* Oauth2QrConnectUrlResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
  return _s;
}
inline const std::string& Oauth2QrConnectUrlResponse::_internal_url() const {
  return _impl_.url_.Get();
}
inline void Oauth2QrConnectUrlResponse::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2QrConnectUrlResponse::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2QrConnectUrlResponse::release_url() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
  return _impl_.url_.Release();
}
inline void Oauth2QrConnectUrlResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2QrConnectUrlResponse.url)
}

// -------------------------------------------------------------------

// Oauth2SignInRequest

// string code = 1;
inline void Oauth2SignInRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& Oauth2SignInRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInRequest.code)
}
inline std::string* Oauth2SignInRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInRequest.code)
  return _s;
}
inline const std::string& Oauth2SignInRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void Oauth2SignInRequest::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInRequest::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInRequest.code)
  return _impl_.code_.Release();
}
inline void Oauth2SignInRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInRequest.code)
}

// string state = 2;
inline void Oauth2SignInRequest::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& Oauth2SignInRequest::state() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInRequest.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInRequest::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInRequest.state)
}
inline std::string* Oauth2SignInRequest::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInRequest.state)
  return _s;
}
inline const std::string& Oauth2SignInRequest::_internal_state() const {
  return _impl_.state_.Get();
}
inline void Oauth2SignInRequest::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInRequest::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInRequest::release_state() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInRequest.state)
  return _impl_.state_.Release();
}
inline void Oauth2SignInRequest::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInRequest.state)
}

// .palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang lang = 9;
inline void Oauth2SignInRequest::clear_lang() {
  _impl_.lang_ = 0;
}
inline ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang Oauth2SignInRequest::_internal_lang() const {
  return static_cast< ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang >(_impl_.lang_);
}
inline ::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang Oauth2SignInRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInRequest.lang)
  return _internal_lang();
}
inline void Oauth2SignInRequest::_internal_set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value) {
  
  _impl_.lang_ = value;
}
inline void Oauth2SignInRequest::set_lang(::palm::balsam::v1::WechatOauth2UserIndexResponse_Item_Lang value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInRequest.lang)
}

// -------------------------------------------------------------------

// Oauth2SignInResponse_UserInfo

// string open_id = 1;
inline void Oauth2SignInResponse_UserInfo::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::open_id() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
  return _internal_open_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_UserInfo::set_open_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.open_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_open_id() const {
  return _impl_.open_id_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_open_id(const std::string& value) {
  
  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_open_id() {
  
  return _impl_.open_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_open_id() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
  return _impl_.open_id_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_open_id(std::string* open_id) {
  if (open_id != nullptr) {
    
  } else {
    
  }
  _impl_.open_id_.SetAllocated(open_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.open_id_.IsDefault()) {
    _impl_.open_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.open_id)
}

// string nickname = 2;
inline void Oauth2SignInResponse_UserInfo::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_UserInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
  return _impl_.nickname_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.nickname)
}

// uint32 sex = 3;
inline void Oauth2SignInResponse_UserInfo::clear_sex() {
  _impl_.sex_ = 0u;
}
inline uint32_t Oauth2SignInResponse_UserInfo::_internal_sex() const {
  return _impl_.sex_;
}
inline uint32_t Oauth2SignInResponse_UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.sex)
  return _internal_sex();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_sex(uint32_t value) {
  
  _impl_.sex_ = value;
}
inline void Oauth2SignInResponse_UserInfo::set_sex(uint32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.sex)
}

// string province = 4;
inline void Oauth2SignInResponse_UserInfo::clear_province() {
  _impl_.province_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::province() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
  return _internal_province();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_UserInfo::set_province(ArgT0&& arg0, ArgT... args) {
 
 _impl_.province_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_province() {
  std::string* _s = _internal_mutable_province();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_province() const {
  return _impl_.province_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_province(const std::string& value) {
  
  _impl_.province_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_province() {
  
  return _impl_.province_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_province() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
  return _impl_.province_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_province(std::string* province) {
  if (province != nullptr) {
    
  } else {
    
  }
  _impl_.province_.SetAllocated(province, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.province_.IsDefault()) {
    _impl_.province_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.province)
}

// string city = 5;
inline void Oauth2SignInResponse_UserInfo::clear_city() {
  _impl_.city_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::city() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_UserInfo::set_city(ArgT0&& arg0, ArgT... args) {
 
 _impl_.city_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_city() const {
  return _impl_.city_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_city(const std::string& value) {
  
  _impl_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_city() {
  
  return _impl_.city_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_city() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
  return _impl_.city_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  _impl_.city_.SetAllocated(city, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.city)
}

// string country = 6;
inline void Oauth2SignInResponse_UserInfo::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::country() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_UserInfo::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_country() const {
  return _impl_.country_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_country() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
  return _impl_.country_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.country)
}

// optional string head_img_url = 7;
inline bool Oauth2SignInResponse_UserInfo::_internal_has_head_img_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Oauth2SignInResponse_UserInfo::has_head_img_url() const {
  return _internal_has_head_img_url();
}
inline void Oauth2SignInResponse_UserInfo::clear_head_img_url() {
  _impl_.head_img_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2SignInResponse_UserInfo::head_img_url() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
  return _internal_head_img_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_UserInfo::set_head_img_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.head_img_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_head_img_url() {
  std::string* _s = _internal_mutable_head_img_url();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_head_img_url() const {
  return _impl_.head_img_url_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_head_img_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_img_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_head_img_url() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.head_img_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_head_img_url() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
  if (!_internal_has_head_img_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.head_img_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.head_img_url_.IsDefault()) {
    _impl_.head_img_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_head_img_url(std::string* head_img_url) {
  if (head_img_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.head_img_url_.SetAllocated(head_img_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.head_img_url_.IsDefault()) {
    _impl_.head_img_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.head_img_url)
}

// repeated string privilege = 8;
inline int Oauth2SignInResponse_UserInfo::_internal_privilege_size() const {
  return _impl_.privilege_.size();
}
inline int Oauth2SignInResponse_UserInfo::privilege_size() const {
  return _internal_privilege_size();
}
inline void Oauth2SignInResponse_UserInfo::clear_privilege() {
  _impl_.privilege_.Clear();
}
inline std::string* Oauth2SignInResponse_UserInfo::add_privilege() {
  std::string* _s = _internal_add_privilege();
  // @@protoc_insertion_point(field_add_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_privilege(int index) const {
  return _impl_.privilege_.Get(index);
}
inline const std::string& Oauth2SignInResponse_UserInfo::privilege(int index) const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _internal_privilege(index);
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_privilege(int index) {
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _impl_.privilege_.Mutable(index);
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, const std::string& value) {
  _impl_.privilege_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, std::string&& value) {
  _impl_.privilege_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.privilege_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::set_privilege(int index, const char* value, size_t size) {
  _impl_.privilege_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_add_privilege() {
  return _impl_.privilege_.Add();
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(const std::string& value) {
  _impl_.privilege_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(std::string&& value) {
  _impl_.privilege_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.privilege_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline void Oauth2SignInResponse_UserInfo::add_privilege(const char* value, size_t size) {
  _impl_.privilege_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Oauth2SignInResponse_UserInfo::privilege() const {
  // @@protoc_insertion_point(field_list:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return _impl_.privilege_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Oauth2SignInResponse_UserInfo::mutable_privilege() {
  // @@protoc_insertion_point(field_mutable_list:palm.wechat.v1.Oauth2SignInResponse.UserInfo.privilege)
  return &_impl_.privilege_;
}

// string union_id = 9;
inline void Oauth2SignInResponse_UserInfo::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse_UserInfo::union_id() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
  return _internal_union_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse_UserInfo::set_union_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.union_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
}
inline std::string* Oauth2SignInResponse_UserInfo::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
  return _s;
}
inline const std::string& Oauth2SignInResponse_UserInfo::_internal_union_id() const {
  return _impl_.union_id_.Get();
}
inline void Oauth2SignInResponse_UserInfo::_internal_set_union_id(const std::string& value) {
  
  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::_internal_mutable_union_id() {
  
  return _impl_.union_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse_UserInfo::release_union_id() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
  return _impl_.union_id_.Release();
}
inline void Oauth2SignInResponse_UserInfo::set_allocated_union_id(std::string* union_id) {
  if (union_id != nullptr) {
    
  } else {
    
  }
  _impl_.union_id_.SetAllocated(union_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.union_id_.IsDefault()) {
    _impl_.union_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.UserInfo.union_id)
}

// -------------------------------------------------------------------

// Oauth2SignInResponse

// .palm.wechat.v1.Oauth2SignInResponse.UserInfo user_info = 1;
inline bool Oauth2SignInResponse::_internal_has_user_info() const {
  return this != internal_default_instance() && _impl_.user_info_ != nullptr;
}
inline bool Oauth2SignInResponse::has_user_info() const {
  return _internal_has_user_info();
}
inline void Oauth2SignInResponse::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
}
inline const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& Oauth2SignInResponse::_internal_user_info() const {
  const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo&>(
      ::palm::wechat::v1::_Oauth2SignInResponse_UserInfo_default_instance_);
}
inline const ::palm::wechat::v1::Oauth2SignInResponse_UserInfo& Oauth2SignInResponse::user_info() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.user_info)
  return _internal_user_info();
}
inline void Oauth2SignInResponse::unsafe_arena_set_allocated_user_info(
    ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.wechat.v1.Oauth2SignInResponse.user_info)
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::release_user_info() {
  
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.user_info)
  
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::_internal_mutable_user_info() {
  
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::wechat::v1::Oauth2SignInResponse_UserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = p;
  }
  return _impl_.user_info_;
}
inline ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* Oauth2SignInResponse::mutable_user_info() {
  ::palm::wechat::v1::Oauth2SignInResponse_UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.user_info)
  return _msg;
}
inline void Oauth2SignInResponse::set_allocated_user_info(::palm::wechat::v1::Oauth2SignInResponse_UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_info_;
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.user_info)
}

// bytes token = 2;
inline void Oauth2SignInResponse::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& Oauth2SignInResponse::token() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.token)
}
inline std::string* Oauth2SignInResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.token)
  return _s;
}
inline const std::string& Oauth2SignInResponse::_internal_token() const {
  return _impl_.token_.Get();
}
inline void Oauth2SignInResponse::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse::release_token() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.token)
  return _impl_.token_.Release();
}
inline void Oauth2SignInResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.token)
}

// optional string subject = 9;
inline bool Oauth2SignInResponse::_internal_has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Oauth2SignInResponse::has_subject() const {
  return _internal_has_subject();
}
inline void Oauth2SignInResponse::clear_subject() {
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2SignInResponse::subject() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.Oauth2SignInResponse.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Oauth2SignInResponse::set_subject(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.Oauth2SignInResponse.subject)
}
inline std::string* Oauth2SignInResponse::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.Oauth2SignInResponse.subject)
  return _s;
}
inline const std::string& Oauth2SignInResponse::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void Oauth2SignInResponse::_internal_set_subject(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse::_internal_mutable_subject() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* Oauth2SignInResponse::release_subject() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.Oauth2SignInResponse.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.subject_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Oauth2SignInResponse::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.Oauth2SignInResponse.subject)
}

// -------------------------------------------------------------------

// MiniProgramCode2SessionRequest

// string code = 1;
inline void MiniProgramCode2SessionRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& MiniProgramCode2SessionRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MiniProgramCode2SessionRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
}
inline std::string* MiniProgramCode2SessionRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
  return _s;
}
inline const std::string& MiniProgramCode2SessionRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void MiniProgramCode2SessionRequest::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* MiniProgramCode2SessionRequest::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* MiniProgramCode2SessionRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
  return _impl_.code_.Release();
}
inline void MiniProgramCode2SessionRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.MiniProgramCode2SessionRequest.code)
}

// -------------------------------------------------------------------

// MiniProgramCode2SessionResponse

// optional string union_id = 1;
inline bool MiniProgramCode2SessionResponse::_internal_has_union_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MiniProgramCode2SessionResponse::has_union_id() const {
  return _internal_has_union_id();
}
inline void MiniProgramCode2SessionResponse::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MiniProgramCode2SessionResponse::union_id() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
  return _internal_union_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MiniProgramCode2SessionResponse::set_union_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.union_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
}
inline std::string* MiniProgramCode2SessionResponse::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
  return _s;
}
inline const std::string& MiniProgramCode2SessionResponse::_internal_union_id() const {
  return _impl_.union_id_.Get();
}
inline void MiniProgramCode2SessionResponse::_internal_set_union_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MiniProgramCode2SessionResponse::_internal_mutable_union_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.union_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MiniProgramCode2SessionResponse::release_union_id() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
  if (!_internal_has_union_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.union_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.union_id_.IsDefault()) {
    _impl_.union_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MiniProgramCode2SessionResponse::set_allocated_union_id(std::string* union_id) {
  if (union_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.union_id_.SetAllocated(union_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.union_id_.IsDefault()) {
    _impl_.union_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.MiniProgramCode2SessionResponse.union_id)
}

// string open_id = 2;
inline void MiniProgramCode2SessionResponse::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& MiniProgramCode2SessionResponse::open_id() const {
  // @@protoc_insertion_point(field_get:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
  return _internal_open_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MiniProgramCode2SessionResponse::set_open_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.open_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
}
inline std::string* MiniProgramCode2SessionResponse::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
  return _s;
}
inline const std::string& MiniProgramCode2SessionResponse::_internal_open_id() const {
  return _impl_.open_id_.Get();
}
inline void MiniProgramCode2SessionResponse::_internal_set_open_id(const std::string& value) {
  
  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MiniProgramCode2SessionResponse::_internal_mutable_open_id() {
  
  return _impl_.open_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MiniProgramCode2SessionResponse::release_open_id() {
  // @@protoc_insertion_point(field_release:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
  return _impl_.open_id_.Release();
}
inline void MiniProgramCode2SessionResponse::set_allocated_open_id(std::string* open_id) {
  if (open_id != nullptr) {
    
  } else {
    
  }
  _impl_.open_id_.SetAllocated(open_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.open_id_.IsDefault()) {
    _impl_.open_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.wechat.v1.MiniProgramCode2SessionResponse.open_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace wechat
}  // namespace palm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto
