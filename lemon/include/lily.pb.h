// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: lily.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_lily_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_lily_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lily_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_lily_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_lily_2eproto;
namespace palm {
namespace lily {
namespace v1 {
class Article;
struct ArticleDefaultTypeInternal;
extern ArticleDefaultTypeInternal _Article_default_instance_;
class Book;
struct BookDefaultTypeInternal;
extern BookDefaultTypeInternal _Book_default_instance_;
class PandocTask;
struct PandocTaskDefaultTypeInternal;
extern PandocTaskDefaultTypeInternal _PandocTask_default_instance_;
class PandocTask_Input;
struct PandocTask_InputDefaultTypeInternal;
extern PandocTask_InputDefaultTypeInternal _PandocTask_Input_default_instance_;
class PandocTask_Output;
struct PandocTask_OutputDefaultTypeInternal;
extern PandocTask_OutputDefaultTypeInternal _PandocTask_Output_default_instance_;
class Section;
struct SectionDefaultTypeInternal;
extern SectionDefaultTypeInternal _Section_default_instance_;
class Slideshow;
struct SlideshowDefaultTypeInternal;
extern SlideshowDefaultTypeInternal _Slideshow_default_instance_;
class TeXLiveRequest;
struct TeXLiveRequestDefaultTypeInternal;
extern TeXLiveRequestDefaultTypeInternal _TeXLiveRequest_default_instance_;
class TeXLiveRequest_AttachmentsEntry_DoNotUse;
struct TeXLiveRequest_AttachmentsEntry_DoNotUseDefaultTypeInternal;
extern TeXLiveRequest_AttachmentsEntry_DoNotUseDefaultTypeInternal _TeXLiveRequest_AttachmentsEntry_DoNotUse_default_instance_;
class TeXLiveResponse;
struct TeXLiveResponseDefaultTypeInternal;
extern TeXLiveResponseDefaultTypeInternal _TeXLiveResponse_default_instance_;
class TeXLiveTask;
struct TeXLiveTaskDefaultTypeInternal;
extern TeXLiveTaskDefaultTypeInternal _TeXLiveTask_default_instance_;
class TeXLiveTask_AttachmentsEntry_DoNotUse;
struct TeXLiveTask_AttachmentsEntry_DoNotUseDefaultTypeInternal;
extern TeXLiveTask_AttachmentsEntry_DoNotUseDefaultTypeInternal _TeXLiveTask_AttachmentsEntry_DoNotUse_default_instance_;
class TeXLiveTask_Output;
struct TeXLiveTask_OutputDefaultTypeInternal;
extern TeXLiveTask_OutputDefaultTypeInternal _TeXLiveTask_Output_default_instance_;
}  // namespace v1
}  // namespace lily
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace lily {
namespace v1 {
enum TeXLiveTask_Output_Format : int {
  TeXLiveTask_Output_Format_Pdf = 0,
  TeXLiveTask_Output_Format_TeXLiveTask_Output_Format_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TeXLiveTask_Output_Format_TeXLiveTask_Output_Format_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TeXLiveTask_Output_Format_IsValid(int value);
extern const uint32_t TeXLiveTask_Output_Format_internal_data_[];
constexpr TeXLiveTask_Output_Format TeXLiveTask_Output_Format_Format_MIN = static_cast<TeXLiveTask_Output_Format>(0);
constexpr TeXLiveTask_Output_Format TeXLiveTask_Output_Format_Format_MAX = static_cast<TeXLiveTask_Output_Format>(0);
constexpr int TeXLiveTask_Output_Format_Format_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
TeXLiveTask_Output_Format_descriptor();
template <typename T>
const std::string& TeXLiveTask_Output_Format_Name(T value) {
  static_assert(std::is_same<T, TeXLiveTask_Output_Format>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Format_Name().");
  return TeXLiveTask_Output_Format_Name(static_cast<TeXLiveTask_Output_Format>(value));
}
template <>
inline const std::string& TeXLiveTask_Output_Format_Name(TeXLiveTask_Output_Format value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TeXLiveTask_Output_Format_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool TeXLiveTask_Output_Format_Parse(absl::string_view name, TeXLiveTask_Output_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeXLiveTask_Output_Format>(
      TeXLiveTask_Output_Format_descriptor(), name, value);
}
enum PandocTask_Format : int {
  PandocTask_Format_Plain = 0,
  PandocTask_Format_Markdown = 1,
  PandocTask_Format_Pdf = 2,
  PandocTask_Format_Docx = 3,
  PandocTask_Format_PandocTask_Format_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PandocTask_Format_PandocTask_Format_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PandocTask_Format_IsValid(int value);
extern const uint32_t PandocTask_Format_internal_data_[];
constexpr PandocTask_Format PandocTask_Format_Format_MIN = static_cast<PandocTask_Format>(0);
constexpr PandocTask_Format PandocTask_Format_Format_MAX = static_cast<PandocTask_Format>(3);
constexpr int PandocTask_Format_Format_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
PandocTask_Format_descriptor();
template <typename T>
const std::string& PandocTask_Format_Name(T value) {
  static_assert(std::is_same<T, PandocTask_Format>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Format_Name().");
  return PandocTask_Format_Name(static_cast<PandocTask_Format>(value));
}
template <>
inline const std::string& PandocTask_Format_Name(PandocTask_Format value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PandocTask_Format_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool PandocTask_Format_Parse(absl::string_view name, PandocTask_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PandocTask_Format>(
      PandocTask_Format_descriptor(), name, value);
}
enum Style : int {
  APA_7 = 0,
  MLA_8 = 10,
  CMOS = 20,
  Style_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Style_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Style_IsValid(int value);
extern const uint32_t Style_internal_data_[];
constexpr Style Style_MIN = static_cast<Style>(0);
constexpr Style Style_MAX = static_cast<Style>(20);
constexpr int Style_ARRAYSIZE = 20 + 1;
const ::google::protobuf::EnumDescriptor*
Style_descriptor();
template <typename T>
const std::string& Style_Name(T value) {
  static_assert(std::is_same<T, Style>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Style_Name().");
  return ::google::protobuf::internal::NameOfEnum(Style_descriptor(), value);
}
inline bool Style_Parse(absl::string_view name, Style* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Style>(
      Style_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TeXLiveTask_Output final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.lily.v1.TeXLiveTask.Output) */ {
 public:
  inline TeXLiveTask_Output() : TeXLiveTask_Output(nullptr) {}
  ~TeXLiveTask_Output() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TeXLiveTask_Output(
      ::google::protobuf::internal::ConstantInitialized);

  inline TeXLiveTask_Output(const TeXLiveTask_Output& from) : TeXLiveTask_Output(nullptr, from) {}
  inline TeXLiveTask_Output(TeXLiveTask_Output&& from) noexcept
      : TeXLiveTask_Output(nullptr, std::move(from)) {}
  inline TeXLiveTask_Output& operator=(const TeXLiveTask_Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeXLiveTask_Output& operator=(TeXLiveTask_Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeXLiveTask_Output& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeXLiveTask_Output* internal_default_instance() {
    return reinterpret_cast<const TeXLiveTask_Output*>(
        &_TeXLiveTask_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(TeXLiveTask_Output& a, TeXLiveTask_Output& b) { a.Swap(&b); }
  inline void Swap(TeXLiveTask_Output* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeXLiveTask_Output* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeXLiveTask_Output* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TeXLiveTask_Output>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeXLiveTask_Output& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TeXLiveTask_Output& from) { TeXLiveTask_Output::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TeXLiveTask_Output* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.TeXLiveTask.Output"; }

 protected:
  explicit TeXLiveTask_Output(::google::protobuf::Arena* arena);
  TeXLiveTask_Output(::google::protobuf::Arena* arena, const TeXLiveTask_Output& from);
  TeXLiveTask_Output(::google::protobuf::Arena* arena, TeXLiveTask_Output&& from) noexcept
      : TeXLiveTask_Output(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Format = TeXLiveTask_Output_Format;
  static constexpr Format Pdf = TeXLiveTask_Output_Format_Pdf;
  static inline bool Format_IsValid(int value) {
    return TeXLiveTask_Output_Format_IsValid(value);
  }
  static constexpr Format Format_MIN = TeXLiveTask_Output_Format_Format_MIN;
  static constexpr Format Format_MAX = TeXLiveTask_Output_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE = TeXLiveTask_Output_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Format_descriptor() {
    return TeXLiveTask_Output_Format_descriptor();
  }
  template <typename T>
  static inline const std::string& Format_Name(T value) {
    return TeXLiveTask_Output_Format_Name(value);
  }
  static inline bool Format_Parse(absl::string_view name, Format* value) {
    return TeXLiveTask_Output_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kBucketFieldNumber = 2,
    kObjectFieldNumber = 3,
    kFormatFieldNumber = 1,
  };
  // string bucket = 2;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* value);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string object = 3;
  void clear_object() ;
  const std::string& object() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_object(Arg_&& arg, Args_... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* value);

  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(
      const std::string& value);
  std::string* _internal_mutable_object();

  public:
  // .palm.lily.v1.TeXLiveTask.Output.Format format = 1;
  void clear_format() ;
  ::palm::lily::v1::TeXLiveTask_Output_Format format() const;
  void set_format(::palm::lily::v1::TeXLiveTask_Output_Format value);

  private:
  ::palm::lily::v1::TeXLiveTask_Output_Format _internal_format() const;
  void _internal_set_format(::palm::lily::v1::TeXLiveTask_Output_Format value);

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.TeXLiveTask.Output)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TeXLiveTask_Output_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TeXLiveTask_Output& from_msg);
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr object_;
    int format_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class TeXLiveTask_AttachmentsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          TeXLiveTask_AttachmentsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BYTES> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      TeXLiveTask_AttachmentsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES>;
  TeXLiveTask_AttachmentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TeXLiveTask_AttachmentsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TeXLiveTask_AttachmentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TeXLiveTask_AttachmentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TeXLiveTask_AttachmentsEntry_DoNotUse*>(
        &_TeXLiveTask_AttachmentsEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class TeXLiveResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.lily.v1.TeXLiveResponse) */ {
 public:
  inline TeXLiveResponse() : TeXLiveResponse(nullptr) {}
  ~TeXLiveResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TeXLiveResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TeXLiveResponse(const TeXLiveResponse& from) : TeXLiveResponse(nullptr, from) {}
  inline TeXLiveResponse(TeXLiveResponse&& from) noexcept
      : TeXLiveResponse(nullptr, std::move(from)) {}
  inline TeXLiveResponse& operator=(const TeXLiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeXLiveResponse& operator=(TeXLiveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeXLiveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeXLiveResponse* internal_default_instance() {
    return reinterpret_cast<const TeXLiveResponse*>(
        &_TeXLiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TeXLiveResponse& a, TeXLiveResponse& b) { a.Swap(&b); }
  inline void Swap(TeXLiveResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeXLiveResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeXLiveResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TeXLiveResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeXLiveResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TeXLiveResponse& from) { TeXLiveResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TeXLiveResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.TeXLiveResponse"; }

 protected:
  explicit TeXLiveResponse(::google::protobuf::Arena* arena);
  TeXLiveResponse(::google::protobuf::Arena* arena, const TeXLiveResponse& from);
  TeXLiveResponse(::google::protobuf::Arena* arena, TeXLiveResponse&& from) noexcept
      : TeXLiveResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
  };
  // string bucket = 1;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* value);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string object = 2;
  void clear_object() ;
  const std::string& object() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_object(Arg_&& arg, Args_... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* value);

  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(
      const std::string& value);
  std::string* _internal_mutable_object();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.TeXLiveResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TeXLiveResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TeXLiveResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr object_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class TeXLiveRequest_AttachmentsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          TeXLiveRequest_AttachmentsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BYTES> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      TeXLiveRequest_AttachmentsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES>;
  TeXLiveRequest_AttachmentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TeXLiveRequest_AttachmentsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TeXLiveRequest_AttachmentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TeXLiveRequest_AttachmentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TeXLiveRequest_AttachmentsEntry_DoNotUse*>(
        &_TeXLiveRequest_AttachmentsEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class Slideshow final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:palm.lily.v1.Slideshow) */ {
 public:
  inline Slideshow() : Slideshow(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Slideshow(
      ::google::protobuf::internal::ConstantInitialized);

  inline Slideshow(const Slideshow& from) : Slideshow(nullptr, from) {}
  inline Slideshow(Slideshow&& from) noexcept
      : Slideshow(nullptr, std::move(from)) {}
  inline Slideshow& operator=(const Slideshow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slideshow& operator=(Slideshow&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Slideshow& default_instance() {
    return *internal_default_instance();
  }
  static inline const Slideshow* internal_default_instance() {
    return reinterpret_cast<const Slideshow*>(
        &_Slideshow_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Slideshow& a, Slideshow& b) { a.Swap(&b); }
  inline void Swap(Slideshow* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slideshow* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Slideshow* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Slideshow>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Slideshow& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Slideshow& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.Slideshow"; }

 protected:
  explicit Slideshow(::google::protobuf::Arena* arena);
  Slideshow(::google::protobuf::Arena* arena, const Slideshow& from);
  Slideshow(::google::protobuf::Arena* arena, Slideshow&& from) noexcept
      : Slideshow(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:palm.lily.v1.Slideshow)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Slideshow_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Slideshow& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class Section final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.lily.v1.Section) */ {
 public:
  inline Section() : Section(nullptr) {}
  ~Section() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Section(
      ::google::protobuf::internal::ConstantInitialized);

  inline Section(const Section& from) : Section(nullptr, from) {}
  inline Section(Section&& from) noexcept
      : Section(nullptr, std::move(from)) {}
  inline Section& operator=(const Section& from) {
    CopyFrom(from);
    return *this;
  }
  inline Section& operator=(Section&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Section& default_instance() {
    return *internal_default_instance();
  }
  static inline const Section* internal_default_instance() {
    return reinterpret_cast<const Section*>(
        &_Section_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Section& a, Section& b) { a.Swap(&b); }
  inline void Swap(Section* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Section* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Section* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Section>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Section& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Section& from) { Section::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Section* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.Section"; }

 protected:
  explicit Section(::google::protobuf::Arena* arena);
  Section(::google::protobuf::Arena* arena, const Section& from);
  Section(::google::protobuf::Arena* arena, Section&& from) noexcept
      : Section(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.lily.v1.Section items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::lily::v1::Section* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField<::palm::lily::v1::Section>* mutable_items();

  private:
  const ::google::protobuf::RepeatedPtrField<::palm::lily::v1::Section>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::lily::v1::Section>* _internal_mutable_items();
  public:
  const ::palm::lily::v1::Section& items(int index) const;
  ::palm::lily::v1::Section* add_items();
  const ::google::protobuf::RepeatedPtrField<::palm::lily::v1::Section>& items() const;
  // @@protoc_insertion_point(class_scope:palm.lily.v1.Section)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Section_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Section& from_msg);
    ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::Section > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class PandocTask_Output final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.lily.v1.PandocTask.Output) */ {
 public:
  inline PandocTask_Output() : PandocTask_Output(nullptr) {}
  ~PandocTask_Output() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PandocTask_Output(
      ::google::protobuf::internal::ConstantInitialized);

  inline PandocTask_Output(const PandocTask_Output& from) : PandocTask_Output(nullptr, from) {}
  inline PandocTask_Output(PandocTask_Output&& from) noexcept
      : PandocTask_Output(nullptr, std::move(from)) {}
  inline PandocTask_Output& operator=(const PandocTask_Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline PandocTask_Output& operator=(PandocTask_Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PandocTask_Output& default_instance() {
    return *internal_default_instance();
  }
  static inline const PandocTask_Output* internal_default_instance() {
    return reinterpret_cast<const PandocTask_Output*>(
        &_PandocTask_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(PandocTask_Output& a, PandocTask_Output& b) { a.Swap(&b); }
  inline void Swap(PandocTask_Output* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PandocTask_Output* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PandocTask_Output* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PandocTask_Output>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PandocTask_Output& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PandocTask_Output& from) { PandocTask_Output::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PandocTask_Output* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.PandocTask.Output"; }

 protected:
  explicit PandocTask_Output(::google::protobuf::Arena* arena);
  PandocTask_Output(::google::protobuf::Arena* arena, const PandocTask_Output& from);
  PandocTask_Output(::google::protobuf::Arena* arena, PandocTask_Output&& from) noexcept
      : PandocTask_Output(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBucketFieldNumber = 2,
    kObjectFieldNumber = 3,
    kFormatFieldNumber = 1,
  };
  // string bucket = 2;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* value);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string object = 3;
  void clear_object() ;
  const std::string& object() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_object(Arg_&& arg, Args_... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* value);

  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(
      const std::string& value);
  std::string* _internal_mutable_object();

  public:
  // .palm.lily.v1.PandocTask.Format format = 1;
  void clear_format() ;
  ::palm::lily::v1::PandocTask_Format format() const;
  void set_format(::palm::lily::v1::PandocTask_Format value);

  private:
  ::palm::lily::v1::PandocTask_Format _internal_format() const;
  void _internal_set_format(::palm::lily::v1::PandocTask_Format value);

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.PandocTask.Output)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PandocTask_Output_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PandocTask_Output& from_msg);
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr object_;
    int format_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class PandocTask_Input final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.lily.v1.PandocTask.Input) */ {
 public:
  inline PandocTask_Input() : PandocTask_Input(nullptr) {}
  ~PandocTask_Input() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PandocTask_Input(
      ::google::protobuf::internal::ConstantInitialized);

  inline PandocTask_Input(const PandocTask_Input& from) : PandocTask_Input(nullptr, from) {}
  inline PandocTask_Input(PandocTask_Input&& from) noexcept
      : PandocTask_Input(nullptr, std::move(from)) {}
  inline PandocTask_Input& operator=(const PandocTask_Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline PandocTask_Input& operator=(PandocTask_Input&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PandocTask_Input& default_instance() {
    return *internal_default_instance();
  }
  static inline const PandocTask_Input* internal_default_instance() {
    return reinterpret_cast<const PandocTask_Input*>(
        &_PandocTask_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(PandocTask_Input& a, PandocTask_Input& b) { a.Swap(&b); }
  inline void Swap(PandocTask_Input* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PandocTask_Input* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PandocTask_Input* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PandocTask_Input>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PandocTask_Input& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PandocTask_Input& from) { PandocTask_Input::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PandocTask_Input* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.PandocTask.Input"; }

 protected:
  explicit PandocTask_Input(::google::protobuf::Arena* arena);
  PandocTask_Input(::google::protobuf::Arena* arena, const PandocTask_Input& from);
  PandocTask_Input(::google::protobuf::Arena* arena, PandocTask_Input&& from) noexcept
      : PandocTask_Input(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPayloadFieldNumber = 2,
    kFormatFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // .palm.lily.v1.PandocTask.Format format = 1;
  void clear_format() ;
  ::palm::lily::v1::PandocTask_Format format() const;
  void set_format(::palm::lily::v1::PandocTask_Format value);

  private:
  ::palm::lily::v1::PandocTask_Format _internal_format() const;
  void _internal_set_format(::palm::lily::v1::PandocTask_Format value);

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.PandocTask.Input)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PandocTask_Input_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PandocTask_Input& from_msg);
    ::google::protobuf::internal::ArenaStringPtr payload_;
    int format_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class Book final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:palm.lily.v1.Book) */ {
 public:
  inline Book() : Book(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Book(
      ::google::protobuf::internal::ConstantInitialized);

  inline Book(const Book& from) : Book(nullptr, from) {}
  inline Book(Book&& from) noexcept
      : Book(nullptr, std::move(from)) {}
  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book& operator=(Book&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Book& default_instance() {
    return *internal_default_instance();
  }
  static inline const Book* internal_default_instance() {
    return reinterpret_cast<const Book*>(
        &_Book_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Book& a, Book& b) { a.Swap(&b); }
  inline void Swap(Book* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Book* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Book>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Book& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Book& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.Book"; }

 protected:
  explicit Book(::google::protobuf::Arena* arena);
  Book(::google::protobuf::Arena* arena, const Book& from);
  Book(::google::protobuf::Arena* arena, Book&& from) noexcept
      : Book(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:palm.lily.v1.Book)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Book_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Book& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class Article final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:palm.lily.v1.Article) */ {
 public:
  inline Article() : Article(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Article(
      ::google::protobuf::internal::ConstantInitialized);

  inline Article(const Article& from) : Article(nullptr, from) {}
  inline Article(Article&& from) noexcept
      : Article(nullptr, std::move(from)) {}
  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }
  inline Article& operator=(Article&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Article& default_instance() {
    return *internal_default_instance();
  }
  static inline const Article* internal_default_instance() {
    return reinterpret_cast<const Article*>(
        &_Article_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Article& a, Article& b) { a.Swap(&b); }
  inline void Swap(Article* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Article* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Article* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Article>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Article& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Article& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.Article"; }

 protected:
  explicit Article(::google::protobuf::Arena* arena);
  Article(::google::protobuf::Arena* arena, const Article& from);
  Article(::google::protobuf::Arena* arena, Article&& from) noexcept
      : Article(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:palm.lily.v1.Article)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Article_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Article& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class TeXLiveTask final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.lily.v1.TeXLiveTask) */ {
 public:
  inline TeXLiveTask() : TeXLiveTask(nullptr) {}
  ~TeXLiveTask() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TeXLiveTask(
      ::google::protobuf::internal::ConstantInitialized);

  inline TeXLiveTask(const TeXLiveTask& from) : TeXLiveTask(nullptr, from) {}
  inline TeXLiveTask(TeXLiveTask&& from) noexcept
      : TeXLiveTask(nullptr, std::move(from)) {}
  inline TeXLiveTask& operator=(const TeXLiveTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeXLiveTask& operator=(TeXLiveTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeXLiveTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeXLiveTask* internal_default_instance() {
    return reinterpret_cast<const TeXLiveTask*>(
        &_TeXLiveTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(TeXLiveTask& a, TeXLiveTask& b) { a.Swap(&b); }
  inline void Swap(TeXLiveTask* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeXLiveTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeXLiveTask* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TeXLiveTask>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeXLiveTask& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TeXLiveTask& from) { TeXLiveTask::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TeXLiveTask* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.TeXLiveTask"; }

 protected:
  explicit TeXLiveTask(::google::protobuf::Arena* arena);
  TeXLiveTask(::google::protobuf::Arena* arena, const TeXLiveTask& from);
  TeXLiveTask(::google::protobuf::Arena* arena, TeXLiveTask&& from) noexcept
      : TeXLiveTask(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Output = TeXLiveTask_Output;

  // accessors -------------------------------------------------------
  enum : int {
    kAttachmentsFieldNumber = 3,
    kEntryFieldNumber = 1,
    kOutputFieldNumber = 9,
  };
  // map<string, bytes> attachments = 3;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;

  public:
  void clear_attachments() ;
  const ::google::protobuf::Map<std::string, std::string>& attachments() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_attachments();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_attachments() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_attachments();

  public:
  // bytes entry = 1;
  void clear_entry() ;
  const std::string& entry() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entry(Arg_&& arg, Args_... args);
  std::string* mutable_entry();
  PROTOBUF_NODISCARD std::string* release_entry();
  void set_allocated_entry(std::string* value);

  private:
  const std::string& _internal_entry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entry(
      const std::string& value);
  std::string* _internal_mutable_entry();

  public:
  // .palm.lily.v1.TeXLiveTask.Output output = 9;
  bool has_output() const;
  void clear_output() ;
  const ::palm::lily::v1::TeXLiveTask_Output& output() const;
  PROTOBUF_NODISCARD ::palm::lily::v1::TeXLiveTask_Output* release_output();
  ::palm::lily::v1::TeXLiveTask_Output* mutable_output();
  void set_allocated_output(::palm::lily::v1::TeXLiveTask_Output* value);
  void unsafe_arena_set_allocated_output(::palm::lily::v1::TeXLiveTask_Output* value);
  ::palm::lily::v1::TeXLiveTask_Output* unsafe_arena_release_output();

  private:
  const ::palm::lily::v1::TeXLiveTask_Output& _internal_output() const;
  ::palm::lily::v1::TeXLiveTask_Output* _internal_mutable_output();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.TeXLiveTask)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 2,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TeXLiveTask_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TeXLiveTask& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<TeXLiveTask_AttachmentsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES>
        attachments_;
    ::google::protobuf::internal::ArenaStringPtr entry_;
    ::palm::lily::v1::TeXLiveTask_Output* output_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class TeXLiveRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.lily.v1.TeXLiveRequest) */ {
 public:
  inline TeXLiveRequest() : TeXLiveRequest(nullptr) {}
  ~TeXLiveRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TeXLiveRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TeXLiveRequest(const TeXLiveRequest& from) : TeXLiveRequest(nullptr, from) {}
  inline TeXLiveRequest(TeXLiveRequest&& from) noexcept
      : TeXLiveRequest(nullptr, std::move(from)) {}
  inline TeXLiveRequest& operator=(const TeXLiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeXLiveRequest& operator=(TeXLiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeXLiveRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kBook = 11,
    kArticle = 12,
    kSlideshow = 13,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const TeXLiveRequest* internal_default_instance() {
    return reinterpret_cast<const TeXLiveRequest*>(
        &_TeXLiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TeXLiveRequest& a, TeXLiveRequest& b) { a.Swap(&b); }
  inline void Swap(TeXLiveRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeXLiveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeXLiveRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TeXLiveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeXLiveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TeXLiveRequest& from) { TeXLiveRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TeXLiveRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.TeXLiveRequest"; }

 protected:
  explicit TeXLiveRequest(::google::protobuf::Arena* arena);
  TeXLiveRequest(::google::protobuf::Arena* arena, const TeXLiveRequest& from);
  TeXLiveRequest(::google::protobuf::Arena* arena, TeXLiveRequest&& from) noexcept
      : TeXLiveRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttachmentsFieldNumber = 99,
    kNameFieldNumber = 1,
    kEntryFieldNumber = 98,
    kTtlFieldNumber = 9,
    kStyleFieldNumber = 2,
    kFormatFieldNumber = 3,
    kBookFieldNumber = 11,
    kArticleFieldNumber = 12,
    kSlideshowFieldNumber = 13,
  };
  // map<string, bytes> attachments = 99;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;

  public:
  void clear_attachments() ;
  const ::google::protobuf::Map<std::string, std::string>& attachments() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_attachments();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_attachments() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_attachments();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes entry = 98;
  void clear_entry() ;
  const std::string& entry() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entry(Arg_&& arg, Args_... args);
  std::string* mutable_entry();
  PROTOBUF_NODISCARD std::string* release_entry();
  void set_allocated_entry(std::string* value);

  private:
  const std::string& _internal_entry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entry(
      const std::string& value);
  std::string* _internal_mutable_entry();

  public:
  // .google.protobuf.Duration ttl = 9;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::google::protobuf::Duration& ttl() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_ttl();
  ::google::protobuf::Duration* mutable_ttl();
  void set_allocated_ttl(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_ttl();

  private:
  const ::google::protobuf::Duration& _internal_ttl() const;
  ::google::protobuf::Duration* _internal_mutable_ttl();

  public:
  // .palm.lily.v1.Style style = 2;
  void clear_style() ;
  ::palm::lily::v1::Style style() const;
  void set_style(::palm::lily::v1::Style value);

  private:
  ::palm::lily::v1::Style _internal_style() const;
  void _internal_set_style(::palm::lily::v1::Style value);

  public:
  // .palm.lily.v1.TeXLiveTask.Output.Format format = 3;
  void clear_format() ;
  ::palm::lily::v1::TeXLiveTask_Output_Format format() const;
  void set_format(::palm::lily::v1::TeXLiveTask_Output_Format value);

  private:
  ::palm::lily::v1::TeXLiveTask_Output_Format _internal_format() const;
  void _internal_set_format(::palm::lily::v1::TeXLiveTask_Output_Format value);

  public:
  // .palm.lily.v1.Book book = 11;
  bool has_book() const;
  private:
  bool _internal_has_book() const;

  public:
  void clear_book() ;
  const ::palm::lily::v1::Book& book() const;
  PROTOBUF_NODISCARD ::palm::lily::v1::Book* release_book();
  ::palm::lily::v1::Book* mutable_book();
  void set_allocated_book(::palm::lily::v1::Book* value);
  void unsafe_arena_set_allocated_book(::palm::lily::v1::Book* value);
  ::palm::lily::v1::Book* unsafe_arena_release_book();

  private:
  const ::palm::lily::v1::Book& _internal_book() const;
  ::palm::lily::v1::Book* _internal_mutable_book();

  public:
  // .palm.lily.v1.Article article = 12;
  bool has_article() const;
  private:
  bool _internal_has_article() const;

  public:
  void clear_article() ;
  const ::palm::lily::v1::Article& article() const;
  PROTOBUF_NODISCARD ::palm::lily::v1::Article* release_article();
  ::palm::lily::v1::Article* mutable_article();
  void set_allocated_article(::palm::lily::v1::Article* value);
  void unsafe_arena_set_allocated_article(::palm::lily::v1::Article* value);
  ::palm::lily::v1::Article* unsafe_arena_release_article();

  private:
  const ::palm::lily::v1::Article& _internal_article() const;
  ::palm::lily::v1::Article* _internal_mutable_article();

  public:
  // .palm.lily.v1.Slideshow slideshow = 13;
  bool has_slideshow() const;
  private:
  bool _internal_has_slideshow() const;

  public:
  void clear_slideshow() ;
  const ::palm::lily::v1::Slideshow& slideshow() const;
  PROTOBUF_NODISCARD ::palm::lily::v1::Slideshow* release_slideshow();
  ::palm::lily::v1::Slideshow* mutable_slideshow();
  void set_allocated_slideshow(::palm::lily::v1::Slideshow* value);
  void unsafe_arena_set_allocated_slideshow(::palm::lily::v1::Slideshow* value);
  ::palm::lily::v1::Slideshow* unsafe_arena_release_slideshow();

  private:
  const ::palm::lily::v1::Slideshow& _internal_slideshow() const;
  ::palm::lily::v1::Slideshow* _internal_mutable_slideshow();

  public:
  void clear_Payload();
  PayloadCase Payload_case() const;
  // @@protoc_insertion_point(class_scope:palm.lily.v1.TeXLiveRequest)
 private:
  class _Internal;
  void set_has_book();
  void set_has_article();
  void set_has_slideshow();
  inline bool has_Payload() const;
  inline void clear_has_Payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 5,
      59, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TeXLiveRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TeXLiveRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<TeXLiveRequest_AttachmentsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES>
        attachments_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr entry_;
    ::google::protobuf::Duration* ttl_;
    int style_;
    int format_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::palm::lily::v1::Book* book_;
      ::palm::lily::v1::Article* article_;
      ::palm::lily::v1::Slideshow* slideshow_;
    } Payload_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class PandocTask final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.lily.v1.PandocTask) */ {
 public:
  inline PandocTask() : PandocTask(nullptr) {}
  ~PandocTask() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PandocTask(
      ::google::protobuf::internal::ConstantInitialized);

  inline PandocTask(const PandocTask& from) : PandocTask(nullptr, from) {}
  inline PandocTask(PandocTask&& from) noexcept
      : PandocTask(nullptr, std::move(from)) {}
  inline PandocTask& operator=(const PandocTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline PandocTask& operator=(PandocTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PandocTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const PandocTask* internal_default_instance() {
    return reinterpret_cast<const PandocTask*>(
        &_PandocTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(PandocTask& a, PandocTask& b) { a.Swap(&b); }
  inline void Swap(PandocTask* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PandocTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PandocTask* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PandocTask>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PandocTask& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PandocTask& from) { PandocTask::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PandocTask* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.lily.v1.PandocTask"; }

 protected:
  explicit PandocTask(::google::protobuf::Arena* arena);
  PandocTask(::google::protobuf::Arena* arena, const PandocTask& from);
  PandocTask(::google::protobuf::Arena* arena, PandocTask&& from) noexcept
      : PandocTask(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Input = PandocTask_Input;
  using Output = PandocTask_Output;
  using Format = PandocTask_Format;
  static constexpr Format Plain = PandocTask_Format_Plain;
  static constexpr Format Markdown = PandocTask_Format_Markdown;
  static constexpr Format Pdf = PandocTask_Format_Pdf;
  static constexpr Format Docx = PandocTask_Format_Docx;
  static inline bool Format_IsValid(int value) {
    return PandocTask_Format_IsValid(value);
  }
  static constexpr Format Format_MIN = PandocTask_Format_Format_MIN;
  static constexpr Format Format_MAX = PandocTask_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE = PandocTask_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Format_descriptor() {
    return PandocTask_Format_descriptor();
  }
  template <typename T>
  static inline const std::string& Format_Name(T value) {
    return PandocTask_Format_Name(value);
  }
  static inline bool Format_Parse(absl::string_view name, Format* value) {
    return PandocTask_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
  };
  // .palm.lily.v1.PandocTask.Input input = 1;
  bool has_input() const;
  void clear_input() ;
  const ::palm::lily::v1::PandocTask_Input& input() const;
  PROTOBUF_NODISCARD ::palm::lily::v1::PandocTask_Input* release_input();
  ::palm::lily::v1::PandocTask_Input* mutable_input();
  void set_allocated_input(::palm::lily::v1::PandocTask_Input* value);
  void unsafe_arena_set_allocated_input(::palm::lily::v1::PandocTask_Input* value);
  ::palm::lily::v1::PandocTask_Input* unsafe_arena_release_input();

  private:
  const ::palm::lily::v1::PandocTask_Input& _internal_input() const;
  ::palm::lily::v1::PandocTask_Input* _internal_mutable_input();

  public:
  // .palm.lily.v1.PandocTask.Output output = 2;
  bool has_output() const;
  void clear_output() ;
  const ::palm::lily::v1::PandocTask_Output& output() const;
  PROTOBUF_NODISCARD ::palm::lily::v1::PandocTask_Output* release_output();
  ::palm::lily::v1::PandocTask_Output* mutable_output();
  void set_allocated_output(::palm::lily::v1::PandocTask_Output* value);
  void unsafe_arena_set_allocated_output(::palm::lily::v1::PandocTask_Output* value);
  ::palm::lily::v1::PandocTask_Output* unsafe_arena_release_output();

  private:
  const ::palm::lily::v1::PandocTask_Output& _internal_output() const;
  ::palm::lily::v1::PandocTask_Output* _internal_mutable_output();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.PandocTask)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PandocTask_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PandocTask& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::palm::lily::v1::PandocTask_Input* input_;
    ::palm::lily::v1::PandocTask_Output* output_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Book

// -------------------------------------------------------------------

// Slideshow

// -------------------------------------------------------------------

// Article

// -------------------------------------------------------------------

// Section

// repeated .palm.lily.v1.Section items = 1;
inline int Section::_internal_items_size() const {
  return _internal_items().size();
}
inline int Section::items_size() const {
  return _internal_items_size();
}
inline void Section::clear_items() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.items_.Clear();
}
inline ::palm::lily::v1::Section* Section::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.Section.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::lily::v1::Section>* Section::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.lily.v1.Section.items)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_items();
}
inline const ::palm::lily::v1::Section& Section::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.Section.items)
  return _internal_items().Get(index);
}
inline ::palm::lily::v1::Section* Section::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::palm::lily::v1::Section* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.lily.v1.Section.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::lily::v1::Section>& Section::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.lily.v1.Section.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::lily::v1::Section>&
Section::_internal_items() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::lily::v1::Section>*
Section::_internal_mutable_items() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TeXLiveRequest

// string name = 1;
inline void TeXLiveRequest::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TeXLiveRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeXLiveRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveRequest.name)
}
inline std::string* TeXLiveRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveRequest.name)
  return _s;
}
inline const std::string& TeXLiveRequest::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void TeXLiveRequest::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* TeXLiveRequest::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* TeXLiveRequest::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveRequest.name)
  return _impl_.name_.Release();
}
inline void TeXLiveRequest::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TeXLiveRequest.name)
}

// .palm.lily.v1.Style style = 2;
inline void TeXLiveRequest::clear_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.style_ = 0;
}
inline ::palm::lily::v1::Style TeXLiveRequest::style() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveRequest.style)
  return _internal_style();
}
inline void TeXLiveRequest::set_style(::palm::lily::v1::Style value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveRequest.style)
}
inline ::palm::lily::v1::Style TeXLiveRequest::_internal_style() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::palm::lily::v1::Style>(_impl_.style_);
}
inline void TeXLiveRequest::_internal_set_style(::palm::lily::v1::Style value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.style_ = value;
}

// .palm.lily.v1.TeXLiveTask.Output.Format format = 3;
inline void TeXLiveRequest::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0;
}
inline ::palm::lily::v1::TeXLiveTask_Output_Format TeXLiveRequest::format() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveRequest.format)
  return _internal_format();
}
inline void TeXLiveRequest::set_format(::palm::lily::v1::TeXLiveTask_Output_Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveRequest.format)
}
inline ::palm::lily::v1::TeXLiveTask_Output_Format TeXLiveRequest::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::palm::lily::v1::TeXLiveTask_Output_Format>(_impl_.format_);
}
inline void TeXLiveRequest::_internal_set_format(::palm::lily::v1::TeXLiveTask_Output_Format value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// .google.protobuf.Duration ttl = 9;
inline bool TeXLiveRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& TeXLiveRequest::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& TeXLiveRequest::ttl() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveRequest.ttl)
  return _internal_ttl();
}
inline void TeXLiveRequest::unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lily.v1.TeXLiveRequest.ttl)
}
inline ::google::protobuf::Duration* TeXLiveRequest::release_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* TeXLiveRequest::unsafe_arena_release_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveRequest.ttl)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* TeXLiveRequest::_internal_mutable_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ttl_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.ttl_;
}
inline ::google::protobuf::Duration* TeXLiveRequest::mutable_ttl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveRequest.ttl)
  return _msg;
}
inline void TeXLiveRequest::set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TeXLiveRequest.ttl)
}

// .palm.lily.v1.Book book = 11;
inline bool TeXLiveRequest::has_book() const {
  return Payload_case() == kBook;
}
inline bool TeXLiveRequest::_internal_has_book() const {
  return Payload_case() == kBook;
}
inline void TeXLiveRequest::set_has_book() {
  _impl_._oneof_case_[0] = kBook;
}
inline void TeXLiveRequest::clear_book() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (Payload_case() == kBook) {
    if (GetArena() == nullptr) {
      delete _impl_.Payload_.book_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.Payload_.book_);
    }
    clear_has_Payload();
  }
}
inline ::palm::lily::v1::Book* TeXLiveRequest::release_book() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveRequest.book)
  if (Payload_case() == kBook) {
    clear_has_Payload();
    auto* temp = _impl_.Payload_.book_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Payload_.book_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lily::v1::Book& TeXLiveRequest::_internal_book() const {
  return Payload_case() == kBook ? *_impl_.Payload_.book_ : reinterpret_cast<::palm::lily::v1::Book&>(::palm::lily::v1::_Book_default_instance_);
}
inline const ::palm::lily::v1::Book& TeXLiveRequest::book() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveRequest.book)
  return _internal_book();
}
inline ::palm::lily::v1::Book* TeXLiveRequest::unsafe_arena_release_book() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lily.v1.TeXLiveRequest.book)
  if (Payload_case() == kBook) {
    clear_has_Payload();
    auto* temp = _impl_.Payload_.book_;
    _impl_.Payload_.book_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TeXLiveRequest::unsafe_arena_set_allocated_book(::palm::lily::v1::Book* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Payload();
  if (value) {
    set_has_book();
    _impl_.Payload_.book_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lily.v1.TeXLiveRequest.book)
}
inline ::palm::lily::v1::Book* TeXLiveRequest::_internal_mutable_book() {
  if (Payload_case() != kBook) {
    clear_Payload();
    set_has_book();
    _impl_.Payload_.book_ =
        ::google::protobuf::Message::DefaultConstruct<::palm::lily::v1::Book>(GetArena());
  }
  return _impl_.Payload_.book_;
}
inline ::palm::lily::v1::Book* TeXLiveRequest::mutable_book() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::lily::v1::Book* _msg = _internal_mutable_book();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveRequest.book)
  return _msg;
}

// .palm.lily.v1.Article article = 12;
inline bool TeXLiveRequest::has_article() const {
  return Payload_case() == kArticle;
}
inline bool TeXLiveRequest::_internal_has_article() const {
  return Payload_case() == kArticle;
}
inline void TeXLiveRequest::set_has_article() {
  _impl_._oneof_case_[0] = kArticle;
}
inline void TeXLiveRequest::clear_article() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (Payload_case() == kArticle) {
    if (GetArena() == nullptr) {
      delete _impl_.Payload_.article_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.Payload_.article_);
    }
    clear_has_Payload();
  }
}
inline ::palm::lily::v1::Article* TeXLiveRequest::release_article() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveRequest.article)
  if (Payload_case() == kArticle) {
    clear_has_Payload();
    auto* temp = _impl_.Payload_.article_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Payload_.article_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lily::v1::Article& TeXLiveRequest::_internal_article() const {
  return Payload_case() == kArticle ? *_impl_.Payload_.article_ : reinterpret_cast<::palm::lily::v1::Article&>(::palm::lily::v1::_Article_default_instance_);
}
inline const ::palm::lily::v1::Article& TeXLiveRequest::article() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveRequest.article)
  return _internal_article();
}
inline ::palm::lily::v1::Article* TeXLiveRequest::unsafe_arena_release_article() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lily.v1.TeXLiveRequest.article)
  if (Payload_case() == kArticle) {
    clear_has_Payload();
    auto* temp = _impl_.Payload_.article_;
    _impl_.Payload_.article_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TeXLiveRequest::unsafe_arena_set_allocated_article(::palm::lily::v1::Article* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Payload();
  if (value) {
    set_has_article();
    _impl_.Payload_.article_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lily.v1.TeXLiveRequest.article)
}
inline ::palm::lily::v1::Article* TeXLiveRequest::_internal_mutable_article() {
  if (Payload_case() != kArticle) {
    clear_Payload();
    set_has_article();
    _impl_.Payload_.article_ =
        ::google::protobuf::Message::DefaultConstruct<::palm::lily::v1::Article>(GetArena());
  }
  return _impl_.Payload_.article_;
}
inline ::palm::lily::v1::Article* TeXLiveRequest::mutable_article() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::lily::v1::Article* _msg = _internal_mutable_article();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveRequest.article)
  return _msg;
}

// .palm.lily.v1.Slideshow slideshow = 13;
inline bool TeXLiveRequest::has_slideshow() const {
  return Payload_case() == kSlideshow;
}
inline bool TeXLiveRequest::_internal_has_slideshow() const {
  return Payload_case() == kSlideshow;
}
inline void TeXLiveRequest::set_has_slideshow() {
  _impl_._oneof_case_[0] = kSlideshow;
}
inline void TeXLiveRequest::clear_slideshow() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (Payload_case() == kSlideshow) {
    if (GetArena() == nullptr) {
      delete _impl_.Payload_.slideshow_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.Payload_.slideshow_);
    }
    clear_has_Payload();
  }
}
inline ::palm::lily::v1::Slideshow* TeXLiveRequest::release_slideshow() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveRequest.slideshow)
  if (Payload_case() == kSlideshow) {
    clear_has_Payload();
    auto* temp = _impl_.Payload_.slideshow_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Payload_.slideshow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lily::v1::Slideshow& TeXLiveRequest::_internal_slideshow() const {
  return Payload_case() == kSlideshow ? *_impl_.Payload_.slideshow_ : reinterpret_cast<::palm::lily::v1::Slideshow&>(::palm::lily::v1::_Slideshow_default_instance_);
}
inline const ::palm::lily::v1::Slideshow& TeXLiveRequest::slideshow() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveRequest.slideshow)
  return _internal_slideshow();
}
inline ::palm::lily::v1::Slideshow* TeXLiveRequest::unsafe_arena_release_slideshow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lily.v1.TeXLiveRequest.slideshow)
  if (Payload_case() == kSlideshow) {
    clear_has_Payload();
    auto* temp = _impl_.Payload_.slideshow_;
    _impl_.Payload_.slideshow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TeXLiveRequest::unsafe_arena_set_allocated_slideshow(::palm::lily::v1::Slideshow* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Payload();
  if (value) {
    set_has_slideshow();
    _impl_.Payload_.slideshow_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lily.v1.TeXLiveRequest.slideshow)
}
inline ::palm::lily::v1::Slideshow* TeXLiveRequest::_internal_mutable_slideshow() {
  if (Payload_case() != kSlideshow) {
    clear_Payload();
    set_has_slideshow();
    _impl_.Payload_.slideshow_ =
        ::google::protobuf::Message::DefaultConstruct<::palm::lily::v1::Slideshow>(GetArena());
  }
  return _impl_.Payload_.slideshow_;
}
inline ::palm::lily::v1::Slideshow* TeXLiveRequest::mutable_slideshow() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::lily::v1::Slideshow* _msg = _internal_mutable_slideshow();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveRequest.slideshow)
  return _msg;
}

// bytes entry = 98;
inline void TeXLiveRequest::clear_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_.ClearToEmpty();
}
inline const std::string& TeXLiveRequest::entry() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveRequest.entry)
  return _internal_entry();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeXLiveRequest::set_entry(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveRequest.entry)
}
inline std::string* TeXLiveRequest::mutable_entry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_entry();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveRequest.entry)
  return _s;
}
inline const std::string& TeXLiveRequest::_internal_entry() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entry_.Get();
}
inline void TeXLiveRequest::_internal_set_entry(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_.Set(value, GetArena());
}
inline std::string* TeXLiveRequest::_internal_mutable_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.entry_.Mutable( GetArena());
}
inline std::string* TeXLiveRequest::release_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveRequest.entry)
  return _impl_.entry_.Release();
}
inline void TeXLiveRequest::set_allocated_entry(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.entry_.IsDefault()) {
          _impl_.entry_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TeXLiveRequest.entry)
}

// map<string, bytes> attachments = 99;
inline int TeXLiveRequest::_internal_attachments_size() const {
  return _internal_attachments().size();
}
inline int TeXLiveRequest::attachments_size() const {
  return _internal_attachments_size();
}
inline void TeXLiveRequest::clear_attachments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attachments_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TeXLiveRequest::_internal_attachments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attachments_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TeXLiveRequest::attachments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:palm.lily.v1.TeXLiveRequest.attachments)
  return _internal_attachments();
}
inline ::google::protobuf::Map<std::string, std::string>* TeXLiveRequest::_internal_mutable_attachments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attachments_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TeXLiveRequest::mutable_attachments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:palm.lily.v1.TeXLiveRequest.attachments)
  return _internal_mutable_attachments();
}

inline bool TeXLiveRequest::has_Payload() const {
  return Payload_case() != PAYLOAD_NOT_SET;
}
inline void TeXLiveRequest::clear_has_Payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline TeXLiveRequest::PayloadCase TeXLiveRequest::Payload_case() const {
  return TeXLiveRequest::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TeXLiveResponse

// string bucket = 1;
inline void TeXLiveResponse::clear_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& TeXLiveResponse::bucket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveResponse.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeXLiveResponse::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveResponse.bucket)
}
inline std::string* TeXLiveResponse::mutable_bucket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveResponse.bucket)
  return _s;
}
inline const std::string& TeXLiveResponse::_internal_bucket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bucket_.Get();
}
inline void TeXLiveResponse::_internal_set_bucket(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(value, GetArena());
}
inline std::string* TeXLiveResponse::_internal_mutable_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bucket_.Mutable( GetArena());
}
inline std::string* TeXLiveResponse::release_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveResponse.bucket)
  return _impl_.bucket_.Release();
}
inline void TeXLiveResponse::set_allocated_bucket(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TeXLiveResponse.bucket)
}

// string object = 2;
inline void TeXLiveResponse::clear_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.ClearToEmpty();
}
inline const std::string& TeXLiveResponse::object() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveResponse.object)
  return _internal_object();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeXLiveResponse::set_object(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveResponse.object)
}
inline std::string* TeXLiveResponse::mutable_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveResponse.object)
  return _s;
}
inline const std::string& TeXLiveResponse::_internal_object() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.object_.Get();
}
inline void TeXLiveResponse::_internal_set_object(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(value, GetArena());
}
inline std::string* TeXLiveResponse::_internal_mutable_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.object_.Mutable( GetArena());
}
inline std::string* TeXLiveResponse::release_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveResponse.object)
  return _impl_.object_.Release();
}
inline void TeXLiveResponse::set_allocated_object(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.object_.IsDefault()) {
          _impl_.object_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TeXLiveResponse.object)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TeXLiveTask_Output

// .palm.lily.v1.TeXLiveTask.Output.Format format = 1;
inline void TeXLiveTask_Output::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0;
}
inline ::palm::lily::v1::TeXLiveTask_Output_Format TeXLiveTask_Output::format() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveTask.Output.format)
  return _internal_format();
}
inline void TeXLiveTask_Output::set_format(::palm::lily::v1::TeXLiveTask_Output_Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveTask.Output.format)
}
inline ::palm::lily::v1::TeXLiveTask_Output_Format TeXLiveTask_Output::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::palm::lily::v1::TeXLiveTask_Output_Format>(_impl_.format_);
}
inline void TeXLiveTask_Output::_internal_set_format(::palm::lily::v1::TeXLiveTask_Output_Format value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// string bucket = 2;
inline void TeXLiveTask_Output::clear_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& TeXLiveTask_Output::bucket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveTask.Output.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeXLiveTask_Output::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveTask.Output.bucket)
}
inline std::string* TeXLiveTask_Output::mutable_bucket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveTask.Output.bucket)
  return _s;
}
inline const std::string& TeXLiveTask_Output::_internal_bucket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bucket_.Get();
}
inline void TeXLiveTask_Output::_internal_set_bucket(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(value, GetArena());
}
inline std::string* TeXLiveTask_Output::_internal_mutable_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bucket_.Mutable( GetArena());
}
inline std::string* TeXLiveTask_Output::release_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveTask.Output.bucket)
  return _impl_.bucket_.Release();
}
inline void TeXLiveTask_Output::set_allocated_bucket(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TeXLiveTask.Output.bucket)
}

// string object = 3;
inline void TeXLiveTask_Output::clear_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.ClearToEmpty();
}
inline const std::string& TeXLiveTask_Output::object() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveTask.Output.object)
  return _internal_object();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeXLiveTask_Output::set_object(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveTask.Output.object)
}
inline std::string* TeXLiveTask_Output::mutable_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveTask.Output.object)
  return _s;
}
inline const std::string& TeXLiveTask_Output::_internal_object() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.object_.Get();
}
inline void TeXLiveTask_Output::_internal_set_object(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(value, GetArena());
}
inline std::string* TeXLiveTask_Output::_internal_mutable_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.object_.Mutable( GetArena());
}
inline std::string* TeXLiveTask_Output::release_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveTask.Output.object)
  return _impl_.object_.Release();
}
inline void TeXLiveTask_Output::set_allocated_object(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.object_.IsDefault()) {
          _impl_.object_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TeXLiveTask.Output.object)
}

// -------------------------------------------------------------------

// TeXLiveTask

// bytes entry = 1;
inline void TeXLiveTask::clear_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_.ClearToEmpty();
}
inline const std::string& TeXLiveTask::entry() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveTask.entry)
  return _internal_entry();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeXLiveTask::set_entry(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TeXLiveTask.entry)
}
inline std::string* TeXLiveTask::mutable_entry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_entry();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveTask.entry)
  return _s;
}
inline const std::string& TeXLiveTask::_internal_entry() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entry_.Get();
}
inline void TeXLiveTask::_internal_set_entry(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_.Set(value, GetArena());
}
inline std::string* TeXLiveTask::_internal_mutable_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.entry_.Mutable( GetArena());
}
inline std::string* TeXLiveTask::release_entry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveTask.entry)
  return _impl_.entry_.Release();
}
inline void TeXLiveTask::set_allocated_entry(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.entry_.IsDefault()) {
          _impl_.entry_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TeXLiveTask.entry)
}

// map<string, bytes> attachments = 3;
inline int TeXLiveTask::_internal_attachments_size() const {
  return _internal_attachments().size();
}
inline int TeXLiveTask::attachments_size() const {
  return _internal_attachments_size();
}
inline void TeXLiveTask::clear_attachments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attachments_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TeXLiveTask::_internal_attachments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attachments_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TeXLiveTask::attachments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:palm.lily.v1.TeXLiveTask.attachments)
  return _internal_attachments();
}
inline ::google::protobuf::Map<std::string, std::string>* TeXLiveTask::_internal_mutable_attachments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attachments_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TeXLiveTask::mutable_attachments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:palm.lily.v1.TeXLiveTask.attachments)
  return _internal_mutable_attachments();
}

// .palm.lily.v1.TeXLiveTask.Output output = 9;
inline bool TeXLiveTask::has_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_ != nullptr);
  return value;
}
inline void TeXLiveTask::clear_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.output_ != nullptr) _impl_.output_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::lily::v1::TeXLiveTask_Output& TeXLiveTask::_internal_output() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::palm::lily::v1::TeXLiveTask_Output* p = _impl_.output_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::lily::v1::TeXLiveTask_Output&>(::palm::lily::v1::_TeXLiveTask_Output_default_instance_);
}
inline const ::palm::lily::v1::TeXLiveTask_Output& TeXLiveTask::output() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TeXLiveTask.output)
  return _internal_output();
}
inline void TeXLiveTask::unsafe_arena_set_allocated_output(::palm::lily::v1::TeXLiveTask_Output* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.output_);
  }
  _impl_.output_ = reinterpret_cast<::palm::lily::v1::TeXLiveTask_Output*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lily.v1.TeXLiveTask.output)
}
inline ::palm::lily::v1::TeXLiveTask_Output* TeXLiveTask::release_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::lily::v1::TeXLiveTask_Output* released = _impl_.output_;
  _impl_.output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::lily::v1::TeXLiveTask_Output* TeXLiveTask::unsafe_arena_release_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.TeXLiveTask.output)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::lily::v1::TeXLiveTask_Output* temp = _impl_.output_;
  _impl_.output_ = nullptr;
  return temp;
}
inline ::palm::lily::v1::TeXLiveTask_Output* TeXLiveTask::_internal_mutable_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.output_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::palm::lily::v1::TeXLiveTask_Output>(GetArena());
    _impl_.output_ = reinterpret_cast<::palm::lily::v1::TeXLiveTask_Output*>(p);
  }
  return _impl_.output_;
}
inline ::palm::lily::v1::TeXLiveTask_Output* TeXLiveTask::mutable_output() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::palm::lily::v1::TeXLiveTask_Output* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TeXLiveTask.output)
  return _msg;
}
inline void TeXLiveTask::set_allocated_output(::palm::lily::v1::TeXLiveTask_Output* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.output_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.output_ = reinterpret_cast<::palm::lily::v1::TeXLiveTask_Output*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TeXLiveTask.output)
}

// -------------------------------------------------------------------

// PandocTask_Input

// .palm.lily.v1.PandocTask.Format format = 1;
inline void PandocTask_Input::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0;
}
inline ::palm::lily::v1::PandocTask_Format PandocTask_Input::format() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.PandocTask.Input.format)
  return _internal_format();
}
inline void PandocTask_Input::set_format(::palm::lily::v1::PandocTask_Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.PandocTask.Input.format)
}
inline ::palm::lily::v1::PandocTask_Format PandocTask_Input::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::palm::lily::v1::PandocTask_Format>(_impl_.format_);
}
inline void PandocTask_Input::_internal_set_format(::palm::lily::v1::PandocTask_Format value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// bytes payload = 2;
inline void PandocTask_Input::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& PandocTask_Input::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.PandocTask.Input.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PandocTask_Input::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.PandocTask.Input.payload)
}
inline std::string* PandocTask_Input::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.PandocTask.Input.payload)
  return _s;
}
inline const std::string& PandocTask_Input::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void PandocTask_Input::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* PandocTask_Input::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* PandocTask_Input::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.PandocTask.Input.payload)
  return _impl_.payload_.Release();
}
inline void PandocTask_Input::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.PandocTask.Input.payload)
}

// -------------------------------------------------------------------

// PandocTask_Output

// .palm.lily.v1.PandocTask.Format format = 1;
inline void PandocTask_Output::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0;
}
inline ::palm::lily::v1::PandocTask_Format PandocTask_Output::format() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.PandocTask.Output.format)
  return _internal_format();
}
inline void PandocTask_Output::set_format(::palm::lily::v1::PandocTask_Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.PandocTask.Output.format)
}
inline ::palm::lily::v1::PandocTask_Format PandocTask_Output::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::palm::lily::v1::PandocTask_Format>(_impl_.format_);
}
inline void PandocTask_Output::_internal_set_format(::palm::lily::v1::PandocTask_Format value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// string bucket = 2;
inline void PandocTask_Output::clear_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& PandocTask_Output::bucket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.PandocTask.Output.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PandocTask_Output::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.PandocTask.Output.bucket)
}
inline std::string* PandocTask_Output::mutable_bucket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.PandocTask.Output.bucket)
  return _s;
}
inline const std::string& PandocTask_Output::_internal_bucket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bucket_.Get();
}
inline void PandocTask_Output::_internal_set_bucket(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Set(value, GetArena());
}
inline std::string* PandocTask_Output::_internal_mutable_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bucket_.Mutable( GetArena());
}
inline std::string* PandocTask_Output::release_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.PandocTask.Output.bucket)
  return _impl_.bucket_.Release();
}
inline void PandocTask_Output::set_allocated_bucket(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.PandocTask.Output.bucket)
}

// string object = 3;
inline void PandocTask_Output::clear_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.ClearToEmpty();
}
inline const std::string& PandocTask_Output::object() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.PandocTask.Output.object)
  return _internal_object();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PandocTask_Output::set_object(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.lily.v1.PandocTask.Output.object)
}
inline std::string* PandocTask_Output::mutable_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.PandocTask.Output.object)
  return _s;
}
inline const std::string& PandocTask_Output::_internal_object() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.object_.Get();
}
inline void PandocTask_Output::_internal_set_object(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.Set(value, GetArena());
}
inline std::string* PandocTask_Output::_internal_mutable_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.object_.Mutable( GetArena());
}
inline std::string* PandocTask_Output::release_object() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.PandocTask.Output.object)
  return _impl_.object_.Release();
}
inline void PandocTask_Output::set_allocated_object(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.object_.IsDefault()) {
          _impl_.object_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.PandocTask.Output.object)
}

// -------------------------------------------------------------------

// PandocTask

// .palm.lily.v1.PandocTask.Input input = 1;
inline bool PandocTask::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void PandocTask::clear_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::lily::v1::PandocTask_Input& PandocTask::_internal_input() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::palm::lily::v1::PandocTask_Input* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::lily::v1::PandocTask_Input&>(::palm::lily::v1::_PandocTask_Input_default_instance_);
}
inline const ::palm::lily::v1::PandocTask_Input& PandocTask::input() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.PandocTask.input)
  return _internal_input();
}
inline void PandocTask::unsafe_arena_set_allocated_input(::palm::lily::v1::PandocTask_Input* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = reinterpret_cast<::palm::lily::v1::PandocTask_Input*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lily.v1.PandocTask.input)
}
inline ::palm::lily::v1::PandocTask_Input* PandocTask::release_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::lily::v1::PandocTask_Input* released = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::lily::v1::PandocTask_Input* PandocTask::unsafe_arena_release_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.PandocTask.input)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::lily::v1::PandocTask_Input* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::palm::lily::v1::PandocTask_Input* PandocTask::_internal_mutable_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.input_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::palm::lily::v1::PandocTask_Input>(GetArena());
    _impl_.input_ = reinterpret_cast<::palm::lily::v1::PandocTask_Input*>(p);
  }
  return _impl_.input_;
}
inline ::palm::lily::v1::PandocTask_Input* PandocTask::mutable_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::palm::lily::v1::PandocTask_Input* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.PandocTask.input)
  return _msg;
}
inline void PandocTask::set_allocated_input(::palm::lily::v1::PandocTask_Input* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.input_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.input_ = reinterpret_cast<::palm::lily::v1::PandocTask_Input*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.PandocTask.input)
}

// .palm.lily.v1.PandocTask.Output output = 2;
inline bool PandocTask::has_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_ != nullptr);
  return value;
}
inline void PandocTask::clear_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.output_ != nullptr) _impl_.output_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::lily::v1::PandocTask_Output& PandocTask::_internal_output() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::palm::lily::v1::PandocTask_Output* p = _impl_.output_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::lily::v1::PandocTask_Output&>(::palm::lily::v1::_PandocTask_Output_default_instance_);
}
inline const ::palm::lily::v1::PandocTask_Output& PandocTask::output() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.lily.v1.PandocTask.output)
  return _internal_output();
}
inline void PandocTask::unsafe_arena_set_allocated_output(::palm::lily::v1::PandocTask_Output* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.output_);
  }
  _impl_.output_ = reinterpret_cast<::palm::lily::v1::PandocTask_Output*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lily.v1.PandocTask.output)
}
inline ::palm::lily::v1::PandocTask_Output* PandocTask::release_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::lily::v1::PandocTask_Output* released = _impl_.output_;
  _impl_.output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::lily::v1::PandocTask_Output* PandocTask::unsafe_arena_release_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.lily.v1.PandocTask.output)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::lily::v1::PandocTask_Output* temp = _impl_.output_;
  _impl_.output_ = nullptr;
  return temp;
}
inline ::palm::lily::v1::PandocTask_Output* PandocTask::_internal_mutable_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.output_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::palm::lily::v1::PandocTask_Output>(GetArena());
    _impl_.output_ = reinterpret_cast<::palm::lily::v1::PandocTask_Output*>(p);
  }
  return _impl_.output_;
}
inline ::palm::lily::v1::PandocTask_Output* PandocTask::mutable_output() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::palm::lily::v1::PandocTask_Output* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.PandocTask.output)
  return _msg;
}
inline void PandocTask::set_allocated_output(::palm::lily::v1::PandocTask_Output* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.output_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.output_ = reinterpret_cast<::palm::lily::v1::PandocTask_Output*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.PandocTask.output)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lily
}  // namespace palm


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::palm::lily::v1::TeXLiveTask_Output_Format> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::lily::v1::TeXLiveTask_Output_Format>() {
  return ::palm::lily::v1::TeXLiveTask_Output_Format_descriptor();
}
template <>
struct is_proto_enum<::palm::lily::v1::PandocTask_Format> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::lily::v1::PandocTask_Format>() {
  return ::palm::lily::v1::PandocTask_Format_descriptor();
}
template <>
struct is_proto_enum<::palm::lily::v1::Style> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::lily::v1::Style>() {
  return ::palm::lily::v1::Style_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_lily_2eproto_2epb_2eh
