// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daisy.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_daisy_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_daisy_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_daisy_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_daisy_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_daisy_2eproto;
namespace palm {
namespace daisy {
namespace v1 {
class EmailSendRequest;
struct EmailSendRequestDefaultTypeInternal;
extern EmailSendRequestDefaultTypeInternal _EmailSendRequest_default_instance_;
class EmailSendRequest_Address;
struct EmailSendRequest_AddressDefaultTypeInternal;
extern EmailSendRequest_AddressDefaultTypeInternal _EmailSendRequest_Address_default_instance_;
class EmailSendRequest_Attachment;
struct EmailSendRequest_AttachmentDefaultTypeInternal;
extern EmailSendRequest_AttachmentDefaultTypeInternal _EmailSendRequest_Attachment_default_instance_;
class EmailSendRequest_Body;
struct EmailSendRequest_BodyDefaultTypeInternal;
extern EmailSendRequest_BodyDefaultTypeInternal _EmailSendRequest_Body_default_instance_;
class SmsSendRequest;
struct SmsSendRequestDefaultTypeInternal;
extern SmsSendRequestDefaultTypeInternal _SmsSendRequest_default_instance_;
}  // namespace v1
}  // namespace daisy
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace daisy {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class SmsSendRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.SmsSendRequest) */ {
 public:
  inline SmsSendRequest() : SmsSendRequest(nullptr) {}
  ~SmsSendRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SmsSendRequest(::google::protobuf::internal::ConstantInitialized);

  inline SmsSendRequest(const SmsSendRequest& from)
      : SmsSendRequest(nullptr, from) {}
  SmsSendRequest(SmsSendRequest&& from) noexcept
    : SmsSendRequest() {
    *this = ::std::move(from);
  }

  inline SmsSendRequest& operator=(const SmsSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmsSendRequest& operator=(SmsSendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmsSendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmsSendRequest* internal_default_instance() {
    return reinterpret_cast<const SmsSendRequest*>(
               &_SmsSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SmsSendRequest& a, SmsSendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SmsSendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmsSendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmsSendRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmsSendRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SmsSendRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SmsSendRequest& from) {
    SmsSendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SmsSendRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.daisy.v1.SmsSendRequest";
  }
  protected:
  explicit SmsSendRequest(::google::protobuf::Arena* arena);
  SmsSendRequest(::google::protobuf::Arena* arena, const SmsSendRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kBodyFieldNumber = 2,
    kCallbackUriFieldNumber = 3,
  };
  // repeated string to = 1;
  int to_size() const;
  private:
  int _internal_to_size() const;

  public:
  void clear_to() ;
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, std::size_t size);
  void set_to(int index, absl::string_view value);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, std::size_t size);
  void add_to(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& to() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_to();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_to() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_to();

  public:
  // string body = 2;
  void clear_body() ;
  const std::string& body() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* value);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // optional string callback_uri = 3;
  bool has_callback_uri() const;
  void clear_callback_uri() ;
  const std::string& callback_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_callback_uri(Arg_&& arg, Args_... args);
  std::string* mutable_callback_uri();
  PROTOBUF_NODISCARD std::string* release_callback_uri();
  void set_allocated_callback_uri(std::string* value);

  private:
  const std::string& _internal_callback_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback_uri(
      const std::string& value);
  std::string* _internal_mutable_callback_uri();

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.SmsSendRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> to_;
    ::google::protobuf::internal::ArenaStringPtr body_;
    ::google::protobuf::internal::ArenaStringPtr callback_uri_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};// -------------------------------------------------------------------

class EmailSendRequest_Body final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailSendRequest.Body) */ {
 public:
  inline EmailSendRequest_Body() : EmailSendRequest_Body(nullptr) {}
  ~EmailSendRequest_Body() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmailSendRequest_Body(::google::protobuf::internal::ConstantInitialized);

  inline EmailSendRequest_Body(const EmailSendRequest_Body& from)
      : EmailSendRequest_Body(nullptr, from) {}
  EmailSendRequest_Body(EmailSendRequest_Body&& from) noexcept
    : EmailSendRequest_Body() {
    *this = ::std::move(from);
  }

  inline EmailSendRequest_Body& operator=(const EmailSendRequest_Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailSendRequest_Body& operator=(EmailSendRequest_Body&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailSendRequest_Body& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailSendRequest_Body* internal_default_instance() {
    return reinterpret_cast<const EmailSendRequest_Body*>(
               &_EmailSendRequest_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmailSendRequest_Body& a, EmailSendRequest_Body& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailSendRequest_Body* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailSendRequest_Body* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailSendRequest_Body* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailSendRequest_Body>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailSendRequest_Body& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EmailSendRequest_Body& from) {
    EmailSendRequest_Body::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmailSendRequest_Body* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.daisy.v1.EmailSendRequest.Body";
  }
  protected:
  explicit EmailSendRequest_Body(::google::protobuf::Arena* arena);
  EmailSendRequest_Body(::google::protobuf::Arena* arena, const EmailSendRequest_Body& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kHtmlFieldNumber = 2,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // bool html = 2;
  void clear_html() ;
  bool html() const;
  void set_html(bool value);

  private:
  bool _internal_html() const;
  void _internal_set_html(bool value);

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailSendRequest.Body)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr text_;
    bool html_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};// -------------------------------------------------------------------

class EmailSendRequest_Attachment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailSendRequest.Attachment) */ {
 public:
  inline EmailSendRequest_Attachment() : EmailSendRequest_Attachment(nullptr) {}
  ~EmailSendRequest_Attachment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmailSendRequest_Attachment(::google::protobuf::internal::ConstantInitialized);

  inline EmailSendRequest_Attachment(const EmailSendRequest_Attachment& from)
      : EmailSendRequest_Attachment(nullptr, from) {}
  EmailSendRequest_Attachment(EmailSendRequest_Attachment&& from) noexcept
    : EmailSendRequest_Attachment() {
    *this = ::std::move(from);
  }

  inline EmailSendRequest_Attachment& operator=(const EmailSendRequest_Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailSendRequest_Attachment& operator=(EmailSendRequest_Attachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailSendRequest_Attachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailSendRequest_Attachment* internal_default_instance() {
    return reinterpret_cast<const EmailSendRequest_Attachment*>(
               &_EmailSendRequest_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EmailSendRequest_Attachment& a, EmailSendRequest_Attachment& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailSendRequest_Attachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailSendRequest_Attachment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailSendRequest_Attachment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailSendRequest_Attachment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailSendRequest_Attachment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EmailSendRequest_Attachment& from) {
    EmailSendRequest_Attachment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmailSendRequest_Attachment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.daisy.v1.EmailSendRequest.Attachment";
  }
  protected:
  explicit EmailSendRequest_Attachment(::google::protobuf::Arena* arena);
  EmailSendRequest_Attachment(::google::protobuf::Arena* arena, const EmailSendRequest_Attachment& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kContentTypeFieldNumber = 2,
    kBodyFieldNumber = 9,
    kInlineFieldNumber = 3,
  };
  // string title = 1;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string content_type = 2;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* value);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // bytes body = 9;
  void clear_body() ;
  const std::string& body() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* value);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // bool inline = 3;
  void clear_inline_() ;
  bool inline_() const;
  void set_inline_(bool value);

  private:
  bool _internal_inline_() const;
  void _internal_set_inline_(bool value);

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailSendRequest.Attachment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      67, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    ::google::protobuf::internal::ArenaStringPtr body_;
    bool inline__;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};// -------------------------------------------------------------------

class EmailSendRequest_Address final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailSendRequest.Address) */ {
 public:
  inline EmailSendRequest_Address() : EmailSendRequest_Address(nullptr) {}
  ~EmailSendRequest_Address() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmailSendRequest_Address(::google::protobuf::internal::ConstantInitialized);

  inline EmailSendRequest_Address(const EmailSendRequest_Address& from)
      : EmailSendRequest_Address(nullptr, from) {}
  EmailSendRequest_Address(EmailSendRequest_Address&& from) noexcept
    : EmailSendRequest_Address() {
    *this = ::std::move(from);
  }

  inline EmailSendRequest_Address& operator=(const EmailSendRequest_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailSendRequest_Address& operator=(EmailSendRequest_Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailSendRequest_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailSendRequest_Address* internal_default_instance() {
    return reinterpret_cast<const EmailSendRequest_Address*>(
               &_EmailSendRequest_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EmailSendRequest_Address& a, EmailSendRequest_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailSendRequest_Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailSendRequest_Address* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailSendRequest_Address* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailSendRequest_Address>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailSendRequest_Address& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EmailSendRequest_Address& from) {
    EmailSendRequest_Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmailSendRequest_Address* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.daisy.v1.EmailSendRequest.Address";
  }
  protected:
  explicit EmailSendRequest_Address(::google::protobuf::Arena* arena);
  EmailSendRequest_Address(::google::protobuf::Arena* arena, const EmailSendRequest_Address& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string email = 2;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailSendRequest.Address)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};// -------------------------------------------------------------------

class EmailSendRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailSendRequest) */ {
 public:
  inline EmailSendRequest() : EmailSendRequest(nullptr) {}
  ~EmailSendRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmailSendRequest(::google::protobuf::internal::ConstantInitialized);

  inline EmailSendRequest(const EmailSendRequest& from)
      : EmailSendRequest(nullptr, from) {}
  EmailSendRequest(EmailSendRequest&& from) noexcept
    : EmailSendRequest() {
    *this = ::std::move(from);
  }

  inline EmailSendRequest& operator=(const EmailSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailSendRequest& operator=(EmailSendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailSendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailSendRequest* internal_default_instance() {
    return reinterpret_cast<const EmailSendRequest*>(
               &_EmailSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EmailSendRequest& a, EmailSendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailSendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailSendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailSendRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailSendRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailSendRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EmailSendRequest& from) {
    EmailSendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmailSendRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.daisy.v1.EmailSendRequest";
  }
  protected:
  explicit EmailSendRequest(::google::protobuf::Arena* arena);
  EmailSendRequest(::google::protobuf::Arena* arena, const EmailSendRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Address = EmailSendRequest_Address;
  using Body = EmailSendRequest_Body;
  using Attachment = EmailSendRequest_Attachment;

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 4,
    kBccFieldNumber = 5,
    kAttachmentsFieldNumber = 9,
    kSubjectFieldNumber = 1,
    kBodyFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // repeated .palm.daisy.v1.EmailSendRequest.Address cc = 4;
  int cc_size() const;
  private:
  int _internal_cc_size() const;

  public:
  void clear_cc() ;
  ::palm::daisy::v1::EmailSendRequest_Address* mutable_cc(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >*
      mutable_cc();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>& _internal_cc() const;
  ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>* _internal_mutable_cc();
  public:
  const ::palm::daisy::v1::EmailSendRequest_Address& cc(int index) const;
  ::palm::daisy::v1::EmailSendRequest_Address* add_cc();
  const ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >&
      cc() const;
  // repeated .palm.daisy.v1.EmailSendRequest.Address bcc = 5;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;

  public:
  void clear_bcc() ;
  ::palm::daisy::v1::EmailSendRequest_Address* mutable_bcc(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >*
      mutable_bcc();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>& _internal_bcc() const;
  ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>* _internal_mutable_bcc();
  public:
  const ::palm::daisy::v1::EmailSendRequest_Address& bcc(int index) const;
  ::palm::daisy::v1::EmailSendRequest_Address* add_bcc();
  const ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >&
      bcc() const;
  // repeated .palm.daisy.v1.EmailSendRequest.Attachment attachments = 9;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;

  public:
  void clear_attachments() ;
  ::palm::daisy::v1::EmailSendRequest_Attachment* mutable_attachments(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Attachment >*
      mutable_attachments();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Attachment>& _internal_attachments() const;
  ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Attachment>* _internal_mutable_attachments();
  public:
  const ::palm::daisy::v1::EmailSendRequest_Attachment& attachments(int index) const;
  ::palm::daisy::v1::EmailSendRequest_Attachment* add_attachments();
  const ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Attachment >&
      attachments() const;
  // string subject = 1;
  void clear_subject() ;
  const std::string& subject() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* value);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // .palm.daisy.v1.EmailSendRequest.Body body = 2;
  bool has_body() const;
  void clear_body() ;
  const ::palm::daisy::v1::EmailSendRequest_Body& body() const;
  PROTOBUF_NODISCARD ::palm::daisy::v1::EmailSendRequest_Body* release_body();
  ::palm::daisy::v1::EmailSendRequest_Body* mutable_body();
  void set_allocated_body(::palm::daisy::v1::EmailSendRequest_Body* value);
  void unsafe_arena_set_allocated_body(::palm::daisy::v1::EmailSendRequest_Body* value);
  ::palm::daisy::v1::EmailSendRequest_Body* unsafe_arena_release_body();

  private:
  const ::palm::daisy::v1::EmailSendRequest_Body& _internal_body() const;
  ::palm::daisy::v1::EmailSendRequest_Body* _internal_mutable_body();

  public:
  // .palm.daisy.v1.EmailSendRequest.Address to = 3;
  bool has_to() const;
  void clear_to() ;
  const ::palm::daisy::v1::EmailSendRequest_Address& to() const;
  PROTOBUF_NODISCARD ::palm::daisy::v1::EmailSendRequest_Address* release_to();
  ::palm::daisy::v1::EmailSendRequest_Address* mutable_to();
  void set_allocated_to(::palm::daisy::v1::EmailSendRequest_Address* value);
  void unsafe_arena_set_allocated_to(::palm::daisy::v1::EmailSendRequest_Address* value);
  ::palm::daisy::v1::EmailSendRequest_Address* unsafe_arena_release_to();

  private:
  const ::palm::daisy::v1::EmailSendRequest_Address& _internal_to() const;
  ::palm::daisy::v1::EmailSendRequest_Address* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailSendRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 5,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address > cc_;
    ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address > bcc_;
    ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Attachment > attachments_;
    ::google::protobuf::internal::ArenaStringPtr subject_;
    ::palm::daisy::v1::EmailSendRequest_Body* body_;
    ::palm::daisy::v1::EmailSendRequest_Address* to_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SmsSendRequest

// repeated string to = 1;
inline int SmsSendRequest::_internal_to_size() const {
  return _internal_to().size();
}
inline int SmsSendRequest::to_size() const {
  return _internal_to_size();
}
inline void SmsSendRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_.Clear();
}
inline std::string* SmsSendRequest::add_to()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_to()->Add();
  // @@protoc_insertion_point(field_add_mutable:palm.daisy.v1.SmsSendRequest.to)
  return _s;
}
inline const std::string& SmsSendRequest::to(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.SmsSendRequest.to)
  return _internal_to().Get(index);
}
inline std::string* SmsSendRequest::mutable_to(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.SmsSendRequest.to)
  return _internal_mutable_to()->Mutable(index);
}
inline void SmsSendRequest::set_to(int index, const std::string& value) {
  _internal_mutable_to()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::set_to(int index, std::string&& value) {
  _internal_mutable_to()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::set_to(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_to()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::set_to(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_to()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::set_to(int index, absl::string_view value) {
  _internal_mutable_to()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::add_to(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::add_to(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::add_to(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::add_to(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::add_to(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.daisy.v1.SmsSendRequest.to)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SmsSendRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.SmsSendRequest.to)
  return _internal_to();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SmsSendRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.SmsSendRequest.to)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_to();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SmsSendRequest::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.to_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SmsSendRequest::_internal_mutable_to() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.to_;
}

// string body = 2;
inline void SmsSendRequest::clear_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.body_.ClearToEmpty();
}
inline const std::string& SmsSendRequest::body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.SmsSendRequest.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SmsSendRequest::set_body(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.body_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsSendRequest.body)
}
inline std::string* SmsSendRequest::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.SmsSendRequest.body)
  return _s;
}
inline const std::string& SmsSendRequest::_internal_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.body_.Get();
}
inline void SmsSendRequest::_internal_set_body(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.body_.Set(value, GetArena());
}
inline std::string* SmsSendRequest::_internal_mutable_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.body_.Mutable( GetArena());
}
inline std::string* SmsSendRequest::release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.SmsSendRequest.body)
  return _impl_.body_.Release();
}
inline void SmsSendRequest::set_allocated_body(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.body_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.SmsSendRequest.body)
}

// optional string callback_uri = 3;
inline bool SmsSendRequest::has_callback_uri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SmsSendRequest::clear_callback_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.callback_uri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SmsSendRequest::callback_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.SmsSendRequest.callback_uri)
  return _internal_callback_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SmsSendRequest::set_callback_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.callback_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsSendRequest.callback_uri)
}
inline std::string* SmsSendRequest::mutable_callback_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_callback_uri();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.SmsSendRequest.callback_uri)
  return _s;
}
inline const std::string& SmsSendRequest::_internal_callback_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.callback_uri_.Get();
}
inline void SmsSendRequest::_internal_set_callback_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.callback_uri_.Set(value, GetArena());
}
inline std::string* SmsSendRequest::_internal_mutable_callback_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.callback_uri_.Mutable( GetArena());
}
inline std::string* SmsSendRequest::release_callback_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.SmsSendRequest.callback_uri)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.callback_uri_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.callback_uri_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SmsSendRequest::set_allocated_callback_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.callback_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.callback_uri_.IsDefault()) {
          _impl_.callback_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.SmsSendRequest.callback_uri)
}

// -------------------------------------------------------------------

// EmailSendRequest_Address

// string name = 1;
inline void EmailSendRequest_Address::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Address::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Address.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailSendRequest_Address::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Address.name)
}
inline std::string* EmailSendRequest_Address::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Address.name)
  return _s;
}
inline const std::string& EmailSendRequest_Address::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void EmailSendRequest_Address::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* EmailSendRequest_Address::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* EmailSendRequest_Address::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Address.name)
  return _impl_.name_.Release();
}
inline void EmailSendRequest_Address::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Address.name)
}

// string email = 2;
inline void EmailSendRequest_Address::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Address::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Address.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailSendRequest_Address::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Address.email)
}
inline std::string* EmailSendRequest_Address::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Address.email)
  return _s;
}
inline const std::string& EmailSendRequest_Address::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void EmailSendRequest_Address::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* EmailSendRequest_Address::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* EmailSendRequest_Address::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Address.email)
  return _impl_.email_.Release();
}
inline void EmailSendRequest_Address::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Address.email)
}

// -------------------------------------------------------------------

// EmailSendRequest_Body

// string text = 1;
inline void EmailSendRequest_Body::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Body::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Body.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailSendRequest_Body::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Body.text)
}
inline std::string* EmailSendRequest_Body::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Body.text)
  return _s;
}
inline const std::string& EmailSendRequest_Body::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void EmailSendRequest_Body::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* EmailSendRequest_Body::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* EmailSendRequest_Body::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Body.text)
  return _impl_.text_.Release();
}
inline void EmailSendRequest_Body::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Body.text)
}

// bool html = 2;
inline void EmailSendRequest_Body::clear_html() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.html_ = false;
}
inline bool EmailSendRequest_Body::html() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Body.html)
  return _internal_html();
}
inline void EmailSendRequest_Body::set_html(bool value) {
  _internal_set_html(value);
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Body.html)
}
inline bool EmailSendRequest_Body::_internal_html() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.html_;
}
inline void EmailSendRequest_Body::_internal_set_html(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.html_ = value;
}

// -------------------------------------------------------------------

// EmailSendRequest_Attachment

// string title = 1;
inline void EmailSendRequest_Attachment::clear_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Attachment::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Attachment.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailSendRequest_Attachment::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Attachment.title)
}
inline std::string* EmailSendRequest_Attachment::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Attachment.title)
  return _s;
}
inline const std::string& EmailSendRequest_Attachment::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void EmailSendRequest_Attachment::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* EmailSendRequest_Attachment::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* EmailSendRequest_Attachment::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Attachment.title)
  return _impl_.title_.Release();
}
inline void EmailSendRequest_Attachment::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Attachment.title)
}

// string content_type = 2;
inline void EmailSendRequest_Attachment::clear_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Attachment::content_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailSendRequest_Attachment::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
}
inline std::string* EmailSendRequest_Attachment::mutable_content_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
  return _s;
}
inline const std::string& EmailSendRequest_Attachment::_internal_content_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_type_.Get();
}
inline void EmailSendRequest_Attachment::_internal_set_content_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(value, GetArena());
}
inline std::string* EmailSendRequest_Attachment::_internal_mutable_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_type_.Mutable( GetArena());
}
inline std::string* EmailSendRequest_Attachment::release_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
  return _impl_.content_type_.Release();
}
inline void EmailSendRequest_Attachment::set_allocated_content_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
}

// bool inline = 3;
inline void EmailSendRequest_Attachment::clear_inline_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inline__ = false;
}
inline bool EmailSendRequest_Attachment::inline_() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Attachment.inline)
  return _internal_inline_();
}
inline void EmailSendRequest_Attachment::set_inline_(bool value) {
  _internal_set_inline_(value);
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Attachment.inline)
}
inline bool EmailSendRequest_Attachment::_internal_inline_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inline__;
}
inline void EmailSendRequest_Attachment::_internal_set_inline_(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inline__ = value;
}

// bytes body = 9;
inline void EmailSendRequest_Attachment::clear_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.body_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Attachment::body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Attachment.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailSendRequest_Attachment::set_body(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.body_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Attachment.body)
}
inline std::string* EmailSendRequest_Attachment::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Attachment.body)
  return _s;
}
inline const std::string& EmailSendRequest_Attachment::_internal_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.body_.Get();
}
inline void EmailSendRequest_Attachment::_internal_set_body(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.body_.Set(value, GetArena());
}
inline std::string* EmailSendRequest_Attachment::_internal_mutable_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.body_.Mutable( GetArena());
}
inline std::string* EmailSendRequest_Attachment::release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Attachment.body)
  return _impl_.body_.Release();
}
inline void EmailSendRequest_Attachment::set_allocated_body(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.body_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Attachment.body)
}

// -------------------------------------------------------------------

// EmailSendRequest

// string subject = 1;
inline void EmailSendRequest::clear_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& EmailSendRequest::subject() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailSendRequest::set_subject(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.subject)
}
inline std::string* EmailSendRequest::mutable_subject() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.subject)
  return _s;
}
inline const std::string& EmailSendRequest::_internal_subject() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subject_.Get();
}
inline void EmailSendRequest::_internal_set_subject(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subject_.Set(value, GetArena());
}
inline std::string* EmailSendRequest::_internal_mutable_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.subject_.Mutable( GetArena());
}
inline std::string* EmailSendRequest::release_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.subject)
  return _impl_.subject_.Release();
}
inline void EmailSendRequest::set_allocated_subject(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subject_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.subject)
}

// .palm.daisy.v1.EmailSendRequest.Body body = 2;
inline bool EmailSendRequest::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline void EmailSendRequest::clear_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::daisy::v1::EmailSendRequest_Body& EmailSendRequest::_internal_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::daisy::v1::EmailSendRequest_Body* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::daisy::v1::EmailSendRequest_Body&>(::palm::daisy::v1::_EmailSendRequest_Body_default_instance_);
}
inline const ::palm::daisy::v1::EmailSendRequest_Body& EmailSendRequest::body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.body)
  return _internal_body();
}
inline void EmailSendRequest::unsafe_arena_set_allocated_body(::palm::daisy::v1::EmailSendRequest_Body* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Body*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.daisy.v1.EmailSendRequest.body)
}
inline ::palm::daisy::v1::EmailSendRequest_Body* EmailSendRequest::release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::daisy::v1::EmailSendRequest_Body* released = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::daisy::v1::EmailSendRequest_Body* EmailSendRequest::unsafe_arena_release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.body)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::daisy::v1::EmailSendRequest_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::palm::daisy::v1::EmailSendRequest_Body* EmailSendRequest::_internal_mutable_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::daisy::v1::EmailSendRequest_Body>(GetArena());
    _impl_.body_ = reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Body*>(p);
  }
  return _impl_.body_;
}
inline ::palm::daisy::v1::EmailSendRequest_Body* EmailSendRequest::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::daisy::v1::EmailSendRequest_Body* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.body)
  return _msg;
}
inline void EmailSendRequest::set_allocated_body(::palm::daisy::v1::EmailSendRequest_Body* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Body*>(_impl_.body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Body*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.body_ = reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Body*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.body)
}

// .palm.daisy.v1.EmailSendRequest.Address to = 3;
inline bool EmailSendRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline void EmailSendRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::daisy::v1::EmailSendRequest_Address* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::daisy::v1::EmailSendRequest_Address&>(::palm::daisy::v1::_EmailSendRequest_Address_default_instance_);
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.to)
  return _internal_to();
}
inline void EmailSendRequest::unsafe_arena_set_allocated_to(::palm::daisy::v1::EmailSendRequest_Address* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Address*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.daisy.v1.EmailSendRequest.to)
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::daisy::v1::EmailSendRequest_Address* released = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::unsafe_arena_release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::daisy::v1::EmailSendRequest_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::daisy::v1::EmailSendRequest_Address>(GetArena());
    _impl_.to_ = reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Address*>(p);
  }
  return _impl_.to_;
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::palm::daisy::v1::EmailSendRequest_Address* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.to)
  return _msg;
}
inline void EmailSendRequest::set_allocated_to(::palm::daisy::v1::EmailSendRequest_Address* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Address*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Address*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::palm::daisy::v1::EmailSendRequest_Address*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.to)
}

// repeated .palm.daisy.v1.EmailSendRequest.Address cc = 4;
inline int EmailSendRequest::_internal_cc_size() const {
  return _internal_cc().size();
}
inline int EmailSendRequest::cc_size() const {
  return _internal_cc_size();
}
inline void EmailSendRequest::clear_cc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cc_.Clear();
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::mutable_cc(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.cc)
  return _internal_mutable_cc()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>* EmailSendRequest::mutable_cc()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.EmailSendRequest.cc)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_cc();
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::cc(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.cc)
  return _internal_cc().Get(index);
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::add_cc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::daisy::v1::EmailSendRequest_Address* _add = _internal_mutable_cc()->Add();
  // @@protoc_insertion_point(field_add:palm.daisy.v1.EmailSendRequest.cc)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>& EmailSendRequest::cc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.EmailSendRequest.cc)
  return _internal_cc();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>&
EmailSendRequest::_internal_cc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cc_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>*
EmailSendRequest::_internal_mutable_cc() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.cc_;
}

// repeated .palm.daisy.v1.EmailSendRequest.Address bcc = 5;
inline int EmailSendRequest::_internal_bcc_size() const {
  return _internal_bcc().size();
}
inline int EmailSendRequest::bcc_size() const {
  return _internal_bcc_size();
}
inline void EmailSendRequest::clear_bcc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bcc_.Clear();
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::mutable_bcc(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.bcc)
  return _internal_mutable_bcc()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>* EmailSendRequest::mutable_bcc()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.EmailSendRequest.bcc)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bcc();
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::bcc(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.bcc)
  return _internal_bcc().Get(index);
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::add_bcc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::daisy::v1::EmailSendRequest_Address* _add = _internal_mutable_bcc()->Add();
  // @@protoc_insertion_point(field_add:palm.daisy.v1.EmailSendRequest.bcc)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>& EmailSendRequest::bcc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.EmailSendRequest.bcc)
  return _internal_bcc();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>&
EmailSendRequest::_internal_bcc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bcc_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Address>*
EmailSendRequest::_internal_mutable_bcc() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bcc_;
}

// repeated .palm.daisy.v1.EmailSendRequest.Attachment attachments = 9;
inline int EmailSendRequest::_internal_attachments_size() const {
  return _internal_attachments().size();
}
inline int EmailSendRequest::attachments_size() const {
  return _internal_attachments_size();
}
inline void EmailSendRequest::clear_attachments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attachments_.Clear();
}
inline ::palm::daisy::v1::EmailSendRequest_Attachment* EmailSendRequest::mutable_attachments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.attachments)
  return _internal_mutable_attachments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Attachment>* EmailSendRequest::mutable_attachments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.EmailSendRequest.attachments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attachments();
}
inline const ::palm::daisy::v1::EmailSendRequest_Attachment& EmailSendRequest::attachments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.attachments)
  return _internal_attachments().Get(index);
}
inline ::palm::daisy::v1::EmailSendRequest_Attachment* EmailSendRequest::add_attachments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::daisy::v1::EmailSendRequest_Attachment* _add = _internal_mutable_attachments()->Add();
  // @@protoc_insertion_point(field_add:palm.daisy.v1.EmailSendRequest.attachments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Attachment>& EmailSendRequest::attachments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.EmailSendRequest.attachments)
  return _internal_attachments();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Attachment>&
EmailSendRequest::_internal_attachments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attachments_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailSendRequest_Attachment>*
EmailSendRequest::_internal_mutable_attachments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attachments_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace daisy
}  // namespace palm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_daisy_2eproto_2epb_2eh
