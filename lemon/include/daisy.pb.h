// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: daisy.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_daisy_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_daisy_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_daisy_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_daisy_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_daisy_2eproto;
namespace palm {
namespace daisy {
namespace v1 {
class EmailTask;
struct EmailTaskDefaultTypeInternal;
extern EmailTaskDefaultTypeInternal _EmailTask_default_instance_;
class EmailTask_Address;
struct EmailTask_AddressDefaultTypeInternal;
extern EmailTask_AddressDefaultTypeInternal _EmailTask_Address_default_instance_;
class EmailTask_Attachment;
struct EmailTask_AttachmentDefaultTypeInternal;
extern EmailTask_AttachmentDefaultTypeInternal _EmailTask_Attachment_default_instance_;
class EmailTask_Body;
struct EmailTask_BodyDefaultTypeInternal;
extern EmailTask_BodyDefaultTypeInternal _EmailTask_Body_default_instance_;
class SmsTask;
struct SmsTaskDefaultTypeInternal;
extern SmsTaskDefaultTypeInternal _SmsTask_default_instance_;
}  // namespace v1
}  // namespace daisy
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace daisy {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class SmsTask final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.daisy.v1.SmsTask) */ {
 public:
  inline SmsTask() : SmsTask(nullptr) {}
  ~SmsTask() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SmsTask(
      ::google::protobuf::internal::ConstantInitialized);

  inline SmsTask(const SmsTask& from) : SmsTask(nullptr, from) {}
  inline SmsTask(SmsTask&& from) noexcept
      : SmsTask(nullptr, std::move(from)) {}
  inline SmsTask& operator=(const SmsTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmsTask& operator=(SmsTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmsTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmsTask* internal_default_instance() {
    return reinterpret_cast<const SmsTask*>(
        &_SmsTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SmsTask& a, SmsTask& b) { a.Swap(&b); }
  inline void Swap(SmsTask* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmsTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmsTask* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SmsTask>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SmsTask& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SmsTask& from) { SmsTask::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SmsTask* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.daisy.v1.SmsTask"; }

 protected:
  explicit SmsTask(::google::protobuf::Arena* arena);
  SmsTask(::google::protobuf::Arena* arena, const SmsTask& from);
  SmsTask(::google::protobuf::Arena* arena, SmsTask&& from) noexcept
      : SmsTask(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kToFieldNumber = 1,
    kBodyFieldNumber = 2,
    kCallbackUriFieldNumber = 3,
  };
  // repeated string to = 1;
  int to_size() const;
  private:
  int _internal_to_size() const;

  public:
  void clear_to() ;
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, std::size_t size);
  void set_to(int index, absl::string_view value);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, std::size_t size);
  void add_to(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& to() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_to();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_to() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_to();

  public:
  // string body = 2;
  void clear_body() ;
  const std::string& body() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* value);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // optional string callback_uri = 3;
  bool has_callback_uri() const;
  void clear_callback_uri() ;
  const std::string& callback_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_callback_uri(Arg_&& arg, Args_... args);
  std::string* mutable_callback_uri();
  PROTOBUF_NODISCARD std::string* release_callback_uri();
  void set_allocated_callback_uri(std::string* value);

  private:
  const std::string& _internal_callback_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback_uri(
      const std::string& value);
  std::string* _internal_mutable_callback_uri();

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.SmsTask)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SmsTask_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SmsTask& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> to_;
    ::google::protobuf::internal::ArenaStringPtr body_;
    ::google::protobuf::internal::ArenaStringPtr callback_uri_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};
// -------------------------------------------------------------------

class EmailTask_Body final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailTask.Body) */ {
 public:
  inline EmailTask_Body() : EmailTask_Body(nullptr) {}
  ~EmailTask_Body() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmailTask_Body(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmailTask_Body(const EmailTask_Body& from) : EmailTask_Body(nullptr, from) {}
  inline EmailTask_Body(EmailTask_Body&& from) noexcept
      : EmailTask_Body(nullptr, std::move(from)) {}
  inline EmailTask_Body& operator=(const EmailTask_Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Body& operator=(EmailTask_Body&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Body& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Body* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Body*>(
        &_EmailTask_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(EmailTask_Body& a, EmailTask_Body& b) { a.Swap(&b); }
  inline void Swap(EmailTask_Body* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Body* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Body* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EmailTask_Body>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailTask_Body& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmailTask_Body& from) { EmailTask_Body::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmailTask_Body* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.daisy.v1.EmailTask.Body"; }

 protected:
  explicit EmailTask_Body(::google::protobuf::Arena* arena);
  EmailTask_Body(::google::protobuf::Arena* arena, const EmailTask_Body& from);
  EmailTask_Body(::google::protobuf::Arena* arena, EmailTask_Body&& from) noexcept
      : EmailTask_Body(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTextFieldNumber = 1,
    kHtmlFieldNumber = 2,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // bool html = 2;
  void clear_html() ;
  bool html() const;
  void set_html(bool value);

  private:
  bool _internal_html() const;
  void _internal_set_html(bool value);

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailTask.Body)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EmailTask_Body_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmailTask_Body& from_msg);
    ::google::protobuf::internal::ArenaStringPtr text_;
    bool html_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};
// -------------------------------------------------------------------

class EmailTask_Attachment final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailTask.Attachment) */ {
 public:
  inline EmailTask_Attachment() : EmailTask_Attachment(nullptr) {}
  ~EmailTask_Attachment() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmailTask_Attachment(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmailTask_Attachment(const EmailTask_Attachment& from) : EmailTask_Attachment(nullptr, from) {}
  inline EmailTask_Attachment(EmailTask_Attachment&& from) noexcept
      : EmailTask_Attachment(nullptr, std::move(from)) {}
  inline EmailTask_Attachment& operator=(const EmailTask_Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Attachment& operator=(EmailTask_Attachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Attachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Attachment* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Attachment*>(
        &_EmailTask_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(EmailTask_Attachment& a, EmailTask_Attachment& b) { a.Swap(&b); }
  inline void Swap(EmailTask_Attachment* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Attachment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Attachment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EmailTask_Attachment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailTask_Attachment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmailTask_Attachment& from) { EmailTask_Attachment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmailTask_Attachment* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.daisy.v1.EmailTask.Attachment"; }

 protected:
  explicit EmailTask_Attachment(::google::protobuf::Arena* arena);
  EmailTask_Attachment(::google::protobuf::Arena* arena, const EmailTask_Attachment& from);
  EmailTask_Attachment(::google::protobuf::Arena* arena, EmailTask_Attachment&& from) noexcept
      : EmailTask_Attachment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 1,
    kContentTypeFieldNumber = 2,
    kBodyFieldNumber = 9,
    kInlineFieldNumber = 3,
  };
  // string title = 1;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string content_type = 2;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* value);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // bytes body = 9;
  void clear_body() ;
  const std::string& body() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* value);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // bool inline = 3;
  void clear_inline_() ;
  bool inline_() const;
  void set_inline_(bool value);

  private:
  bool _internal_inline_() const;
  void _internal_set_inline_(bool value);

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailTask.Attachment)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EmailTask_Attachment_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmailTask_Attachment& from_msg);
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    ::google::protobuf::internal::ArenaStringPtr body_;
    bool inline__;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};
// -------------------------------------------------------------------

class EmailTask_Address final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailTask.Address) */ {
 public:
  inline EmailTask_Address() : EmailTask_Address(nullptr) {}
  ~EmailTask_Address() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmailTask_Address(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmailTask_Address(const EmailTask_Address& from) : EmailTask_Address(nullptr, from) {}
  inline EmailTask_Address(EmailTask_Address&& from) noexcept
      : EmailTask_Address(nullptr, std::move(from)) {}
  inline EmailTask_Address& operator=(const EmailTask_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Address& operator=(EmailTask_Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Address* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Address*>(
        &_EmailTask_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EmailTask_Address& a, EmailTask_Address& b) { a.Swap(&b); }
  inline void Swap(EmailTask_Address* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Address* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Address* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EmailTask_Address>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailTask_Address& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmailTask_Address& from) { EmailTask_Address::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmailTask_Address* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.daisy.v1.EmailTask.Address"; }

 protected:
  explicit EmailTask_Address(::google::protobuf::Arena* arena);
  EmailTask_Address(::google::protobuf::Arena* arena, const EmailTask_Address& from);
  EmailTask_Address(::google::protobuf::Arena* arena, EmailTask_Address&& from) noexcept
      : EmailTask_Address(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string email = 2;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailTask.Address)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EmailTask_Address_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmailTask_Address& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};
// -------------------------------------------------------------------

class EmailTask final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailTask) */ {
 public:
  inline EmailTask() : EmailTask(nullptr) {}
  ~EmailTask() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmailTask(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmailTask(const EmailTask& from) : EmailTask(nullptr, from) {}
  inline EmailTask(EmailTask&& from) noexcept
      : EmailTask(nullptr, std::move(from)) {}
  inline EmailTask& operator=(const EmailTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask& operator=(EmailTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask* internal_default_instance() {
    return reinterpret_cast<const EmailTask*>(
        &_EmailTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(EmailTask& a, EmailTask& b) { a.Swap(&b); }
  inline void Swap(EmailTask* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EmailTask>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailTask& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmailTask& from) { EmailTask::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmailTask* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "palm.daisy.v1.EmailTask"; }

 protected:
  explicit EmailTask(::google::protobuf::Arena* arena);
  EmailTask(::google::protobuf::Arena* arena, const EmailTask& from);
  EmailTask(::google::protobuf::Arena* arena, EmailTask&& from) noexcept
      : EmailTask(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Address = EmailTask_Address;
  using Body = EmailTask_Body;
  using Attachment = EmailTask_Attachment;

  // accessors -------------------------------------------------------
  enum : int {
    kCcFieldNumber = 4,
    kBccFieldNumber = 5,
    kAttachmentsFieldNumber = 9,
    kSubjectFieldNumber = 1,
    kBodyFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // repeated .palm.daisy.v1.EmailTask.Address cc = 4;
  int cc_size() const;
  private:
  int _internal_cc_size() const;

  public:
  void clear_cc() ;
  ::palm::daisy::v1::EmailTask_Address* mutable_cc(int index);
  ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>* mutable_cc();

  private:
  const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>& _internal_cc() const;
  ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>* _internal_mutable_cc();
  public:
  const ::palm::daisy::v1::EmailTask_Address& cc(int index) const;
  ::palm::daisy::v1::EmailTask_Address* add_cc();
  const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>& cc() const;
  // repeated .palm.daisy.v1.EmailTask.Address bcc = 5;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;

  public:
  void clear_bcc() ;
  ::palm::daisy::v1::EmailTask_Address* mutable_bcc(int index);
  ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>* mutable_bcc();

  private:
  const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>& _internal_bcc() const;
  ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>* _internal_mutable_bcc();
  public:
  const ::palm::daisy::v1::EmailTask_Address& bcc(int index) const;
  ::palm::daisy::v1::EmailTask_Address* add_bcc();
  const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>& bcc() const;
  // repeated .palm.daisy.v1.EmailTask.Attachment attachments = 9;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;

  public:
  void clear_attachments() ;
  ::palm::daisy::v1::EmailTask_Attachment* mutable_attachments(int index);
  ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Attachment>* mutable_attachments();

  private:
  const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Attachment>& _internal_attachments() const;
  ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Attachment>* _internal_mutable_attachments();
  public:
  const ::palm::daisy::v1::EmailTask_Attachment& attachments(int index) const;
  ::palm::daisy::v1::EmailTask_Attachment* add_attachments();
  const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Attachment>& attachments() const;
  // string subject = 1;
  void clear_subject() ;
  const std::string& subject() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* value);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // .palm.daisy.v1.EmailTask.Body body = 2;
  bool has_body() const;
  void clear_body() ;
  const ::palm::daisy::v1::EmailTask_Body& body() const;
  PROTOBUF_NODISCARD ::palm::daisy::v1::EmailTask_Body* release_body();
  ::palm::daisy::v1::EmailTask_Body* mutable_body();
  void set_allocated_body(::palm::daisy::v1::EmailTask_Body* value);
  void unsafe_arena_set_allocated_body(::palm::daisy::v1::EmailTask_Body* value);
  ::palm::daisy::v1::EmailTask_Body* unsafe_arena_release_body();

  private:
  const ::palm::daisy::v1::EmailTask_Body& _internal_body() const;
  ::palm::daisy::v1::EmailTask_Body* _internal_mutable_body();

  public:
  // .palm.daisy.v1.EmailTask.Address to = 3;
  bool has_to() const;
  void clear_to() ;
  const ::palm::daisy::v1::EmailTask_Address& to() const;
  PROTOBUF_NODISCARD ::palm::daisy::v1::EmailTask_Address* release_to();
  ::palm::daisy::v1::EmailTask_Address* mutable_to();
  void set_allocated_to(::palm::daisy::v1::EmailTask_Address* value);
  void unsafe_arena_set_allocated_to(::palm::daisy::v1::EmailTask_Address* value);
  ::palm::daisy::v1::EmailTask_Address* unsafe_arena_release_to();

  private:
  const ::palm::daisy::v1::EmailTask_Address& _internal_to() const;
  ::palm::daisy::v1::EmailTask_Address* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailTask)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 5,
      39, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EmailTask_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmailTask& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailTask_Address > cc_;
    ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailTask_Address > bcc_;
    ::google::protobuf::RepeatedPtrField< ::palm::daisy::v1::EmailTask_Attachment > attachments_;
    ::google::protobuf::internal::ArenaStringPtr subject_;
    ::palm::daisy::v1::EmailTask_Body* body_;
    ::palm::daisy::v1::EmailTask_Address* to_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SmsTask

// repeated string to = 1;
inline int SmsTask::_internal_to_size() const {
  return _internal_to().size();
}
inline int SmsTask::to_size() const {
  return _internal_to_size();
}
inline void SmsTask::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_.Clear();
}
inline std::string* SmsTask::add_to()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_to()->Add();
  // @@protoc_insertion_point(field_add_mutable:palm.daisy.v1.SmsTask.to)
  return _s;
}
inline const std::string& SmsTask::to(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.SmsTask.to)
  return _internal_to().Get(index);
}
inline std::string* SmsTask::mutable_to(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.SmsTask.to)
  return _internal_mutable_to()->Mutable(index);
}
inline void SmsTask::set_to(int index, const std::string& value) {
  _internal_mutable_to()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsTask.to)
}
inline void SmsTask::set_to(int index, std::string&& value) {
  _internal_mutable_to()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsTask.to)
}
inline void SmsTask::set_to(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_to()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.daisy.v1.SmsTask.to)
}
inline void SmsTask::set_to(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_to()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.daisy.v1.SmsTask.to)
}
inline void SmsTask::set_to(int index, absl::string_view value) {
  _internal_mutable_to()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.daisy.v1.SmsTask.to)
}
inline void SmsTask::add_to(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_to()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.daisy.v1.SmsTask.to)
}
inline void SmsTask::add_to(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_to()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.daisy.v1.SmsTask.to)
}
inline void SmsTask::add_to(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_to()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.daisy.v1.SmsTask.to)
}
inline void SmsTask::add_to(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_to()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.daisy.v1.SmsTask.to)
}
inline void SmsTask::add_to(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_to()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.daisy.v1.SmsTask.to)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SmsTask::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.SmsTask.to)
  return _internal_to();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SmsTask::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.SmsTask.to)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_to();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SmsTask::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SmsTask::_internal_mutable_to() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.to_;
}

// string body = 2;
inline void SmsTask::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.ClearToEmpty();
}
inline const std::string& SmsTask::body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.SmsTask.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SmsTask::set_body(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsTask.body)
}
inline std::string* SmsTask::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.SmsTask.body)
  return _s;
}
inline const std::string& SmsTask::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.body_.Get();
}
inline void SmsTask::_internal_set_body(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.Set(value, GetArena());
}
inline std::string* SmsTask::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.body_.Mutable( GetArena());
}
inline std::string* SmsTask::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.SmsTask.body)
  return _impl_.body_.Release();
}
inline void SmsTask::set_allocated_body(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.SmsTask.body)
}

// optional string callback_uri = 3;
inline bool SmsTask::has_callback_uri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SmsTask::clear_callback_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_uri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SmsTask::callback_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.SmsTask.callback_uri)
  return _internal_callback_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SmsTask::set_callback_uri(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.callback_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsTask.callback_uri)
}
inline std::string* SmsTask::mutable_callback_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_callback_uri();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.SmsTask.callback_uri)
  return _s;
}
inline const std::string& SmsTask::_internal_callback_uri() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.callback_uri_.Get();
}
inline void SmsTask::_internal_set_callback_uri(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.callback_uri_.Set(value, GetArena());
}
inline std::string* SmsTask::_internal_mutable_callback_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.callback_uri_.Mutable( GetArena());
}
inline std::string* SmsTask::release_callback_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.SmsTask.callback_uri)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.callback_uri_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.callback_uri_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SmsTask::set_allocated_callback_uri(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.callback_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.callback_uri_.IsDefault()) {
          _impl_.callback_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.SmsTask.callback_uri)
}

// -------------------------------------------------------------------

// EmailTask_Address

// string name = 1;
inline void EmailTask_Address::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EmailTask_Address::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.Address.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Address::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailTask.Address.name)
}
inline std::string* EmailTask_Address::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.Address.name)
  return _s;
}
inline const std::string& EmailTask_Address::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void EmailTask_Address::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* EmailTask_Address::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* EmailTask_Address::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailTask.Address.name)
  return _impl_.name_.Release();
}
inline void EmailTask_Address::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailTask.Address.name)
}

// string email = 2;
inline void EmailTask_Address::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& EmailTask_Address::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.Address.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Address::set_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailTask.Address.email)
}
inline std::string* EmailTask_Address::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.Address.email)
  return _s;
}
inline const std::string& EmailTask_Address::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_.Get();
}
inline void EmailTask_Address::_internal_set_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(value, GetArena());
}
inline std::string* EmailTask_Address::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* EmailTask_Address::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailTask.Address.email)
  return _impl_.email_.Release();
}
inline void EmailTask_Address::set_allocated_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailTask.Address.email)
}

// -------------------------------------------------------------------

// EmailTask_Body

// string text = 1;
inline void EmailTask_Body::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& EmailTask_Body::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.Body.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Body::set_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailTask.Body.text)
}
inline std::string* EmailTask_Body::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.Body.text)
  return _s;
}
inline const std::string& EmailTask_Body::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_.Get();
}
inline void EmailTask_Body::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(value, GetArena());
}
inline std::string* EmailTask_Body::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* EmailTask_Body::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailTask.Body.text)
  return _impl_.text_.Release();
}
inline void EmailTask_Body::set_allocated_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailTask.Body.text)
}

// bool html = 2;
inline void EmailTask_Body::clear_html() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.html_ = false;
}
inline bool EmailTask_Body::html() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.Body.html)
  return _internal_html();
}
inline void EmailTask_Body::set_html(bool value) {
  _internal_set_html(value);
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailTask.Body.html)
}
inline bool EmailTask_Body::_internal_html() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.html_;
}
inline void EmailTask_Body::_internal_set_html(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.html_ = value;
}

// -------------------------------------------------------------------

// EmailTask_Attachment

// string title = 1;
inline void EmailTask_Attachment::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& EmailTask_Attachment::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.Attachment.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Attachment::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailTask.Attachment.title)
}
inline std::string* EmailTask_Attachment::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.Attachment.title)
  return _s;
}
inline const std::string& EmailTask_Attachment::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void EmailTask_Attachment::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* EmailTask_Attachment::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* EmailTask_Attachment::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailTask.Attachment.title)
  return _impl_.title_.Release();
}
inline void EmailTask_Attachment::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailTask.Attachment.title)
}

// string content_type = 2;
inline void EmailTask_Attachment::clear_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& EmailTask_Attachment::content_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.Attachment.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Attachment::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailTask.Attachment.content_type)
}
inline std::string* EmailTask_Attachment::mutable_content_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.Attachment.content_type)
  return _s;
}
inline const std::string& EmailTask_Attachment::_internal_content_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_type_.Get();
}
inline void EmailTask_Attachment::_internal_set_content_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.Set(value, GetArena());
}
inline std::string* EmailTask_Attachment::_internal_mutable_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_type_.Mutable( GetArena());
}
inline std::string* EmailTask_Attachment::release_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailTask.Attachment.content_type)
  return _impl_.content_type_.Release();
}
inline void EmailTask_Attachment::set_allocated_content_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailTask.Attachment.content_type)
}

// bool inline = 3;
inline void EmailTask_Attachment::clear_inline_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inline__ = false;
}
inline bool EmailTask_Attachment::inline_() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.Attachment.inline)
  return _internal_inline_();
}
inline void EmailTask_Attachment::set_inline_(bool value) {
  _internal_set_inline_(value);
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailTask.Attachment.inline)
}
inline bool EmailTask_Attachment::_internal_inline_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inline__;
}
inline void EmailTask_Attachment::_internal_set_inline_(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inline__ = value;
}

// bytes body = 9;
inline void EmailTask_Attachment::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.ClearToEmpty();
}
inline const std::string& EmailTask_Attachment::body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.Attachment.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Attachment::set_body(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailTask.Attachment.body)
}
inline std::string* EmailTask_Attachment::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.Attachment.body)
  return _s;
}
inline const std::string& EmailTask_Attachment::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.body_.Get();
}
inline void EmailTask_Attachment::_internal_set_body(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.Set(value, GetArena());
}
inline std::string* EmailTask_Attachment::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.body_.Mutable( GetArena());
}
inline std::string* EmailTask_Attachment::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailTask.Attachment.body)
  return _impl_.body_.Release();
}
inline void EmailTask_Attachment::set_allocated_body(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailTask.Attachment.body)
}

// -------------------------------------------------------------------

// EmailTask

// string subject = 1;
inline void EmailTask::clear_subject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& EmailTask::subject() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask::set_subject(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailTask.subject)
}
inline std::string* EmailTask::mutable_subject() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.subject)
  return _s;
}
inline const std::string& EmailTask::_internal_subject() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subject_.Get();
}
inline void EmailTask::_internal_set_subject(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_.Set(value, GetArena());
}
inline std::string* EmailTask::_internal_mutable_subject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subject_.Mutable( GetArena());
}
inline std::string* EmailTask::release_subject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailTask.subject)
  return _impl_.subject_.Release();
}
inline void EmailTask::set_allocated_subject(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailTask.subject)
}

// .palm.daisy.v1.EmailTask.Body body = 2;
inline bool EmailTask::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline void EmailTask::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::daisy::v1::EmailTask_Body& EmailTask::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::palm::daisy::v1::EmailTask_Body* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::daisy::v1::EmailTask_Body&>(::palm::daisy::v1::_EmailTask_Body_default_instance_);
}
inline const ::palm::daisy::v1::EmailTask_Body& EmailTask::body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.body)
  return _internal_body();
}
inline void EmailTask::unsafe_arena_set_allocated_body(::palm::daisy::v1::EmailTask_Body* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = reinterpret_cast<::palm::daisy::v1::EmailTask_Body*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.daisy.v1.EmailTask.body)
}
inline ::palm::daisy::v1::EmailTask_Body* EmailTask::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::daisy::v1::EmailTask_Body* released = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::daisy::v1::EmailTask_Body* EmailTask::unsafe_arena_release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailTask.body)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::daisy::v1::EmailTask_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::palm::daisy::v1::EmailTask_Body* EmailTask::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::palm::daisy::v1::EmailTask_Body>(GetArena());
    _impl_.body_ = reinterpret_cast<::palm::daisy::v1::EmailTask_Body*>(p);
  }
  return _impl_.body_;
}
inline ::palm::daisy::v1::EmailTask_Body* EmailTask::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::palm::daisy::v1::EmailTask_Body* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.body)
  return _msg;
}
inline void EmailTask::set_allocated_body(::palm::daisy::v1::EmailTask_Body* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.body_ = reinterpret_cast<::palm::daisy::v1::EmailTask_Body*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailTask.body)
}

// .palm.daisy.v1.EmailTask.Address to = 3;
inline bool EmailTask::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline void EmailTask::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::daisy::v1::EmailTask_Address& EmailTask::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::palm::daisy::v1::EmailTask_Address* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::daisy::v1::EmailTask_Address&>(::palm::daisy::v1::_EmailTask_Address_default_instance_);
}
inline const ::palm::daisy::v1::EmailTask_Address& EmailTask::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.to)
  return _internal_to();
}
inline void EmailTask::unsafe_arena_set_allocated_to(::palm::daisy::v1::EmailTask_Address* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::palm::daisy::v1::EmailTask_Address*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.daisy.v1.EmailTask.to)
}
inline ::palm::daisy::v1::EmailTask_Address* EmailTask::release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::daisy::v1::EmailTask_Address* released = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::daisy::v1::EmailTask_Address* EmailTask::unsafe_arena_release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailTask.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::daisy::v1::EmailTask_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::palm::daisy::v1::EmailTask_Address* EmailTask::_internal_mutable_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::palm::daisy::v1::EmailTask_Address>(GetArena());
    _impl_.to_ = reinterpret_cast<::palm::daisy::v1::EmailTask_Address*>(p);
  }
  return _impl_.to_;
}
inline ::palm::daisy::v1::EmailTask_Address* EmailTask::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::palm::daisy::v1::EmailTask_Address* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.to)
  return _msg;
}
inline void EmailTask::set_allocated_to(::palm::daisy::v1::EmailTask_Address* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::palm::daisy::v1::EmailTask_Address*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailTask.to)
}

// repeated .palm.daisy.v1.EmailTask.Address cc = 4;
inline int EmailTask::_internal_cc_size() const {
  return _internal_cc().size();
}
inline int EmailTask::cc_size() const {
  return _internal_cc_size();
}
inline void EmailTask::clear_cc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cc_.Clear();
}
inline ::palm::daisy::v1::EmailTask_Address* EmailTask::mutable_cc(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.cc)
  return _internal_mutable_cc()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>* EmailTask::mutable_cc()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.EmailTask.cc)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cc();
}
inline const ::palm::daisy::v1::EmailTask_Address& EmailTask::cc(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.cc)
  return _internal_cc().Get(index);
}
inline ::palm::daisy::v1::EmailTask_Address* EmailTask::add_cc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::palm::daisy::v1::EmailTask_Address* _add = _internal_mutable_cc()->Add();
  // @@protoc_insertion_point(field_add:palm.daisy.v1.EmailTask.cc)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>& EmailTask::cc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.EmailTask.cc)
  return _internal_cc();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>&
EmailTask::_internal_cc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cc_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>*
EmailTask::_internal_mutable_cc() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cc_;
}

// repeated .palm.daisy.v1.EmailTask.Address bcc = 5;
inline int EmailTask::_internal_bcc_size() const {
  return _internal_bcc().size();
}
inline int EmailTask::bcc_size() const {
  return _internal_bcc_size();
}
inline void EmailTask::clear_bcc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bcc_.Clear();
}
inline ::palm::daisy::v1::EmailTask_Address* EmailTask::mutable_bcc(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.bcc)
  return _internal_mutable_bcc()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>* EmailTask::mutable_bcc()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.EmailTask.bcc)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bcc();
}
inline const ::palm::daisy::v1::EmailTask_Address& EmailTask::bcc(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.bcc)
  return _internal_bcc().Get(index);
}
inline ::palm::daisy::v1::EmailTask_Address* EmailTask::add_bcc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::palm::daisy::v1::EmailTask_Address* _add = _internal_mutable_bcc()->Add();
  // @@protoc_insertion_point(field_add:palm.daisy.v1.EmailTask.bcc)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>& EmailTask::bcc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.EmailTask.bcc)
  return _internal_bcc();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>&
EmailTask::_internal_bcc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bcc_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Address>*
EmailTask::_internal_mutable_bcc() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bcc_;
}

// repeated .palm.daisy.v1.EmailTask.Attachment attachments = 9;
inline int EmailTask::_internal_attachments_size() const {
  return _internal_attachments().size();
}
inline int EmailTask::attachments_size() const {
  return _internal_attachments_size();
}
inline void EmailTask::clear_attachments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attachments_.Clear();
}
inline ::palm::daisy::v1::EmailTask_Attachment* EmailTask::mutable_attachments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailTask.attachments)
  return _internal_mutable_attachments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Attachment>* EmailTask::mutable_attachments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.EmailTask.attachments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_attachments();
}
inline const ::palm::daisy::v1::EmailTask_Attachment& EmailTask::attachments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailTask.attachments)
  return _internal_attachments().Get(index);
}
inline ::palm::daisy::v1::EmailTask_Attachment* EmailTask::add_attachments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::palm::daisy::v1::EmailTask_Attachment* _add = _internal_mutable_attachments()->Add();
  // @@protoc_insertion_point(field_add:palm.daisy.v1.EmailTask.attachments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Attachment>& EmailTask::attachments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.EmailTask.attachments)
  return _internal_attachments();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Attachment>&
EmailTask::_internal_attachments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attachments_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::daisy::v1::EmailTask_Attachment>*
EmailTask::_internal_mutable_attachments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.attachments_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace daisy
}  // namespace palm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_daisy_2eproto_2epb_2eh
