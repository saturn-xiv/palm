// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daisy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_daisy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_daisy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_daisy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_daisy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_daisy_2eproto;
namespace palm {
namespace daisy {
namespace v1 {
class EmailSendRequest;
struct EmailSendRequestDefaultTypeInternal;
extern EmailSendRequestDefaultTypeInternal _EmailSendRequest_default_instance_;
class EmailSendRequest_Address;
struct EmailSendRequest_AddressDefaultTypeInternal;
extern EmailSendRequest_AddressDefaultTypeInternal _EmailSendRequest_Address_default_instance_;
class EmailSendRequest_Attachment;
struct EmailSendRequest_AttachmentDefaultTypeInternal;
extern EmailSendRequest_AttachmentDefaultTypeInternal _EmailSendRequest_Attachment_default_instance_;
class EmailSendRequest_Body;
struct EmailSendRequest_BodyDefaultTypeInternal;
extern EmailSendRequest_BodyDefaultTypeInternal _EmailSendRequest_Body_default_instance_;
class SmsSendRequest;
struct SmsSendRequestDefaultTypeInternal;
extern SmsSendRequestDefaultTypeInternal _SmsSendRequest_default_instance_;
}  // namespace v1
}  // namespace daisy
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::daisy::v1::EmailSendRequest* Arena::CreateMaybeMessage<::palm::daisy::v1::EmailSendRequest>(Arena*);
template<> ::palm::daisy::v1::EmailSendRequest_Address* Arena::CreateMaybeMessage<::palm::daisy::v1::EmailSendRequest_Address>(Arena*);
template<> ::palm::daisy::v1::EmailSendRequest_Attachment* Arena::CreateMaybeMessage<::palm::daisy::v1::EmailSendRequest_Attachment>(Arena*);
template<> ::palm::daisy::v1::EmailSendRequest_Body* Arena::CreateMaybeMessage<::palm::daisy::v1::EmailSendRequest_Body>(Arena*);
template<> ::palm::daisy::v1::SmsSendRequest* Arena::CreateMaybeMessage<::palm::daisy::v1::SmsSendRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace daisy {
namespace v1 {

// ===================================================================

class SmsSendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.SmsSendRequest) */ {
 public:
  inline SmsSendRequest() : SmsSendRequest(nullptr) {}
  ~SmsSendRequest() override;
  explicit PROTOBUF_CONSTEXPR SmsSendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmsSendRequest(const SmsSendRequest& from);
  SmsSendRequest(SmsSendRequest&& from) noexcept
    : SmsSendRequest() {
    *this = ::std::move(from);
  }

  inline SmsSendRequest& operator=(const SmsSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmsSendRequest& operator=(SmsSendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmsSendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmsSendRequest* internal_default_instance() {
    return reinterpret_cast<const SmsSendRequest*>(
               &_SmsSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SmsSendRequest& a, SmsSendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SmsSendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmsSendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmsSendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmsSendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmsSendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SmsSendRequest& from) {
    SmsSendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmsSendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.daisy.v1.SmsSendRequest";
  }
  protected:
  explicit SmsSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kBodyFieldNumber = 2,
    kCallbackUriFieldNumber = 3,
  };
  // repeated string to = 1;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to();
  private:
  const std::string& _internal_to(int index) const;
  std::string* _internal_add_to();
  public:

  // string body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional string callback_uri = 3;
  bool has_callback_uri() const;
  private:
  bool _internal_has_callback_uri() const;
  public:
  void clear_callback_uri();
  const std::string& callback_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callback_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callback_uri();
  PROTOBUF_NODISCARD std::string* release_callback_uri();
  void set_allocated_callback_uri(std::string* callback_uri);
  private:
  const std::string& _internal_callback_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback_uri(const std::string& value);
  std::string* _internal_mutable_callback_uri();
  public:

  // @@protoc_insertion_point(class_scope:palm.daisy.v1.SmsSendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callback_uri_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};
// -------------------------------------------------------------------

class EmailSendRequest_Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailSendRequest.Address) */ {
 public:
  inline EmailSendRequest_Address() : EmailSendRequest_Address(nullptr) {}
  ~EmailSendRequest_Address() override;
  explicit PROTOBUF_CONSTEXPR EmailSendRequest_Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailSendRequest_Address(const EmailSendRequest_Address& from);
  EmailSendRequest_Address(EmailSendRequest_Address&& from) noexcept
    : EmailSendRequest_Address() {
    *this = ::std::move(from);
  }

  inline EmailSendRequest_Address& operator=(const EmailSendRequest_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailSendRequest_Address& operator=(EmailSendRequest_Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailSendRequest_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailSendRequest_Address* internal_default_instance() {
    return reinterpret_cast<const EmailSendRequest_Address*>(
               &_EmailSendRequest_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EmailSendRequest_Address& a, EmailSendRequest_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailSendRequest_Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailSendRequest_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailSendRequest_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailSendRequest_Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailSendRequest_Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailSendRequest_Address& from) {
    EmailSendRequest_Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailSendRequest_Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.daisy.v1.EmailSendRequest.Address";
  }
  protected:
  explicit EmailSendRequest_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailSendRequest.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};
// -------------------------------------------------------------------

class EmailSendRequest_Body final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailSendRequest.Body) */ {
 public:
  inline EmailSendRequest_Body() : EmailSendRequest_Body(nullptr) {}
  ~EmailSendRequest_Body() override;
  explicit PROTOBUF_CONSTEXPR EmailSendRequest_Body(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailSendRequest_Body(const EmailSendRequest_Body& from);
  EmailSendRequest_Body(EmailSendRequest_Body&& from) noexcept
    : EmailSendRequest_Body() {
    *this = ::std::move(from);
  }

  inline EmailSendRequest_Body& operator=(const EmailSendRequest_Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailSendRequest_Body& operator=(EmailSendRequest_Body&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailSendRequest_Body& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailSendRequest_Body* internal_default_instance() {
    return reinterpret_cast<const EmailSendRequest_Body*>(
               &_EmailSendRequest_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmailSendRequest_Body& a, EmailSendRequest_Body& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailSendRequest_Body* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailSendRequest_Body* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailSendRequest_Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailSendRequest_Body>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailSendRequest_Body& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailSendRequest_Body& from) {
    EmailSendRequest_Body::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailSendRequest_Body* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.daisy.v1.EmailSendRequest.Body";
  }
  protected:
  explicit EmailSendRequest_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kHtmlFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bool html = 2;
  void clear_html();
  bool html() const;
  void set_html(bool value);
  private:
  bool _internal_html() const;
  void _internal_set_html(bool value);
  public:

  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailSendRequest.Body)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    bool html_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};
// -------------------------------------------------------------------

class EmailSendRequest_Attachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailSendRequest.Attachment) */ {
 public:
  inline EmailSendRequest_Attachment() : EmailSendRequest_Attachment(nullptr) {}
  ~EmailSendRequest_Attachment() override;
  explicit PROTOBUF_CONSTEXPR EmailSendRequest_Attachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailSendRequest_Attachment(const EmailSendRequest_Attachment& from);
  EmailSendRequest_Attachment(EmailSendRequest_Attachment&& from) noexcept
    : EmailSendRequest_Attachment() {
    *this = ::std::move(from);
  }

  inline EmailSendRequest_Attachment& operator=(const EmailSendRequest_Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailSendRequest_Attachment& operator=(EmailSendRequest_Attachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailSendRequest_Attachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailSendRequest_Attachment* internal_default_instance() {
    return reinterpret_cast<const EmailSendRequest_Attachment*>(
               &_EmailSendRequest_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EmailSendRequest_Attachment& a, EmailSendRequest_Attachment& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailSendRequest_Attachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailSendRequest_Attachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailSendRequest_Attachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailSendRequest_Attachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailSendRequest_Attachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailSendRequest_Attachment& from) {
    EmailSendRequest_Attachment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailSendRequest_Attachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.daisy.v1.EmailSendRequest.Attachment";
  }
  protected:
  explicit EmailSendRequest_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kContentTypeFieldNumber = 2,
    kBodyFieldNumber = 9,
    kInlineFieldNumber = 3,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string content_type = 2;
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // bytes body = 9;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // bool inline = 3;
  void clear_inline_();
  bool inline_() const;
  void set_inline_(bool value);
  private:
  bool _internal_inline_() const;
  void _internal_set_inline_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailSendRequest.Attachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    bool inline__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};
// -------------------------------------------------------------------

class EmailSendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.daisy.v1.EmailSendRequest) */ {
 public:
  inline EmailSendRequest() : EmailSendRequest(nullptr) {}
  ~EmailSendRequest() override;
  explicit PROTOBUF_CONSTEXPR EmailSendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailSendRequest(const EmailSendRequest& from);
  EmailSendRequest(EmailSendRequest&& from) noexcept
    : EmailSendRequest() {
    *this = ::std::move(from);
  }

  inline EmailSendRequest& operator=(const EmailSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailSendRequest& operator=(EmailSendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailSendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailSendRequest* internal_default_instance() {
    return reinterpret_cast<const EmailSendRequest*>(
               &_EmailSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EmailSendRequest& a, EmailSendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailSendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailSendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailSendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailSendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailSendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailSendRequest& from) {
    EmailSendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailSendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.daisy.v1.EmailSendRequest";
  }
  protected:
  explicit EmailSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EmailSendRequest_Address Address;
  typedef EmailSendRequest_Body Body;
  typedef EmailSendRequest_Attachment Attachment;

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 4,
    kBccFieldNumber = 5,
    kAttachmentsFieldNumber = 9,
    kSubjectFieldNumber = 1,
    kBodyFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // repeated .palm.daisy.v1.EmailSendRequest.Address cc = 4;
  int cc_size() const;
  private:
  int _internal_cc_size() const;
  public:
  void clear_cc();
  ::palm::daisy::v1::EmailSendRequest_Address* mutable_cc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >*
      mutable_cc();
  private:
  const ::palm::daisy::v1::EmailSendRequest_Address& _internal_cc(int index) const;
  ::palm::daisy::v1::EmailSendRequest_Address* _internal_add_cc();
  public:
  const ::palm::daisy::v1::EmailSendRequest_Address& cc(int index) const;
  ::palm::daisy::v1::EmailSendRequest_Address* add_cc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >&
      cc() const;

  // repeated .palm.daisy.v1.EmailSendRequest.Address bcc = 5;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;
  public:
  void clear_bcc();
  ::palm::daisy::v1::EmailSendRequest_Address* mutable_bcc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >*
      mutable_bcc();
  private:
  const ::palm::daisy::v1::EmailSendRequest_Address& _internal_bcc(int index) const;
  ::palm::daisy::v1::EmailSendRequest_Address* _internal_add_bcc();
  public:
  const ::palm::daisy::v1::EmailSendRequest_Address& bcc(int index) const;
  ::palm::daisy::v1::EmailSendRequest_Address* add_bcc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >&
      bcc() const;

  // repeated .palm.daisy.v1.EmailSendRequest.Attachment attachments = 9;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  ::palm::daisy::v1::EmailSendRequest_Attachment* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Attachment >*
      mutable_attachments();
  private:
  const ::palm::daisy::v1::EmailSendRequest_Attachment& _internal_attachments(int index) const;
  ::palm::daisy::v1::EmailSendRequest_Attachment* _internal_add_attachments();
  public:
  const ::palm::daisy::v1::EmailSendRequest_Attachment& attachments(int index) const;
  ::palm::daisy::v1::EmailSendRequest_Attachment* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Attachment >&
      attachments() const;

  // string subject = 1;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // .palm.daisy.v1.EmailSendRequest.Body body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::palm::daisy::v1::EmailSendRequest_Body& body() const;
  PROTOBUF_NODISCARD ::palm::daisy::v1::EmailSendRequest_Body* release_body();
  ::palm::daisy::v1::EmailSendRequest_Body* mutable_body();
  void set_allocated_body(::palm::daisy::v1::EmailSendRequest_Body* body);
  private:
  const ::palm::daisy::v1::EmailSendRequest_Body& _internal_body() const;
  ::palm::daisy::v1::EmailSendRequest_Body* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::palm::daisy::v1::EmailSendRequest_Body* body);
  ::palm::daisy::v1::EmailSendRequest_Body* unsafe_arena_release_body();

  // .palm.daisy.v1.EmailSendRequest.Address to = 3;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::palm::daisy::v1::EmailSendRequest_Address& to() const;
  PROTOBUF_NODISCARD ::palm::daisy::v1::EmailSendRequest_Address* release_to();
  ::palm::daisy::v1::EmailSendRequest_Address* mutable_to();
  void set_allocated_to(::palm::daisy::v1::EmailSendRequest_Address* to);
  private:
  const ::palm::daisy::v1::EmailSendRequest_Address& _internal_to() const;
  ::palm::daisy::v1::EmailSendRequest_Address* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::palm::daisy::v1::EmailSendRequest_Address* to);
  ::palm::daisy::v1::EmailSendRequest_Address* unsafe_arena_release_to();

  // @@protoc_insertion_point(class_scope:palm.daisy.v1.EmailSendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address > cc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address > bcc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Attachment > attachments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::palm::daisy::v1::EmailSendRequest_Body* body_;
    ::palm::daisy::v1::EmailSendRequest_Address* to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daisy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SmsSendRequest

// repeated string to = 1;
inline int SmsSendRequest::_internal_to_size() const {
  return _impl_.to_.size();
}
inline int SmsSendRequest::to_size() const {
  return _internal_to_size();
}
inline void SmsSendRequest::clear_to() {
  _impl_.to_.Clear();
}
inline std::string* SmsSendRequest::add_to() {
  std::string* _s = _internal_add_to();
  // @@protoc_insertion_point(field_add_mutable:palm.daisy.v1.SmsSendRequest.to)
  return _s;
}
inline const std::string& SmsSendRequest::_internal_to(int index) const {
  return _impl_.to_.Get(index);
}
inline const std::string& SmsSendRequest::to(int index) const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.SmsSendRequest.to)
  return _internal_to(index);
}
inline std::string* SmsSendRequest::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.SmsSendRequest.to)
  return _impl_.to_.Mutable(index);
}
inline void SmsSendRequest::set_to(int index, const std::string& value) {
  _impl_.to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::set_to(int index, std::string&& value) {
  _impl_.to_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::set_to(int index, const char* value, size_t size) {
  _impl_.to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.daisy.v1.SmsSendRequest.to)
}
inline std::string* SmsSendRequest::_internal_add_to() {
  return _impl_.to_.Add();
}
inline void SmsSendRequest::add_to(const std::string& value) {
  _impl_.to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::add_to(std::string&& value) {
  _impl_.to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::add_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.daisy.v1.SmsSendRequest.to)
}
inline void SmsSendRequest::add_to(const char* value, size_t size) {
  _impl_.to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.daisy.v1.SmsSendRequest.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SmsSendRequest::to() const {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.SmsSendRequest.to)
  return _impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SmsSendRequest::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.SmsSendRequest.to)
  return &_impl_.to_;
}

// string body = 2;
inline void SmsSendRequest::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& SmsSendRequest::body() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.SmsSendRequest.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmsSendRequest::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsSendRequest.body)
}
inline std::string* SmsSendRequest::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.SmsSendRequest.body)
  return _s;
}
inline const std::string& SmsSendRequest::_internal_body() const {
  return _impl_.body_.Get();
}
inline void SmsSendRequest::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* SmsSendRequest::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* SmsSendRequest::release_body() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.SmsSendRequest.body)
  return _impl_.body_.Release();
}
inline void SmsSendRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.SmsSendRequest.body)
}

// optional string callback_uri = 3;
inline bool SmsSendRequest::_internal_has_callback_uri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SmsSendRequest::has_callback_uri() const {
  return _internal_has_callback_uri();
}
inline void SmsSendRequest::clear_callback_uri() {
  _impl_.callback_uri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SmsSendRequest::callback_uri() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.SmsSendRequest.callback_uri)
  return _internal_callback_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmsSendRequest::set_callback_uri(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.callback_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.SmsSendRequest.callback_uri)
}
inline std::string* SmsSendRequest::mutable_callback_uri() {
  std::string* _s = _internal_mutable_callback_uri();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.SmsSendRequest.callback_uri)
  return _s;
}
inline const std::string& SmsSendRequest::_internal_callback_uri() const {
  return _impl_.callback_uri_.Get();
}
inline void SmsSendRequest::_internal_set_callback_uri(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.callback_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* SmsSendRequest::_internal_mutable_callback_uri() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.callback_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* SmsSendRequest::release_callback_uri() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.SmsSendRequest.callback_uri)
  if (!_internal_has_callback_uri()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.callback_uri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.callback_uri_.IsDefault()) {
    _impl_.callback_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SmsSendRequest::set_allocated_callback_uri(std::string* callback_uri) {
  if (callback_uri != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.callback_uri_.SetAllocated(callback_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.callback_uri_.IsDefault()) {
    _impl_.callback_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.SmsSendRequest.callback_uri)
}

// -------------------------------------------------------------------

// EmailSendRequest_Address

// string name = 1;
inline void EmailSendRequest_Address::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Address::name() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Address.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailSendRequest_Address::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Address.name)
}
inline std::string* EmailSendRequest_Address::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Address.name)
  return _s;
}
inline const std::string& EmailSendRequest_Address::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EmailSendRequest_Address::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Address::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Address::release_name() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Address.name)
  return _impl_.name_.Release();
}
inline void EmailSendRequest_Address::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Address.name)
}

// string email = 2;
inline void EmailSendRequest_Address::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Address::email() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Address.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailSendRequest_Address::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Address.email)
}
inline std::string* EmailSendRequest_Address::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Address.email)
  return _s;
}
inline const std::string& EmailSendRequest_Address::_internal_email() const {
  return _impl_.email_.Get();
}
inline void EmailSendRequest_Address::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Address::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Address::release_email() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Address.email)
  return _impl_.email_.Release();
}
inline void EmailSendRequest_Address::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Address.email)
}

// -------------------------------------------------------------------

// EmailSendRequest_Body

// string text = 1;
inline void EmailSendRequest_Body::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Body::text() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Body.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailSendRequest_Body::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Body.text)
}
inline std::string* EmailSendRequest_Body::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Body.text)
  return _s;
}
inline const std::string& EmailSendRequest_Body::_internal_text() const {
  return _impl_.text_.Get();
}
inline void EmailSendRequest_Body::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Body::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Body::release_text() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Body.text)
  return _impl_.text_.Release();
}
inline void EmailSendRequest_Body::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Body.text)
}

// bool html = 2;
inline void EmailSendRequest_Body::clear_html() {
  _impl_.html_ = false;
}
inline bool EmailSendRequest_Body::_internal_html() const {
  return _impl_.html_;
}
inline bool EmailSendRequest_Body::html() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Body.html)
  return _internal_html();
}
inline void EmailSendRequest_Body::_internal_set_html(bool value) {
  
  _impl_.html_ = value;
}
inline void EmailSendRequest_Body::set_html(bool value) {
  _internal_set_html(value);
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Body.html)
}

// -------------------------------------------------------------------

// EmailSendRequest_Attachment

// string title = 1;
inline void EmailSendRequest_Attachment::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Attachment::title() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Attachment.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailSendRequest_Attachment::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Attachment.title)
}
inline std::string* EmailSendRequest_Attachment::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Attachment.title)
  return _s;
}
inline const std::string& EmailSendRequest_Attachment::_internal_title() const {
  return _impl_.title_.Get();
}
inline void EmailSendRequest_Attachment::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Attachment::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Attachment::release_title() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Attachment.title)
  return _impl_.title_.Release();
}
inline void EmailSendRequest_Attachment::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Attachment.title)
}

// string content_type = 2;
inline void EmailSendRequest_Attachment::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Attachment::content_type() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailSendRequest_Attachment::set_content_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
}
inline std::string* EmailSendRequest_Attachment::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
  return _s;
}
inline const std::string& EmailSendRequest_Attachment::_internal_content_type() const {
  return _impl_.content_type_.Get();
}
inline void EmailSendRequest_Attachment::_internal_set_content_type(const std::string& value) {
  
  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Attachment::_internal_mutable_content_type() {
  
  return _impl_.content_type_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Attachment::release_content_type() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
  return _impl_.content_type_.Release();
}
inline void EmailSendRequest_Attachment::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  _impl_.content_type_.SetAllocated(content_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_type_.IsDefault()) {
    _impl_.content_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Attachment.content_type)
}

// bool inline = 3;
inline void EmailSendRequest_Attachment::clear_inline_() {
  _impl_.inline__ = false;
}
inline bool EmailSendRequest_Attachment::_internal_inline_() const {
  return _impl_.inline__;
}
inline bool EmailSendRequest_Attachment::inline_() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Attachment.inline)
  return _internal_inline_();
}
inline void EmailSendRequest_Attachment::_internal_set_inline_(bool value) {
  
  _impl_.inline__ = value;
}
inline void EmailSendRequest_Attachment::set_inline_(bool value) {
  _internal_set_inline_(value);
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Attachment.inline)
}

// bytes body = 9;
inline void EmailSendRequest_Attachment::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& EmailSendRequest_Attachment::body() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.Attachment.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailSendRequest_Attachment::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.Attachment.body)
}
inline std::string* EmailSendRequest_Attachment::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.Attachment.body)
  return _s;
}
inline const std::string& EmailSendRequest_Attachment::_internal_body() const {
  return _impl_.body_.Get();
}
inline void EmailSendRequest_Attachment::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Attachment::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailSendRequest_Attachment::release_body() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.Attachment.body)
  return _impl_.body_.Release();
}
inline void EmailSendRequest_Attachment::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.Attachment.body)
}

// -------------------------------------------------------------------

// EmailSendRequest

// string subject = 1;
inline void EmailSendRequest::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& EmailSendRequest::subject() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailSendRequest::set_subject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.daisy.v1.EmailSendRequest.subject)
}
inline std::string* EmailSendRequest::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.subject)
  return _s;
}
inline const std::string& EmailSendRequest::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void EmailSendRequest::_internal_set_subject(const std::string& value) {
  
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailSendRequest::_internal_mutable_subject() {
  
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailSendRequest::release_subject() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.subject)
  return _impl_.subject_.Release();
}
inline void EmailSendRequest::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.subject)
}

// .palm.daisy.v1.EmailSendRequest.Body body = 2;
inline bool EmailSendRequest::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool EmailSendRequest::has_body() const {
  return _internal_has_body();
}
inline void EmailSendRequest::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::palm::daisy::v1::EmailSendRequest_Body& EmailSendRequest::_internal_body() const {
  const ::palm::daisy::v1::EmailSendRequest_Body* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::daisy::v1::EmailSendRequest_Body&>(
      ::palm::daisy::v1::_EmailSendRequest_Body_default_instance_);
}
inline const ::palm::daisy::v1::EmailSendRequest_Body& EmailSendRequest::body() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.body)
  return _internal_body();
}
inline void EmailSendRequest::unsafe_arena_set_allocated_body(
    ::palm::daisy::v1::EmailSendRequest_Body* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.daisy.v1.EmailSendRequest.body)
}
inline ::palm::daisy::v1::EmailSendRequest_Body* EmailSendRequest::release_body() {
  
  ::palm::daisy::v1::EmailSendRequest_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::daisy::v1::EmailSendRequest_Body* EmailSendRequest::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.body)
  
  ::palm::daisy::v1::EmailSendRequest_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::palm::daisy::v1::EmailSendRequest_Body* EmailSendRequest::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::daisy::v1::EmailSendRequest_Body>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::palm::daisy::v1::EmailSendRequest_Body* EmailSendRequest::mutable_body() {
  ::palm::daisy::v1::EmailSendRequest_Body* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.body)
  return _msg;
}
inline void EmailSendRequest::set_allocated_body(::palm::daisy::v1::EmailSendRequest_Body* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.body)
}

// .palm.daisy.v1.EmailSendRequest.Address to = 3;
inline bool EmailSendRequest::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool EmailSendRequest::has_to() const {
  return _internal_has_to();
}
inline void EmailSendRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::_internal_to() const {
  const ::palm::daisy::v1::EmailSendRequest_Address* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::daisy::v1::EmailSendRequest_Address&>(
      ::palm::daisy::v1::_EmailSendRequest_Address_default_instance_);
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::to() const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.to)
  return _internal_to();
}
inline void EmailSendRequest::unsafe_arena_set_allocated_to(
    ::palm::daisy::v1::EmailSendRequest_Address* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.daisy.v1.EmailSendRequest.to)
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::release_to() {
  
  ::palm::daisy::v1::EmailSendRequest_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:palm.daisy.v1.EmailSendRequest.to)
  
  ::palm::daisy::v1::EmailSendRequest_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::daisy::v1::EmailSendRequest_Address>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::mutable_to() {
  ::palm::daisy::v1::EmailSendRequest_Address* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.to)
  return _msg;
}
inline void EmailSendRequest::set_allocated_to(::palm::daisy::v1::EmailSendRequest_Address* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:palm.daisy.v1.EmailSendRequest.to)
}

// repeated .palm.daisy.v1.EmailSendRequest.Address cc = 4;
inline int EmailSendRequest::_internal_cc_size() const {
  return _impl_.cc_.size();
}
inline int EmailSendRequest::cc_size() const {
  return _internal_cc_size();
}
inline void EmailSendRequest::clear_cc() {
  _impl_.cc_.Clear();
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.cc)
  return _impl_.cc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >*
EmailSendRequest::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.EmailSendRequest.cc)
  return &_impl_.cc_;
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::_internal_cc(int index) const {
  return _impl_.cc_.Get(index);
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::cc(int index) const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.cc)
  return _internal_cc(index);
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::_internal_add_cc() {
  return _impl_.cc_.Add();
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::add_cc() {
  ::palm::daisy::v1::EmailSendRequest_Address* _add = _internal_add_cc();
  // @@protoc_insertion_point(field_add:palm.daisy.v1.EmailSendRequest.cc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >&
EmailSendRequest::cc() const {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.EmailSendRequest.cc)
  return _impl_.cc_;
}

// repeated .palm.daisy.v1.EmailSendRequest.Address bcc = 5;
inline int EmailSendRequest::_internal_bcc_size() const {
  return _impl_.bcc_.size();
}
inline int EmailSendRequest::bcc_size() const {
  return _internal_bcc_size();
}
inline void EmailSendRequest::clear_bcc() {
  _impl_.bcc_.Clear();
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.bcc)
  return _impl_.bcc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >*
EmailSendRequest::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.EmailSendRequest.bcc)
  return &_impl_.bcc_;
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::_internal_bcc(int index) const {
  return _impl_.bcc_.Get(index);
}
inline const ::palm::daisy::v1::EmailSendRequest_Address& EmailSendRequest::bcc(int index) const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.bcc)
  return _internal_bcc(index);
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::_internal_add_bcc() {
  return _impl_.bcc_.Add();
}
inline ::palm::daisy::v1::EmailSendRequest_Address* EmailSendRequest::add_bcc() {
  ::palm::daisy::v1::EmailSendRequest_Address* _add = _internal_add_bcc();
  // @@protoc_insertion_point(field_add:palm.daisy.v1.EmailSendRequest.bcc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Address >&
EmailSendRequest::bcc() const {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.EmailSendRequest.bcc)
  return _impl_.bcc_;
}

// repeated .palm.daisy.v1.EmailSendRequest.Attachment attachments = 9;
inline int EmailSendRequest::_internal_attachments_size() const {
  return _impl_.attachments_.size();
}
inline int EmailSendRequest::attachments_size() const {
  return _internal_attachments_size();
}
inline void EmailSendRequest::clear_attachments() {
  _impl_.attachments_.Clear();
}
inline ::palm::daisy::v1::EmailSendRequest_Attachment* EmailSendRequest::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:palm.daisy.v1.EmailSendRequest.attachments)
  return _impl_.attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Attachment >*
EmailSendRequest::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:palm.daisy.v1.EmailSendRequest.attachments)
  return &_impl_.attachments_;
}
inline const ::palm::daisy::v1::EmailSendRequest_Attachment& EmailSendRequest::_internal_attachments(int index) const {
  return _impl_.attachments_.Get(index);
}
inline const ::palm::daisy::v1::EmailSendRequest_Attachment& EmailSendRequest::attachments(int index) const {
  // @@protoc_insertion_point(field_get:palm.daisy.v1.EmailSendRequest.attachments)
  return _internal_attachments(index);
}
inline ::palm::daisy::v1::EmailSendRequest_Attachment* EmailSendRequest::_internal_add_attachments() {
  return _impl_.attachments_.Add();
}
inline ::palm::daisy::v1::EmailSendRequest_Attachment* EmailSendRequest::add_attachments() {
  ::palm::daisy::v1::EmailSendRequest_Attachment* _add = _internal_add_attachments();
  // @@protoc_insertion_point(field_add:palm.daisy.v1.EmailSendRequest.attachments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::daisy::v1::EmailSendRequest_Attachment >&
EmailSendRequest::attachments() const {
  // @@protoc_insertion_point(field_list:palm.daisy.v1.EmailSendRequest.attachments)
  return _impl_.attachments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace daisy
}  // namespace palm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_daisy_2eproto
