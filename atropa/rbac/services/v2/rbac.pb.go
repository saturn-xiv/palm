// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: rbac.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyHasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *PolicyUsersResponse_Item `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Role *PolicyRolesResponse_Item `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *PolicyHasRequest) Reset() {
	*x = PolicyHasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyHasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyHasRequest) ProtoMessage() {}

func (x *PolicyHasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyHasRequest.ProtoReflect.Descriptor instead.
func (*PolicyHasRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyHasRequest) GetUser() *PolicyUsersResponse_Item {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PolicyHasRequest) GetRole() *PolicyRolesResponse_Item {
	if x != nil {
		return x.Role
	}
	return nil
}

type PolicyCanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      *PolicyUsersResponse_Item                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Resource  *PolicyPermissionsResponse_Item_Resource  `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Operation *PolicyPermissionsResponse_Item_Operation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *PolicyCanRequest) Reset() {
	*x = PolicyCanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyCanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyCanRequest) ProtoMessage() {}

func (x *PolicyCanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyCanRequest.ProtoReflect.Descriptor instead.
func (*PolicyCanRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyCanRequest) GetUser() *PolicyUsersResponse_Item {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PolicyCanRequest) GetResource() *PolicyPermissionsResponse_Item_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *PolicyCanRequest) GetOperation() *PolicyPermissionsResponse_Item_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type PolicyUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PolicyUsersResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PolicyUsersResponse) Reset() {
	*x = PolicyUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyUsersResponse) ProtoMessage() {}

func (x *PolicyUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyUsersResponse.ProtoReflect.Descriptor instead.
func (*PolicyUsersResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyUsersResponse) GetItems() []*PolicyUsersResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type PolicyRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PolicyRolesResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PolicyRolesResponse) Reset() {
	*x = PolicyRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRolesResponse) ProtoMessage() {}

func (x *PolicyRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRolesResponse.ProtoReflect.Descriptor instead.
func (*PolicyRolesResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *PolicyRolesResponse) GetItems() []*PolicyRolesResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type PolicyRolesForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *PolicyUsersResponse_Item   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Roles []*PolicyRolesResponse_Item `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *PolicyRolesForUserRequest) Reset() {
	*x = PolicyRolesForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRolesForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRolesForUserRequest) ProtoMessage() {}

func (x *PolicyRolesForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRolesForUserRequest.ProtoReflect.Descriptor instead.
func (*PolicyRolesForUserRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyRolesForUserRequest) GetUser() *PolicyUsersResponse_Item {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PolicyRolesForUserRequest) GetRoles() []*PolicyRolesResponse_Item {
	if x != nil {
		return x.Roles
	}
	return nil
}

type PolicyPermissionsForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        *PolicyUsersResponse_Item         `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Permissions []*PolicyPermissionsResponse_Item `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *PolicyPermissionsForUserRequest) Reset() {
	*x = PolicyPermissionsForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsForUserRequest) ProtoMessage() {}

func (x *PolicyPermissionsForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsForUserRequest.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsForUserRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{5}
}

func (x *PolicyPermissionsForUserRequest) GetUser() *PolicyUsersResponse_Item {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PolicyPermissionsForUserRequest) GetPermissions() []*PolicyPermissionsResponse_Item {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type PolicyPermissionsForRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role        *PolicyRolesResponse_Item         `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Permissions []*PolicyPermissionsResponse_Item `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *PolicyPermissionsForRoleRequest) Reset() {
	*x = PolicyPermissionsForRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsForRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsForRoleRequest) ProtoMessage() {}

func (x *PolicyPermissionsForRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsForRoleRequest.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsForRoleRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{6}
}

func (x *PolicyPermissionsForRoleRequest) GetRole() *PolicyRolesResponse_Item {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *PolicyPermissionsForRoleRequest) GetPermissions() []*PolicyPermissionsResponse_Item {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type PolicyPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PolicyPermissionsResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PolicyPermissionsResponse) Reset() {
	*x = PolicyPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse) ProtoMessage() {}

func (x *PolicyPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7}
}

func (x *PolicyPermissionsResponse) GetItems() []*PolicyPermissionsResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type PolicyUsersResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*PolicyUsersResponse_Item_I
	//	*PolicyUsersResponse_Item_S
	Id isPolicyUsersResponse_Item_Id `protobuf_oneof:"id"`
}

func (x *PolicyUsersResponse_Item) Reset() {
	*x = PolicyUsersResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyUsersResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyUsersResponse_Item) ProtoMessage() {}

func (x *PolicyUsersResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyUsersResponse_Item.ProtoReflect.Descriptor instead.
func (*PolicyUsersResponse_Item) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{2, 0}
}

func (m *PolicyUsersResponse_Item) GetId() isPolicyUsersResponse_Item_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *PolicyUsersResponse_Item) GetI() int64 {
	if x, ok := x.GetId().(*PolicyUsersResponse_Item_I); ok {
		return x.I
	}
	return 0
}

func (x *PolicyUsersResponse_Item) GetS() string {
	if x, ok := x.GetId().(*PolicyUsersResponse_Item_S); ok {
		return x.S
	}
	return ""
}

type isPolicyUsersResponse_Item_Id interface {
	isPolicyUsersResponse_Item_Id()
}

type PolicyUsersResponse_Item_I struct {
	I int64 `protobuf:"varint,2,opt,name=i,proto3,oneof"`
}

type PolicyUsersResponse_Item_S struct {
	S string `protobuf:"bytes,9,opt,name=s,proto3,oneof"`
}

func (*PolicyUsersResponse_Item_I) isPolicyUsersResponse_Item_Id() {}

func (*PolicyUsersResponse_Item_S) isPolicyUsersResponse_Item_Id() {}

type PolicyRolesResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to By:
	//
	//	*PolicyRolesResponse_Item_Root_
	//	*PolicyRolesResponse_Item_Administrator_
	//	*PolicyRolesResponse_Item_Code
	By isPolicyRolesResponse_Item_By `protobuf_oneof:"by"`
}

func (x *PolicyRolesResponse_Item) Reset() {
	*x = PolicyRolesResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRolesResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRolesResponse_Item) ProtoMessage() {}

func (x *PolicyRolesResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRolesResponse_Item.ProtoReflect.Descriptor instead.
func (*PolicyRolesResponse_Item) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{3, 0}
}

func (m *PolicyRolesResponse_Item) GetBy() isPolicyRolesResponse_Item_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *PolicyRolesResponse_Item) GetRoot() *PolicyRolesResponse_Item_Root {
	if x, ok := x.GetBy().(*PolicyRolesResponse_Item_Root_); ok {
		return x.Root
	}
	return nil
}

func (x *PolicyRolesResponse_Item) GetAdministrator() *PolicyRolesResponse_Item_Administrator {
	if x, ok := x.GetBy().(*PolicyRolesResponse_Item_Administrator_); ok {
		return x.Administrator
	}
	return nil
}

func (x *PolicyRolesResponse_Item) GetCode() string {
	if x, ok := x.GetBy().(*PolicyRolesResponse_Item_Code); ok {
		return x.Code
	}
	return ""
}

type isPolicyRolesResponse_Item_By interface {
	isPolicyRolesResponse_Item_By()
}

type PolicyRolesResponse_Item_Root_ struct {
	Root *PolicyRolesResponse_Item_Root `protobuf:"bytes,1,opt,name=root,proto3,oneof"`
}

type PolicyRolesResponse_Item_Administrator_ struct {
	Administrator *PolicyRolesResponse_Item_Administrator `protobuf:"bytes,2,opt,name=administrator,proto3,oneof"`
}

type PolicyRolesResponse_Item_Code struct {
	Code string `protobuf:"bytes,9,opt,name=code,proto3,oneof"`
}

func (*PolicyRolesResponse_Item_Root_) isPolicyRolesResponse_Item_By() {}

func (*PolicyRolesResponse_Item_Administrator_) isPolicyRolesResponse_Item_By() {}

func (*PolicyRolesResponse_Item_Code) isPolicyRolesResponse_Item_By() {}

type PolicyRolesResponse_Item_Administrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyRolesResponse_Item_Administrator) Reset() {
	*x = PolicyRolesResponse_Item_Administrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRolesResponse_Item_Administrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRolesResponse_Item_Administrator) ProtoMessage() {}

func (x *PolicyRolesResponse_Item_Administrator) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRolesResponse_Item_Administrator.ProtoReflect.Descriptor instead.
func (*PolicyRolesResponse_Item_Administrator) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{3, 0, 0}
}

type PolicyRolesResponse_Item_Root struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyRolesResponse_Item_Root) Reset() {
	*x = PolicyRolesResponse_Item_Root{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRolesResponse_Item_Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRolesResponse_Item_Root) ProtoMessage() {}

func (x *PolicyRolesResponse_Item_Root) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRolesResponse_Item_Root.ProtoReflect.Descriptor instead.
func (*PolicyRolesResponse_Item_Root) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{3, 0, 1}
}

type PolicyPermissionsResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource  *PolicyPermissionsResponse_Item_Resource  `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Operation *PolicyPermissionsResponse_Item_Operation `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *PolicyPermissionsResponse_Item) Reset() {
	*x = PolicyPermissionsResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PolicyPermissionsResponse_Item) GetResource() *PolicyPermissionsResponse_Item_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item) GetOperation() *PolicyPermissionsResponse_Item_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type PolicyPermissionsResponse_Item_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string                                      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id   *PolicyPermissionsResponse_Item_Resource_Id `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *PolicyPermissionsResponse_Item_Resource) Reset() {
	*x = PolicyPermissionsResponse_Item_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Resource) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Resource.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Resource) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *PolicyPermissionsResponse_Item_Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PolicyPermissionsResponse_Item_Resource) GetId() *PolicyPermissionsResponse_Item_Resource_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type PolicyPermissionsResponse_Item_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to By:
	//
	//	*PolicyPermissionsResponse_Item_Operation_Read_
	//	*PolicyPermissionsResponse_Item_Operation_Write_
	//	*PolicyPermissionsResponse_Item_Operation_Append_
	//	*PolicyPermissionsResponse_Item_Operation_Execute_
	//	*PolicyPermissionsResponse_Item_Operation_Credit_
	//	*PolicyPermissionsResponse_Item_Operation_Debit_
	//	*PolicyPermissionsResponse_Item_Operation_Inquiry_
	//	*PolicyPermissionsResponse_Item_Operation_Code
	By isPolicyPermissionsResponse_Item_Operation_By `protobuf_oneof:"by"`
}

func (x *PolicyPermissionsResponse_Item_Operation) Reset() {
	*x = PolicyPermissionsResponse_Item_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Operation) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Operation.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Operation) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 1}
}

func (m *PolicyPermissionsResponse_Item_Operation) GetBy() isPolicyPermissionsResponse_Item_Operation_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item_Operation) GetRead() *PolicyPermissionsResponse_Item_Operation_Read {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Operation_Read_); ok {
		return x.Read
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item_Operation) GetWrite() *PolicyPermissionsResponse_Item_Operation_Write {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Operation_Write_); ok {
		return x.Write
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item_Operation) GetAppend() *PolicyPermissionsResponse_Item_Operation_Append {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Operation_Append_); ok {
		return x.Append
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item_Operation) GetExecute() *PolicyPermissionsResponse_Item_Operation_Execute {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Operation_Execute_); ok {
		return x.Execute
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item_Operation) GetCredit() *PolicyPermissionsResponse_Item_Operation_Credit {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Operation_Credit_); ok {
		return x.Credit
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item_Operation) GetDebit() *PolicyPermissionsResponse_Item_Operation_Debit {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Operation_Debit_); ok {
		return x.Debit
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item_Operation) GetInquiry() *PolicyPermissionsResponse_Item_Operation_Inquiry {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Operation_Inquiry_); ok {
		return x.Inquiry
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item_Operation) GetCode() string {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Operation_Code); ok {
		return x.Code
	}
	return ""
}

type isPolicyPermissionsResponse_Item_Operation_By interface {
	isPolicyPermissionsResponse_Item_Operation_By()
}

type PolicyPermissionsResponse_Item_Operation_Read_ struct {
	Read *PolicyPermissionsResponse_Item_Operation_Read `protobuf:"bytes,1,opt,name=read,proto3,oneof"`
}

type PolicyPermissionsResponse_Item_Operation_Write_ struct {
	Write *PolicyPermissionsResponse_Item_Operation_Write `protobuf:"bytes,2,opt,name=write,proto3,oneof"`
}

type PolicyPermissionsResponse_Item_Operation_Append_ struct {
	Append *PolicyPermissionsResponse_Item_Operation_Append `protobuf:"bytes,3,opt,name=append,proto3,oneof"`
}

type PolicyPermissionsResponse_Item_Operation_Execute_ struct {
	Execute *PolicyPermissionsResponse_Item_Operation_Execute `protobuf:"bytes,4,opt,name=execute,proto3,oneof"`
}

type PolicyPermissionsResponse_Item_Operation_Credit_ struct {
	Credit *PolicyPermissionsResponse_Item_Operation_Credit `protobuf:"bytes,5,opt,name=credit,proto3,oneof"`
}

type PolicyPermissionsResponse_Item_Operation_Debit_ struct {
	Debit *PolicyPermissionsResponse_Item_Operation_Debit `protobuf:"bytes,6,opt,name=debit,proto3,oneof"`
}

type PolicyPermissionsResponse_Item_Operation_Inquiry_ struct {
	Inquiry *PolicyPermissionsResponse_Item_Operation_Inquiry `protobuf:"bytes,7,opt,name=inquiry,proto3,oneof"`
}

type PolicyPermissionsResponse_Item_Operation_Code struct {
	Code string `protobuf:"bytes,99,opt,name=code,proto3,oneof"`
}

func (*PolicyPermissionsResponse_Item_Operation_Read_) isPolicyPermissionsResponse_Item_Operation_By() {
}

func (*PolicyPermissionsResponse_Item_Operation_Write_) isPolicyPermissionsResponse_Item_Operation_By() {
}

func (*PolicyPermissionsResponse_Item_Operation_Append_) isPolicyPermissionsResponse_Item_Operation_By() {
}

func (*PolicyPermissionsResponse_Item_Operation_Execute_) isPolicyPermissionsResponse_Item_Operation_By() {
}

func (*PolicyPermissionsResponse_Item_Operation_Credit_) isPolicyPermissionsResponse_Item_Operation_By() {
}

func (*PolicyPermissionsResponse_Item_Operation_Debit_) isPolicyPermissionsResponse_Item_Operation_By() {
}

func (*PolicyPermissionsResponse_Item_Operation_Inquiry_) isPolicyPermissionsResponse_Item_Operation_By() {
}

func (*PolicyPermissionsResponse_Item_Operation_Code) isPolicyPermissionsResponse_Item_Operation_By() {
}

type PolicyPermissionsResponse_Item_Resource_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to By:
	//
	//	*PolicyPermissionsResponse_Item_Resource_Id_I
	//	*PolicyPermissionsResponse_Item_Resource_Id_S
	By isPolicyPermissionsResponse_Item_Resource_Id_By `protobuf_oneof:"by"`
}

func (x *PolicyPermissionsResponse_Item_Resource_Id) Reset() {
	*x = PolicyPermissionsResponse_Item_Resource_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Resource_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Resource_Id) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Resource_Id) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Resource_Id.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Resource_Id) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 0, 0}
}

func (m *PolicyPermissionsResponse_Item_Resource_Id) GetBy() isPolicyPermissionsResponse_Item_Resource_Id_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *PolicyPermissionsResponse_Item_Resource_Id) GetI() int64 {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Resource_Id_I); ok {
		return x.I
	}
	return 0
}

func (x *PolicyPermissionsResponse_Item_Resource_Id) GetS() string {
	if x, ok := x.GetBy().(*PolicyPermissionsResponse_Item_Resource_Id_S); ok {
		return x.S
	}
	return ""
}

type isPolicyPermissionsResponse_Item_Resource_Id_By interface {
	isPolicyPermissionsResponse_Item_Resource_Id_By()
}

type PolicyPermissionsResponse_Item_Resource_Id_I struct {
	I int64 `protobuf:"varint,11,opt,name=i,proto3,oneof"`
}

type PolicyPermissionsResponse_Item_Resource_Id_S struct {
	S string `protobuf:"bytes,12,opt,name=s,proto3,oneof"`
}

func (*PolicyPermissionsResponse_Item_Resource_Id_I) isPolicyPermissionsResponse_Item_Resource_Id_By() {
}

func (*PolicyPermissionsResponse_Item_Resource_Id_S) isPolicyPermissionsResponse_Item_Resource_Id_By() {
}

type PolicyPermissionsResponse_Item_Operation_Read struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyPermissionsResponse_Item_Operation_Read) Reset() {
	*x = PolicyPermissionsResponse_Item_Operation_Read{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Operation_Read) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Operation_Read) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Operation_Read) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Operation_Read.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Operation_Read) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 1, 0}
}

type PolicyPermissionsResponse_Item_Operation_Write struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyPermissionsResponse_Item_Operation_Write) Reset() {
	*x = PolicyPermissionsResponse_Item_Operation_Write{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Operation_Write) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Operation_Write) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Operation_Write) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Operation_Write.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Operation_Write) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 1, 1}
}

type PolicyPermissionsResponse_Item_Operation_Append struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyPermissionsResponse_Item_Operation_Append) Reset() {
	*x = PolicyPermissionsResponse_Item_Operation_Append{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Operation_Append) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Operation_Append) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Operation_Append) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Operation_Append.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Operation_Append) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 1, 2}
}

type PolicyPermissionsResponse_Item_Operation_Execute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyPermissionsResponse_Item_Operation_Execute) Reset() {
	*x = PolicyPermissionsResponse_Item_Operation_Execute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Operation_Execute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Operation_Execute) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Operation_Execute) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Operation_Execute.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Operation_Execute) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 1, 3}
}

type PolicyPermissionsResponse_Item_Operation_Credit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyPermissionsResponse_Item_Operation_Credit) Reset() {
	*x = PolicyPermissionsResponse_Item_Operation_Credit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Operation_Credit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Operation_Credit) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Operation_Credit) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Operation_Credit.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Operation_Credit) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 1, 4}
}

type PolicyPermissionsResponse_Item_Operation_Debit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyPermissionsResponse_Item_Operation_Debit) Reset() {
	*x = PolicyPermissionsResponse_Item_Operation_Debit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Operation_Debit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Operation_Debit) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Operation_Debit) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Operation_Debit.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Operation_Debit) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 1, 5}
}

type PolicyPermissionsResponse_Item_Operation_Inquiry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyPermissionsResponse_Item_Operation_Inquiry) Reset() {
	*x = PolicyPermissionsResponse_Item_Operation_Inquiry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyPermissionsResponse_Item_Operation_Inquiry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyPermissionsResponse_Item_Operation_Inquiry) ProtoMessage() {}

func (x *PolicyPermissionsResponse_Item_Operation_Inquiry) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyPermissionsResponse_Item_Operation_Inquiry.ProtoReflect.Descriptor instead.
func (*PolicyPermissionsResponse_Item_Operation_Inquiry) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7, 0, 1, 6}
}

var File_rbac_proto protoreflect.FileDescriptor

var file_rbac_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81,
	0x01, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x1a, 0x2c, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x01,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x01, 0x69, 0x12, 0x0e, 0x0a, 0x01,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x73, 0x42, 0x04, 0x0a, 0x02,
	0x69, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x5c, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x0f, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x06, 0x0a, 0x04, 0x52, 0x6f, 0x6f,
	0x74, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22,
	0xad, 0x01, 0x0a, 0x1f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x4e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xad, 0x01, 0x0a, 0x1f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x4e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x8b, 0x09, 0x0a, 0x19, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0xa9, 0x08, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x51, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x54, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xa0, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x1a, 0x2a, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x01, 0x69, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x01, 0x69, 0x12, 0x0e, 0x0a, 0x01, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x1a, 0xd4, 0x05, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x54, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x57, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x12, 0x5a, 0x0a, 0x07, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0x06, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x07, 0x0a, 0x05, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x1a, 0x09,
	0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x1a, 0x07, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x69, 0x74, 0x1a, 0x09, 0x0a, 0x07,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x32, 0xb7, 0x0d,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x03, 0x48, 0x61, 0x73, 0x12,
	0x1e, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x03, 0x43, 0x61, 0x6e,
	0x12, 0x1e, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x21, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x21, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x27,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x2d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2d,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x62, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x61, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x78, 0x69, 0x76,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x78, 0x69, 0x76, 0x2f, 0x70,
	0x61, 0x6c, 0x6d, 0x2f, 0x61, 0x74, 0x72, 0x6f, 0x70, 0x61, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_rbac_proto_rawDescOnce sync.Once
	file_rbac_proto_rawDescData = file_rbac_proto_rawDesc
)

func file_rbac_proto_rawDescGZIP() []byte {
	file_rbac_proto_rawDescOnce.Do(func() {
		file_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(file_rbac_proto_rawDescData)
	})
	return file_rbac_proto_rawDescData
}

var file_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_rbac_proto_goTypes = []interface{}{
	(*PolicyHasRequest)(nil),                                 // 0: palm.rbac.v1.PolicyHasRequest
	(*PolicyCanRequest)(nil),                                 // 1: palm.rbac.v1.PolicyCanRequest
	(*PolicyUsersResponse)(nil),                              // 2: palm.rbac.v1.PolicyUsersResponse
	(*PolicyRolesResponse)(nil),                              // 3: palm.rbac.v1.PolicyRolesResponse
	(*PolicyRolesForUserRequest)(nil),                        // 4: palm.rbac.v1.PolicyRolesForUserRequest
	(*PolicyPermissionsForUserRequest)(nil),                  // 5: palm.rbac.v1.PolicyPermissionsForUserRequest
	(*PolicyPermissionsForRoleRequest)(nil),                  // 6: palm.rbac.v1.PolicyPermissionsForRoleRequest
	(*PolicyPermissionsResponse)(nil),                        // 7: palm.rbac.v1.PolicyPermissionsResponse
	(*PolicyUsersResponse_Item)(nil),                         // 8: palm.rbac.v1.PolicyUsersResponse.Item
	(*PolicyRolesResponse_Item)(nil),                         // 9: palm.rbac.v1.PolicyRolesResponse.Item
	(*PolicyRolesResponse_Item_Administrator)(nil),           // 10: palm.rbac.v1.PolicyRolesResponse.Item.Administrator
	(*PolicyRolesResponse_Item_Root)(nil),                    // 11: palm.rbac.v1.PolicyRolesResponse.Item.Root
	(*PolicyPermissionsResponse_Item)(nil),                   // 12: palm.rbac.v1.PolicyPermissionsResponse.Item
	(*PolicyPermissionsResponse_Item_Resource)(nil),          // 13: palm.rbac.v1.PolicyPermissionsResponse.Item.Resource
	(*PolicyPermissionsResponse_Item_Operation)(nil),         // 14: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation
	(*PolicyPermissionsResponse_Item_Resource_Id)(nil),       // 15: palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id
	(*PolicyPermissionsResponse_Item_Operation_Read)(nil),    // 16: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Read
	(*PolicyPermissionsResponse_Item_Operation_Write)(nil),   // 17: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Write
	(*PolicyPermissionsResponse_Item_Operation_Append)(nil),  // 18: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Append
	(*PolicyPermissionsResponse_Item_Operation_Execute)(nil), // 19: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Execute
	(*PolicyPermissionsResponse_Item_Operation_Credit)(nil),  // 20: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Credit
	(*PolicyPermissionsResponse_Item_Operation_Debit)(nil),   // 21: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Debit
	(*PolicyPermissionsResponse_Item_Operation_Inquiry)(nil), // 22: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Inquiry
	(*emptypb.Empty)(nil),                                    // 23: google.protobuf.Empty
}
var file_rbac_proto_depIdxs = []int32{
	8,  // 0: palm.rbac.v1.PolicyHasRequest.user:type_name -> palm.rbac.v1.PolicyUsersResponse.Item
	9,  // 1: palm.rbac.v1.PolicyHasRequest.role:type_name -> palm.rbac.v1.PolicyRolesResponse.Item
	8,  // 2: palm.rbac.v1.PolicyCanRequest.user:type_name -> palm.rbac.v1.PolicyUsersResponse.Item
	13, // 3: palm.rbac.v1.PolicyCanRequest.resource:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Resource
	14, // 4: palm.rbac.v1.PolicyCanRequest.operation:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Operation
	8,  // 5: palm.rbac.v1.PolicyUsersResponse.items:type_name -> palm.rbac.v1.PolicyUsersResponse.Item
	9,  // 6: palm.rbac.v1.PolicyRolesResponse.items:type_name -> palm.rbac.v1.PolicyRolesResponse.Item
	8,  // 7: palm.rbac.v1.PolicyRolesForUserRequest.user:type_name -> palm.rbac.v1.PolicyUsersResponse.Item
	9,  // 8: palm.rbac.v1.PolicyRolesForUserRequest.roles:type_name -> palm.rbac.v1.PolicyRolesResponse.Item
	8,  // 9: palm.rbac.v1.PolicyPermissionsForUserRequest.user:type_name -> palm.rbac.v1.PolicyUsersResponse.Item
	12, // 10: palm.rbac.v1.PolicyPermissionsForUserRequest.permissions:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item
	9,  // 11: palm.rbac.v1.PolicyPermissionsForRoleRequest.role:type_name -> palm.rbac.v1.PolicyRolesResponse.Item
	12, // 12: palm.rbac.v1.PolicyPermissionsForRoleRequest.permissions:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item
	12, // 13: palm.rbac.v1.PolicyPermissionsResponse.items:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item
	11, // 14: palm.rbac.v1.PolicyRolesResponse.Item.root:type_name -> palm.rbac.v1.PolicyRolesResponse.Item.Root
	10, // 15: palm.rbac.v1.PolicyRolesResponse.Item.administrator:type_name -> palm.rbac.v1.PolicyRolesResponse.Item.Administrator
	13, // 16: palm.rbac.v1.PolicyPermissionsResponse.Item.resource:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Resource
	14, // 17: palm.rbac.v1.PolicyPermissionsResponse.Item.operation:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Operation
	15, // 18: palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.id:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Resource.Id
	16, // 19: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.read:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Read
	17, // 20: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.write:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Write
	18, // 21: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.append:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Append
	19, // 22: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.execute:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Execute
	20, // 23: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.credit:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Credit
	21, // 24: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.debit:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Debit
	22, // 25: palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.inquiry:type_name -> palm.rbac.v1.PolicyPermissionsResponse.Item.Operation.Inquiry
	0,  // 26: palm.rbac.v1.Policy.Has:input_type -> palm.rbac.v1.PolicyHasRequest
	1,  // 27: palm.rbac.v1.Policy.Can:input_type -> palm.rbac.v1.PolicyCanRequest
	8,  // 28: palm.rbac.v1.Policy.DeleteUser:input_type -> palm.rbac.v1.PolicyUsersResponse.Item
	9,  // 29: palm.rbac.v1.Policy.DeleteRole:input_type -> palm.rbac.v1.PolicyRolesResponse.Item
	8,  // 30: palm.rbac.v1.Policy.GetRolesForUser:input_type -> palm.rbac.v1.PolicyUsersResponse.Item
	8,  // 31: palm.rbac.v1.Policy.GetImplicitRolesForUser:input_type -> palm.rbac.v1.PolicyUsersResponse.Item
	9,  // 32: palm.rbac.v1.Policy.GetUsersForRole:input_type -> palm.rbac.v1.PolicyRolesResponse.Item
	9,  // 33: palm.rbac.v1.Policy.GetImplicitUsersForRole:input_type -> palm.rbac.v1.PolicyRolesResponse.Item
	4,  // 34: palm.rbac.v1.Policy.AddRolesForUser:input_type -> palm.rbac.v1.PolicyRolesForUserRequest
	4,  // 35: palm.rbac.v1.Policy.DeleteRolesForUser:input_type -> palm.rbac.v1.PolicyRolesForUserRequest
	8,  // 36: palm.rbac.v1.Policy.GetPermissionsForUser:input_type -> palm.rbac.v1.PolicyUsersResponse.Item
	8,  // 37: palm.rbac.v1.Policy.GetImplicitPermissionsForUser:input_type -> palm.rbac.v1.PolicyUsersResponse.Item
	5,  // 38: palm.rbac.v1.Policy.AddPermissionsForUser:input_type -> palm.rbac.v1.PolicyPermissionsForUserRequest
	5,  // 39: palm.rbac.v1.Policy.DeletePermissionsForUser:input_type -> palm.rbac.v1.PolicyPermissionsForUserRequest
	9,  // 40: palm.rbac.v1.Policy.GetPermissionsForRole:input_type -> palm.rbac.v1.PolicyRolesResponse.Item
	9,  // 41: palm.rbac.v1.Policy.GetImplicitPermissionsForRole:input_type -> palm.rbac.v1.PolicyRolesResponse.Item
	6,  // 42: palm.rbac.v1.Policy.AddPermissionsForRole:input_type -> palm.rbac.v1.PolicyPermissionsForRoleRequest
	6,  // 43: palm.rbac.v1.Policy.DeletePermissionsForRole:input_type -> palm.rbac.v1.PolicyPermissionsForRoleRequest
	23, // 44: palm.rbac.v1.Policy.Has:output_type -> google.protobuf.Empty
	23, // 45: palm.rbac.v1.Policy.Can:output_type -> google.protobuf.Empty
	23, // 46: palm.rbac.v1.Policy.DeleteUser:output_type -> google.protobuf.Empty
	23, // 47: palm.rbac.v1.Policy.DeleteRole:output_type -> google.protobuf.Empty
	3,  // 48: palm.rbac.v1.Policy.GetRolesForUser:output_type -> palm.rbac.v1.PolicyRolesResponse
	3,  // 49: palm.rbac.v1.Policy.GetImplicitRolesForUser:output_type -> palm.rbac.v1.PolicyRolesResponse
	2,  // 50: palm.rbac.v1.Policy.GetUsersForRole:output_type -> palm.rbac.v1.PolicyUsersResponse
	2,  // 51: palm.rbac.v1.Policy.GetImplicitUsersForRole:output_type -> palm.rbac.v1.PolicyUsersResponse
	23, // 52: palm.rbac.v1.Policy.AddRolesForUser:output_type -> google.protobuf.Empty
	23, // 53: palm.rbac.v1.Policy.DeleteRolesForUser:output_type -> google.protobuf.Empty
	7,  // 54: palm.rbac.v1.Policy.GetPermissionsForUser:output_type -> palm.rbac.v1.PolicyPermissionsResponse
	7,  // 55: palm.rbac.v1.Policy.GetImplicitPermissionsForUser:output_type -> palm.rbac.v1.PolicyPermissionsResponse
	23, // 56: palm.rbac.v1.Policy.AddPermissionsForUser:output_type -> google.protobuf.Empty
	23, // 57: palm.rbac.v1.Policy.DeletePermissionsForUser:output_type -> google.protobuf.Empty
	7,  // 58: palm.rbac.v1.Policy.GetPermissionsForRole:output_type -> palm.rbac.v1.PolicyPermissionsResponse
	7,  // 59: palm.rbac.v1.Policy.GetImplicitPermissionsForRole:output_type -> palm.rbac.v1.PolicyPermissionsResponse
	23, // 60: palm.rbac.v1.Policy.AddPermissionsForRole:output_type -> google.protobuf.Empty
	23, // 61: palm.rbac.v1.Policy.DeletePermissionsForRole:output_type -> google.protobuf.Empty
	44, // [44:62] is the sub-list for method output_type
	26, // [26:44] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_rbac_proto_init() }
func file_rbac_proto_init() {
	if File_rbac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rbac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyHasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyCanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRolesForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsForRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyUsersResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRolesResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRolesResponse_Item_Administrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRolesResponse_Item_Root); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Resource_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Operation_Read); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Operation_Write); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Operation_Append); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Operation_Execute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Operation_Credit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Operation_Debit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyPermissionsResponse_Item_Operation_Inquiry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rbac_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*PolicyUsersResponse_Item_I)(nil),
		(*PolicyUsersResponse_Item_S)(nil),
	}
	file_rbac_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PolicyRolesResponse_Item_Root_)(nil),
		(*PolicyRolesResponse_Item_Administrator_)(nil),
		(*PolicyRolesResponse_Item_Code)(nil),
	}
	file_rbac_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_rbac_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*PolicyPermissionsResponse_Item_Operation_Read_)(nil),
		(*PolicyPermissionsResponse_Item_Operation_Write_)(nil),
		(*PolicyPermissionsResponse_Item_Operation_Append_)(nil),
		(*PolicyPermissionsResponse_Item_Operation_Execute_)(nil),
		(*PolicyPermissionsResponse_Item_Operation_Credit_)(nil),
		(*PolicyPermissionsResponse_Item_Operation_Debit_)(nil),
		(*PolicyPermissionsResponse_Item_Operation_Inquiry_)(nil),
		(*PolicyPermissionsResponse_Item_Operation_Code)(nil),
	}
	file_rbac_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*PolicyPermissionsResponse_Item_Resource_Id_I)(nil),
		(*PolicyPermissionsResponse_Item_Resource_Id_S)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rbac_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rbac_proto_goTypes,
		DependencyIndexes: file_rbac_proto_depIdxs,
		MessageInfos:      file_rbac_proto_msgTypes,
	}.Build()
	File_rbac_proto = out.File
	file_rbac_proto_rawDesc = nil
	file_rbac_proto_goTypes = nil
	file_rbac_proto_depIdxs = nil
}
