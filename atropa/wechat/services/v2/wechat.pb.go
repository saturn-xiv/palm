// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: wechat.proto

package v2

import (
	v2 "github.com/saturn-xiv/palm/atropa/balsam/services/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ----------------------------------------------------------------------------
type PayCurrency int32

const (
	PayCurrency_CNY PayCurrency = 0
)

// Enum value maps for PayCurrency.
var (
	PayCurrency_name = map[int32]string{
		0: "CNY",
	}
	PayCurrency_value = map[string]int32{
		"CNY": 0,
	}
)

func (x PayCurrency) Enum() *PayCurrency {
	p := new(PayCurrency)
	*p = x
	return p
}

func (x PayCurrency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayCurrency) Descriptor() protoreflect.EnumDescriptor {
	return file_wechat_proto_enumTypes[0].Descriptor()
}

func (PayCurrency) Type() protoreflect.EnumType {
	return &file_wechat_proto_enumTypes[0]
}

func (x PayCurrency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayCurrency.Descriptor instead.
func (PayCurrency) EnumDescriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{0}
}

type PayNotifyAction int32

const (
	PayNotifyAction_TRANSCATION PayNotifyAction = 0
	PayNotifyAction_REFUND      PayNotifyAction = 1
)

// Enum value maps for PayNotifyAction.
var (
	PayNotifyAction_name = map[int32]string{
		0: "TRANSCATION",
		1: "REFUND",
	}
	PayNotifyAction_value = map[string]int32{
		"TRANSCATION": 0,
		"REFUND":      1,
	}
)

func (x PayNotifyAction) Enum() *PayNotifyAction {
	p := new(PayNotifyAction)
	*p = x
	return p
}

func (x PayNotifyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayNotifyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_wechat_proto_enumTypes[1].Descriptor()
}

func (PayNotifyAction) Type() protoreflect.EnumType {
	return &file_wechat_proto_enumTypes[1]
}

func (x PayNotifyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayNotifyAction.Descriptor instead.
func (PayNotifyAction) EnumDescriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{1}
}

type PayTarType int32

const (
	PayTarType_GZIP PayTarType = 0
)

// Enum value maps for PayTarType.
var (
	PayTarType_name = map[int32]string{
		0: "GZIP",
	}
	PayTarType_value = map[string]int32{
		"GZIP": 0,
	}
)

func (x PayTarType) Enum() *PayTarType {
	p := new(PayTarType)
	*p = x
	return p
}

func (x PayTarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayTarType) Descriptor() protoreflect.EnumDescriptor {
	return file_wechat_proto_enumTypes[2].Descriptor()
}

func (PayTarType) Type() protoreflect.EnumType {
	return &file_wechat_proto_enumTypes[2]
}

func (x PayTarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayTarType.Descriptor instead.
func (PayTarType) EnumDescriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{2}
}

type PayTradeBillRequest_BillType int32

const (
	PayTradeBillRequest_ALL     PayTradeBillRequest_BillType = 0
	PayTradeBillRequest_SUCCESS PayTradeBillRequest_BillType = 1
	PayTradeBillRequest_REFUND  PayTradeBillRequest_BillType = 2
)

// Enum value maps for PayTradeBillRequest_BillType.
var (
	PayTradeBillRequest_BillType_name = map[int32]string{
		0: "ALL",
		1: "SUCCESS",
		2: "REFUND",
	}
	PayTradeBillRequest_BillType_value = map[string]int32{
		"ALL":     0,
		"SUCCESS": 1,
		"REFUND":  2,
	}
)

func (x PayTradeBillRequest_BillType) Enum() *PayTradeBillRequest_BillType {
	p := new(PayTradeBillRequest_BillType)
	*p = x
	return p
}

func (x PayTradeBillRequest_BillType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayTradeBillRequest_BillType) Descriptor() protoreflect.EnumDescriptor {
	return file_wechat_proto_enumTypes[3].Descriptor()
}

func (PayTradeBillRequest_BillType) Type() protoreflect.EnumType {
	return &file_wechat_proto_enumTypes[3]
}

func (x PayTradeBillRequest_BillType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayTradeBillRequest_BillType.Descriptor instead.
func (PayTradeBillRequest_BillType) EnumDescriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{16, 0}
}

type PayFundFlowBillRequest_AccountType int32

const (
	PayFundFlowBillRequest_BASIC     PayFundFlowBillRequest_AccountType = 0
	PayFundFlowBillRequest_OPERATION PayFundFlowBillRequest_AccountType = 1
	PayFundFlowBillRequest_FEES      PayFundFlowBillRequest_AccountType = 2
)

// Enum value maps for PayFundFlowBillRequest_AccountType.
var (
	PayFundFlowBillRequest_AccountType_name = map[int32]string{
		0: "BASIC",
		1: "OPERATION",
		2: "FEES",
	}
	PayFundFlowBillRequest_AccountType_value = map[string]int32{
		"BASIC":     0,
		"OPERATION": 1,
		"FEES":      2,
	}
)

func (x PayFundFlowBillRequest_AccountType) Enum() *PayFundFlowBillRequest_AccountType {
	p := new(PayFundFlowBillRequest_AccountType)
	*p = x
	return p
}

func (x PayFundFlowBillRequest_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayFundFlowBillRequest_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_wechat_proto_enumTypes[4].Descriptor()
}

func (PayFundFlowBillRequest_AccountType) Type() protoreflect.EnumType {
	return &file_wechat_proto_enumTypes[4]
}

func (x PayFundFlowBillRequest_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayFundFlowBillRequest_AccountType.Descriptor instead.
func (PayFundFlowBillRequest_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{17, 0}
}

type PayTransferGetElectronicReceiptRequest_AcceptType int32

const (
	PayTransferGetElectronicReceiptRequest_BATCH_TRANSFER     PayTransferGetElectronicReceiptRequest_AcceptType = 0
	PayTransferGetElectronicReceiptRequest_TRANSFER_TO_POCKET PayTransferGetElectronicReceiptRequest_AcceptType = 1
	PayTransferGetElectronicReceiptRequest_TRANSFER_TO_BANK   PayTransferGetElectronicReceiptRequest_AcceptType = 2
)

// Enum value maps for PayTransferGetElectronicReceiptRequest_AcceptType.
var (
	PayTransferGetElectronicReceiptRequest_AcceptType_name = map[int32]string{
		0: "BATCH_TRANSFER",
		1: "TRANSFER_TO_POCKET",
		2: "TRANSFER_TO_BANK",
	}
	PayTransferGetElectronicReceiptRequest_AcceptType_value = map[string]int32{
		"BATCH_TRANSFER":     0,
		"TRANSFER_TO_POCKET": 1,
		"TRANSFER_TO_BANK":   2,
	}
)

func (x PayTransferGetElectronicReceiptRequest_AcceptType) Enum() *PayTransferGetElectronicReceiptRequest_AcceptType {
	p := new(PayTransferGetElectronicReceiptRequest_AcceptType)
	*p = x
	return p
}

func (x PayTransferGetElectronicReceiptRequest_AcceptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayTransferGetElectronicReceiptRequest_AcceptType) Descriptor() protoreflect.EnumDescriptor {
	return file_wechat_proto_enumTypes[5].Descriptor()
}

func (PayTransferGetElectronicReceiptRequest_AcceptType) Type() protoreflect.EnumType {
	return &file_wechat_proto_enumTypes[5]
}

func (x PayTransferGetElectronicReceiptRequest_AcceptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayTransferGetElectronicReceiptRequest_AcceptType.Descriptor instead.
func (PayTransferGetElectronicReceiptRequest_AcceptType) EnumDescriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{21, 0}
}

type PayQueryBatchTransferRequest_DetailStatus int32

const (
	PayQueryBatchTransferRequest_ALL      PayQueryBatchTransferRequest_DetailStatus = 0
	PayQueryBatchTransferRequest_SUCCESS  PayQueryBatchTransferRequest_DetailStatus = 1
	PayQueryBatchTransferRequest_WAIT_PAY PayQueryBatchTransferRequest_DetailStatus = 2
	PayQueryBatchTransferRequest_FAIL     PayQueryBatchTransferRequest_DetailStatus = 9
)

// Enum value maps for PayQueryBatchTransferRequest_DetailStatus.
var (
	PayQueryBatchTransferRequest_DetailStatus_name = map[int32]string{
		0: "ALL",
		1: "SUCCESS",
		2: "WAIT_PAY",
		9: "FAIL",
	}
	PayQueryBatchTransferRequest_DetailStatus_value = map[string]int32{
		"ALL":      0,
		"SUCCESS":  1,
		"WAIT_PAY": 2,
		"FAIL":     9,
	}
)

func (x PayQueryBatchTransferRequest_DetailStatus) Enum() *PayQueryBatchTransferRequest_DetailStatus {
	p := new(PayQueryBatchTransferRequest_DetailStatus)
	*p = x
	return p
}

func (x PayQueryBatchTransferRequest_DetailStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayQueryBatchTransferRequest_DetailStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wechat_proto_enumTypes[6].Descriptor()
}

func (PayQueryBatchTransferRequest_DetailStatus) Type() protoreflect.EnumType {
	return &file_wechat_proto_enumTypes[6]
}

func (x PayQueryBatchTransferRequest_DetailStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayQueryBatchTransferRequest_DetailStatus.Descriptor instead.
func (PayQueryBatchTransferRequest_DetailStatus) EnumDescriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{26, 0}
}

type Oauth2QrConnectUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject *string                                    `protobuf:"bytes,1,opt,name=subject,proto3,oneof" json:"subject,omitempty"`
	Lang    v2.WechatOauth2UserIndexResponse_Item_Lang `protobuf:"varint,9,opt,name=lang,proto3,enum=palm.balsam.v1.WechatOauth2UserIndexResponse_Item_Lang" json:"lang,omitempty"`
}

func (x *Oauth2QrConnectUrlRequest) Reset() {
	*x = Oauth2QrConnectUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oauth2QrConnectUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oauth2QrConnectUrlRequest) ProtoMessage() {}

func (x *Oauth2QrConnectUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oauth2QrConnectUrlRequest.ProtoReflect.Descriptor instead.
func (*Oauth2QrConnectUrlRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{0}
}

func (x *Oauth2QrConnectUrlRequest) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *Oauth2QrConnectUrlRequest) GetLang() v2.WechatOauth2UserIndexResponse_Item_Lang {
	if x != nil {
		return x.Lang
	}
	return v2.WechatOauth2UserIndexResponse_Item_Lang(0)
}

type Oauth2QrConnectUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Oauth2QrConnectUrlResponse) Reset() {
	*x = Oauth2QrConnectUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oauth2QrConnectUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oauth2QrConnectUrlResponse) ProtoMessage() {}

func (x *Oauth2QrConnectUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oauth2QrConnectUrlResponse.ProtoReflect.Descriptor instead.
func (*Oauth2QrConnectUrlResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{1}
}

func (x *Oauth2QrConnectUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Oauth2SignInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string                                     `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	State string                                     `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Lang  v2.WechatOauth2UserIndexResponse_Item_Lang `protobuf:"varint,9,opt,name=lang,proto3,enum=palm.balsam.v1.WechatOauth2UserIndexResponse_Item_Lang" json:"lang,omitempty"`
}

func (x *Oauth2SignInRequest) Reset() {
	*x = Oauth2SignInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oauth2SignInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oauth2SignInRequest) ProtoMessage() {}

func (x *Oauth2SignInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oauth2SignInRequest.ProtoReflect.Descriptor instead.
func (*Oauth2SignInRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{2}
}

func (x *Oauth2SignInRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Oauth2SignInRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Oauth2SignInRequest) GetLang() v2.WechatOauth2UserIndexResponse_Item_Lang {
	if x != nil {
		return x.Lang
	}
	return v2.WechatOauth2UserIndexResponse_Item_Lang(0)
}

type Oauth2SignInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *Oauth2SignInResponse_UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Token    []byte                         `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Subject  *string                        `protobuf:"bytes,9,opt,name=subject,proto3,oneof" json:"subject,omitempty"`
}

func (x *Oauth2SignInResponse) Reset() {
	*x = Oauth2SignInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oauth2SignInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oauth2SignInResponse) ProtoMessage() {}

func (x *Oauth2SignInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oauth2SignInResponse.ProtoReflect.Descriptor instead.
func (*Oauth2SignInResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{3}
}

func (x *Oauth2SignInResponse) GetUserInfo() *Oauth2SignInResponse_UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Oauth2SignInResponse) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *Oauth2SignInResponse) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

type MiniProgramCode2SessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *MiniProgramCode2SessionRequest) Reset() {
	*x = MiniProgramCode2SessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniProgramCode2SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniProgramCode2SessionRequest) ProtoMessage() {}

func (x *MiniProgramCode2SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniProgramCode2SessionRequest.ProtoReflect.Descriptor instead.
func (*MiniProgramCode2SessionRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{4}
}

func (x *MiniProgramCode2SessionRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type MiniProgramCode2SessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId *string `protobuf:"bytes,1,opt,name=union_id,json=unionId,proto3,oneof" json:"union_id,omitempty"`
	OpenId  string  `protobuf:"bytes,2,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
}

func (x *MiniProgramCode2SessionResponse) Reset() {
	*x = MiniProgramCode2SessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniProgramCode2SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniProgramCode2SessionResponse) ProtoMessage() {}

func (x *MiniProgramCode2SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniProgramCode2SessionResponse.ProtoReflect.Descriptor instead.
func (*MiniProgramCode2SessionResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{5}
}

func (x *MiniProgramCode2SessionResponse) GetUnionId() string {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return ""
}

func (x *MiniProgramCode2SessionResponse) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

type PayPrepayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string                   `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OutTradeNo  *string                  `protobuf:"bytes,2,opt,name=out_trade_no,json=outTradeNo,proto3,oneof" json:"out_trade_no,omitempty"`
	PayerOpenId *string                  `protobuf:"bytes,11,opt,name=payer_open_id,json=payerOpenId,proto3,oneof" json:"payer_open_id,omitempty"`
	Amount      *PayPrepayRequest_Amount `protobuf:"bytes,12,opt,name=amount,proto3" json:"amount,omitempty"`
	Description string                   `protobuf:"bytes,98,opt,name=description,proto3" json:"description,omitempty"`
	NotifyHost  string                   `protobuf:"bytes,99,opt,name=notify_host,json=notifyHost,proto3" json:"notify_host,omitempty"`
}

func (x *PayPrepayRequest) Reset() {
	*x = PayPrepayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayPrepayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayPrepayRequest) ProtoMessage() {}

func (x *PayPrepayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayPrepayRequest.ProtoReflect.Descriptor instead.
func (*PayPrepayRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{6}
}

func (x *PayPrepayRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PayPrepayRequest) GetOutTradeNo() string {
	if x != nil && x.OutTradeNo != nil {
		return *x.OutTradeNo
	}
	return ""
}

func (x *PayPrepayRequest) GetPayerOpenId() string {
	if x != nil && x.PayerOpenId != nil {
		return *x.PayerOpenId
	}
	return ""
}

func (x *PayPrepayRequest) GetAmount() *PayPrepayRequest_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PayPrepayRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PayPrepayRequest) GetNotifyHost() string {
	if x != nil {
		return x.NotifyHost
	}
	return ""
}

type PayCloseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo string `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *PayCloseOrderRequest) Reset() {
	*x = PayCloseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayCloseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayCloseOrderRequest) ProtoMessage() {}

func (x *PayCloseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayCloseOrderRequest.ProtoReflect.Descriptor instead.
func (*PayCloseOrderRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{7}
}

func (x *PayCloseOrderRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *PayCloseOrderRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type PayError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PayError) Reset() {
	*x = PayError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayError) ProtoMessage() {}

func (x *PayError) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayError.ProtoReflect.Descriptor instead.
func (*PayError) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{8}
}

func (x *PayError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PayError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PayNativeQrCodeUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	OutTradeNo string `protobuf:"bytes,2,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
}

func (x *PayNativeQrCodeUrlResponse) Reset() {
	*x = PayNativeQrCodeUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNativeQrCodeUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNativeQrCodeUrlResponse) ProtoMessage() {}

func (x *PayNativeQrCodeUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNativeQrCodeUrlResponse.ProtoReflect.Descriptor instead.
func (*PayNativeQrCodeUrlResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{9}
}

func (x *PayNativeQrCodeUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PayNativeQrCodeUrlResponse) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

type PayTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeState     string `protobuf:"bytes,1,opt,name=trade_state,json=tradeState,proto3" json:"trade_state,omitempty"`
	TradeStateDesc string `protobuf:"bytes,2,opt,name=trade_state_desc,json=tradeStateDesc,proto3" json:"trade_state_desc,omitempty"`
}

func (x *PayTradeResponse) Reset() {
	*x = PayTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayTradeResponse) ProtoMessage() {}

func (x *PayTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayTradeResponse.ProtoReflect.Descriptor instead.
func (*PayTradeResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{10}
}

func (x *PayTradeResponse) GetTradeState() string {
	if x != nil {
		return x.TradeState
	}
	return ""
}

func (x *PayTradeResponse) GetTradeStateDesc() string {
	if x != nil {
		return x.TradeStateDesc
	}
	return ""
}

type PayQueryOrderByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *PayQueryOrderByIdRequest) Reset() {
	*x = PayQueryOrderByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryOrderByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryOrderByIdRequest) ProtoMessage() {}

func (x *PayQueryOrderByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryOrderByIdRequest.ProtoReflect.Descriptor instead.
func (*PayQueryOrderByIdRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{11}
}

func (x *PayQueryOrderByIdRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type PayQueryOrderByOutTradeNoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo string `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
}

func (x *PayQueryOrderByOutTradeNoRequest) Reset() {
	*x = PayQueryOrderByOutTradeNoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryOrderByOutTradeNoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryOrderByOutTradeNoRequest) ProtoMessage() {}

func (x *PayQueryOrderByOutTradeNoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryOrderByOutTradeNoRequest.ProtoReflect.Descriptor instead.
func (*PayQueryOrderByOutTradeNoRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{12}
}

func (x *PayQueryOrderByOutTradeNoRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

type PayJsapiPrepayIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TimeStamp  string `protobuf:"bytes,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	NonceStr   string `protobuf:"bytes,3,opt,name=nonce_str,json=nonceStr,proto3" json:"nonce_str,omitempty"`
	Package    string `protobuf:"bytes,4,opt,name=package,proto3" json:"package,omitempty"`
	SignType   string `protobuf:"bytes,5,opt,name=sign_type,json=signType,proto3" json:"sign_type,omitempty"`
	PaySign    string `protobuf:"bytes,6,opt,name=pay_sign,json=paySign,proto3" json:"pay_sign,omitempty"`
	OutTradeNo string `protobuf:"bytes,11,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
}

func (x *PayJsapiPrepayIdResponse) Reset() {
	*x = PayJsapiPrepayIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayJsapiPrepayIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayJsapiPrepayIdResponse) ProtoMessage() {}

func (x *PayJsapiPrepayIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayJsapiPrepayIdResponse.ProtoReflect.Descriptor instead.
func (*PayJsapiPrepayIdResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{13}
}

func (x *PayJsapiPrepayIdResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PayJsapiPrepayIdResponse) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *PayJsapiPrepayIdResponse) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *PayJsapiPrepayIdResponse) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *PayJsapiPrepayIdResponse) GetSignType() string {
	if x != nil {
		return x.SignType
	}
	return ""
}

func (x *PayJsapiPrepayIdResponse) GetPaySign() string {
	if x != nil {
		return x.PaySign
	}
	return ""
}

func (x *PayJsapiPrepayIdResponse) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

type PayBillDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *PayBillDate) Reset() {
	*x = PayBillDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayBillDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayBillDate) ProtoMessage() {}

func (x *PayBillDate) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayBillDate.ProtoReflect.Descriptor instead.
func (*PayBillDate) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{14}
}

func (x *PayBillDate) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *PayBillDate) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *PayBillDate) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type PayBillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *PayBillResponse) Reset() {
	*x = PayBillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayBillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayBillResponse) ProtoMessage() {}

func (x *PayBillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayBillResponse.ProtoReflect.Descriptor instead.
func (*PayBillResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{15}
}

func (x *PayBillResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type PayTradeBillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillDate *PayBillDate                 `protobuf:"bytes,1,opt,name=bill_date,json=billDate,proto3" json:"bill_date,omitempty"`
	BillType PayTradeBillRequest_BillType `protobuf:"varint,2,opt,name=bill_type,json=billType,proto3,enum=palm.wechat.v1.PayTradeBillRequest_BillType" json:"bill_type,omitempty"`
}

func (x *PayTradeBillRequest) Reset() {
	*x = PayTradeBillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayTradeBillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayTradeBillRequest) ProtoMessage() {}

func (x *PayTradeBillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayTradeBillRequest.ProtoReflect.Descriptor instead.
func (*PayTradeBillRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{16}
}

func (x *PayTradeBillRequest) GetBillDate() *PayBillDate {
	if x != nil {
		return x.BillDate
	}
	return nil
}

func (x *PayTradeBillRequest) GetBillType() PayTradeBillRequest_BillType {
	if x != nil {
		return x.BillType
	}
	return PayTradeBillRequest_ALL
}

type PayFundFlowBillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillDate    *PayBillDate                       `protobuf:"bytes,1,opt,name=bill_date,json=billDate,proto3" json:"bill_date,omitempty"`
	AccountType PayFundFlowBillRequest_AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=palm.wechat.v1.PayFundFlowBillRequest_AccountType" json:"account_type,omitempty"`
}

func (x *PayFundFlowBillRequest) Reset() {
	*x = PayFundFlowBillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayFundFlowBillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayFundFlowBillRequest) ProtoMessage() {}

func (x *PayFundFlowBillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayFundFlowBillRequest.ProtoReflect.Descriptor instead.
func (*PayFundFlowBillRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{17}
}

func (x *PayFundFlowBillRequest) GetBillDate() *PayBillDate {
	if x != nil {
		return x.BillDate
	}
	return nil
}

func (x *PayFundFlowBillRequest) GetAccountType() PayFundFlowBillRequest_AccountType {
	if x != nil {
		return x.AccountType
	}
	return PayFundFlowBillRequest_BASIC
}

type PayCreateRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo string                         `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	Reason     string                         `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Amount     *PayCreateRefundRequest_Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	NotifyHost string                         `protobuf:"bytes,11,opt,name=notify_host,json=notifyHost,proto3" json:"notify_host,omitempty"`
}

func (x *PayCreateRefundRequest) Reset() {
	*x = PayCreateRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayCreateRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayCreateRefundRequest) ProtoMessage() {}

func (x *PayCreateRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayCreateRefundRequest.ProtoReflect.Descriptor instead.
func (*PayCreateRefundRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{18}
}

func (x *PayCreateRefundRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *PayCreateRefundRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PayCreateRefundRequest) GetAmount() *PayCreateRefundRequest_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PayCreateRefundRequest) GetNotifyHost() string {
	if x != nil {
		return x.NotifyHost
	}
	return ""
}

type PayQueryRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutRefundNo string `protobuf:"bytes,1,opt,name=out_refund_no,json=outRefundNo,proto3" json:"out_refund_no,omitempty"`
}

func (x *PayQueryRefundRequest) Reset() {
	*x = PayQueryRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryRefundRequest) ProtoMessage() {}

func (x *PayQueryRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryRefundRequest.ProtoReflect.Descriptor instead.
func (*PayQueryRefundRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{19}
}

func (x *PayQueryRefundRequest) GetOutRefundNo() string {
	if x != nil {
		return x.OutRefundNo
	}
	return ""
}

type PayRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutRefundNo         string `protobuf:"bytes,1,opt,name=out_refund_no,json=outRefundNo,proto3" json:"out_refund_no,omitempty"`
	Channel             string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Status              string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	UserReceivedAccount string `protobuf:"bytes,4,opt,name=user_received_account,json=userReceivedAccount,proto3" json:"user_received_account,omitempty"`
	CreateTime          string `protobuf:"bytes,99,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *PayRefundResponse) Reset() {
	*x = PayRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRefundResponse) ProtoMessage() {}

func (x *PayRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRefundResponse.ProtoReflect.Descriptor instead.
func (*PayRefundResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{20}
}

func (x *PayRefundResponse) GetOutRefundNo() string {
	if x != nil {
		return x.OutRefundNo
	}
	return ""
}

func (x *PayRefundResponse) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PayRefundResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PayRefundResponse) GetUserReceivedAccount() string {
	if x != nil {
		return x.UserReceivedAccount
	}
	return ""
}

func (x *PayRefundResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type PayTransferGetElectronicReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptType  PayTransferGetElectronicReceiptRequest_AcceptType `protobuf:"varint,1,opt,name=accept_type,json=acceptType,proto3,enum=palm.wechat.v1.PayTransferGetElectronicReceiptRequest_AcceptType" json:"accept_type,omitempty"`
	OutBatchNo  *string                                           `protobuf:"bytes,2,opt,name=out_batch_no,json=outBatchNo,proto3,oneof" json:"out_batch_no,omitempty"`
	OutDetailNo string                                            `protobuf:"bytes,3,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
}

func (x *PayTransferGetElectronicReceiptRequest) Reset() {
	*x = PayTransferGetElectronicReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayTransferGetElectronicReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayTransferGetElectronicReceiptRequest) ProtoMessage() {}

func (x *PayTransferGetElectronicReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayTransferGetElectronicReceiptRequest.ProtoReflect.Descriptor instead.
func (*PayTransferGetElectronicReceiptRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{21}
}

func (x *PayTransferGetElectronicReceiptRequest) GetAcceptType() PayTransferGetElectronicReceiptRequest_AcceptType {
	if x != nil {
		return x.AcceptType
	}
	return PayTransferGetElectronicReceiptRequest_BATCH_TRANSFER
}

func (x *PayTransferGetElectronicReceiptRequest) GetOutBatchNo() string {
	if x != nil && x.OutBatchNo != nil {
		return *x.OutBatchNo
	}
	return ""
}

func (x *PayTransferGetElectronicReceiptRequest) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

type PayTransferGetReceiptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *PayTransferGetReceiptResponse) Reset() {
	*x = PayTransferGetReceiptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayTransferGetReceiptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayTransferGetReceiptResponse) ProtoMessage() {}

func (x *PayTransferGetReceiptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayTransferGetReceiptResponse.ProtoReflect.Descriptor instead.
func (*PayTransferGetReceiptResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{22}
}

func (x *PayTransferGetReceiptResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type PayTransferGetBillReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutBatchNo string `protobuf:"bytes,1,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
}

func (x *PayTransferGetBillReceiptRequest) Reset() {
	*x = PayTransferGetBillReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayTransferGetBillReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayTransferGetBillReceiptRequest) ProtoMessage() {}

func (x *PayTransferGetBillReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayTransferGetBillReceiptRequest.ProtoReflect.Descriptor instead.
func (*PayTransferGetBillReceiptRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{23}
}

func (x *PayTransferGetBillReceiptRequest) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

type PayExecuteBatchTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   string                                   `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Batch   *PayExecuteBatchTransferRequest_Batch    `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	Details []*PayExecuteBatchTransferRequest_Detail `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	SceneId string                                   `protobuf:"bytes,9,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *PayExecuteBatchTransferRequest) Reset() {
	*x = PayExecuteBatchTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayExecuteBatchTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayExecuteBatchTransferRequest) ProtoMessage() {}

func (x *PayExecuteBatchTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayExecuteBatchTransferRequest.ProtoReflect.Descriptor instead.
func (*PayExecuteBatchTransferRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{24}
}

func (x *PayExecuteBatchTransferRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PayExecuteBatchTransferRequest) GetBatch() *PayExecuteBatchTransferRequest_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *PayExecuteBatchTransferRequest) GetDetails() []*PayExecuteBatchTransferRequest_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PayExecuteBatchTransferRequest) GetSceneId() string {
	if x != nil {
		return x.SceneId
	}
	return ""
}

type PayExecuteBatchTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutBatchNo string                                    `protobuf:"bytes,1,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	Details    []*PayExecuteBatchTransferResponse_Detail `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*PayExecuteBatchTransferResponse_Succeeded_
	//	*PayExecuteBatchTransferResponse_Error
	Payload isPayExecuteBatchTransferResponse_Payload `protobuf_oneof:"payload"`
}

func (x *PayExecuteBatchTransferResponse) Reset() {
	*x = PayExecuteBatchTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayExecuteBatchTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayExecuteBatchTransferResponse) ProtoMessage() {}

func (x *PayExecuteBatchTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayExecuteBatchTransferResponse.ProtoReflect.Descriptor instead.
func (*PayExecuteBatchTransferResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{25}
}

func (x *PayExecuteBatchTransferResponse) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *PayExecuteBatchTransferResponse) GetDetails() []*PayExecuteBatchTransferResponse_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (m *PayExecuteBatchTransferResponse) GetPayload() isPayExecuteBatchTransferResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *PayExecuteBatchTransferResponse) GetSucceeded() *PayExecuteBatchTransferResponse_Succeeded {
	if x, ok := x.GetPayload().(*PayExecuteBatchTransferResponse_Succeeded_); ok {
		return x.Succeeded
	}
	return nil
}

func (x *PayExecuteBatchTransferResponse) GetError() *PayError {
	if x, ok := x.GetPayload().(*PayExecuteBatchTransferResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isPayExecuteBatchTransferResponse_Payload interface {
	isPayExecuteBatchTransferResponse_Payload()
}

type PayExecuteBatchTransferResponse_Succeeded_ struct {
	Succeeded *PayExecuteBatchTransferResponse_Succeeded `protobuf:"bytes,11,opt,name=succeeded,proto3,oneof"`
}

type PayExecuteBatchTransferResponse_Error struct {
	Error *PayError `protobuf:"bytes,12,opt,name=error,proto3,oneof"`
}

func (*PayExecuteBatchTransferResponse_Succeeded_) isPayExecuteBatchTransferResponse_Payload() {}

func (*PayExecuteBatchTransferResponse_Error) isPayExecuteBatchTransferResponse_Payload() {}

type PayQueryBatchTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutBatchNo   string                                    `protobuf:"bytes,1,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	Offset       int32                                     `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        int32                                     `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	DetailStatus PayQueryBatchTransferRequest_DetailStatus `protobuf:"varint,9,opt,name=detail_status,json=detailStatus,proto3,enum=palm.wechat.v1.PayQueryBatchTransferRequest_DetailStatus" json:"detail_status,omitempty"`
}

func (x *PayQueryBatchTransferRequest) Reset() {
	*x = PayQueryBatchTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryBatchTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryBatchTransferRequest) ProtoMessage() {}

func (x *PayQueryBatchTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryBatchTransferRequest.ProtoReflect.Descriptor instead.
func (*PayQueryBatchTransferRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{26}
}

func (x *PayQueryBatchTransferRequest) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *PayQueryBatchTransferRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PayQueryBatchTransferRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PayQueryBatchTransferRequest) GetDetailStatus() PayQueryBatchTransferRequest_DetailStatus {
	if x != nil {
		return x.DetailStatus
	}
	return PayQueryBatchTransferRequest_ALL
}

type PayQueryBatchTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch   *PayQueryBatchTransferResponse_Batch    `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	Details []*PayQueryBatchTransferResponse_Detail `protobuf:"bytes,9,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *PayQueryBatchTransferResponse) Reset() {
	*x = PayQueryBatchTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryBatchTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryBatchTransferResponse) ProtoMessage() {}

func (x *PayQueryBatchTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryBatchTransferResponse.ProtoReflect.Descriptor instead.
func (*PayQueryBatchTransferResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{27}
}

func (x *PayQueryBatchTransferResponse) GetBatch() *PayQueryBatchTransferResponse_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *PayQueryBatchTransferResponse) GetDetails() []*PayQueryBatchTransferResponse_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

type PayQueryTransferDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutBatchNo  string `protobuf:"bytes,1,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	OutDetailNo string `protobuf:"bytes,2,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
}

func (x *PayQueryTransferDetailRequest) Reset() {
	*x = PayQueryTransferDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryTransferDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryTransferDetailRequest) ProtoMessage() {}

func (x *PayQueryTransferDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryTransferDetailRequest.ProtoReflect.Descriptor instead.
func (*PayQueryTransferDetailRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{28}
}

func (x *PayQueryTransferDetailRequest) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *PayQueryTransferDetailRequest) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

type PayQueryTransferDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId          string  `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	MchId          string  `protobuf:"bytes,2,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`
	OpenId         string  `protobuf:"bytes,3,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	UserName       *string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	BatchId        string  `protobuf:"bytes,11,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	OutBatchNo     string  `protobuf:"bytes,12,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	OutDetailNo    string  `protobuf:"bytes,13,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
	DetailId       string  `protobuf:"bytes,14,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`
	DetailStatus   string  `protobuf:"bytes,15,opt,name=detail_status,json=detailStatus,proto3" json:"detail_status,omitempty"`
	TransferAmount int64   `protobuf:"varint,16,opt,name=transfer_amount,json=transferAmount,proto3" json:"transfer_amount,omitempty"`
	TransferRemark string  `protobuf:"bytes,17,opt,name=transfer_remark,json=transferRemark,proto3" json:"transfer_remark,omitempty"`
	FailReason     *string `protobuf:"bytes,18,opt,name=fail_reason,json=failReason,proto3,oneof" json:"fail_reason,omitempty"`
	InitiateTime   string  `protobuf:"bytes,19,opt,name=initiate_time,json=initiateTime,proto3" json:"initiate_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,20,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *PayQueryTransferDetailResponse) Reset() {
	*x = PayQueryTransferDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryTransferDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryTransferDetailResponse) ProtoMessage() {}

func (x *PayQueryTransferDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryTransferDetailResponse.ProtoReflect.Descriptor instead.
func (*PayQueryTransferDetailResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{29}
}

func (x *PayQueryTransferDetailResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetDetailStatus() string {
	if x != nil {
		return x.DetailStatus
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetTransferAmount() int64 {
	if x != nil {
		return x.TransferAmount
	}
	return 0
}

func (x *PayQueryTransferDetailResponse) GetTransferRemark() string {
	if x != nil {
		return x.TransferRemark
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetFailReason() string {
	if x != nil && x.FailReason != nil {
		return *x.FailReason
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetInitiateTime() string {
	if x != nil {
		return x.InitiateTime
	}
	return ""
}

func (x *PayQueryTransferDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type Oauth2SignInResponse_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId     string   `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	Nickname   string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Sex        uint32   `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	Province   string   `protobuf:"bytes,4,opt,name=province,proto3" json:"province,omitempty"`
	City       string   `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	Country    string   `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	HeadImgUrl *string  `protobuf:"bytes,7,opt,name=head_img_url,json=headImgUrl,proto3,oneof" json:"head_img_url,omitempty"`
	Privilege  []string `protobuf:"bytes,8,rep,name=privilege,proto3" json:"privilege,omitempty"`
	UnionId    string   `protobuf:"bytes,9,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
}

func (x *Oauth2SignInResponse_UserInfo) Reset() {
	*x = Oauth2SignInResponse_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oauth2SignInResponse_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oauth2SignInResponse_UserInfo) ProtoMessage() {}

func (x *Oauth2SignInResponse_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oauth2SignInResponse_UserInfo.ProtoReflect.Descriptor instead.
func (*Oauth2SignInResponse_UserInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Oauth2SignInResponse_UserInfo) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *Oauth2SignInResponse_UserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Oauth2SignInResponse_UserInfo) GetSex() uint32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *Oauth2SignInResponse_UserInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *Oauth2SignInResponse_UserInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Oauth2SignInResponse_UserInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Oauth2SignInResponse_UserInfo) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *Oauth2SignInResponse_UserInfo) GetPrivilege() []string {
	if x != nil {
		return x.Privilege
	}
	return nil
}

func (x *Oauth2SignInResponse_UserInfo) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

type PayPrepayRequest_Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Currency PayCurrency `protobuf:"varint,2,opt,name=currency,proto3,enum=palm.wechat.v1.PayCurrency" json:"currency,omitempty"`
}

func (x *PayPrepayRequest_Amount) Reset() {
	*x = PayPrepayRequest_Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayPrepayRequest_Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayPrepayRequest_Amount) ProtoMessage() {}

func (x *PayPrepayRequest_Amount) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayPrepayRequest_Amount.ProtoReflect.Descriptor instead.
func (*PayPrepayRequest_Amount) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{6, 0}
}

func (x *PayPrepayRequest_Amount) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PayPrepayRequest_Amount) GetCurrency() PayCurrency {
	if x != nil {
		return x.Currency
	}
	return PayCurrency_CNY
}

type PayCreateRefundRequest_Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Refund   int32       `protobuf:"varint,2,opt,name=refund,proto3" json:"refund,omitempty"`
	Currency PayCurrency `protobuf:"varint,3,opt,name=currency,proto3,enum=palm.wechat.v1.PayCurrency" json:"currency,omitempty"`
}

func (x *PayCreateRefundRequest_Amount) Reset() {
	*x = PayCreateRefundRequest_Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayCreateRefundRequest_Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayCreateRefundRequest_Amount) ProtoMessage() {}

func (x *PayCreateRefundRequest_Amount) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayCreateRefundRequest_Amount.ProtoReflect.Descriptor instead.
func (*PayCreateRefundRequest_Amount) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{18, 0}
}

func (x *PayCreateRefundRequest_Amount) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PayCreateRefundRequest_Amount) GetRefund() int32 {
	if x != nil {
		return x.Refund
	}
	return 0
}

func (x *PayCreateRefundRequest_Amount) GetCurrency() PayCurrency {
	if x != nil {
		return x.Currency
	}
	return PayCurrency_CNY
}

type PayExecuteBatchTransferRequest_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Remark string  `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	OutNo  *string `protobuf:"bytes,3,opt,name=out_no,json=outNo,proto3,oneof" json:"out_no,omitempty"`
}

func (x *PayExecuteBatchTransferRequest_Batch) Reset() {
	*x = PayExecuteBatchTransferRequest_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayExecuteBatchTransferRequest_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayExecuteBatchTransferRequest_Batch) ProtoMessage() {}

func (x *PayExecuteBatchTransferRequest_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayExecuteBatchTransferRequest_Batch.ProtoReflect.Descriptor instead.
func (*PayExecuteBatchTransferRequest_Batch) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{24, 0}
}

func (x *PayExecuteBatchTransferRequest_Batch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayExecuteBatchTransferRequest_Batch) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PayExecuteBatchTransferRequest_Batch) GetOutNo() string {
	if x != nil && x.OutNo != nil {
		return *x.OutNo
	}
	return ""
}

type PayExecuteBatchTransferRequest_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId   string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Amount   int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Remark   string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *PayExecuteBatchTransferRequest_Detail) Reset() {
	*x = PayExecuteBatchTransferRequest_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayExecuteBatchTransferRequest_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayExecuteBatchTransferRequest_Detail) ProtoMessage() {}

func (x *PayExecuteBatchTransferRequest_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayExecuteBatchTransferRequest_Detail.ProtoReflect.Descriptor instead.
func (*PayExecuteBatchTransferRequest_Detail) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{24, 1}
}

func (x *PayExecuteBatchTransferRequest_Detail) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *PayExecuteBatchTransferRequest_Detail) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PayExecuteBatchTransferRequest_Detail) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PayExecuteBatchTransferRequest_Detail) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type PayExecuteBatchTransferResponse_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId      string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutDetailNo string `protobuf:"bytes,2,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
}

func (x *PayExecuteBatchTransferResponse_Detail) Reset() {
	*x = PayExecuteBatchTransferResponse_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayExecuteBatchTransferResponse_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayExecuteBatchTransferResponse_Detail) ProtoMessage() {}

func (x *PayExecuteBatchTransferResponse_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayExecuteBatchTransferResponse_Detail.ProtoReflect.Descriptor instead.
func (*PayExecuteBatchTransferResponse_Detail) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{25, 0}
}

func (x *PayExecuteBatchTransferResponse_Detail) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *PayExecuteBatchTransferResponse_Detail) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

type PayExecuteBatchTransferResponse_Succeeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId    string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	CreateTime string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *PayExecuteBatchTransferResponse_Succeeded) Reset() {
	*x = PayExecuteBatchTransferResponse_Succeeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayExecuteBatchTransferResponse_Succeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayExecuteBatchTransferResponse_Succeeded) ProtoMessage() {}

func (x *PayExecuteBatchTransferResponse_Succeeded) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayExecuteBatchTransferResponse_Succeeded.ProtoReflect.Descriptor instead.
func (*PayExecuteBatchTransferResponse_Succeeded) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{25, 1}
}

func (x *PayExecuteBatchTransferResponse_Succeeded) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *PayExecuteBatchTransferResponse_Succeeded) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type PayQueryBatchTransferResponse_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailId    string `protobuf:"bytes,1,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`
	OutDetailNo string `protobuf:"bytes,2,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PayQueryBatchTransferResponse_Detail) Reset() {
	*x = PayQueryBatchTransferResponse_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryBatchTransferResponse_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryBatchTransferResponse_Detail) ProtoMessage() {}

func (x *PayQueryBatchTransferResponse_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryBatchTransferResponse_Detail.ProtoReflect.Descriptor instead.
func (*PayQueryBatchTransferResponse_Detail) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{27, 0}
}

func (x *PayQueryBatchTransferResponse_Detail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Detail) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Detail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PayQueryBatchTransferResponse_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string  `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	MchId           string  `protobuf:"bytes,2,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`
	TransferSceneId string  `protobuf:"bytes,9,opt,name=transfer_scene_id,json=transferSceneId,proto3" json:"transfer_scene_id,omitempty"`
	BatchId         string  `protobuf:"bytes,11,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	OutBatchNo      string  `protobuf:"bytes,12,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	BatchStatus     string  `protobuf:"bytes,13,opt,name=batch_status,json=batchStatus,proto3" json:"batch_status,omitempty"`
	BatchType       string  `protobuf:"bytes,14,opt,name=batch_type,json=batchType,proto3" json:"batch_type,omitempty"`
	BatchName       string  `protobuf:"bytes,15,opt,name=batch_name,json=batchName,proto3" json:"batch_name,omitempty"`
	BatchRemark     string  `protobuf:"bytes,16,opt,name=batch_remark,json=batchRemark,proto3" json:"batch_remark,omitempty"`
	CloseReason     *string `protobuf:"bytes,21,opt,name=close_reason,json=closeReason,proto3,oneof" json:"close_reason,omitempty"`
	TotalAmount     int64   `protobuf:"varint,22,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	TotalNum        int32   `protobuf:"varint,23,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	CreateTime      *string `protobuf:"bytes,24,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime      *string `protobuf:"bytes,25,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	SuccessAmount   *int64  `protobuf:"varint,26,opt,name=success_amount,json=successAmount,proto3,oneof" json:"success_amount,omitempty"`
	SuccessNum      *int32  `protobuf:"varint,27,opt,name=success_num,json=successNum,proto3,oneof" json:"success_num,omitempty"`
	FailAmount      *int64  `protobuf:"varint,28,opt,name=fail_amount,json=failAmount,proto3,oneof" json:"fail_amount,omitempty"`
	FailNum         *int32  `protobuf:"varint,29,opt,name=fail_num,json=failNum,proto3,oneof" json:"fail_num,omitempty"`
}

func (x *PayQueryBatchTransferResponse_Batch) Reset() {
	*x = PayQueryBatchTransferResponse_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryBatchTransferResponse_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryBatchTransferResponse_Batch) ProtoMessage() {}

func (x *PayQueryBatchTransferResponse_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryBatchTransferResponse_Batch.ProtoReflect.Descriptor instead.
func (*PayQueryBatchTransferResponse_Batch) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{27, 1}
}

func (x *PayQueryBatchTransferResponse_Batch) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetTransferSceneId() string {
	if x != nil {
		return x.TransferSceneId
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetBatchStatus() string {
	if x != nil {
		return x.BatchStatus
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetBatchType() string {
	if x != nil {
		return x.BatchType
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetBatchName() string {
	if x != nil {
		return x.BatchName
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetBatchRemark() string {
	if x != nil {
		return x.BatchRemark
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetCloseReason() string {
	if x != nil && x.CloseReason != nil {
		return *x.CloseReason
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *PayQueryBatchTransferResponse_Batch) GetTotalNum() int32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *PayQueryBatchTransferResponse_Batch) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *PayQueryBatchTransferResponse_Batch) GetSuccessAmount() int64 {
	if x != nil && x.SuccessAmount != nil {
		return *x.SuccessAmount
	}
	return 0
}

func (x *PayQueryBatchTransferResponse_Batch) GetSuccessNum() int32 {
	if x != nil && x.SuccessNum != nil {
		return *x.SuccessNum
	}
	return 0
}

func (x *PayQueryBatchTransferResponse_Batch) GetFailAmount() int64 {
	if x != nil && x.FailAmount != nil {
		return *x.FailAmount
	}
	return 0
}

func (x *PayQueryBatchTransferResponse_Batch) GetFailNum() int32 {
	if x != nil && x.FailNum != nil {
		return *x.FailNum
	}
	return 0
}

var File_wechat_proto protoreflect.FileDescriptor

var file_wechat_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x62, 0x61, 0x6c,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x4f, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x51, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x62, 0x61, 0x6c, 0x73,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x61, 0x75, 0x74,
	0x68, 0x32, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x2e, 0x0a, 0x1a, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x51, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x8c, 0x01, 0x0a, 0x13, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4b, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x62, 0x61, 0x6c, 0x73, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xb2,
	0x03, 0x0a, 0x14, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x61, 0x75, 0x74,
	0x68, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x8c, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x34, 0x0a, 0x1e, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x1f, 0x4d, 0x69, 0x6e,
	0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x22, 0xf9, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x62,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x1a, 0x57, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x50,
	0x0a, 0x14, 0x50, 0x61, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x38, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x1a, 0x50, 0x61,
	0x79, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22, 0x5d, 0x0a, 0x10,
	0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0x41, 0x0a, 0x18, 0x50,
	0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x44,
	0x0a, 0x20, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x79, 0x4a, 0x73, 0x61, 0x70,
	0x69, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22, 0x49, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x22, 0x2b, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xc8, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x42, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a,
	0x08, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xdc, 0x01, 0x0a, 0x16,
	0x50, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x42, 0x69,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x55, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x45, 0x45, 0x53, 0x10, 0x02, 0x22, 0xab, 0x02, 0x0a, 0x16, 0x50,
	0x61, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x1a, 0x6f, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x37, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3b, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x26, 0x50, 0x61, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x62, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e, 0x6f,
	0x22, 0x4e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x02,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x6f, 0x22, 0x39, 0x0a, 0x1d, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x44, 0x0a, 0x20,
	0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x42, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x6f, 0x22, 0xba, 0x03, 0x0a, 0x1e, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x05,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x1a, 0x5a, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x75, 0x74,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f,
	0x1a, 0x6d, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0xbd, 0x03, 0x0a, 0x1f, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x1a, 0x45, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x1a, 0x47, 0x0a, 0x09, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x8c, 0x02, 0x0a, 0x1c, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x5e, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x3c, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x50,
	0x41, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x09, 0x22, 0xff,
	0x07, 0x0a, 0x1d, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4e, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x61, 0x0a, 0x06, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xdf,
	0x05, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x61, 0x69,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05,
	0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x22, 0x65, 0x0a, 0x1d, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x22, 0x88, 0x04, 0x0a, 0x1e, 0x50, 0x61, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x2a, 0x16, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x59, 0x10, 0x00, 0x2a, 0x2e, 0x0a, 0x0f, 0x50, 0x61,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0x16, 0x0a, 0x0a, 0x50, 0x61,
	0x79, 0x54, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50,
	0x10, 0x00, 0x32, 0xc8, 0x01, 0x0a, 0x06, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x12, 0x67, 0x0a,
	0x0c, 0x51, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x61, 0x75, 0x74, 0x68, 0x32, 0x51, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32,
	0x51, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x12, 0x23, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x80, 0x01,
	0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x71, 0x0a,
	0x0c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x65, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x58, 0x0a,
	0x06, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x80, 0x03, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x4a,
	0x73, 0x61, 0x70, 0x69, 0x12, 0x56, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x20,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x4a, 0x73, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x75, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x30, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x28,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xb1, 0x01, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x23, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb7,
	0x01, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd3, 0x04, 0x0a, 0x0b, 0x50, 0x61, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x36, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x66,
	0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x61, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x78, 0x69, 0x76, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01,
	0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x74,
	0x75, 0x72, 0x6e, 0x2d, 0x78, 0x69, 0x76, 0x2f, 0x70, 0x61, 0x6c, 0x6d, 0x2f, 0x61, 0x74, 0x72,
	0x6f, 0x70, 0x61, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wechat_proto_rawDescOnce sync.Once
	file_wechat_proto_rawDescData = file_wechat_proto_rawDesc
)

func file_wechat_proto_rawDescGZIP() []byte {
	file_wechat_proto_rawDescOnce.Do(func() {
		file_wechat_proto_rawDescData = protoimpl.X.CompressGZIP(file_wechat_proto_rawDescData)
	})
	return file_wechat_proto_rawDescData
}

var file_wechat_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_wechat_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_wechat_proto_goTypes = []any{
	(PayCurrency)(0),                                       // 0: palm.wechat.v1.PayCurrency
	(PayNotifyAction)(0),                                   // 1: palm.wechat.v1.PayNotifyAction
	(PayTarType)(0),                                        // 2: palm.wechat.v1.PayTarType
	(PayTradeBillRequest_BillType)(0),                      // 3: palm.wechat.v1.PayTradeBillRequest.BillType
	(PayFundFlowBillRequest_AccountType)(0),                // 4: palm.wechat.v1.PayFundFlowBillRequest.AccountType
	(PayTransferGetElectronicReceiptRequest_AcceptType)(0), // 5: palm.wechat.v1.PayTransferGetElectronicReceiptRequest.AcceptType
	(PayQueryBatchTransferRequest_DetailStatus)(0),         // 6: palm.wechat.v1.PayQueryBatchTransferRequest.DetailStatus
	(*Oauth2QrConnectUrlRequest)(nil),                      // 7: palm.wechat.v1.Oauth2QrConnectUrlRequest
	(*Oauth2QrConnectUrlResponse)(nil),                     // 8: palm.wechat.v1.Oauth2QrConnectUrlResponse
	(*Oauth2SignInRequest)(nil),                            // 9: palm.wechat.v1.Oauth2SignInRequest
	(*Oauth2SignInResponse)(nil),                           // 10: palm.wechat.v1.Oauth2SignInResponse
	(*MiniProgramCode2SessionRequest)(nil),                 // 11: palm.wechat.v1.MiniProgramCode2SessionRequest
	(*MiniProgramCode2SessionResponse)(nil),                // 12: palm.wechat.v1.MiniProgramCode2SessionResponse
	(*PayPrepayRequest)(nil),                               // 13: palm.wechat.v1.PayPrepayRequest
	(*PayCloseOrderRequest)(nil),                           // 14: palm.wechat.v1.PayCloseOrderRequest
	(*PayError)(nil),                                       // 15: palm.wechat.v1.PayError
	(*PayNativeQrCodeUrlResponse)(nil),                     // 16: palm.wechat.v1.PayNativeQrCodeUrlResponse
	(*PayTradeResponse)(nil),                               // 17: palm.wechat.v1.PayTradeResponse
	(*PayQueryOrderByIdRequest)(nil),                       // 18: palm.wechat.v1.PayQueryOrderByIdRequest
	(*PayQueryOrderByOutTradeNoRequest)(nil),               // 19: palm.wechat.v1.PayQueryOrderByOutTradeNoRequest
	(*PayJsapiPrepayIdResponse)(nil),                       // 20: palm.wechat.v1.PayJsapiPrepayIdResponse
	(*PayBillDate)(nil),                                    // 21: palm.wechat.v1.PayBillDate
	(*PayBillResponse)(nil),                                // 22: palm.wechat.v1.PayBillResponse
	(*PayTradeBillRequest)(nil),                            // 23: palm.wechat.v1.PayTradeBillRequest
	(*PayFundFlowBillRequest)(nil),                         // 24: palm.wechat.v1.PayFundFlowBillRequest
	(*PayCreateRefundRequest)(nil),                         // 25: palm.wechat.v1.PayCreateRefundRequest
	(*PayQueryRefundRequest)(nil),                          // 26: palm.wechat.v1.PayQueryRefundRequest
	(*PayRefundResponse)(nil),                              // 27: palm.wechat.v1.PayRefundResponse
	(*PayTransferGetElectronicReceiptRequest)(nil),         // 28: palm.wechat.v1.PayTransferGetElectronicReceiptRequest
	(*PayTransferGetReceiptResponse)(nil),                  // 29: palm.wechat.v1.PayTransferGetReceiptResponse
	(*PayTransferGetBillReceiptRequest)(nil),               // 30: palm.wechat.v1.PayTransferGetBillReceiptRequest
	(*PayExecuteBatchTransferRequest)(nil),                 // 31: palm.wechat.v1.PayExecuteBatchTransferRequest
	(*PayExecuteBatchTransferResponse)(nil),                // 32: palm.wechat.v1.PayExecuteBatchTransferResponse
	(*PayQueryBatchTransferRequest)(nil),                   // 33: palm.wechat.v1.PayQueryBatchTransferRequest
	(*PayQueryBatchTransferResponse)(nil),                  // 34: palm.wechat.v1.PayQueryBatchTransferResponse
	(*PayQueryTransferDetailRequest)(nil),                  // 35: palm.wechat.v1.PayQueryTransferDetailRequest
	(*PayQueryTransferDetailResponse)(nil),                 // 36: palm.wechat.v1.PayQueryTransferDetailResponse
	(*Oauth2SignInResponse_UserInfo)(nil),                  // 37: palm.wechat.v1.Oauth2SignInResponse.UserInfo
	(*PayPrepayRequest_Amount)(nil),                        // 38: palm.wechat.v1.PayPrepayRequest.Amount
	(*PayCreateRefundRequest_Amount)(nil),                  // 39: palm.wechat.v1.PayCreateRefundRequest.Amount
	(*PayExecuteBatchTransferRequest_Batch)(nil),           // 40: palm.wechat.v1.PayExecuteBatchTransferRequest.Batch
	(*PayExecuteBatchTransferRequest_Detail)(nil),          // 41: palm.wechat.v1.PayExecuteBatchTransferRequest.Detail
	(*PayExecuteBatchTransferResponse_Detail)(nil),         // 42: palm.wechat.v1.PayExecuteBatchTransferResponse.Detail
	(*PayExecuteBatchTransferResponse_Succeeded)(nil),      // 43: palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded
	(*PayQueryBatchTransferResponse_Detail)(nil),           // 44: palm.wechat.v1.PayQueryBatchTransferResponse.Detail
	(*PayQueryBatchTransferResponse_Batch)(nil),            // 45: palm.wechat.v1.PayQueryBatchTransferResponse.Batch
	(v2.WechatOauth2UserIndexResponse_Item_Lang)(0),        // 46: palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang
	(*emptypb.Empty)(nil),                                  // 47: google.protobuf.Empty
}
var file_wechat_proto_depIdxs = []int32{
	46, // 0: palm.wechat.v1.Oauth2QrConnectUrlRequest.lang:type_name -> palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang
	46, // 1: palm.wechat.v1.Oauth2SignInRequest.lang:type_name -> palm.balsam.v1.WechatOauth2UserIndexResponse.Item.Lang
	37, // 2: palm.wechat.v1.Oauth2SignInResponse.user_info:type_name -> palm.wechat.v1.Oauth2SignInResponse.UserInfo
	38, // 3: palm.wechat.v1.PayPrepayRequest.amount:type_name -> palm.wechat.v1.PayPrepayRequest.Amount
	21, // 4: palm.wechat.v1.PayTradeBillRequest.bill_date:type_name -> palm.wechat.v1.PayBillDate
	3,  // 5: palm.wechat.v1.PayTradeBillRequest.bill_type:type_name -> palm.wechat.v1.PayTradeBillRequest.BillType
	21, // 6: palm.wechat.v1.PayFundFlowBillRequest.bill_date:type_name -> palm.wechat.v1.PayBillDate
	4,  // 7: palm.wechat.v1.PayFundFlowBillRequest.account_type:type_name -> palm.wechat.v1.PayFundFlowBillRequest.AccountType
	39, // 8: palm.wechat.v1.PayCreateRefundRequest.amount:type_name -> palm.wechat.v1.PayCreateRefundRequest.Amount
	5,  // 9: palm.wechat.v1.PayTransferGetElectronicReceiptRequest.accept_type:type_name -> palm.wechat.v1.PayTransferGetElectronicReceiptRequest.AcceptType
	40, // 10: palm.wechat.v1.PayExecuteBatchTransferRequest.batch:type_name -> palm.wechat.v1.PayExecuteBatchTransferRequest.Batch
	41, // 11: palm.wechat.v1.PayExecuteBatchTransferRequest.details:type_name -> palm.wechat.v1.PayExecuteBatchTransferRequest.Detail
	42, // 12: palm.wechat.v1.PayExecuteBatchTransferResponse.details:type_name -> palm.wechat.v1.PayExecuteBatchTransferResponse.Detail
	43, // 13: palm.wechat.v1.PayExecuteBatchTransferResponse.succeeded:type_name -> palm.wechat.v1.PayExecuteBatchTransferResponse.Succeeded
	15, // 14: palm.wechat.v1.PayExecuteBatchTransferResponse.error:type_name -> palm.wechat.v1.PayError
	6,  // 15: palm.wechat.v1.PayQueryBatchTransferRequest.detail_status:type_name -> palm.wechat.v1.PayQueryBatchTransferRequest.DetailStatus
	45, // 16: palm.wechat.v1.PayQueryBatchTransferResponse.batch:type_name -> palm.wechat.v1.PayQueryBatchTransferResponse.Batch
	44, // 17: palm.wechat.v1.PayQueryBatchTransferResponse.details:type_name -> palm.wechat.v1.PayQueryBatchTransferResponse.Detail
	0,  // 18: palm.wechat.v1.PayPrepayRequest.Amount.currency:type_name -> palm.wechat.v1.PayCurrency
	0,  // 19: palm.wechat.v1.PayCreateRefundRequest.Amount.currency:type_name -> palm.wechat.v1.PayCurrency
	7,  // 20: palm.wechat.v1.Oauth2.QrConnectUrl:input_type -> palm.wechat.v1.Oauth2QrConnectUrlRequest
	9,  // 21: palm.wechat.v1.Oauth2.SignIn:input_type -> palm.wechat.v1.Oauth2SignInRequest
	11, // 22: palm.wechat.v1.MiniProgram.Code2Session:input_type -> palm.wechat.v1.MiniProgramCode2SessionRequest
	13, // 23: palm.wechat.v1.PayNative.Prepay:input_type -> palm.wechat.v1.PayPrepayRequest
	13, // 24: palm.wechat.v1.PayJsapi.Prepay:input_type -> palm.wechat.v1.PayPrepayRequest
	19, // 25: palm.wechat.v1.PayJsapi.QueryOrderByOutTradeNo:input_type -> palm.wechat.v1.PayQueryOrderByOutTradeNoRequest
	18, // 26: palm.wechat.v1.PayJsapi.QueryOrderById:input_type -> palm.wechat.v1.PayQueryOrderByIdRequest
	14, // 27: palm.wechat.v1.PayJsapi.CloseOrder:input_type -> palm.wechat.v1.PayCloseOrderRequest
	23, // 28: palm.wechat.v1.PayBill.Trade:input_type -> palm.wechat.v1.PayTradeBillRequest
	24, // 29: palm.wechat.v1.PayBill.FundFlow:input_type -> palm.wechat.v1.PayFundFlowBillRequest
	25, // 30: palm.wechat.v1.PayRefund.Create:input_type -> palm.wechat.v1.PayCreateRefundRequest
	26, // 31: palm.wechat.v1.PayRefund.Query:input_type -> palm.wechat.v1.PayQueryRefundRequest
	31, // 32: palm.wechat.v1.PayTransfer.ExecuteBatch:input_type -> palm.wechat.v1.PayExecuteBatchTransferRequest
	33, // 33: palm.wechat.v1.PayTransfer.QueryBatch:input_type -> palm.wechat.v1.PayQueryBatchTransferRequest
	35, // 34: palm.wechat.v1.PayTransfer.QueryDetail:input_type -> palm.wechat.v1.PayQueryTransferDetailRequest
	30, // 35: palm.wechat.v1.PayTransfer.GetBillReceipt:input_type -> palm.wechat.v1.PayTransferGetBillReceiptRequest
	28, // 36: palm.wechat.v1.PayTransfer.GetElectronicReceipt:input_type -> palm.wechat.v1.PayTransferGetElectronicReceiptRequest
	8,  // 37: palm.wechat.v1.Oauth2.QrConnectUrl:output_type -> palm.wechat.v1.Oauth2QrConnectUrlResponse
	10, // 38: palm.wechat.v1.Oauth2.SignIn:output_type -> palm.wechat.v1.Oauth2SignInResponse
	12, // 39: palm.wechat.v1.MiniProgram.Code2Session:output_type -> palm.wechat.v1.MiniProgramCode2SessionResponse
	16, // 40: palm.wechat.v1.PayNative.Prepay:output_type -> palm.wechat.v1.PayNativeQrCodeUrlResponse
	20, // 41: palm.wechat.v1.PayJsapi.Prepay:output_type -> palm.wechat.v1.PayJsapiPrepayIdResponse
	17, // 42: palm.wechat.v1.PayJsapi.QueryOrderByOutTradeNo:output_type -> palm.wechat.v1.PayTradeResponse
	17, // 43: palm.wechat.v1.PayJsapi.QueryOrderById:output_type -> palm.wechat.v1.PayTradeResponse
	47, // 44: palm.wechat.v1.PayJsapi.CloseOrder:output_type -> google.protobuf.Empty
	22, // 45: palm.wechat.v1.PayBill.Trade:output_type -> palm.wechat.v1.PayBillResponse
	22, // 46: palm.wechat.v1.PayBill.FundFlow:output_type -> palm.wechat.v1.PayBillResponse
	27, // 47: palm.wechat.v1.PayRefund.Create:output_type -> palm.wechat.v1.PayRefundResponse
	27, // 48: palm.wechat.v1.PayRefund.Query:output_type -> palm.wechat.v1.PayRefundResponse
	32, // 49: palm.wechat.v1.PayTransfer.ExecuteBatch:output_type -> palm.wechat.v1.PayExecuteBatchTransferResponse
	34, // 50: palm.wechat.v1.PayTransfer.QueryBatch:output_type -> palm.wechat.v1.PayQueryBatchTransferResponse
	36, // 51: palm.wechat.v1.PayTransfer.QueryDetail:output_type -> palm.wechat.v1.PayQueryTransferDetailResponse
	29, // 52: palm.wechat.v1.PayTransfer.GetBillReceipt:output_type -> palm.wechat.v1.PayTransferGetReceiptResponse
	29, // 53: palm.wechat.v1.PayTransfer.GetElectronicReceipt:output_type -> palm.wechat.v1.PayTransferGetReceiptResponse
	37, // [37:54] is the sub-list for method output_type
	20, // [20:37] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_wechat_proto_init() }
func file_wechat_proto_init() {
	if File_wechat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wechat_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Oauth2QrConnectUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Oauth2QrConnectUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Oauth2SignInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Oauth2SignInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MiniProgramCode2SessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MiniProgramCode2SessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PayPrepayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PayCloseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PayError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PayNativeQrCodeUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PayTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PayQueryOrderByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PayQueryOrderByOutTradeNoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PayJsapiPrepayIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PayBillDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PayBillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PayTradeBillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PayFundFlowBillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PayCreateRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PayQueryRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PayRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PayTransferGetElectronicReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PayTransferGetReceiptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*PayTransferGetBillReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PayExecuteBatchTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PayExecuteBatchTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PayQueryBatchTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*PayQueryBatchTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*PayQueryTransferDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*PayQueryTransferDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*Oauth2SignInResponse_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*PayPrepayRequest_Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*PayCreateRefundRequest_Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*PayExecuteBatchTransferRequest_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*PayExecuteBatchTransferRequest_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*PayExecuteBatchTransferResponse_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*PayExecuteBatchTransferResponse_Succeeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*PayQueryBatchTransferResponse_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*PayQueryBatchTransferResponse_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wechat_proto_msgTypes[0].OneofWrappers = []any{}
	file_wechat_proto_msgTypes[3].OneofWrappers = []any{}
	file_wechat_proto_msgTypes[5].OneofWrappers = []any{}
	file_wechat_proto_msgTypes[6].OneofWrappers = []any{}
	file_wechat_proto_msgTypes[21].OneofWrappers = []any{}
	file_wechat_proto_msgTypes[25].OneofWrappers = []any{
		(*PayExecuteBatchTransferResponse_Succeeded_)(nil),
		(*PayExecuteBatchTransferResponse_Error)(nil),
	}
	file_wechat_proto_msgTypes[29].OneofWrappers = []any{}
	file_wechat_proto_msgTypes[30].OneofWrappers = []any{}
	file_wechat_proto_msgTypes[33].OneofWrappers = []any{}
	file_wechat_proto_msgTypes[38].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wechat_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_wechat_proto_goTypes,
		DependencyIndexes: file_wechat_proto_depIdxs,
		EnumInfos:         file_wechat_proto_enumTypes,
		MessageInfos:      file_wechat_proto_msgTypes,
	}.Build()
	File_wechat_proto = out.File
	file_wechat_proto_rawDesc = nil
	file_wechat_proto_goTypes = nil
	file_wechat_proto_depIdxs = nil
}
