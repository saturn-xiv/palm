syntax = "proto3";
option java_multiple_files = true;
option java_package = "com.github.saturn_xiv.palm.plugins.wechat.v1";
option go_package = "github.com/saturn-xiv/palm/atropa/wechat/services/v2";
package palm.wechat.v1;

import "google/protobuf/empty.proto";

// ----------------------------------------------------------------------------

service Oauth2 {
  rpc QrConnectUrl(Oauth2QrConnectUrlRequest)
      returns (Oauth2QrConnectUrlResponse) {}
  rpc SignIn(Oauth2SignInRequest) returns (Oauth2SignInResponse) {}
}
message Oauth2QrConnectUrlRequest {
  optional string subject = 1;
  enum Lang {
    Cn = 0;
    En = 1;
  }
  Lang lang = 9;
}
message Oauth2QrConnectUrlResponse { string url = 1; }
message Oauth2SignInRequest {
  string code = 1;
  string state = 2;
  Oauth2QrConnectUrlRequest.Lang lang = 9;
}
message Oauth2SignInResponse {
  message UserInfo {
    string open_id = 1;
    string nickname = 2;
    uint32 sex = 3;
    string province = 4;
    string city = 5;
    string country = 6;
    optional string head_img_url = 7;
    repeated string privilege = 8;
    string union_id = 9;
  }
  UserInfo user_info = 1;
  bytes token = 2;
  optional string subject = 9;
}

// ----------------------------------------------------------------------------

service MiniProgram {
  rpc Code2Session(MiniProgramCode2SessionRequest)
      returns (MiniProgramCode2SessionResponse) {}
}
message MiniProgramCode2SessionRequest { string code = 1; }
message MiniProgramCode2SessionResponse {
  optional string union_id = 1;
  string open_id = 2;
}

// ----------------------------------------------------------------------------
enum PayCurrency {
  CNY = 0;
}
enum PayNotifyAction {
  TRANSCATION = 0;
  REFUND = 1;
}

message PayPrepayRequest {
  message Amount {
    int32 total = 1;
    PayCurrency currency = 2;
  }

  string app_id = 1;
  optional string out_trade_no = 2;

  optional string payer_open_id = 11;
  Amount amount = 12;

  string description = 98;
  string notify_host = 99;
}

message PayCloseOrderRequest {
  string out_trade_no = 1;
  string reason = 2;
}

message PayError {
  string code = 1;
  string message = 2;
}
// ----------------------------------------------------------------------------

service PayNative {
  rpc Prepay(PayPrepayRequest) returns (PayNativeQrCodeUrlResponse) {}
}

message PayNativeQrCodeUrlResponse {
  string url = 1;
  string out_trade_no = 2;
}

message PayTradeResponse {
  string trade_state = 1;
  string trade_state_desc = 2;
}

message PayQueryOrderByIdRequest { string transaction_id = 1; }
message PayQueryOrderByOutTradeNoRequest { string out_trade_no = 1; }

// ----------------------------------------------------------------------------

service PayJsapi {
  rpc Prepay(PayPrepayRequest) returns (PayJsapiPrepayIdResponse) {}
  rpc QueryOrderByOutTradeNo(PayQueryOrderByOutTradeNoRequest)
      returns (PayTradeResponse) {}
  rpc QueryOrderById(PayQueryOrderByIdRequest) returns (PayTradeResponse) {}
  rpc CloseOrder(PayCloseOrderRequest) returns (google.protobuf.Empty) {}
}

message PayJsapiPrepayIdResponse {
  string app_id = 1;
  string time_stamp = 2;
  string nonce_str = 3;
  string package = 4;
  string sign_type = 5;
  string pay_sign = 6;

  string out_trade_no = 11;
}

// ----------------------------------------------------------------------------

service PayBill {
  rpc Trade(PayTradeBillRequest) returns (PayBillResponse) {}
  rpc FundFlow(PayFundFlowBillRequest) returns (PayBillResponse) {}
}

enum PayTarType {
  GZIP = 0;
}

message PayBillDate {
  int32 year = 1;
  int32 month = 2;
  int32 day = 3;
}

message PayBillResponse { bytes content = 1; }
message PayTradeBillRequest {
  enum BillType {
    ALL = 0;
    SUCCESS = 1;
    REFUND = 2;
  }
  PayBillDate bill_date = 1;
  BillType bill_type = 2;
}

message PayFundFlowBillRequest {
  enum AccountType {
    BASIC = 0;
    OPERATION = 1;
    FEES = 2;
  }
  PayBillDate bill_date = 1;
  AccountType account_type = 2;
}

// ----------------------------------------------------------------------------

service PayRefund {
  rpc Create(PayCreateRefundRequest) returns (PayRefundResponse) {}
  rpc Query(PayQueryRefundRequest) returns (PayRefundResponse) {}
}

message PayCreateRefundRequest {
  message Amount {
    int32 total = 1;
    int32 refund = 2;
    PayCurrency currency = 3;
  }
  string out_trade_no = 1;
  string reason = 2;
  Amount amount = 3;
  string notify_host = 11;
}
message PayQueryRefundRequest { string out_refund_no = 1; }
message PayRefundResponse {
  string out_refund_no = 1;
  string channel = 2;
  string status = 3;
  string user_received_account = 4;
  string create_time = 99;
}

// ----------------------------------------------------------------------------

service PayTransfer {
  rpc ExecuteBatch(PayExecuteBatchTransferRequest)
      returns (PayExecuteBatchTransferResponse) {}
  rpc QueryBatch(PayQueryBatchTransferRequest)
      returns (PayQueryBatchTransferResponse) {}
  rpc QueryDetail(PayQueryTransferDetailRequest)
      returns (PayQueryTransferDetailResponse) {}
  rpc GetBillReceipt(PayTransferGetBillReceiptRequest)
      returns (PayTransferGetReceiptResponse) {}
  rpc GetElectronicReceipt(PayTransferGetElectronicReceiptRequest)
      returns (PayTransferGetReceiptResponse) {}
}

message PayTransferGetElectronicReceiptRequest {
  enum AcceptType {
    BATCH_TRANSFER = 0;
    TRANSFER_TO_POCKET = 1;
    TRANSFER_TO_BANK = 2;
  }
  AcceptType accept_type = 1;
  optional string out_batch_no = 2;
  string out_detail_no = 3;
}

message PayTransferGetReceiptResponse { bytes payload = 1; }

message PayTransferGetBillReceiptRequest { string out_batch_no = 1; }

message PayExecuteBatchTransferRequest {
  message Batch {
    string name = 1;
    string remark = 2;
    optional string out_no = 3;
  }

  message Detail {
    string open_id = 1;
    string username = 2;
    int64 amount = 3;
    string remark = 4;
  }
  string app_id = 1;
  Batch batch = 2;
  repeated Detail details = 3;

  string scene_id = 9;
}
message PayExecuteBatchTransferResponse {
  message Detail {
    string open_id = 1;
    string out_detail_no = 2;
  }
  message Succeeded {
    string batch_id = 1;
    string create_time = 2;
  }

  string out_batch_no = 1;
  repeated Detail details = 2;

  oneof payload {
    Succeeded succeeded = 11;
    PayError error = 12;
  }
}
message PayQueryBatchTransferRequest {
  enum DetailStatus {
    ALL = 0;
    SUCCESS = 1;
    WAIT_PAY = 2;
    FAIL = 9;
  }
  string out_batch_no = 1;
  int32 offset = 2;
  int32 limit = 3;
  DetailStatus detail_status = 9;
}
message PayQueryBatchTransferResponse {
  message Detail {
    string detail_id = 1;
    string out_detail_no = 2;
    string status = 3;
  }
  message Batch {
    string app_id = 1;
    string mch_id = 2;
    string transfer_scene_id = 9;

    string batch_id = 11;
    string out_batch_no = 12;
    string batch_status = 13;
    string batch_type = 14;
    string batch_name = 15;
    string batch_remark = 16;

    optional string close_reason = 21;
    int64 total_amount = 22;
    int32 total_num = 23;
    optional string create_time = 24;
    optional string update_time = 25;
    optional int64 success_amount = 26;
    optional int32 success_num = 27;
    optional int64 fail_amount = 28;
    optional int32 fail_num = 29;
  }

  Batch batch = 1;
  repeated Detail details = 9;
}

message PayQueryTransferDetailRequest {
  string out_batch_no = 1;
  string out_detail_no = 2;
}

message PayQueryTransferDetailResponse {
  string app_id = 1;
  string mch_id = 2;
  string open_id = 3;
  optional string user_name = 4;

  string batch_id = 11;
  string out_batch_no = 12;
  string out_detail_no = 13;
  string detail_id = 14;
  string detail_status = 15;
  int64 transfer_amount = 16;
  string transfer_remark = 17;
  optional string fail_reason = 18;
  string initiate_time = 19;
  string update_time = 20;
}

// ----------------------------------------------------------------------------
