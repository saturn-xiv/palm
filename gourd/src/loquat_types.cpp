/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "petunia/loquat_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace loquat { namespace v1 {


JwtVerfifyResponse::~JwtVerfifyResponse() noexcept {
}


void JwtVerfifyResponse::__set_jwt_id(const std::string& val) {
  this->jwt_id = val;
__isset.jwt_id = true;
}

void JwtVerfifyResponse::__set_key_id(const std::string& val) {
  this->key_id = val;
__isset.key_id = true;
}

void JwtVerfifyResponse::__set_subject(const std::string& val) {
  this->subject = val;
}

void JwtVerfifyResponse::__set_payload(const std::string& val) {
  this->payload = val;
__isset.payload = true;
}
std::ostream& operator<<(std::ostream& out, const JwtVerfifyResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t JwtVerfifyResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_subject = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_id);
          this->__isset.jwt_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key_id);
          this->__isset.key_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->subject);
          isset_subject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_subject)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t JwtVerfifyResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("JwtVerfifyResponse");

  if (this->__isset.jwt_id) {
    xfer += oprot->writeFieldBegin("jwt_id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->jwt_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key_id) {
    xfer += oprot->writeFieldBegin("key_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->key_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("subject", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->subject);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeBinary(this->payload);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JwtVerfifyResponse &a, JwtVerfifyResponse &b) {
  using ::std::swap;
  swap(a.jwt_id, b.jwt_id);
  swap(a.key_id, b.key_id);
  swap(a.subject, b.subject);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

JwtVerfifyResponse::JwtVerfifyResponse(const JwtVerfifyResponse& other0) {
  jwt_id = other0.jwt_id;
  key_id = other0.key_id;
  subject = other0.subject;
  payload = other0.payload;
  __isset = other0.__isset;
}
JwtVerfifyResponse& JwtVerfifyResponse::operator=(const JwtVerfifyResponse& other1) {
  jwt_id = other1.jwt_id;
  key_id = other1.key_id;
  subject = other1.subject;
  payload = other1.payload;
  __isset = other1.__isset;
  return *this;
}
void JwtVerfifyResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JwtVerfifyResponse(";
  out << "jwt_id="; (__isset.jwt_id ? (out << to_string(jwt_id)) : (out << "<null>"));
  out << ", " << "key_id="; (__isset.key_id ? (out << to_string(key_id)) : (out << "<null>"));
  out << ", " << "subject=" << to_string(subject);
  out << ", " << "payload="; (__isset.payload ? (out << to_string(payload)) : (out << "<null>"));
  out << ")";
}


JwtSignRequest::~JwtSignRequest() noexcept {
}


void JwtSignRequest::__set_jwt_id(const std::string& val) {
  this->jwt_id = val;
__isset.jwt_id = true;
}

void JwtSignRequest::__set_key_id(const std::string& val) {
  this->key_id = val;
__isset.key_id = true;
}

void JwtSignRequest::__set_issuer(const std::string& val) {
  this->issuer = val;
}

void JwtSignRequest::__set_subject(const std::string& val) {
  this->subject = val;
}

void JwtSignRequest::__set_audiences(const std::set<std::string> & val) {
  this->audiences = val;
}

void JwtSignRequest::__set_issued_at(const int64_t val) {
  this->issued_at = val;
}

void JwtSignRequest::__set_not_before(const int64_t val) {
  this->not_before = val;
}

void JwtSignRequest::__set_expired_at(const int64_t val) {
  this->expired_at = val;
}

void JwtSignRequest::__set_payload(const std::string& val) {
  this->payload = val;
__isset.payload = true;
}
std::ostream& operator<<(std::ostream& out, const JwtSignRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t JwtSignRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_issuer = false;
  bool isset_subject = false;
  bool isset_audiences = false;
  bool isset_issued_at = false;
  bool isset_not_before = false;
  bool isset_expired_at = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_id);
          this->__isset.jwt_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key_id);
          this->__isset.key_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->issuer);
          isset_issuer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->subject);
          isset_subject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->audiences.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readSetBegin(_etype5, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              std::string _elem7;
              xfer += iprot->readString(_elem7);
              this->audiences.insert(_elem7);
            }
            xfer += iprot->readSetEnd();
          }
          isset_audiences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->issued_at);
          isset_issued_at = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->not_before);
          isset_not_before = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expired_at);
          isset_expired_at = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_issuer)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_subject)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_audiences)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_issued_at)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_not_before)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expired_at)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t JwtSignRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("JwtSignRequest");

  if (this->__isset.jwt_id) {
    xfer += oprot->writeFieldBegin("jwt_id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->jwt_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key_id) {
    xfer += oprot->writeFieldBegin("key_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->key_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("issuer", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->issuer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subject", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->subject);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audiences", ::apache::thrift::protocol::T_SET, 13);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->audiences.size()));
    std::set<std::string> ::const_iterator _iter8;
    for (_iter8 = this->audiences.begin(); _iter8 != this->audiences.end(); ++_iter8)
    {
      xfer += oprot->writeString((*_iter8));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("issued_at", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->issued_at);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("not_before", ::apache::thrift::protocol::T_I64, 22);
  xfer += oprot->writeI64(this->not_before);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expired_at", ::apache::thrift::protocol::T_I64, 23);
  xfer += oprot->writeI64(this->expired_at);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 99);
    xfer += oprot->writeBinary(this->payload);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JwtSignRequest &a, JwtSignRequest &b) {
  using ::std::swap;
  swap(a.jwt_id, b.jwt_id);
  swap(a.key_id, b.key_id);
  swap(a.issuer, b.issuer);
  swap(a.subject, b.subject);
  swap(a.audiences, b.audiences);
  swap(a.issued_at, b.issued_at);
  swap(a.not_before, b.not_before);
  swap(a.expired_at, b.expired_at);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

JwtSignRequest::JwtSignRequest(const JwtSignRequest& other9) {
  jwt_id = other9.jwt_id;
  key_id = other9.key_id;
  issuer = other9.issuer;
  subject = other9.subject;
  audiences = other9.audiences;
  issued_at = other9.issued_at;
  not_before = other9.not_before;
  expired_at = other9.expired_at;
  payload = other9.payload;
  __isset = other9.__isset;
}
JwtSignRequest& JwtSignRequest::operator=(const JwtSignRequest& other10) {
  jwt_id = other10.jwt_id;
  key_id = other10.key_id;
  issuer = other10.issuer;
  subject = other10.subject;
  audiences = other10.audiences;
  issued_at = other10.issued_at;
  not_before = other10.not_before;
  expired_at = other10.expired_at;
  payload = other10.payload;
  __isset = other10.__isset;
  return *this;
}
void JwtSignRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JwtSignRequest(";
  out << "jwt_id="; (__isset.jwt_id ? (out << to_string(jwt_id)) : (out << "<null>"));
  out << ", " << "key_id="; (__isset.key_id ? (out << to_string(key_id)) : (out << "<null>"));
  out << ", " << "issuer=" << to_string(issuer);
  out << ", " << "subject=" << to_string(subject);
  out << ", " << "audiences=" << to_string(audiences);
  out << ", " << "issued_at=" << to_string(issued_at);
  out << ", " << "not_before=" << to_string(not_before);
  out << ", " << "expired_at=" << to_string(expired_at);
  out << ", " << "payload="; (__isset.payload ? (out << to_string(payload)) : (out << "<null>"));
  out << ")";
}

}} // namespace
