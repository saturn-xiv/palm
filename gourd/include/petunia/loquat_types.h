/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef loquat_TYPES_H
#define loquat_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace loquat { namespace v1 {

class JwtVerfifyResponse;

class JwtSignRequest;

typedef struct _JwtVerfifyResponse__isset {
  _JwtVerfifyResponse__isset() : jwt_id(false), key_id(false), payload(false) {}
  bool jwt_id :1;
  bool key_id :1;
  bool payload :1;
} _JwtVerfifyResponse__isset;

class JwtVerfifyResponse : public virtual ::apache::thrift::TBase {
 public:

  JwtVerfifyResponse(const JwtVerfifyResponse&);
  JwtVerfifyResponse& operator=(const JwtVerfifyResponse&);
  JwtVerfifyResponse() noexcept
                     : jwt_id(),
                       key_id(),
                       subject(),
                       payload() {
  }

  virtual ~JwtVerfifyResponse() noexcept;
  std::string jwt_id;
  std::string key_id;
  std::string subject;
  std::string payload;

  _JwtVerfifyResponse__isset __isset;

  void __set_jwt_id(const std::string& val);

  void __set_key_id(const std::string& val);

  void __set_subject(const std::string& val);

  void __set_payload(const std::string& val);

  bool operator == (const JwtVerfifyResponse & rhs) const
  {
    if (__isset.jwt_id != rhs.__isset.jwt_id)
      return false;
    else if (__isset.jwt_id && !(jwt_id == rhs.jwt_id))
      return false;
    if (__isset.key_id != rhs.__isset.key_id)
      return false;
    else if (__isset.key_id && !(key_id == rhs.key_id))
      return false;
    if (!(subject == rhs.subject))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const JwtVerfifyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JwtVerfifyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(JwtVerfifyResponse &a, JwtVerfifyResponse &b);

std::ostream& operator<<(std::ostream& out, const JwtVerfifyResponse& obj);

typedef struct _JwtSignRequest__isset {
  _JwtSignRequest__isset() : jwt_id(false), key_id(false), payload(false) {}
  bool jwt_id :1;
  bool key_id :1;
  bool payload :1;
} _JwtSignRequest__isset;

class JwtSignRequest : public virtual ::apache::thrift::TBase {
 public:

  JwtSignRequest(const JwtSignRequest&);
  JwtSignRequest& operator=(const JwtSignRequest&);
  JwtSignRequest() noexcept
                 : jwt_id(),
                   key_id(),
                   issuer(),
                   subject(),
                   issued_at(0),
                   not_before(0),
                   expired_at(0),
                   payload() {
  }

  virtual ~JwtSignRequest() noexcept;
  std::string jwt_id;
  std::string key_id;
  std::string issuer;
  std::string subject;
  std::set<std::string>  audiences;
  int64_t issued_at;
  int64_t not_before;
  int64_t expired_at;
  std::string payload;

  _JwtSignRequest__isset __isset;

  void __set_jwt_id(const std::string& val);

  void __set_key_id(const std::string& val);

  void __set_issuer(const std::string& val);

  void __set_subject(const std::string& val);

  void __set_audiences(const std::set<std::string> & val);

  void __set_issued_at(const int64_t val);

  void __set_not_before(const int64_t val);

  void __set_expired_at(const int64_t val);

  void __set_payload(const std::string& val);

  bool operator == (const JwtSignRequest & rhs) const
  {
    if (__isset.jwt_id != rhs.__isset.jwt_id)
      return false;
    else if (__isset.jwt_id && !(jwt_id == rhs.jwt_id))
      return false;
    if (__isset.key_id != rhs.__isset.key_id)
      return false;
    else if (__isset.key_id && !(key_id == rhs.key_id))
      return false;
    if (!(issuer == rhs.issuer))
      return false;
    if (!(subject == rhs.subject))
      return false;
    if (!(audiences == rhs.audiences))
      return false;
    if (!(issued_at == rhs.issued_at))
      return false;
    if (!(not_before == rhs.not_before))
      return false;
    if (!(expired_at == rhs.expired_at))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const JwtSignRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JwtSignRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(JwtSignRequest &a, JwtSignRequest &b);

std::ostream& operator<<(std::ostream& out, const JwtSignRequest& obj);

}} // namespace

#endif
